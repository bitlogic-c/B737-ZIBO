--[[
*****************************************************************************************
* Program Script Name	:	B738.trim
* Author Name			:	Jim Gregory
*
*   Revisions:
*   -- DATE --	--- REV NO ---		--- DESCRIPTION ---
*   2016-04-26	0.01a				Start of Dev
*
*
*
*
*****************************************************************************************
*        COPYRIGHT � 2016 JIM GREGORY / LAMINAR RESEARCH - ALL RIGHTS RESERVED
*****************************************************************************************
--]]


--*************************************************************************************--
--** 					              XLUA GLOBALS              				     **--
--*************************************************************************************--

--[[

SIM_PERIOD - this contains the duration of the current frame in seconds (so it is alway a
fraction).  Use this to normalize rates,  e.g. to add 3 units of fuel per second in a
per-frame callback you’d do fuel = fuel + 3 * SIM_PERIOD.

IN_REPLAY - evaluates to 0 if replay is off, 1 if replay mode is on

--]]


--*************************************************************************************--
--** 					               CONSTANTS                    				 **--
--*************************************************************************************--

--- Arms are in meters -------
DEFAULT_ARM = 16.8783		-- 664.5 in
MAIN_TANK_ARM = 16.9164		-- 666.0 in
CENTER_TANK_ARM = 15.3924	-- 606.0 in
------------------------------


vnav_vvi = 
	{
	[2000] = 1500, [3000] = 1700, [4000] = 1900, [5000] = 2200, [6000] = 2600, [7000] = 2800, [8000] = 2700, [9000] = 2700, [10000] = 2800,
	[11000] = 2800, [12000] = 2900, [13000] = 3000, [14000] = 3050, [15000] = 3050, [16000] = 3050, [17000] = 2950, [18000] = 2850, [19000] = 2750, [20000] = 2650,
	[21000] = 2550, [22000] = 2500, [23000] = 2400, [24000] = 2200, [25000] = 2150, [26000] = 2050, [27000] = 2750, [28000] = 2450, [29000] = 2200, [30000] = 2050,
	[31000] = 1850, [32000] = 1700, [33000] = 1600, [34000] = 1450, [35000] = 1350, [36000] = 1200, [37000] = 1000, [38000] =  850, [39000] =  650, [40000] =  500,
	[41000] = 350, [41000] = 330
	}

-- vnav_vvi = 
	-- {
	-- [3000] = 4000, [4000] = 3850, [5000] = 3650, [6000] = 3450, [7000] = 3550, [8000] = 3300, [9000] = 3250, [10000] = 3150,
	-- [11000] = 3200, [12000] = 3250, [13000] = 3100, [14000] = 3050, [15000] = 3150, [16000] = 3250, [17000] = 3300, [18000] = 3100, [19000] = 2900, [20000] = 2800,
	-- [21000] = 2700, [22000] = 2550, [23000] = 2400, [24000] = 2250, [25000] = 2100, [26000] = 2000, [27000] = 2500, [28000] = 2600, [29000] = 2200, [30000] = 2950,
	-- [31000] = 1850, [32000] = 1750, [33000] = 1550, [34000] = 1500, [35000] = 1300, [36000] = 1200, [37000] =  900, [38000] =  850, [39000] =  700, [40000] =  500,
	-- [41000] = 350
	-- }


cycle_n = 29
cycle_data = 
	{	 [1] = { [1] = "1611", [2] = "OCT14NOV10/16"},
		 [2] = { [1] = "1612", [2] = "NOV10DEC08/16"},
		 [3] = { [1] = "1613", [2] = "DEC08JAN05/17"},
		 [4] = { [1] = "1701", [2] = "JAN05FEB02/17"},
		 [5] = { [1] = "1702", [2] = "FEB02MAR02/17"},
		 [6] = { [1] = "1703", [2] = "MAR02MAR30/17"},
		 [7] = { [1] = "1704", [2] = "MAR30APR27/17"},
		 [8] = { [1] = "1705", [2] = "DEC08JAN05/17"},
		 [9] = { [1] = "1706", [2] = "MAY25JUN22/17"},
		[10] = { [1] = "1707", [2] = "JUN22JUL20/17"},
		[11] = { [1] = "1708", [2] = "JUL20AUG17/17"},
		[12] = { [1] = "1709", [2] = "AUG17SEP14/17"},
		[13] = { [1] = "1710", [2] = "SEP14OCT13/17"},
		[14] = { [1] = "1711", [2] = "OCT13NOV09/17"},
		[15] = { [1] = "1712", [2] = "NOV09DEC07/17"},
		[16] = { [1] = "1713", [2] = "DEC07JAN04/18"},
		[17] = { [1] = "1801", [2] = "JAN04FEB01/18"},
		[18] = { [1] = "1802", [2] = "FEB01MAR01/18"},
		[19] = { [1] = "1803", [2] = "MAR01MAR29/18"},
		[20] = { [1] = "1804", [2] = "MAR29APR26/18"},
		[21] = { [1] = "1805", [2] = "APR26MAY28/18"},
		[22] = { [1] = "1806", [2] = "MAY28JUN21/18"},
		[23] = { [1] = "1807", [2] = "JUN21JUL19/18"},
		[24] = { [1] = "1808", [2] = "JUL19AUG16/18"},
		[25] = { [1] = "1809", [2] = "AUG16SEP13/18"},
		[26] = { [1] = "1810", [2] = "SEP13OCT12/18"},
		[27] = { [1] = "1811", [2] = "OCT12NOV08/18"},
		[28] = { [1] = "1812", [2] = "NOV08DEC06/18"},
		[29] = { [1] = "1813", [2] = "DEC06JAN03/19"}
	}


month_table =
	{	 [1] = { [1] = "JAN", [2] = "01"},
		 [2] = { [1] = "FEB", [2] = "02"},
		 [3] = { [1] = "MAR", [2] = "03"},
		 [4] = { [1] = "APR", [2] = "04"},
		 [5] = { [1] = "MAY", [2] = "05"},
		 [6] = { [1] = "JUN", [2] = "06"},
		 [7] = { [1] = "JUL", [2] = "07"},
		 [8] = { [1] = "AUG", [2] = "08"},
		 [9] = { [1] = "SEP", [2] = "09"},
		[10] = { [1] = "OCT", [2] = "10"},
		[11] = { [1] = "NOV", [2] = "11"},
		[12] = { [1] = "DEC", [2] = "12"}
	}


-- 18 idx
vnav_des_alt = { 1500, 5000, 10000, 11000, 15000, 17000, 19000, 21000, 23000, 25000, 27000, 29000, 31000, 33000, 35000, 37000, 39000, 41000 }

vnav_des_dist =
	{	[40] = { 13, 26, 42, 48, 58, 63, 67, 72, 77,  81,  87,  90,  95,  99, 103, 107, 113, 115 },
		[50] = { 13, 27, 46, 53, 64, 70, 75, 80, 86,  91,  97, 102, 108, 113, 117, 122, 127, 133 },
		[60] = { 13, 28, 48, 56, 70, 76, 82, 88, 94, 100, 106, 112, 119, 125, 129, 135, 139, 146 },
		[70] = { 13, 29, 50, 58, 73, 79, 86, 92, 99, 106, 112, 119, 126, 132, 137, 143, 148, 153 }
	}


FILE_NAME_CFG = "b738x.cfg"
FILE_NAME_STATUS = "b738x_status.dat"
FILE_NAME_APT_DAT = "B738X_apt.dat"
FILE_NAME_RNW_DAT = "B738X_rnw.dat"
FILE_NAME_CUST_DAT = "Custom Data/B738X_wptx.dat"
FILE_NAME_FMOD_CFG = "b738x_fmod.cfg"
FILE_NAME_FMOD = "fmod/b738.snd"

MAX_NUM_SCRATCH = 24
MAX_LEGS_DATA = 40

-- MESSAGES --
INVALID_INPUT 				= "INVALID ENTRY"
INVALID_DELETE 				= ">INVALID DELETE"
ENTER_IRS_POS 				= "ENTER IRS POSITION"
ENTER_IRS_HDG 				= "ENTER IRS HEADING"
USING_RSV_FUEL 				= "USING RSV FUEL"		--if the estimate is less than fuel reserve
INSUFICIENT_FUEL 			= "INSUFICIENT FUEL" --if predicted fuel at destin will be 2000 lb or less
RESET_MCP_ALT 				= "RESET MCP ALT"	-- during VNAV before 5 NM of TOD without selecting lower alt
VERIFY_TO_SPEEDS 			= "VERIFY TAKEOFF SPEEDS"
IRS_MOTION 					= "IRS MOTION"	-- if IRS restart align
GPS_L_INVALID 				= "GPS-L INVALID"	-- if GPS-L fail
GPS_R_INVALID 				= "GPS-R INVALID"	-- if GPS-R fail
GPS_LR_INVALID 				= "GPS-L-R INVALID"	-- if GPS-L-R fail
TO_SPEEDS_DELETED 			= "TAKEOFF SPEEDS DELETED"
DRAG_REQUIRED 				= "DRAG REQUIRED"	-- if airspeed > 10 kts above FMC target
NOT_IN_DATABASE 			= "NOT IN DATABASE"
NAV_DATA_OF_DATE 			= "NAV DATA OUT OF DATE"
UNABLE_CRUISE_ALT 			= "UNABLE CRZ ALT"
CONFIG_SAVED 				= "CONFIG SAVED"
PRESET_SAVED				= "PRESET SAVED"
PRESET_LOADED				= "PRESET LOADED"
CHECK_ALT_TGT 				= "CHECK ALT TGT"
TAI_ON_ABOVE_10C 			= "TAI ON ABOVE 10`C"	-- TAI operated above temp 10 C
DISCON 						= "DISCONTINUITY"
ABOVE_MAX_CERT_ALT 			= "ABOVE MAX CERT ALT"
APPRCH_VREF_NOT_SELECTED 	= "APPRCH VREF NOT SELECTED"
LNAV_DISCON 				= "LNAV DISCONNECT"
END_OF_ROUTE 				= "END OF ROUTE"
UNABLE_NEXT_ALTITUDE 		= "UNABLE NEXT ALTITUDE"
ALT_CONSTRAINT 				= "ALT CONSTRAINT "
UNABLE_REQ_NAV_PERF			= "UNABLE REQD NAV PERF-RNP"

CORRUPTED_NAVDATA			= "CORRUPTED NAVDATA"

TAXI_SPEED = 30

CL_THRSHLD = 0.18

--*************************************************************************************--
--** 					            GLOBAL VARIABLES                				 **--
--*************************************************************************************--


xxx_str = ""
xxx = 0

--scratch = {}

-- for i = 0, MAX_NUM_SCRATCH - 1 do scratch[i] = 255 end

version = ""
fmod_version = "NOT FOUND"
file_navdata = 0

fmc_enable = 0
reset_fmc = 0

clr_repeat = 0
clr_repeat_time = 0

scratch_error = 0
--decode_value = 0
decode_value_mach = 0
decode_value2 = 0
--index_pos = 0
i = 0
delete_active = 0
FMS_page = 0

input_1L = 0
input_2L = 0
input_3L = 0
input_4L = 0
input_5L = 0
input_6L = 0

input_1R = 0
input_2R = 0
input_3R = 0
input_4R = 0
input_5R = 0
input_6R = 0

blank_data = 0

line0_l = ""
line1_l = ""
line2_l = ""
line3_l = ""
line4_l = ""
line5_l = ""
line6_l = ""
line0_s = ""
line1_s = ""
line2_s = ""
line3_s = ""
line4_s = ""
line5_s = ""
line6_s = ""
line1_x = ""
line2_x = ""
line3_x = ""
line4_x = ""
line5_x = ""
line6_x = ""
line0_inv = ""
line1_inv = ""
line2_inv = ""
line3_inv = ""
line4_inv = ""
line5_inv = ""
line6_inv = ""
line0_m = ""
line1_m = ""
line2_m = ""
line3_m = ""
line4_m = ""
line5_m = ""
line6_m = ""
line0_g = ""
line1_g = ""
line2_g = ""
line3_g = ""
line4_g = ""
line5_g = ""
line6_g = ""

max_page = 0
act_page = 0
act_page_old = 0

act_page2 = 0
max_page2 = 0


page_menu = 0
page_ident = 0
page_init = 0
page_takeoff = 0
display_update = 1
page_approach = 0
page_perf = 0
page_n1_limit = 0
page_pos_init = 0
page_route = 0
page_dep_arr = 0
page_dep = 0
page_arr = 0
page_descent = 0
page_descent_forecast = 0
page_legs = 0
page_rte_init = 0
page_climb = 0
page_cruise = 0
page_progress = 0
page_hold = 0
page_xtras = 0
page_xtras_fmod = 0
page_fmod_features = 0
page_fmod_volumes = 0
page_fmod_announ = 0
page_fmod_eq = 0
page_fmod_flight_ctrl = 0
page_xtras_others = 0
page_sel_wpt = 0
page_sel_wpt2 = 0
page_sel_wpt3 = 0
page_sel_wpt4 = 0
page_offset = 0
page_legs_step = 0
page_xtras_fuel = 0
page_fix = 0
page_rte_legs = 0

page_menu2 = 0
page_ident2 = 0
page_init2 = 0
page_takeoff2 = 0
page_approach2 = 0
page_perf2 = 0
page_n1_limit2 = 0
page_pos_init2 = 0
page_route2 = 0
page_dep_arr2 = 0
page_dep2 = 0
page_arr2 = 0
page_descent2 = 0
page_descent_forecast2 = 0
page_legs2 = 0
page_rte_init2 = 0
page_climb2 = 0
page_cruise2 = 0
page_progress2 = 0
page_hold2 = 0
page_xtras2 = 0
page_xtras_fmod2 = 0
page_fmod_features2 = 0
page_fmod_volumes2 = 0
page_fmod_announ2 = 0
page_fmod_eq2 = 0
page_fmod_flight_ctrl2 = 0
page_xtras_others2 = 0
page_sel_wpt_2 = 0
page_sel_wpt2_2 = 0
page_sel_wpt3_2 = 0
page_sel_wpt4_2 = 0
page_offset2 = 0
page_legs_step2 = 0
page_xtras_fuel2 = 0
page_ref_nav_data2 = 0
page_ref_nav_data_wpt2 = 0
page_ref_nav_data_navaid2 = 0
page_ref_nav_data_apt2 = 0
page_ref_sel2 = 0
page_fix2 = 0
page_rte_legs2 = 0

legs_step = 0
legs_step2 = 0
map_mode = 2
map_mode_old = 2
map_mode_old2 = 2
map_mode2 = 2

entry = ""
entry2 = ""

entry_wind_dir = ""
entry_wind_spd = ""

FMS_popup = 0

v1 = "---"
vr = "---"
v2 = "---"
flaps = "**"
vref_15 = "   "
vref_30 = "   "
vref_40 = "   "
flaps_app = "  "

gw_act = "    "
v1_set = "---"
vr_set = "---"
v2_set = "---"
irs_pos_set = "*****.*******.*"
gps_right = "-----.-------.-"
gps_left = "-----.-------.-"
last_pos = "-----.-------.-"
fmc_pos = "-----.-------.-"
last_pos_enable = 1

-- last_latitude_deg = 0
-- last_latitude_min = 0
-- last_latitude_NS = 0
-- last_longitude_deg = 0
-- last_longitude_min = 0
-- last_longitude_EW = 0
-- act_pos = "-----.-------.-"


ref_icao = "----"
ref_gate = "-----"
des_icao = "****"
co_route = "------------"
flt_num = "--------"
ref_rwy = "-----"
des_rwy = "----"
ref_icao2 = "----"

gw = "***.*"
gw_calc = "***.*"
gw_lbs = "***.*"
gw_kgs = "***.*"
gw_app = "***.*"
gw_app_lbs = "***.*"
gw_app_kgs = "***.*"
gw_app_nul = 0

zfw_calc = "---.-"
zfw_calc_lbs = "---.-"
zfw_calc_kgs = "---.-"

fuel_weight = "--.-"
fuel_weight_lbs = "--.-"
fuel_weight_kgs = "--.-"

plan_weight = "---.-"
plan_weight_kgs = "---.-"
plan_weight_lbs = "---.-"

zfw = "***.*"
zfw_kgs = "***.*"
zfw_lbs = "***.*"

reserves = "**.*"
reserves_kgs = "**.*"
reserves_lbs = "**.*"

cost_index = "***"
econ_clb_spd = 0
econ_clb_spd_mach = 0
econ_crz_spd = 0
econ_crz_spd_mach = 0
econ_des_spd = 0
econ_des_spd_mach = 0
econ_des_vpa = 0.0

crz_alt = "*****"
crz_alt_num = 0
crz_alt_num2 = 0
crz_spd = "---"
crz_spd_mach = ".---"
crz_alt_old = "*****"
crz_spd_old = "---"
crz_spd_mach_old = ".---"
crz_exec = 0
clb_alt = "----"
clb_alt_num = 1500
crz_wind_dir = "---"
crz_wind_spd = "---"
rw_wind_dir = "---"
rw_wind_spd = "---"
rw_slope = "--.-"
rw_hdg = "---"
--trans_alt = "18000"
trans_alt = "-----"
trans_lvl = "-----"
isa_dev_f = "---"
isa_dev_c = "---"
tc_oat_f = "---"
tc_oat_c = "---"

forec_alt_1 = "-----"
forec_alt_1_num = 0
forec_dir_1 = "---"
forec_spd_1 = "---"
forec_alt_2 = "-----"
forec_alt_2_num = 0
forec_dir_2 = "---"
forec_spd_2 = "---"
forec_alt_3 = "-----"
forec_alt_3_num = 0
forec_dir_3 = "---"
forec_spd_3 = "---"
cabin_rate = "---"
forec_isa_dev = "---"
forec_qnh = "------"

to = "<ACT>"
to_1 = "     "
to_2 = "     "
clb = "<SEL>"
clb_1 = "     "
clb_2 = "     "
sel_clb_thr = 0
rw_cond = 0
cg = "--.-"
trim = "    "
time_err = "  "
units = 0
units_recalc = 0
weight_min = 90
weight_max = 180

clb_min_kts = "   "
clb_min_mach = "   "
clb_max_kts = "   "
clb_max_mach = "   "
crz_min_kts = "   "
crz_min_mach = "   "
crz_max_kts = "   "
crz_max_mach = "   "
des_min_kts = "   "
des_min_mach = "   "
des_max_kts = "   "
des_max_mach = "   "


latitude_deg = ""
latitude_min = ""
longitude_deg = ""
longitude_min = ""
irs_hdg = "---`"
irs_pos = "*****.*******.*"
msg_irs_pos = 0
msg_irs_hdg = 0
zulu_time = "             "
ground_air = 0
fmc_gs = ""
irs_gs = ""
irs2_gs = ""
oat_sim = "    "
oat = "****"
sel_temp = "----"
sel_temp_f = "----"
oat_f = "****"
oat_sim_f = "    "
oat_unit = "`C"

wind_corr = "--"
app_flap = "--"
app_spd = "---"

msg_to_vspeed = 0
qrh = "OFF"

fmc_message = {}
fmc_message_warn = {}
fmc_message_num = 0
--fmc_message2 = {}
--fmc_message_num2 = 0

msg_mcp_alt = 0
msg_gps_l_fail = 0
msg_gps_r_fail = 0
msg_gps_lr_fail = 0
msg_irs_motion = 0
msg_drag_req = 0
msg_nav_data = 0
msg_unavaible_crz_alt = 0
msg_chk_alt_tgt = 0
msg_tai_above_10 = 0
msg_above_max = 0
msg_vref_not_sel = 0
msg_chk_alt_constr = 0
msg_rnp_alert = 0
rnp_alert = 0
msg_using_rsv_fuel = 0

auto_act = "<ACT>"
ga_act = "     "
con_act = "     "
clb_act = "     "
crz_act = "     "

tai_on_alt = "-----"
tai_off_alt = "-----"


eng_out_prompt = 0

was_on_air = 0
takeoff_enable = 0
climb_enable = 1
descent_enable = 0
goaround_enable = 0
fmc_climb_mode = 0
fmc_cruise_mode = 0
fmc_cont_mode = 0
fmc_takeoff_mode = 0
fmc_goaround_mode = 0
fms_N1_mode = 0
fms_N1_to_mode_sel = 0
fms_N1_clb_mode_sel = 0
in_flight_mode = 0


disable_POS_2L = 0
disable_POS_3L = 0
disable_POS_4R = 0
disable_POS_5R = 0
disable_PERF_3R = 0
disable_PERF_4R = 0
disable_N1_6L = 0
disable_N1_6R = 0


fmc_full_thrust = 0.984
fmc_dto_thrust = 0.984
fmc_sel_thrust = 0.984
fmc_clb_thrust = 0.984
fmc_crz_thrust = 0.984
fmc_con_thrust = 0.984
fmc_ga_thrust = 0.984
fmc_auto_thrust = 0.984

next_enable = 1
prev_enable = 1
exec1_light = 0

des_now_enable = 0
drag_timeout = 0

file_name = ""
file_name_path = ""

ref_data = {}
rwy_num = 0
ref_data_sid = {}
sid_num = 0
ref_data_star = {}
star_num = 0
ref_data_star_tns = {}
ref_data_star_tns_n = 0
ref_data_app = {}
ref_data_app_n = 0
ref_data_app_tns = {}
ref_data_app_tns_n = 0
ref_ed_app = {}
ref_ed_app_n = 0

des_data = {}
des_rwy_num = 0

-- data destination star
data_des_star = {}
data_des_star_n = 0

-- data destination star transition
data_des_star_tns = {}
data_des_star_tns_n = 0

ref_data_sid_act = {}
sid_num_act = 0

ref_data_sid_tns = {}
ref_num_sid_tns = 0

ref_data_tns = {}
tns_num = 0

des_data_app_act = {}
des_num_app_act = 0

-- data destinstion approach
data_des_app = {}
data_des_app_n = 0

-- data destination approach transition
data_des_app_tns = {}
data_des_app_tns_n = 0

ed_app_num = 0
ed_app = {}

des_num_star_tns = 0
des_data_star_tns = {}

des_num_app_tns = 0
des_data_app_tns = {}

ref_rwy_map = {}
ref_rwy_map_num = 0

ref_trans_alt = 0

ref_sid = "------"
ref_sid_tns = "------"

des_star = "------"
des_star_trans = "------"

-- transition connect STAR <-> APP
des_star_trans_con = ""

des_app = "------"

des_app_tns = "------"

ref_rwy_exec = 0
ref_sid_exec = 0
ref_tns_exec = 0
ref_app_tns_exec = 0
des_star_exec = 0
des_star_tns_exec = 0
des_app_exec = 0
des_app_tns_exec = 0

fpln_num = 0
fpln_data = {}

fpln_data2 = {}
fpln_num2 = 0

legs_data = {}
legs_num = 0

ref_rwy_sel = {}
ref_rwy_sel[1] = ""
ref_rwy_sel[2] = ""
ref_rwy_sel[3] = ""
ref_rwy_sel[4] = ""
ref_rwy_sel[5] = ""

ref_sid_sel = {}
ref_sid_sel[1] = ""
ref_sid_sel[2] = ""
ref_sid_sel[3] = ""
ref_sid_sel[4] = ""
ref_sid_sel[5] = ""

ref_tns_sel = {}
ref_tns_sel[1] = ""
ref_tns_sel[2] = ""
ref_tns_sel[3] = ""
ref_tns_sel[4] = ""
ref_tns_sel[5] = ""

des_star_sel = {}
des_star_sel[1] = ""
des_star_sel[2] = ""
des_star_sel[3] = ""
des_star_sel[4] = ""
des_star_sel[5] = ""

des_star_tns_sel = {}
des_star_tns_sel[1] = ""
des_star_tns_sel[2] = ""
des_star_tns_sel[3] = ""
des_star_tns_sel[4] = ""
des_star_tns_sel[5] = ""

des_app_sel = {}
des_app_sel[1] = ""
des_app_sel[2] = ""
des_app_sel[3] = ""
des_app_sel[4] = ""
des_app_sel[5] = ""

des_tns_sel = {}
des_tns_sel[1] = ""
des_tns_sel[2] = ""
des_tns_sel[3] = ""
des_tns_sel[4] = ""
des_tns_sel[5] = ""

set_ils = 0
--offset = 1
legs_offset = 0
legs_select = 0
legs_delete = 0
legs_delete_item = 0
legs_delete_key = 0
legs_page = 0
legs_button = 0
direct_to = 0
direct_to_offset = 0
legs_intdir = 0
legs_dir = 0

legs_restr_spd = {}
legs_restr_spd_n = 0

legs_restr_alt = {}
legs_restr_alt_n = 0

--tc_dist = 0
--tc_idx = 0
tc_lat = 0
tc_lon = 0

--td_dist = 0
--td_idx = 0
td_lat = 0
td_lon = 0

--decel_dist = 0
--decel_idx = 0
decel_lat = 0
decel_lon = 0
was_decel = 0
--ed_found = 0
--ed_alt = 0
--td_idx_last = 0
--td_spd_rest = 0

vnav_update = 0

offset_old = 0

temp_ils3 = ""
temp_ils4 = ""

legs_ovwr = 0

--ed_fix_num = 0
ed_fix_found2 = {}
ed_fix_alt2 = {}
ed_fix_vpa2 = {}

--dist_dest = 0
dist_tc = 0
time_tc = 0
dist_td = 0
time_td = 0
dist_ed = 0
time_ed = 0

fms_msg_sound = 0

lock_bank = 0
file_path = ""

chock_pos_x = 0
chock_pos_y = 0
chock_pos_z = 0

pause_td_disable = 0

accel_alt = "----"
accel_alt_num = 1000

pre_flt_pos_init = 0
pre_flt_perf_init = 0
pre_flt_rte = 0
pre_flt_dep = 0

last_lat = 0 
last_lon = 0 
last_offset = 0

rw_dist = 0

head_wind = 0
cross_wind = 0

set_chock = 0
chock_timer = 0


--td_fix_dist = 0
--td_fix_idx = 0

--rw_ils = ""

apt_data_num = 0
apt_data = {}
rnw_data_num = 0
rnw_data = {}
ref_runway_lenght = 0
ref_runway_lat = 0
ref_runway_lon = 0
ref_runway_crs = 0
des_runway_lenght = 0
des_runway_lat = 0
des_runway_lon = 0
des_runway_crs = 0

des_rnw = ""
log_line = ""

nd_teak = 0
nd_from = 0
nd_to = 0
nd_page1 = {}
nd_page2 = {}
nd_page = 0
nd_page1_num = 0
nd_page2_num = 0
first_time_apt = 0

xnd_teak = 0
xnd_from = 0
xnd_to = 0
xnd_page1 = {}
xnd_page2 = {}
xnd_page = 0
xnd_page1_num = 0
xnd_page2_num = 0
xfirst_time = 0

near_apt1_dis = 0
near_apt1_icao = ""
near_apt2_dis = 0
near_apt2_icao = ""

cl_icao_found = 0
cl_num = 0
cl_lat1 = {}
cl_lon1 = {}
cl_lat2 = {}
cl_lon2 = {}

des_app_from_apt = 0
altitude_last = 0
ref_icao_pos = "               "
icao_latitude = 0
icao_longitude = 0
icao_tns_alt = 0
icao_tns_lvl = 0

awy_data_num = 0
awy_data = {}

awy_path = {}
awy_path_num = 0

awy_temp_num2 = 0
awy_temp2 = {}

via_via_entry = ""
via_via_ok = 0

wpt_id_paste = 0
wpt_id_nav_tmp = ""
wpt_id_brg_tmp = ""
wpt_id_dist_tmp = ""
legs_intdir_crs = 0
legs_intdir_crs2 = -1
--legs_intdir_act = 0

calc_lat = 0
calc_lon = 0
calc_lat_fix = 0
calc_lon_fix = 0

rte_copy_idx = 0
rte_copy_idxb = 0

new_hold = 0
new_hold_wpt = "*****"
new_hold_inbd = "---"
new_hold_turn = -1
new_hold_time = "-.-"
new_hold_dist = "--.-"
new_hold_spd = 0
new_hold_alt = 0
new_hold_rc = ""
new_hold_via = ""
new_hold_lat = 0
new_hold_lon = 0
new_hold_idx = 0
hold_idx = 0
hold_data = {}
hold_data_num = 0
hold_data_num2 = 0
hold_data2 = {}

hold_offset = 0
hold_offset_idx = 0
hold_exec = 0
hold_term = 0
hold_circuit = 0
hold_time_set = 0
hold_dist_set = 0
hold_timer = 0
--nav_mode = 0
pi_phase = 0

ils_id = ""
ils_freq = 0
ils_course = 0

add_star = 0
del_execute = 0

output_str = ""
output_str1 = ""
output_str2 = ""
output_num1 = 0
output_num2 = 0

legs_intdir_idx = 0

radii_dist = 0
radii_dist_ctr = 0
radii_lat = 0
radii_lon = 0
radii_turn_dir = 0
radii_inbound = 0
radii_outbound = 0
radii_angle = 0
radii_brg = 0

vnav_status_old = 0
mcp_alt_dial_old = 0
fmc1_msg_alt = 0
fmc2_msg_alt = 0
-- fmc1_msg_alt_rst = 0
-- fmc2_msg_alt_rst = 0
fmc1_msg_light = 0
fmc2_msg_light = 0
fmc_message_warn_dis = 0

--radii_turn_act = 0

hold_crs1 = 0
hold_crs2 = 0
hold_lenght = 0
hold_radius = 0
hold_lat1 = 0
hold_lon1 = 0
hold_lat2 = 0
hold_lon2 = 0
hold_opposite_lat = 0
hold_opposite_lon = 0

fpln_import_ok = 0
fill_import_wpt_data = 0

fix_data_num = 0
fix_data = {}

fmod_preset = {}
fmod_preset[1] = {}
fmod_preset[2] = {}
fmod_preset[3] = {}
fmod_preset[4] = {}
fmod_preset[5] = {}

xfirst_time2 = 0
precalc_done = 0

mag_dec = {}
app_str = ""

af_finish_crs = 0

ff_approx = 0
ff_total_old = 0
ff_sample = 0

--*************************************************************************************--
--** 					            LOCAL VARIABLES                 				 **--
--*************************************************************************************--

	ref_rnw_list = {}
	ref_rnw_list_num = 0
	ref_rnw_list2 = {}
	ref_rnw_list_num2 = 0
	des_rnw_list = {}
	des_rnw_list_num = 0

	sid_list = {}
	sid_list_num = 0
	sid_tns_list = {}
	sid_tns_list_num = 0

	star_list = {}
	star_list_num = 0
	star_tns_list = {}
	star_tns_list_num = 0

	des_app_list = {}
	des_app_list_num = 0
	des_app_tns_list = {}
	des_app_tns_list_num = 0

	temp_list = {}
	temp_list_num = 0

	
	ref_rwy2 = "-----"
	ref_sid2 = "------"
	ref_sid_tns2 = "------"
	des_app2 = "------"
	des_app_tns2 = "------"
	des_star2 = "------"
	des_star_trans2 = "------"
	
	ref_exec = 0
	des_exec = 0
	ref_icao_x = "----"
	des_icao_x = "****"
	arr_data = 0
	
	--clip_offset = 0
	
	rte_sid = {}
	rte_sid_num = 0
	rte_star = {}
	rte_star_num = 0
	rte_app = {}
	rte_app_num = 0
	
	legs_data_tmp_n = 0
	legs_data_tmp = {}
	legs_data2_tmp_n = 0
	legs_data2_tmp = {}
	
	legs_num2 = 0
	legs_data2 = {}
	
	legs_num2b = 0
	legs_data2b = {}
	rte_add_sid_act = 0
	rte_add_star_act = 0
	rte_add_app_act = 0
	sid_cnt = 0
	rnw_added = 0
	add_ok = 0
	legs_data2_tmp_nb = 0
	legs_data2_tmpb = {}
	
	
	rte_data_num = 0
	rte_data = {}
	
	legs_num3 = 0
	legs_data3 = {}
	legs_off_tmp_n = 0
	legs_off_tmp = {}
	
	offset_act = 0
	offset_start = 0
	offset_end = 0
	offset_dist = 0
	offset_side = 0
	
	item_sel = 0
	item_sel2 = 0
	
	item_sel_via = 0
	item_sel_via2 = 0

	earth_nav_num = 0  --number navid
	earth_nav = {}
	ils_nav_num = 0
	ils_nav = {}
	airac_navdata = ""
	airac_navdata_active = ""
	airac_cycle = ""
	
	navaid_list = {}
	navaid_list_n = 0
	
	rte_lat = 0
	rte_lon = 0

	calc_rte_enable = 0
	calc_rte_act = 0
	rte_calc_lat = 0
	rte_calc_lon = 0
	calc_rte_enable_t = 0
	
	calc_rte_enable2 = 0
	calc_rte_act2 = 0
	rte_calc_lat2 = 0
	rte_calc_lon2 = 0
	calc_rte_act2_t = 0
	
	ref_icao_lat = 0
	ref_icao_lon = 0
	des_icao_lat = 0
	des_icao_lon = 0
	ref_icao_alt = 0
	ref_tns_alt = 0
	ref_tns_lvl = 0
	des_tns_alt = 0
	des_tns_lvl = 0
	des_icao_alt = 0
	
	------
	ref_gate_x = "-----"
	co_route_x = "------------"
	exec_load_fpln = 0
	ref_icao_lat_x = 0
	ref_icao_lon_x = 0
	ref_tns_alt_x = 0
	ref_tns_lvl_x = 0
	ref_icao_alt_x = 0
	des_icao_lat_x = 0
	des_icao_lon_x = 0
	des_tns_alt_x = 0
	des_tns_lvl_x = 0
	des_icao_alt_x = 0
	trans_lvl_x = "-----"
	trans_alt_x = "-----"
	--------
	
	add_disco = 0
	temp_nav_sort = {}
	
	rte_exec = 0
	dir_change = 0
	dir_idx = 0
	dir_disco = 0
	fpln_data_tmp_n = 0
	fpln_data_tmp = {}
	
	find_lat = 0
	find_lon = 0
	
	last_sid_idx = 0
	first_sid_idx = 0
	first_app_idx = 0
	first_star_idx = 0
	
	af_lat = 0
	af_lon = 0
	af_dist = 0
	af_turn = 0
	
	flying_star = 0
	flying_app = 0
	change_star = 0
	change_app = 0
	legs_num_old = 0

	last_miss_app_idx = 0
	
	-- MOD variable
	vnav_update_mod = 0
	--legs_delete_old = 0
	last_sid_idx_mod = 0
	first_sid_idx_mod = 0
	first_app_idx_mod = 0
	first_star_idx_mod = 0
	id_ed_mod = ""
	idx_ed_mod = 0
	rnav_idx_first_mod = 0
	rnav_idx_last_mod = 0
	first_miss_app_idx_mod = 0
	last_miss_app_idx_mod = 0
	missed_app_via = ""
	rnav_alt_mod = 0
	rnav_vpa_mod = 0
	alt_ed_mod = 0
	alt_type_ed_mod = 0
	decel_dist_mod = 0
	decel_idx_mod = 0
	td_fix_dist_mod = 0		-- distance before td_fix_idx
	td_fix_idx_mod = 0		-- td_fix_idx
	ed_fix_found_mod = 0	-- ed fix idx
	ed_fix_alt_mod = 0		-- ed alt fix idx
	--ed_fix_dist_mod = 0		-- ed fix distance (local)
	--ed_fix_vpa_mod = 0
	ed_fix_found2_mod = {}
	ed_fix_alt2_mod = {}
	ed_fix_vpa2_mod = {}
	ed_fix_num_mod = 0
	td_idx_mod = 0
	td_dist_mod = 0
	ed_vpa_mod = 0
	ed_found_mod = 0
	idx_ed_mod = 0
	ed_alt_mod = 0
	tc_idx_mod = 0
	tc_dist_mod	= 0
	ed_dist_mod = 0
	legs_intdir_crs_mod = 0

	del_all_rest_intv = 0
	
	reset_fmc_act = 0
	transf_lat = 0
	transf_lon = 0
	
	legs_restr_spd_mod = {}
	legs_restr_spd_n_mod = 0
	legs_restr_alt_mod = {}
	legs_restr_alt_n_mod = 0

	menu_timer = 0
	perf_exec = 0
	
	page_ref_nav_data = 0
	page_ref_nav_data_wpt = 0
	page_ref_nav_data_navaid = 0
	page_ref_nav_data_apt = 0
	page_ref_sel = 0
	ref_nav_wpt = "-----"
	ref_nav_navaid = "----"
	ref_nav_apt = "----"
	ref_nav_new = "*****"
	ref_nav_lat = 0
	ref_nav_lon = 0
	ref_nav_mag_var = ""
	ref_nav_id = "-----"
	ref_nav_rc = ""
	ref_nav_brg = "---"
	ref_nav_dist = "---"
	ref_nav_exec = 0
	ref_nav_id_lat = 0
	ref_nav_id_lon = 0
	nav_data_type = 0
	nav_data_idx = 0
	nav_data_idx2 = 0
	nav_data_entry = ""
	
	fmc_align = 0
	fmc_align_old = 0
	
	--rnp_act = 0
	rnp_lock_time = 0

	wptx_n = 0
	wptx = {}
	
	gpu_test_enable = 0
	
	cg_set_m = 0
	cg_set_in = 0
	mac = 0
	mac_zfw = 0
	
	gps_ok = 0
	menu_tick = 0
	
	align_anp = 0
	align_anp_min = 0
	align_anp_max = 0
	align_anp_time = 0
	align_source_old = 0
	
	ndx_lat = 0
	ndx_lon = 0
	ndx_mag_hdg = 0
	ndx_ahars_mag_hdg = 0
	
	dec_find_type = 0
	cust_def_data = 0
	
	idx_earth_nav = {}
	idx_apt = {}
	idx_ils = {}
	idx_ils_icao = {}
	idx_rnw = {}
	idx_awy = {}
	
	irs_enable = 0
	
	fmc_descent_r_alt1 = ""
	fmc_climb_r_alt1 = ""
	
	flight_phase_old = 0
	
	vnav_des_table_dist = {}
	vnav_des_table_alt = {}
	vnav_des_table_num = 0
	vnav_des_table_dist2 = {}
	vnav_des_table_alt2 = {}
	vnav_des_table_num2 = 0

	--vnav_alt_err_ratio = 0
	vnav_alt_err_ratio_old = 0
	
	fuel_ed = 0
	fuel_tc = 0
	fuel_td = 0

	
--*************************************************************************************--
--** 				             FIND X-PLANE DATAREFS            			    	 **--
--*************************************************************************************--

--simDR_engine1_on		= find_dataref("sim/flightmodel2/engines/engine_is_burning_fuel[0]")

simDR_startup_running               = find_dataref("sim/operation/prefs/startup_running")

simDR_total_weight			= find_dataref("sim/flightmodel/weight/m_total")
simDR_payload_weight		= find_dataref("sim/flightmodel/weight/m_fixed")
simDR_fuel_weight			= find_dataref("sim/flightmodel/weight/m_fuel_total")

simDR_latitude				= find_dataref("sim/flightmodel/position/latitude")
simDR_longitude				= find_dataref("sim/flightmodel/position/longitude")

simDR_zulu_hours			= find_dataref("sim/cockpit2/clock_timer/zulu_time_hours")
simDR_zulu_minutes			= find_dataref("sim/cockpit2/clock_timer/zulu_time_minutes")
simDR_zulu_seconds			= find_dataref("sim/cockpit2/clock_timer/zulu_time_seconds")
simDR_time_month			= find_dataref("sim/cockpit2/clock_timer/current_month")
simDR_time_day				= find_dataref("sim/cockpit2/clock_timer/current_day")

simDR_gps_fail					= find_dataref("sim/operation/failures/rel_gps")
simDR_gps2_fail					= find_dataref("sim/operation/failures/rel_gps2")

--simDR_ground_speed		= find_dataref("sim/flightmodel/position/groundspeed")

simDR_OAT				= find_dataref("sim/cockpit2/temperature/outside_air_temp_degc")

simDR_on_ground_0				= find_dataref("sim/flightmodel2/gear/on_ground[0]")
simDR_on_ground_1				= find_dataref("sim/flightmodel2/gear/on_ground[1]")
simDR_on_ground_2				= find_dataref("sim/flightmodel2/gear/on_ground[2]")
simDR_radio_height_pilot_ft		= find_dataref("sim/cockpit2/gauges/indicators/radio_altimeter_height_ft_pilot")
simDR_altitude_pilot			= find_dataref("sim/cockpit2/gauges/indicators/altitude_ft_pilot")
--simDR_flaps_ratio				= find_dataref("sim/flightmodel2/controls/flap1_deploy_ratio")
simDR_flaps_ratio				= find_dataref("sim/cockpit2/controls/flap_handle_deploy_ratio")

simDR_gear_retract				= find_dataref("sim/aircraft/parts/acf_gear_deploy[0]")

simDR_vnav_tod_nm		= find_dataref("sim/cockpit2/radios/indicators/fms_distance_to_tod_pilot")
simDR_vnav_eod_alt		= find_dataref("sim/cockpit2/radios/indicators/fms_fpta_pilot")
simDR_vnav_path_angle	= find_dataref("sim/cockpit2/radios/indicators/fms_vpa_pilot")
simDR_vnav_path_err		= find_dataref("sim/cockpit2/radios/indicators/fms_vtk_pilot")
simDR_vnav_status				= find_dataref("sim/cockpit2/autopilot/fms_vnav")



simDR_bus_volts1		= find_dataref("sim/cockpit2/electrical/bus_volts[0]")
simDR_bus_volts2		= find_dataref("sim/cockpit2/electrical/bus_volts[1]")

simDR_ap_altitude_dial_ft		= find_dataref("sim/cockpit2/autopilot/altitude_dial_ft")
simDR_ap_vvi_dial				= find_dataref("sim/cockpit2/autopilot/vvi_dial_fpm")
simDR_airspeed_dial				= find_dataref("sim/cockpit2/autopilot/airspeed_dial_kts_mach")

simDR_airspeed_is_mach			= find_dataref("sim/cockpit2/autopilot/airspeed_is_mach")
simDR_vvi_fpm_pilot				= find_dataref("sim/cockpit2/gauges/indicators/vvi_fpm_pilot")

simDR_autopilot_altitude_mode	= find_dataref("sim/cockpit2/autopilot/altitude_mode")

simDR_wind_hdg					= find_dataref("sim/cockpit2/gauges/indicators/wind_heading_deg_mag")
simDR_wind_spd					= find_dataref("sim/cockpit2/gauges/indicators/wind_speed_kts")
simDR_position_mag_psi 			= find_dataref("sim/flightmodel/position/mag_psi")


simDR_ground_spd					= find_dataref("sim/flightmodel/position/groundspeed")


simDR_fms_exec_light1			= find_dataref("sim/cockpit2/radios/indicators/fms_exec_light_pilot")
simDR_airspeed_pilot			= find_dataref("sim/cockpit2/gauges/indicators/airspeed_kts_pilot")

simDR_throttle1_use				= find_dataref("sim/flightmodel/engine/ENGN_thro_use[0]")
simDR_throttle2_use				= find_dataref("sim/flightmodel/engine/ENGN_thro_use[1]")


--simDR_gps_nav_id				= find_dataref("sim/cockpit2/radios/indicators/gps_nav_id")
simDR_elevator_trim				= find_dataref("sim/cockpit2/controls/elevator_trim")

--simDR_glideslope_status			= find_dataref("sim/cockpit2/autopilot/glideslope_status")

simDR_mag_variation		= find_dataref("sim/flightmodel/position/magnetic_variation")
--simDR_fmc_nav_id		= find_dataref("sim/cockpit2/radios/indicators/gps_nav_id")
--simDR_fmc_crs			= find_dataref("sim/cockpit/radios/gps_course_degtm")
--simDR_fmc_dist_xp			= find_dataref("sim/cockpit2/radios/indicators/gps_dme_distance_nm")


simDR_mag_hdg			= find_dataref("sim/cockpit2/gauges/indicators/ground_track_mag_pilot")
simDR_ahars_mag_hdg		= find_dataref("sim/cockpit2/gauges/indicators/heading_AHARS_deg_mag_pilot")
--simDR_mag_variation		= find_dataref("sim/flightmodel/position/magnetic_variation")
simDR_efis_sub_mode		= find_dataref("sim/cockpit/switches/EFIS_map_submode")
simDR_efis_map_range	= find_dataref("sim/cockpit2/EFIS/map_range")
simDR_efis_map_mode		= find_dataref("sim/cockpit/switches/EFIS_map_mode")

simDR_ext_pwr_1_on 		= find_dataref("sim/cockpit/electrical/gpu_on")


-- PILOT
B738DR_nav_flag_gs			= find_dataref("laminar/radios/pilot/nav_flag_gs")
B738DR_nav_vert_dsp			= find_dataref("laminar/radios/pilot/nav_vert_dsp")
B738DR_nav_horz_dsp			= find_dataref("laminar/radios/pilot/nav_horz_dsp")
B738DR_nav_flag_ft			= find_dataref("laminar/radios/pilot/nav_flag_ft")
B738DR_nav_nav_id			= find_dataref("laminar/radios/pilot/nav_nav_id")
B738DR_nav_dme				= find_dataref("laminar/radios/pilot/nav_dme")
B738DR_nav_has_dme			= find_dataref("laminar/radios/pilot/nav_has_dme")
B738DR_nav_obs				= find_dataref("laminar/radios/pilot/nav_obs")
B738DR_nav_type				= find_dataref("laminar/radios/pilot/nav_type")

-- COPILOT
B738DR_nav_flag_gs_fo		= find_dataref("laminar/radios/copilot/nav_flag_gs")
B738DR_nav_vert_dsp_fo		= find_dataref("laminar/radios/copilot/nav_vert_dsp")
B738DR_nav_horz_dsp_fo		= find_dataref("laminar/radios/copilot/nav_horz_dsp")
B738DR_nav_flag_ft_fo		= find_dataref("laminar/radios/copilot/nav_flag_ft")
B738DR_nav_nav_id_fo		= find_dataref("laminar/radios/copilot/nav_nav_id")
B738DR_nav_dme_fo			= find_dataref("laminar/radios/copilot/nav_dme")
B738DR_nav_has_dme_fo		= find_dataref("laminar/radios/copilot/nav_has_dme")
B738DR_nav_obs_fo			= find_dataref("laminar/radios/copilot/nav_obs")
B738DR_nav_type_fo			= find_dataref("laminar/radios/copilot/nav_type")


simDR_approach_status		= find_dataref("sim/cockpit2/autopilot/approach_status")
simDR_glideslope_status		= find_dataref("sim/cockpit2/autopilot/glideslope_status")
simDR_nav_status			= find_dataref("sim/cockpit2/autopilot/nav_status")

simDR_elevation_m			= find_dataref("sim/flightmodel/position/elevation")

simDR_bank_angle			= find_dataref("sim/cockpit2/autopilot/bank_angle_mode")
simDR_cg					= find_dataref("sim/flightmodel/misc/cgz_ref_to_default")

simDR_cowl_ice_0_on			= find_dataref("sim/cockpit2/ice/ice_inlet_heat_on_per_engine[0]")
simDR_cowl_ice_1_on			= find_dataref("sim/cockpit2/ice/ice_inlet_heat_on_per_engine[1]")
simDR_TAT					= find_dataref("sim/cockpit2/temperature/outside_air_LE_temp_degc")

simDR_hide_yoke				= find_dataref("sim/graphics/view/hide_yoke")
simDR_nav1_hdef_pilot		= find_dataref("sim/cockpit2/radios/indicators/nav1_hdef_dots_pilot")
simDR_roll					= find_dataref("sim/cockpit2/gauges/indicators/roll_AHARS_deg_pilot")
--simDR_fms_time				= find_dataref("sim/cockpit/radios/gps_dme_time_secs")

simDR_pause					= find_dataref("sim/time/paused")

--simDR_toe_brakes_ovr		= find_dataref("sim/operation/override/override_toe_brakes")

simDR_nav1_relative_hdg		= find_dataref("sim/cockpit2/radios/indicators/nav1_relative_heading_AHARS_deg_pilot")

simDR_TAS					= find_dataref("sim/flightmodel/position/true_airspeed")

simDR_kill_map_fms			= find_dataref("sim/graphics/misc/kill_map_fms_line")
simDR_fuel_tank_weight_kg 	= find_dataref("sim/flightmodel/weight/m_fuel")
B738DR_gpu_available		= find_dataref("laminar/B738/gpu_available")

simDR_pitch_nz 				= find_dataref("sim/joystick/joystick_pitch_nullzone")
simDR_roll_nz 				= find_dataref("sim/joystick/joystick_roll_nullzone")
simDR_yaw_nz 				= find_dataref("sim/joystick/joystick_heading_nullzone")

simDR_ff 					= find_dataref("sim/flightmodel/engine/ENGN_FF_")

--*************************************************************************************--
--** 				               FIND X-PLANE COMMANDS                   	    	 **--
--*************************************************************************************--


simCMD_nosmoking_toggle		= find_command("sim/systems/no_smoking_toggle")

simCMD_autopilot_lvl_chg	= find_command("sim/autopilot/level_change")
simCMD_autopilot_vs_sel		= find_command("sim/autopilot/vertical_speed_pre_sel")

simCMD_pause				= find_command("sim/operation/pause_toggle")

simCMD_autopilot_alt_hold	= find_command("sim/autopilot/altitude_hold")

--*************************************************************************************--
--** 				              FIND CUSTOM DATAREFS             			    	 **--
--*************************************************************************************--

-- CLIMB
B738DR_fmc_climb_speed			= find_dataref("laminar/B738/autopilot/fmc_climb_speed")
B738DR_fmc_climb_speed_l		= find_dataref("laminar/B738/autopilot/fmc_climb_speed_l")
B738DR_fmc_climb_speed_mach		= find_dataref("laminar/B738/autopilot/fmc_climb_speed_mach")
B738DR_fmc_climb_r_speed1		= find_dataref("laminar/B738/autopilot/fmc_climb_r_speed1")
B738DR_fmc_climb_r_alt1			= find_dataref("laminar/B738/autopilot/fmc_climb_r_alt1")
B738DR_fmc_climb_r_speed2		= find_dataref("laminar/B738/autopilot/fmc_climb_r_speed2")
B738DR_fmc_climb_r_alt2			= find_dataref("laminar/B738/autopilot/fmc_climb_r_alt2")

-- CRUISE
B738DR_fmc_cruise_speed			= find_dataref("laminar/B738/autopilot/fmc_cruise_speed")
B738DR_fmc_cruise_speed_mach	= find_dataref("laminar/B738/autopilot/fmc_cruise_speed_mach")
B738DR_fmc_cruise_alt			= find_dataref("laminar/B738/autopilot/fmc_cruise_alt")

-- DESCENT
B738DR_fmc_descent_speed		= find_dataref("laminar/B738/autopilot/fmc_descent_speed")
B738DR_fmc_descent_speed_mach	= find_dataref("laminar/B738/autopilot/fmc_descent_speed_mach")
B738DR_fmc_descent_alt			= find_dataref("laminar/B738/autopilot/fmc_descent_alt")
B738DR_fmc_descent_r_speed1		= find_dataref("laminar/B738/autopilot/fmc_descent_r_speed1")
B738DR_fmc_descent_r_alt1		= find_dataref("laminar/B738/autopilot/fmc_descent_r_alt1")
B738DR_fmc_descent_r_speed2		= find_dataref("laminar/B738/autopilot/fmc_descent_r_speed2")
B738DR_fmc_descent_r_alt2		= find_dataref("laminar/B738/autopilot/fmc_descent_r_alt2")

-- APPROACH
B738DR_fmc_approach_alt			= find_dataref("laminar/B738/autopilot/fmc_approach_alt")

-- V speed
-- B738DR_fms_v1			= find_dataref("laminar/B738/FMS/v1")
-- B738DR_fms_vr			= find_dataref("laminar/B738/FMS/vr")
-- B738DR_fms_v2			= find_dataref("laminar/B738/FMS/v2")
-- B738DR_fms_v2_15		= find_dataref("laminar/B738/FMS/v2_15")
B738DR_fms_vref			= find_dataref("laminar/B738/FMS/vref")
B738DR_fms_vref_15		= find_dataref("laminar/B738/FMS/vref_15")
B738DR_fms_vref_25		= find_dataref("laminar/B738/FMS/vref_25")
B738DR_fms_vref_30		= find_dataref("laminar/B738/FMS/vref_30")
B738DR_fms_vref_40		= find_dataref("laminar/B738/FMS/vref_40")

B738DR_fms_v1_calc		= find_dataref("laminar/B738/FMS/v1_calc")
B738DR_fms_vr_calc		= find_dataref("laminar/B738/FMS/vr_calc")
B738DR_fms_v2_calc		= find_dataref("laminar/B738/FMS/v2_calc")
B738DR_trim_calc		= find_dataref("laminar/B738/FMS/trim_calc")

-- B738DR_fms_takeoff_flaps	= find_dataref("laminar/B738/FMS/takeoff_flaps")
-- B738DR_fms_approach_flaps	= find_dataref("laminar/B738/FMS/approach_flaps")

B738DR_latitude_deg			= find_dataref("laminar/B738/latitude_deg")
B738DR_latitude_min			= find_dataref("laminar/B738/latitude_min")
B738DR_latitude_NS			= find_dataref("laminar/B738/latitude_NS")
B738DR_longitude_deg		= find_dataref("laminar/B738/longitude_deg")
B738DR_longitude_min		= find_dataref("laminar/B738/longitude_min")
B738DR_longitude_EW			= find_dataref("laminar/B738/longitude_EW")

B738DR_gps_pos				= find_dataref("laminar/B738/irs/gps_pos")
B738DR_gps2_pos				= find_dataref("laminar/B738/irs/gps2_pos")
B738DR_irs_pos				= find_dataref("laminar/B738/irs/irs_pos")
B738DR_irs2_pos				= find_dataref("laminar/B738/irs/irs2_pos")
--B738DR_irs_pos_set			= find_dataref("laminar/B738/irs/irs_pos_set")
--B738DR_irs2_pos_set			= find_dataref("laminar/B738/irs/irs2_pos_set")
B738DR_irs_status			= find_dataref("laminar/B738/irs/irs_status")
B738DR_irs2_status			= find_dataref("laminar/B738/irs/irs2_status")
B738DR_irs_align_right		= find_dataref("laminar/B738/annunciator/irs_align_right")
B738DR_irs_align_left		= find_dataref("laminar/B738/annunciator/irs_align_left")

B738DR_irs_left_mode		= find_dataref("laminar/B738/irs/irs_mode", "number")
B738DR_irs_right_mode		= find_dataref("laminar/B738/irs/irs2_mode", "number")

B738DR_irs_left 			= find_dataref("laminar/B738/toggle_switch/irs_left")
B738DR_irs_right 			= find_dataref("laminar/B738/toggle_switch/irs_right")
B738DR_irs_source 			= find_dataref("laminar/B738/toggle_switch/irs_source")

B738DR_n1_set_source 		= find_dataref("laminar/B738/toggle_switch/n1_set_source")

B738DR_altitude_mode		= find_dataref("laminar/B738/autopilot/altitude_mode")
B738DR_heading_mode			= find_dataref("laminar/B738/autopilot/heading_mode")
B738DR_speed_mode			= find_dataref("laminar/B738/autopilot/speed_mode")

B738DR_irs1_restart			= find_dataref("laminar/B738/toggle_switch/irs_restart")
B738DR_irs2_restart			= find_dataref("laminar/B738/toggle_switch/irs2_restart")


B738DR_thr_takeoff_N1		= find_dataref("laminar/B738/engine/calc/thr_takeoff_N1")
B738DR_thr_climb_N1			= find_dataref("laminar/B738/engine/calc/thr_climb_N1")
B738DR_thr_cruise_N1		= find_dataref("laminar/B738/engine/calc/thr_cruise_N1")
B738DR_thr_cont_N1			= find_dataref("laminar/B738/engine/calc/thr_cont_N1")
B738DR_thr_goaround_N1		= find_dataref("laminar/B738/engine/calc/thr_goaround_N1")
B738DR_cruise_opt_alt		= find_dataref("laminar/B738/engine/calc/cruise_opt_alt")
B738DR_cruise_max_alt		= find_dataref("laminar/B738/engine/calc/cruise_max_alt")

B738DR_mcp_alt_dial			= find_dataref("laminar/B738/autopilot/mcp_alt_dial")

B738DR_baro_set_std_pilot		= find_dataref("laminar/B738/EFIS/baro_set_std_pilot")
B738DR_baro_sel_in_hg_pilot		= find_dataref("laminar/B738/EFIS/baro_sel_in_hg_pilot")
B738DR_baro_set_std_copilot		= find_dataref("laminar/B738/EFIS/baro_set_std_copilot")
B738DR_baro_sel_in_hg_copilot	= find_dataref("laminar/B738/EFIS/baro_sel_in_hg_copilot")

B738DR_efis_map_range_capt 		= find_dataref("laminar/B738/EFIS/capt/map_range")
B738DR_efis_map_range_fo 		= find_dataref("laminar/B738/EFIS/fo/map_range")
B738DR_capt_map_mode		= find_dataref("laminar/B738/EFIS_control/capt/map_mode_pos")
B738DR_fo_map_mode			= find_dataref("laminar/B738/EFIS_control/fo/map_mode_pos")
B738DR_capt_exp_map_mode	= find_dataref("laminar/B738/EFIS_control/capt/exp_map")
B738DR_fo_exp_map_mode		= find_dataref("laminar/B738/EFIS_control/fo/exp_map")



B738DR_ap_spd_interv_status	= find_dataref("laminar/B738/autopilot/spd_interv_status")
B738DR_speed_ratio			= find_dataref("laminar/B738/FMS/speed_ratio")

flaps_speed						= find_dataref("laminar/B738/FMS/flaps_speed")
vnav_speed						= find_dataref("laminar/B738/FMS/vnav_speed")
B738DR_autopilot_vnav_status	= find_dataref("laminar/B738/autopilot/vnav_status1")
B738DR_autopilot_cmd_a_status	= find_dataref("laminar/B738/autopilot/cmd_a_status")
B738DR_autopilot_cmd_b_status	= find_dataref("laminar/B738/autopilot/cmd_b_status")


B738DR_kill_effect				= find_dataref("laminar/B738/perf/kill_effect")

B738DR_mcp_speed_dial		= find_dataref("laminar/B738/autopilot/mcp_speed_dial_kts_mach")

--airac_navdata			= find_dataref("laminar/B738/navdata/navdata")
--airac_navdata_active		= find_dataref("laminar/B738/navdata/navdata_active")
--B738_navdata_test		= find_dataref("laminar/B738/navdata/navdata_test")

B738DR_efis_data_capt_status	= find_dataref("laminar/B738/EFIS/capt/data_status")
B738DR_efis_data_fo_status		= find_dataref("laminar/B738/EFIS/fo/data_status")

B738DR_autopilot_bank_angle_pos		= find_dataref("laminar/B738/autopilot/bank_angle_pos")

vnav_alt_mode				= find_dataref("laminar/B738/autopilot/vnav_alt_mode")
lnav_engaged				= find_dataref("laminar/B738/autopilot/lnav_engaged")

B738DR_spd_ref 				= find_dataref("laminar/B738/toggle_switch/spd_ref")

B738DR_vor1_sel_id	 		= find_dataref("laminar/B738/pfd/vor1_sel_id")
B738DR_vor2_sel_id	 		= find_dataref("laminar/B738/pfd/vor2_sel_id")
B738DR_vor1_show	 		= find_dataref("laminar/B738/pfd/vor1_show")
B738DR_vor2_show	 		= find_dataref("laminar/B738/pfd/vor2_show")
B738DR_vor1_copilot_show	= find_dataref("laminar/B738/pfd/vor1_copilot_show")
B738DR_vor2_copilot_show	= find_dataref("laminar/B738/pfd/vor2_copilot_show")

B738DR_efis_vor_on		= find_dataref("laminar/B738/EFIS/EFIS_vor_on")
B738DR_efis_apt_on		= find_dataref("laminar/B738/EFIS/EFIS_airport_on")
B738DR_efis_fix_on		= find_dataref("laminar/B738/EFIS/EFIS_fix_on")

B738DR_efis_fo_vor_on	= find_dataref("laminar/B738/EFIS/fo/EFIS_vor_on")
B738DR_efis_fo_apt_on	= find_dataref("laminar/B738/EFIS/fo/EFIS_airport_on")
B738DR_efis_fo_fix_on	= find_dataref("laminar/B738/EFIS/fo/EFIS_fix_on")

--B738DR_changed_flight_phase = find_dataref("laminar/B738/changed_flight_phase")

B738DR_track_up_active		= find_dataref("laminar/B738/fms/track_up_active")
fac_engaged					= find_dataref("laminar/B738/ap/fac_engaged")
loc_gp_engaged				= find_dataref("laminar/B738/ap/loc_gp_engaged")

B738DR_ac_tnsbus2_status	= find_dataref("laminar/B738/electric/ac_tnsbus2_status")

B738DR_calc_vspd			= find_dataref("laminar/B738/FMS/calc_vspd")
B738DR_calc_trim 			= find_dataref("laminar/B738/FMS/calc_trim")
B738DR_eng_out				= find_dataref("laminar/B738/FMS/eng_out")

-- FMOD by AudioBird XP
B738DR_enable_pax_boarding	= find_dataref("laminar/b738/fmodpack/fmod_pax_boarding_on")
B738DR_enable_gyro			= find_dataref("laminar/b738/fmodpack/fmod_woodpecker_on")
B738DR_enable_crew			= find_dataref("laminar/b738/fmodpack/fmod_crew_on")
B738DR_enable_chatter		= find_dataref("laminar/b738/fmodpack/fmod_chatter_on")
B738DR_airport_set 			= find_dataref("laminar/b738/fmodpack/fmod_airport_set")
B738DR_vol_int_ducker 		= find_dataref("laminar/b738/fmodpack/fmod_vol_int_ducker")
B738DR_vol_int_eng 			= find_dataref("laminar/b738/fmodpack/fmod_vol_int_eng")
B738DR_vol_int_start 		= find_dataref("laminar/b738/fmodpack/fmod_vol_int_start")
B738DR_vol_int_ac 			= find_dataref("laminar/b738/fmodpack/fmod_vol_int_ac")
B738DR_vol_int_gyro 		= find_dataref("laminar/b738/fmodpack/fmod_vol_int_gyro")
B738DR_vol_int_roll 		= find_dataref("laminar/b738/fmodpack/fmod_vol_int_roll")
B738DR_vol_int_bump 		= find_dataref("laminar/b738/fmodpack/fmod_vol_int_bump")
B738DR_vol_int_pax 			= find_dataref("laminar/b738/fmodpack/fmod_vol_int_pax")
B738DR_vol_int_pax_applause = find_dataref("laminar/b738/fmodpack/fmod_pax_applause_on")
--B738DR_vol_int_wind			= find_dataref("laminar/b738/fmodpack/fmod_vol_int_wind")
B738DR_enable_mutetrim		= find_dataref("laminar/b738/fmodpack/fmod_mutetrim_on")
B738DR_vol_airport			= find_dataref("laminar/b738/fmodpack/fmod_vol_airport")
B738DR_xp_int_vol			= create_dataref("laminar/b738/fmodpack/fmod_xp_int_vol", "number")
B738DR_vol_int_XP 			= find_dataref("sim/operation/sound/interior_volume_ratio")
B738DR_ann_set				= find_dataref("laminar/b738/fmodpack/fmod_announcement_set")

B738DR_enable_fmc_mute_on 	= find_dataref("laminar/b738/fmodpack/fmod_enable_fmc_mute_on")
B738DR_vol_PM 				= find_dataref("laminar/b738/fmodpack/fmod_vol_PM")
B738DR_vol_int_wind_vol 	= find_dataref("laminar/b738/fmodpack/fmod_vol_int_wind")
B738DR_vol_crew 			= find_dataref("laminar/b738/fmodpack/fmod_vol_crew")
B738DR_announcement_set 	= find_dataref("laminar/b738/fmodpack/fmod_announcement_set")
play_welcome_msg 			= find_dataref("laminar/b738/fmodpack/play_welcome_msg") 
play_cruise_msg 			= find_dataref("laminar/b738/fmodpack/play_cruise_msg") 
play_descent_msg 			= find_dataref("laminar/b738/fmodpack/play_descent_msg")
play_preland_msg 			= find_dataref("laminar/b738/fmodpack/play_preland_msg")
play_turbulence_msg 		= find_dataref("laminar/b738/fmodpack/play_turbulence_msg")
eq_high 					= find_dataref("laminar/b738/fmodpack/fmod_eq_high")
eq_mid 						= find_dataref("laminar/b738/fmodpack/fmod_eq_mid")
eq_low 						= find_dataref("laminar/b738/fmodpack/fmod_eq_low")
start_leg 					= find_dataref("laminar/b738/fmodpack/fmod_start_leg")
end_leg 					= find_dataref("laminar/b738/fmodpack/fmod_end_leg")
play_cargo 					= find_dataref("laminar/b738/fmodpack/fmod_play_cargo")
B738DR_vol_computer 		= find_dataref("laminar/b738/fmodpack/fmod_vol_computer")

B738DR_vol_FAC 				= find_dataref("laminar/b738/fmodpack/fmod_vol_FAC")
B738DR_vol_weather 			= find_dataref("laminar/b738/fmodpack/fmod_vol_weather")

--*************************************************************************************--
--** 				               FIND CUSTOM COMMANDS              			     **--
--*************************************************************************************--

-- FMOD by AudioBird XP
--B738CMD_enable_pax_boarding = find_command("laminar/b738/fmodpack/fmod_toggle_pax_boarding")
B738CMD_enable_pax_boarding = find_command("laminar/b738/fmodpack/pax_board")
B738CMD_enable_gyro 		= find_command("laminar/b738/fmodpack/fmod_woodpecker_on")
B738CMD_enable_crew			= find_command("laminar/b738/fmodpack/fmod_crew_on")
--B738CMD_enable_chatter 		= find_command("laminar/b738/fmodpack/fmod_chatter_on")
B738CMD_enable_chatter 		= find_command("laminar/b738/fmodpack/pax_talk")
B738CMD_airport_set 		= find_command("laminar/b738/fmodpack/fmod_airport_set")
B738CMD_vol_int_ducker 		= find_command("laminar/b738/fmodpack/fmod_vol_int_ducker")
B738CMD_vol_int_eng 		= find_command("laminar/b738/fmodpack/fmod_vol_int_eng")
B738CMD_vol_int_start 		= find_command("laminar/b738/fmodpack/fmod_vol_int_start")
B738CMD_vol_int_ac 			= find_command("laminar/b738/fmodpack/fmod_vol_int_ac")
B738CMD_vol_int_gyro 		= find_command("laminar/b738/fmodpack/fmod_vol_int_gyro")
B738CMD_vol_int_roll		= find_command("laminar/b738/fmodpack/fmod_vol_int_roll")
B738CMD_vol_int_bump		= find_command("laminar/b738/fmodpack/fmod_vol_int_bump")
B738CMD_vol_int_pax				= find_command("laminar/b738/fmodpack/fmod_vol_int_pax")
B738CMD_vol_int_pax_applause	= find_command("laminar/b738/fmodpack/fmod_pax_applause_on")
B738CMD_vol_int_wind			= find_command("laminar/b738/fmodpack/fmod_vol_int_wind")
B738CMD_enable_mutetrim 		= find_command("laminar/b738/fmodpack/fmod_mutetrim_on")
B738CMD_vol_int_XP			= find_command("laminar/b738/fmodpack/fmod_vol_int_XP")
B738CMD_vol_airport			= find_command("laminar/b738/fmodpack/fmod_vol_airport")
B738CMD_announcement_set 	= find_command("laminar/b738/fmodpack/fmod_announcement_set")

B738_eq_high 				= find_command("laminar/b738/fmodpack/fmod_eq_high")
B738_eq_mid 				= find_command("laminar/b738/fmodpack/fmod_eq_mid")
B738_eq_low 				= find_command("laminar/b738/fmodpack/fmod_eq_low")
B738_end_leg 				= find_command("laminar/b738/fmodpack/fmod_end_leg")
B738_start_leg 				= find_command("laminar/b738/fmodpack/fmod_start_leg")
B738CMD_play_cargo 			= find_command("laminar/b738/fmodpack/fmod_play_cargo")
B738CMD_vol_crew			= find_command("laminar/b738/fmodpack/fmod_vol_crew")	
B738CMD_vol_PM				= find_command("laminar/b738/fmodpack/fmod_vol_PM")	
B738CMD_play_welcome		= find_command("laminar/b738/fmodpack/play_welcome_msg")
B738CMD_play_cruise			= find_command("laminar/b738/fmodpack/play_cruise_msg")
B738CMD_play_descent		= find_command("laminar/b738/fmodpack/play_descent_msg")
B738CMD_play_preland		= find_command("laminar/b738/fmodpack/play_preland_msg")
B738CMD_play_turbulence		= find_command("laminar/b738/fmodpack/play_turbulence_msg")
B738CMD_enable_fmc_mute_on 	= find_command("laminar/b738/fmodpack/fmod_enable_fmc_mute_on")
B738CMD_vol_computer		= find_command("laminar/b738/fmodpack/fmod_vol_computer")

B738CMD_vol_FAC				= find_command("laminar/b738/fmodpack/fmod_vol_FAC")
B738CMD_vol_weather 		= find_command("laminar/b378/fmodpack/fmod_vol_weather")
--*************************************************************************************--
--** 				                X-PLANE DATAREFS            			    	 **--
--*************************************************************************************--



--*************************************************************************************--
--** 				        CREATE READ-ONLY CUSTOM DATAREFS               	         **--
--*************************************************************************************--
B738DR_freeze						= create_dataref("laminar/B738/fmc_freeze", "number")

-- CAPTAIN FMC
B738DR_fmc1_Line00_L                = create_dataref("laminar/B738/fmc1/Line00_L", "string")
B738DR_fmc1_Line01_L                = create_dataref("laminar/B738/fmc1/Line01_L", "string")
B738DR_fmc1_Line02_L                = create_dataref("laminar/B738/fmc1/Line02_L", "string")
B738DR_fmc1_Line03_L                = create_dataref("laminar/B738/fmc1/Line03_L", "string")
B738DR_fmc1_Line04_L                = create_dataref("laminar/B738/fmc1/Line04_L", "string")
B738DR_fmc1_Line05_L                = create_dataref("laminar/B738/fmc1/Line05_L", "string")
B738DR_fmc1_Line06_L                = create_dataref("laminar/B738/fmc1/Line06_L", "string")

B738DR_fmc1_Line00_S                = create_dataref("laminar/B738/fmc1/Line00_S", "string")
B738DR_fmc1_Line01_S                = create_dataref("laminar/B738/fmc1/Line01_S", "string")
B738DR_fmc1_Line02_S                = create_dataref("laminar/B738/fmc1/Line02_S", "string")
B738DR_fmc1_Line03_S                = create_dataref("laminar/B738/fmc1/Line03_S", "string")
B738DR_fmc1_Line04_S                = create_dataref("laminar/B738/fmc1/Line04_S", "string")
B738DR_fmc1_Line05_S                = create_dataref("laminar/B738/fmc1/Line05_S", "string")
B738DR_fmc1_Line06_S                = create_dataref("laminar/B738/fmc1/Line06_S", "string")

B738DR_fmc1_Line01_X                = create_dataref("laminar/B738/fmc1/Line01_X", "string")
B738DR_fmc1_Line02_X                = create_dataref("laminar/B738/fmc1/Line02_X", "string")
B738DR_fmc1_Line03_X                = create_dataref("laminar/B738/fmc1/Line03_X", "string")
B738DR_fmc1_Line04_X                = create_dataref("laminar/B738/fmc1/Line04_X", "string")
B738DR_fmc1_Line05_X                = create_dataref("laminar/B738/fmc1/Line05_X", "string")
B738DR_fmc1_Line06_X                = create_dataref("laminar/B738/fmc1/Line06_X", "string")

B738DR_fmc1_Line00_I                = create_dataref("laminar/B738/fmc1/Line00_I", "string")
B738DR_fmc1_Line01_I                = create_dataref("laminar/B738/fmc1/Line01_I", "string")
B738DR_fmc1_Line02_I                = create_dataref("laminar/B738/fmc1/Line02_I", "string")
B738DR_fmc1_Line03_I                = create_dataref("laminar/B738/fmc1/Line03_I", "string")
B738DR_fmc1_Line04_I                = create_dataref("laminar/B738/fmc1/Line04_I", "string")
B738DR_fmc1_Line05_I                = create_dataref("laminar/B738/fmc1/Line05_I", "string")
B738DR_fmc1_Line06_I                = create_dataref("laminar/B738/fmc1/Line06_I", "string")

B738DR_fmc1_Line00_M                = create_dataref("laminar/B738/fmc1/Line00_M", "string")
B738DR_fmc1_Line01_M                = create_dataref("laminar/B738/fmc1/Line01_M", "string")
B738DR_fmc1_Line02_M                = create_dataref("laminar/B738/fmc1/Line02_M", "string")
B738DR_fmc1_Line03_M                = create_dataref("laminar/B738/fmc1/Line03_M", "string")
B738DR_fmc1_Line04_M                = create_dataref("laminar/B738/fmc1/Line04_M", "string")
B738DR_fmc1_Line05_M                = create_dataref("laminar/B738/fmc1/Line05_M", "string")
B738DR_fmc1_Line06_M                = create_dataref("laminar/B738/fmc1/Line06_M", "string")

B738DR_fmc1_Line00_G                = create_dataref("laminar/B738/fmc1/Line00_G", "string")
B738DR_fmc1_Line01_G                = create_dataref("laminar/B738/fmc1/Line01_G", "string")
B738DR_fmc1_Line02_G                = create_dataref("laminar/B738/fmc1/Line02_G", "string")
B738DR_fmc1_Line03_G                = create_dataref("laminar/B738/fmc1/Line03_G", "string")
B738DR_fmc1_Line04_G                = create_dataref("laminar/B738/fmc1/Line04_G", "string")
B738DR_fmc1_Line05_G                = create_dataref("laminar/B738/fmc1/Line05_G", "string")
B738DR_fmc1_Line06_G                = create_dataref("laminar/B738/fmc1/Line06_G", "string")

B738DR_fmc1_Line_entry              = create_dataref("laminar/B738/fmc1/Line_entry", "string")
B738DR_fmc1_Line_entry_I            = create_dataref("laminar/B738/fmc1/Line_entry_I", "string")

-- FIRST OFFICER FMC
B738DR_fmc2_Line00_L                = create_dataref("laminar/B738/fmc2/Line00_L", "string")
B738DR_fmc2_Line01_L                = create_dataref("laminar/B738/fmc2/Line01_L", "string")
B738DR_fmc2_Line02_L                = create_dataref("laminar/B738/fmc2/Line02_L", "string")
B738DR_fmc2_Line03_L                = create_dataref("laminar/B738/fmc2/Line03_L", "string")
B738DR_fmc2_Line04_L                = create_dataref("laminar/B738/fmc2/Line04_L", "string")
B738DR_fmc2_Line05_L                = create_dataref("laminar/B738/fmc2/Line05_L", "string")
B738DR_fmc2_Line06_L                = create_dataref("laminar/B738/fmc2/Line06_L", "string")

B738DR_fmc2_Line00_S                = create_dataref("laminar/B738/fmc2/Line00_S", "string")
B738DR_fmc2_Line01_S                = create_dataref("laminar/B738/fmc2/Line01_S", "string")
B738DR_fmc2_Line02_S                = create_dataref("laminar/B738/fmc2/Line02_S", "string")
B738DR_fmc2_Line03_S                = create_dataref("laminar/B738/fmc2/Line03_S", "string")
B738DR_fmc2_Line04_S                = create_dataref("laminar/B738/fmc2/Line04_S", "string")
B738DR_fmc2_Line05_S                = create_dataref("laminar/B738/fmc2/Line05_S", "string")
B738DR_fmc2_Line06_S                = create_dataref("laminar/B738/fmc2/Line06_S", "string")

B738DR_fmc2_Line01_X                = create_dataref("laminar/B738/fmc2/Line01_X", "string")
B738DR_fmc2_Line02_X                = create_dataref("laminar/B738/fmc2/Line02_X", "string")
B738DR_fmc2_Line03_X                = create_dataref("laminar/B738/fmc2/Line03_X", "string")
B738DR_fmc2_Line04_X                = create_dataref("laminar/B738/fmc2/Line04_X", "string")
B738DR_fmc2_Line05_X                = create_dataref("laminar/B738/fmc2/Line05_X", "string")
B738DR_fmc2_Line06_X                = create_dataref("laminar/B738/fmc2/Line06_X", "string")

B738DR_fmc2_Line00_I                = create_dataref("laminar/B738/fmc2/Line00_I", "string")
B738DR_fmc2_Line01_I                = create_dataref("laminar/B738/fmc2/Line01_I", "string")
B738DR_fmc2_Line02_I                = create_dataref("laminar/B738/fmc2/Line02_I", "string")
B738DR_fmc2_Line03_I                = create_dataref("laminar/B738/fmc2/Line03_I", "string")
B738DR_fmc2_Line04_I                = create_dataref("laminar/B738/fmc2/Line04_I", "string")
B738DR_fmc2_Line05_I                = create_dataref("laminar/B738/fmc2/Line05_I", "string")
B738DR_fmc2_Line06_I                = create_dataref("laminar/B738/fmc2/Line06_I", "string")

B738DR_fmc2_Line00_M                = create_dataref("laminar/B738/fmc2/Line00_M", "string")
B738DR_fmc2_Line01_M                = create_dataref("laminar/B738/fmc2/Line01_M", "string")
B738DR_fmc2_Line02_M                = create_dataref("laminar/B738/fmc2/Line02_M", "string")
B738DR_fmc2_Line03_M                = create_dataref("laminar/B738/fmc2/Line03_M", "string")
B738DR_fmc2_Line04_M                = create_dataref("laminar/B738/fmc2/Line04_M", "string")
B738DR_fmc2_Line05_M                = create_dataref("laminar/B738/fmc2/Line05_M", "string")
B738DR_fmc2_Line06_M                = create_dataref("laminar/B738/fmc2/Line06_M", "string")

B738DR_fmc2_Line00_G                = create_dataref("laminar/B738/fmc2/Line00_G", "string")
B738DR_fmc2_Line01_G                = create_dataref("laminar/B738/fmc2/Line01_G", "string")
B738DR_fmc2_Line02_G                = create_dataref("laminar/B738/fmc2/Line02_G", "string")
B738DR_fmc2_Line03_G                = create_dataref("laminar/B738/fmc2/Line03_G", "string")
B738DR_fmc2_Line04_G                = create_dataref("laminar/B738/fmc2/Line04_G", "string")
B738DR_fmc2_Line05_G                = create_dataref("laminar/B738/fmc2/Line05_G", "string")
B738DR_fmc2_Line06_G                = create_dataref("laminar/B738/fmc2/Line06_G", "string")

B738DR_fmc2_Line_entry              = create_dataref("laminar/B738/fmc2/Line_entry", "string")
B738DR_fmc2_Line_entry_I            = create_dataref("laminar/B738/fmc2/Line_entry_I", "string")

--B7368DR_fmc1_show                   = create_dataref("laminar/B738/fmc1/fmc1_show", "number")

B738DR_fms_v1_set			= create_dataref("laminar/B738/FMS/v1_set", "number")
B738DR_fms_vr_set			= create_dataref("laminar/B738/FMS/vr_set", "number")
B738DR_fms_v2_set			= create_dataref("laminar/B738/FMS/v2_set", "number")

B738DR_calc_spd_enable		= create_dataref("laminar/B738/FMS/calc_spd_enable", "number")
B738DR_fmc_gw				= create_dataref("laminar/B738/FMS/fmc_gw", "number")
B738DR_fmc_gw_app			= create_dataref("laminar/B738/FMS/fmc_gw_app", "number")
B738DR_irs_pos_fmc			= create_dataref("laminar/B738/FMS/irs_pos_fmc", "number")

B738DR_irs_hdg_fmc			= create_dataref("laminar/B738/FMS/irs_hdg_fmc", "number")
B738DR_irs_hdg_fmc_set		= create_dataref("laminar/B738/FMS/irs_hdg_fmc_set", "string")
B738DR_irs2_hdg_fmc_set		= create_dataref("laminar/B738/FMS/irs2_hdg_fmc_set", "string")
B738DR_irs_pos_fmc_set		= create_dataref("laminar/B738/FMS/irs_pos_fmc_set", "string")
B738DR_irs2_pos_fmc_set		= create_dataref("laminar/B738/FMS/irs2_pos_fmc_set", "string")
B738DR_last_pos_str			= create_dataref("laminar/B738/FMS/last_pos_str", "string")


B738DR_fmc_units			= create_dataref("laminar/B738/FMS/fmc_units", "number")

B738DR_fmc_cg				= create_dataref("laminar/B738/FMS/fmc_cg", "number")
B738DR_fmc_sel_temp			= create_dataref("laminar/B738/FMS/fmc_sel_temp", "number")
B738DR_fmc_oat_temp			= create_dataref("laminar/B738/FMS/fmc_oat_temp", "number")

B738DR_fmc_rw_cond			= create_dataref("laminar/B738/FMS/fmc_rw_cond", "number")

B738DR_fms_N1_thrust		= create_dataref("laminar/B738/FMS/N1_mode_thrust", "number")
B738DR_fms_N1_mode			= create_dataref("laminar/B738/FMS/N1_mode", "number")
B738DR_fms_N1_to_sel		= create_dataref("laminar/B738/FMS/N1_mode_to_sel", "number")

B738DR_flight_phase			= create_dataref("laminar/B738/FMS/flight_phase", "number")
B738DR_climb_mode			= create_dataref("laminar/B738/FMS/climb_mode", "number")
B738DR_cruise_mode			= create_dataref("laminar/B738/FMS/cruise_mode", "number")
B738DR_descent_mode			= create_dataref("laminar/B738/FMS/descent_mode", "number")

B738DR_fms_exec_light_pilot		= create_dataref("laminar/B738/indicators/fms_exec_light_pilot", "number")
B738DR_fms_exec_light_copilot	= create_dataref("laminar/B738/indicators/fms_exec_light_copilot", "number")
-- new --
B738DR_fmc_exec_lights			= create_dataref("laminar/B738/indicators/fmc_exec_lights", "number")
B738DR_fmc_exec_lights_fo		= create_dataref("laminar/B738/indicators/fmc_exec_lights_fo", "number")

B738DR_autopilot_alt_interv_pos	= create_dataref("laminar/B738/autopilot/alt_interv_pos", "number")


B738DR_trans_alt			= create_dataref("laminar/B738/FMS/fmc_trans_alt", "number")
B738DR_trans_lvl			= create_dataref("laminar/B738/FMS/fmc_trans_lvl", "number")

B738DR_isa_dev_c			= create_dataref("laminar/B738/FMS/fmc_isa_dev_c", "number")

B738DR_takeoff_flaps_set	= create_dataref("laminar/B738/FMS/takeoff_flaps_set", "number")
B738DR_approach_flaps_set	= create_dataref("laminar/B738/FMS/approach_flaps_set", "number")
B738DR_trim_set				= create_dataref("laminar/B738/FMS/trim_set", "number")

B738DR_thr_red_alt			= create_dataref("laminar/B738/FMS/throttle_red_alt", "number")
B738DR_accel_alt			= create_dataref("laminar/B738/FMS/accel_height", "number")

B738DR_pfd_vert_path		= create_dataref("laminar/B738/pfd/pfd_vert_path", "number")
B738DR_pfd_vert_path_fo		= create_dataref("laminar/B738/pfd/pfd_vert_path_fo", "number")
B738DR_pfd_trk_path			= create_dataref("laminar/B738/pfd/pfd_trk_path", "number")
B738DR_pfd_trk_path_fo		= create_dataref("laminar/B738/pfd/pfd_trk_path_fo", "number")
B738DR_nd_vert_path			= create_dataref("laminar/B738/pfd/nd_vert_path", "number")

B738DR_nd_fac_horizontal	= create_dataref("laminar/B738/fms/pfd_fac_horizontal", "number")
B738DR_nd_fac_horizontal_fo	= create_dataref("laminar/B738/fms/pfd_fac_horizontal_fo", "number")

B738DR_autopilot_pfd_mode		= create_dataref("laminar/B738/autopilot/pfd_mode", "number")
B738DR_autopilot_pfd_mode_fo	= create_dataref("laminar/B738/autopilot/pfd_mode_fo", "number")

B738DR_fms_ils_disable		= create_dataref("laminar/B738/FMS/ils_disable", "number")
B738DR_align_time			= create_dataref("laminar/B738/FMS/align_time", "number")


-- FMOD SOUNDS DATAREFS
B738DR_fms_msg_sound		= create_dataref("laminar/B738/fmod/fms_message", "number")
B738DR_fms_key				= create_dataref("laminar/B738/fmod/fms_key", "number")

-- WAYPOINTs
B738DR_wpt_x	 		= create_dataref("laminar/B738/nd/wpt_x", "array[20]")
B738DR_wpt_y	 		= create_dataref("laminar/B738/nd/wpt_y", "array[20]")

--B738DR_wpt_idw 		= create_dataref("laminar/B738/nd/wpt_idw", "byte[10]")

B738DR_wpt_id00w 		= create_dataref("laminar/B738/nd/wpt_id00w", "string")
B738DR_wpt_alt00w 		= create_dataref("laminar/B738/nd/wpt_alt00w", "string")
B738DR_wpt_eta00w 		= create_dataref("laminar/B738/nd/wpt_eta00w", "string")
B738DR_wpt_id00m 		= create_dataref("laminar/B738/nd/wpt_id00m", "string")
B738DR_wpt_alt00m 		= create_dataref("laminar/B738/nd/wpt_alt00m", "string")
B738DR_wpt_eta00m 		= create_dataref("laminar/B738/nd/wpt_eta00m", "string")
B738DR_wpt_type00 		= create_dataref("laminar/B738/nd/wpt_type00", "number")

B738DR_wpt_id01w 		= create_dataref("laminar/B738/nd/wpt_id01w", "string")
B738DR_wpt_alt01w 		= create_dataref("laminar/B738/nd/wpt_alt01w", "string")
B738DR_wpt_eta01w 		= create_dataref("laminar/B738/nd/wpt_eta01w", "string")
B738DR_wpt_id01m 		= create_dataref("laminar/B738/nd/wpt_id01m", "string")
B738DR_wpt_alt01m 		= create_dataref("laminar/B738/nd/wpt_alt01m", "string")
B738DR_wpt_eta01m 		= create_dataref("laminar/B738/nd/wpt_eta01m", "string")
B738DR_wpt_type01 		= create_dataref("laminar/B738/nd/wpt_type01", "number")

B738DR_wpt_id02w 		= create_dataref("laminar/B738/nd/wpt_id02w", "string")
B738DR_wpt_alt02w 		= create_dataref("laminar/B738/nd/wpt_alt02w", "string")
B738DR_wpt_eta02w 		= create_dataref("laminar/B738/nd/wpt_eta02w", "string")
B738DR_wpt_id02m 		= create_dataref("laminar/B738/nd/wpt_id02m", "string")
B738DR_wpt_alt02m 		= create_dataref("laminar/B738/nd/wpt_alt02m", "string")
B738DR_wpt_eta02m 		= create_dataref("laminar/B738/nd/wpt_eta02m", "string")
B738DR_wpt_type02 		= create_dataref("laminar/B738/nd/wpt_type02", "number")

B738DR_wpt_id03w 		= create_dataref("laminar/B738/nd/wpt_id03w", "string")
B738DR_wpt_alt03w 		= create_dataref("laminar/B738/nd/wpt_alt03w", "string")
B738DR_wpt_eta03w 		= create_dataref("laminar/B738/nd/wpt_eta03w", "string")
B738DR_wpt_id03m 		= create_dataref("laminar/B738/nd/wpt_id03m", "string")
B738DR_wpt_alt03m 		= create_dataref("laminar/B738/nd/wpt_alt03m", "string")
B738DR_wpt_eta03m 		= create_dataref("laminar/B738/nd/wpt_eta03m", "string")
B738DR_wpt_type03 		= create_dataref("laminar/B738/nd/wpt_type03", "number")

B738DR_wpt_id04w 		= create_dataref("laminar/B738/nd/wpt_id04w", "string")
B738DR_wpt_alt04w 		= create_dataref("laminar/B738/nd/wpt_alt04w", "string")
B738DR_wpt_eta04w 		= create_dataref("laminar/B738/nd/wpt_eta04w", "string")
B738DR_wpt_id04m 		= create_dataref("laminar/B738/nd/wpt_id04m", "string")
B738DR_wpt_alt04m 		= create_dataref("laminar/B738/nd/wpt_alt04m", "string")
B738DR_wpt_eta04m 		= create_dataref("laminar/B738/nd/wpt_eta04m", "string")
B738DR_wpt_type04 		= create_dataref("laminar/B738/nd/wpt_type04", "number")

B738DR_wpt_id05w 		= create_dataref("laminar/B738/nd/wpt_id05w", "string")
B738DR_wpt_alt05w 		= create_dataref("laminar/B738/nd/wpt_alt05w", "string")
B738DR_wpt_eta05w 		= create_dataref("laminar/B738/nd/wpt_eta05w", "string")
B738DR_wpt_id05m 		= create_dataref("laminar/B738/nd/wpt_id05m", "string")
B738DR_wpt_alt05m 		= create_dataref("laminar/B738/nd/wpt_alt05m", "string")
B738DR_wpt_eta05m 		= create_dataref("laminar/B738/nd/wpt_eta05m", "string")
B738DR_wpt_type05 		= create_dataref("laminar/B738/nd/wpt_type05", "number")

B738DR_wpt_id06w 		= create_dataref("laminar/B738/nd/wpt_id06w", "string")
B738DR_wpt_alt06w 		= create_dataref("laminar/B738/nd/wpt_alt06w", "string")
B738DR_wpt_eta06w 		= create_dataref("laminar/B738/nd/wpt_eta06w", "string")
B738DR_wpt_id06m 		= create_dataref("laminar/B738/nd/wpt_id06m", "string")
B738DR_wpt_alt06m 		= create_dataref("laminar/B738/nd/wpt_alt06m", "string")
B738DR_wpt_eta06m 		= create_dataref("laminar/B738/nd/wpt_eta06m", "string")
B738DR_wpt_type06 		= create_dataref("laminar/B738/nd/wpt_type06", "number")

B738DR_wpt_id07w 		= create_dataref("laminar/B738/nd/wpt_id07w", "string")
B738DR_wpt_alt07w 		= create_dataref("laminar/B738/nd/wpt_alt07w", "string")
B738DR_wpt_eta07w 		= create_dataref("laminar/B738/nd/wpt_eta07w", "string")
B738DR_wpt_id07m 		= create_dataref("laminar/B738/nd/wpt_id07m", "string")
B738DR_wpt_alt07m 		= create_dataref("laminar/B738/nd/wpt_alt07m", "string")
B738DR_wpt_eta07m 		= create_dataref("laminar/B738/nd/wpt_eta07m", "string")
B738DR_wpt_type07 		= create_dataref("laminar/B738/nd/wpt_type07", "number")

B738DR_wpt_id08w 		= create_dataref("laminar/B738/nd/wpt_id08w", "string")
B738DR_wpt_alt08w 		= create_dataref("laminar/B738/nd/wpt_alt08w", "string")
B738DR_wpt_eta08w 		= create_dataref("laminar/B738/nd/wpt_eta08w", "string")
B738DR_wpt_id08m 		= create_dataref("laminar/B738/nd/wpt_id08m", "string")
B738DR_wpt_alt08m 		= create_dataref("laminar/B738/nd/wpt_alt08m", "string")
B738DR_wpt_eta08m 		= create_dataref("laminar/B738/nd/wpt_eta08m", "string")
B738DR_wpt_type08 		= create_dataref("laminar/B738/nd/wpt_type08", "number")

B738DR_wpt_id09w 		= create_dataref("laminar/B738/nd/wpt_id09w", "string")
B738DR_wpt_alt09w 		= create_dataref("laminar/B738/nd/wpt_alt09w", "string")
B738DR_wpt_eta09w 		= create_dataref("laminar/B738/nd/wpt_eta09w", "string")
B738DR_wpt_id09m 		= create_dataref("laminar/B738/nd/wpt_id09m", "string")
B738DR_wpt_alt09m 		= create_dataref("laminar/B738/nd/wpt_alt09m", "string")
B738DR_wpt_eta09m 		= create_dataref("laminar/B738/nd/wpt_eta09m", "string")
B738DR_wpt_type09 		= create_dataref("laminar/B738/nd/wpt_type09", "number")

B738DR_wpt_id10w 		= create_dataref("laminar/B738/nd/wpt_id10w", "string")
B738DR_wpt_alt10w 		= create_dataref("laminar/B738/nd/wpt_alt10w", "string")
B738DR_wpt_eta10w 		= create_dataref("laminar/B738/nd/wpt_eta10w", "string")
B738DR_wpt_id10m 		= create_dataref("laminar/B738/nd/wpt_id10m", "string")
B738DR_wpt_alt10m 		= create_dataref("laminar/B738/nd/wpt_alt10m", "string")
B738DR_wpt_eta10m 		= create_dataref("laminar/B738/nd/wpt_eta10m", "string")
B738DR_wpt_type10 		= create_dataref("laminar/B738/nd/wpt_type10", "number")

B738DR_wpt_id11w 		= create_dataref("laminar/B738/nd/wpt_id11w", "string")
B738DR_wpt_alt11w 		= create_dataref("laminar/B738/nd/wpt_alt11w", "string")
B738DR_wpt_eta11w 		= create_dataref("laminar/B738/nd/wpt_eta11w", "string")
B738DR_wpt_id11m 		= create_dataref("laminar/B738/nd/wpt_id11m", "string")
B738DR_wpt_alt11m 		= create_dataref("laminar/B738/nd/wpt_alt11m", "string")
B738DR_wpt_eta11m 		= create_dataref("laminar/B738/nd/wpt_eta11m", "string")
B738DR_wpt_type11 		= create_dataref("laminar/B738/nd/wpt_type11", "number")

B738DR_wpt_id12w 		= create_dataref("laminar/B738/nd/wpt_id12w", "string")
B738DR_wpt_alt12w 		= create_dataref("laminar/B738/nd/wpt_alt12w", "string")
B738DR_wpt_eta12w 		= create_dataref("laminar/B738/nd/wpt_eta12w", "string")
B738DR_wpt_id12m 		= create_dataref("laminar/B738/nd/wpt_id12m", "string")
B738DR_wpt_alt12m 		= create_dataref("laminar/B738/nd/wpt_alt12m", "string")
B738DR_wpt_eta12m 		= create_dataref("laminar/B738/nd/wpt_eta12m", "string")
B738DR_wpt_type12 		= create_dataref("laminar/B738/nd/wpt_type12", "number")

B738DR_wpt_id13w 		= create_dataref("laminar/B738/nd/wpt_id13w", "string")
B738DR_wpt_alt13w 		= create_dataref("laminar/B738/nd/wpt_alt13w", "string")
B738DR_wpt_eta13w 		= create_dataref("laminar/B738/nd/wpt_eta13w", "string")
B738DR_wpt_id13m 		= create_dataref("laminar/B738/nd/wpt_id13m", "string")
B738DR_wpt_alt13m 		= create_dataref("laminar/B738/nd/wpt_alt13m", "string")
B738DR_wpt_eta13m 		= create_dataref("laminar/B738/nd/wpt_eta13m", "string")
B738DR_wpt_type13 		= create_dataref("laminar/B738/nd/wpt_type13", "number")

B738DR_wpt_id14w 		= create_dataref("laminar/B738/nd/wpt_id14w", "string")
B738DR_wpt_alt14w 		= create_dataref("laminar/B738/nd/wpt_alt14w", "string")
B738DR_wpt_eta14w 		= create_dataref("laminar/B738/nd/wpt_eta14w", "string")
B738DR_wpt_id14m 		= create_dataref("laminar/B738/nd/wpt_id14m", "string")
B738DR_wpt_alt14m 		= create_dataref("laminar/B738/nd/wpt_alt14m", "string")
B738DR_wpt_eta14m 		= create_dataref("laminar/B738/nd/wpt_eta14m", "string")
B738DR_wpt_type14 		= create_dataref("laminar/B738/nd/wpt_type14", "number")

B738DR_wpt_id15w 		= create_dataref("laminar/B738/nd/wpt_id15w", "string")
B738DR_wpt_alt15w 		= create_dataref("laminar/B738/nd/wpt_alt15w", "string")
B738DR_wpt_eta15w 		= create_dataref("laminar/B738/nd/wpt_eta15w", "string")
B738DR_wpt_id15m 		= create_dataref("laminar/B738/nd/wpt_id15m", "string")
B738DR_wpt_alt15m 		= create_dataref("laminar/B738/nd/wpt_alt15m", "string")
B738DR_wpt_eta15m 		= create_dataref("laminar/B738/nd/wpt_eta15m", "string")
B738DR_wpt_type15 		= create_dataref("laminar/B738/nd/wpt_type15", "number")

B738DR_wpt_id16w 		= create_dataref("laminar/B738/nd/wpt_id16w", "string")
B738DR_wpt_alt16w 		= create_dataref("laminar/B738/nd/wpt_alt16w", "string")
B738DR_wpt_eta16w 		= create_dataref("laminar/B738/nd/wpt_eta16w", "string")
B738DR_wpt_id16m 		= create_dataref("laminar/B738/nd/wpt_id16m", "string")
B738DR_wpt_alt16m 		= create_dataref("laminar/B738/nd/wpt_alt16m", "string")
B738DR_wpt_eta16m 		= create_dataref("laminar/B738/nd/wpt_eta16m", "string")
B738DR_wpt_type16 		= create_dataref("laminar/B738/nd/wpt_type16", "number")

B738DR_wpt_id17w 		= create_dataref("laminar/B738/nd/wpt_id17w", "string")
B738DR_wpt_alt17w 		= create_dataref("laminar/B738/nd/wpt_alt17w", "string")
B738DR_wpt_eta17w 		= create_dataref("laminar/B738/nd/wpt_eta17w", "string")
B738DR_wpt_id17m 		= create_dataref("laminar/B738/nd/wpt_id17m", "string")
B738DR_wpt_alt17m 		= create_dataref("laminar/B738/nd/wpt_alt17m", "string")
B738DR_wpt_eta17m 		= create_dataref("laminar/B738/nd/wpt_eta17m", "string")
B738DR_wpt_type17 		= create_dataref("laminar/B738/nd/wpt_type17", "number")

B738DR_wpt_id18w 		= create_dataref("laminar/B738/nd/wpt_id18w", "string")
B738DR_wpt_alt18w 		= create_dataref("laminar/B738/nd/wpt_alt18w", "string")
B738DR_wpt_eta18w 		= create_dataref("laminar/B738/nd/wpt_eta18w", "string")
B738DR_wpt_id18m 		= create_dataref("laminar/B738/nd/wpt_id18m", "string")
B738DR_wpt_alt18m 		= create_dataref("laminar/B738/nd/wpt_alt18m", "string")
B738DR_wpt_eta18m 		= create_dataref("laminar/B738/nd/wpt_eta18m", "string")
B738DR_wpt_type18 		= create_dataref("laminar/B738/nd/wpt_type18", "number")

B738DR_wpt_id19w 		= create_dataref("laminar/B738/nd/wpt_id19w", "string")
B738DR_wpt_alt19w 		= create_dataref("laminar/B738/nd/wpt_alt19w", "string")
B738DR_wpt_eta19w 		= create_dataref("laminar/B738/nd/wpt_eta19w", "string")
B738DR_wpt_id19m 		= create_dataref("laminar/B738/nd/wpt_id19m", "string")
B738DR_wpt_alt19m 		= create_dataref("laminar/B738/nd/wpt_alt19m", "string")
B738DR_wpt_eta19m 		= create_dataref("laminar/B738/nd/wpt_eta19m", "string")
B738DR_wpt_type19 		= create_dataref("laminar/B738/nd/wpt_type19", "number")


-- NAVAIDs and FIXs

B738DR_nd_object_x = 	create_dataref("laminar/B738/nd/object_x", "array[50]")
B738DR_nd_object_y = 	create_dataref("laminar/B738/nd/object_y", "array[50]")

B738DR_nd_object_id00 = create_dataref("laminar/B738/nd/object_id00", "string")
B738DR_nd_object_id01 = create_dataref("laminar/B738/nd/object_id01", "string")
B738DR_nd_object_id02 = create_dataref("laminar/B738/nd/object_id02", "string")
B738DR_nd_object_id03 = create_dataref("laminar/B738/nd/object_id03", "string")
B738DR_nd_object_id04 = create_dataref("laminar/B738/nd/object_id04", "string")
B738DR_nd_object_id05 = create_dataref("laminar/B738/nd/object_id05", "string")
B738DR_nd_object_id06 = create_dataref("laminar/B738/nd/object_id06", "string")
B738DR_nd_object_id07 = create_dataref("laminar/B738/nd/object_id07", "string")
B738DR_nd_object_id08 = create_dataref("laminar/B738/nd/object_id08", "string")
B738DR_nd_object_id09 = create_dataref("laminar/B738/nd/object_id09", "string")
B738DR_nd_object_id10 = create_dataref("laminar/B738/nd/object_id10", "string")
B738DR_nd_object_id11 = create_dataref("laminar/B738/nd/object_id11", "string")
B738DR_nd_object_id12 = create_dataref("laminar/B738/nd/object_id12", "string")
B738DR_nd_object_id13 = create_dataref("laminar/B738/nd/object_id13", "string")
B738DR_nd_object_id14 = create_dataref("laminar/B738/nd/object_id14", "string")
B738DR_nd_object_id15 = create_dataref("laminar/B738/nd/object_id15", "string")
B738DR_nd_object_id16 = create_dataref("laminar/B738/nd/object_id16", "string")
B738DR_nd_object_id17 = create_dataref("laminar/B738/nd/object_id17", "string")
B738DR_nd_object_id18 = create_dataref("laminar/B738/nd/object_id18", "string")
B738DR_nd_object_id19 = create_dataref("laminar/B738/nd/object_id19", "string")
B738DR_nd_object_id20 = create_dataref("laminar/B738/nd/object_id20", "string")
B738DR_nd_object_id21 = create_dataref("laminar/B738/nd/object_id21", "string")
B738DR_nd_object_id22 = create_dataref("laminar/B738/nd/object_id22", "string")
B738DR_nd_object_id23 = create_dataref("laminar/B738/nd/object_id23", "string")
B738DR_nd_object_id24 = create_dataref("laminar/B738/nd/object_id24", "string")
B738DR_nd_object_id25 = create_dataref("laminar/B738/nd/object_id25", "string")
B738DR_nd_object_id26 = create_dataref("laminar/B738/nd/object_id26", "string")
B738DR_nd_object_id27 = create_dataref("laminar/B738/nd/object_id27", "string")
B738DR_nd_object_id28 = create_dataref("laminar/B738/nd/object_id28", "string")
B738DR_nd_object_id29 = create_dataref("laminar/B738/nd/object_id29", "string")
B738DR_nd_object_id30 = create_dataref("laminar/B738/nd/object_id30", "string")
B738DR_nd_object_id31 = create_dataref("laminar/B738/nd/object_id31", "string")
B738DR_nd_object_id32 = create_dataref("laminar/B738/nd/object_id32", "string")
B738DR_nd_object_id33 = create_dataref("laminar/B738/nd/object_id33", "string")
B738DR_nd_object_id34 = create_dataref("laminar/B738/nd/object_id34", "string")
B738DR_nd_object_id35 = create_dataref("laminar/B738/nd/object_id35", "string")
B738DR_nd_object_id36 = create_dataref("laminar/B738/nd/object_id36", "string")
B738DR_nd_object_id37 = create_dataref("laminar/B738/nd/object_id37", "string")
B738DR_nd_object_id38 = create_dataref("laminar/B738/nd/object_id38", "string")
B738DR_nd_object_id39 = create_dataref("laminar/B738/nd/object_id39", "string")
B738DR_nd_object_id40 = create_dataref("laminar/B738/nd/object_id40", "string")
B738DR_nd_object_id41 = create_dataref("laminar/B738/nd/object_id41", "string")
B738DR_nd_object_id42 = create_dataref("laminar/B738/nd/object_id42", "string")
B738DR_nd_object_id43 = create_dataref("laminar/B738/nd/object_id43", "string")
B738DR_nd_object_id44 = create_dataref("laminar/B738/nd/object_id44", "string")
B738DR_nd_object_id45 = create_dataref("laminar/B738/nd/object_id45", "string")
B738DR_nd_object_id46 = create_dataref("laminar/B738/nd/object_id46", "string")
B738DR_nd_object_id47 = create_dataref("laminar/B738/nd/object_id47", "string")
B738DR_nd_object_id48 = create_dataref("laminar/B738/nd/object_id48", "string")
B738DR_nd_object_id49 = create_dataref("laminar/B738/nd/object_id49", "string")


B738DR_nd_object_id00w = create_dataref("laminar/B738/nd/object_id00w", "string")
B738DR_nd_object_id01w = create_dataref("laminar/B738/nd/object_id01w", "string")
B738DR_nd_object_id02w = create_dataref("laminar/B738/nd/object_id02w", "string")
B738DR_nd_object_id03w = create_dataref("laminar/B738/nd/object_id03w", "string")
B738DR_nd_object_id04w = create_dataref("laminar/B738/nd/object_id04w", "string")
B738DR_nd_object_id05w = create_dataref("laminar/B738/nd/object_id05w", "string")
B738DR_nd_object_id06w = create_dataref("laminar/B738/nd/object_id06w", "string")
B738DR_nd_object_id07w = create_dataref("laminar/B738/nd/object_id07w", "string")
B738DR_nd_object_id08w = create_dataref("laminar/B738/nd/object_id08w", "string")
B738DR_nd_object_id09w = create_dataref("laminar/B738/nd/object_id09w", "string")
B738DR_nd_object_id10w = create_dataref("laminar/B738/nd/object_id10w", "string")
B738DR_nd_object_id11w = create_dataref("laminar/B738/nd/object_id11w", "string")
B738DR_nd_object_id12w = create_dataref("laminar/B738/nd/object_id12w", "string")
B738DR_nd_object_id13w = create_dataref("laminar/B738/nd/object_id13w", "string")
B738DR_nd_object_id14w = create_dataref("laminar/B738/nd/object_id14w", "string")
B738DR_nd_object_id15w = create_dataref("laminar/B738/nd/object_id15w", "string")
B738DR_nd_object_id16w = create_dataref("laminar/B738/nd/object_id16w", "string")
B738DR_nd_object_id17w = create_dataref("laminar/B738/nd/object_id17w", "string")
B738DR_nd_object_id18w = create_dataref("laminar/B738/nd/object_id18w", "string")
B738DR_nd_object_id19w = create_dataref("laminar/B738/nd/object_id19w", "string")
B738DR_nd_object_id20w = create_dataref("laminar/B738/nd/object_id20w", "string")
B738DR_nd_object_id21w = create_dataref("laminar/B738/nd/object_id21w", "string")
B738DR_nd_object_id22w = create_dataref("laminar/B738/nd/object_id22w", "string")
B738DR_nd_object_id23w = create_dataref("laminar/B738/nd/object_id23w", "string")
B738DR_nd_object_id24w = create_dataref("laminar/B738/nd/object_id24w", "string")
B738DR_nd_object_id25w = create_dataref("laminar/B738/nd/object_id25w", "string")
B738DR_nd_object_id26w = create_dataref("laminar/B738/nd/object_id26w", "string")
B738DR_nd_object_id27w = create_dataref("laminar/B738/nd/object_id27w", "string")
B738DR_nd_object_id28w = create_dataref("laminar/B738/nd/object_id28w", "string")
B738DR_nd_object_id29w = create_dataref("laminar/B738/nd/object_id29w", "string")
B738DR_nd_object_id30w = create_dataref("laminar/B738/nd/object_id30w", "string")
B738DR_nd_object_id31w = create_dataref("laminar/B738/nd/object_id31w", "string")
B738DR_nd_object_id32w = create_dataref("laminar/B738/nd/object_id32w", "string")
B738DR_nd_object_id33w = create_dataref("laminar/B738/nd/object_id33w", "string")
B738DR_nd_object_id34w = create_dataref("laminar/B738/nd/object_id34w", "string")
B738DR_nd_object_id35w = create_dataref("laminar/B738/nd/object_id35w", "string")
B738DR_nd_object_id36w = create_dataref("laminar/B738/nd/object_id36w", "string")
B738DR_nd_object_id37w = create_dataref("laminar/B738/nd/object_id37w", "string")
B738DR_nd_object_id38w = create_dataref("laminar/B738/nd/object_id38w", "string")
B738DR_nd_object_id39w = create_dataref("laminar/B738/nd/object_id39w", "string")
B738DR_nd_object_id40w = create_dataref("laminar/B738/nd/object_id40w", "string")
B738DR_nd_object_id41w = create_dataref("laminar/B738/nd/object_id41w", "string")
B738DR_nd_object_id42w = create_dataref("laminar/B738/nd/object_id42w", "string")
B738DR_nd_object_id43w = create_dataref("laminar/B738/nd/object_id43w", "string")
B738DR_nd_object_id44w = create_dataref("laminar/B738/nd/object_id44w", "string")
B738DR_nd_object_id45w = create_dataref("laminar/B738/nd/object_id45w", "string")
B738DR_nd_object_id46w = create_dataref("laminar/B738/nd/object_id46w", "string")
B738DR_nd_object_id47w = create_dataref("laminar/B738/nd/object_id47w", "string")
B738DR_nd_object_id48w = create_dataref("laminar/B738/nd/object_id48w", "string")
B738DR_nd_object_id49w = create_dataref("laminar/B738/nd/object_id49w", "string")


B738DR_nd_object_type00 = create_dataref("laminar/B738/nd/object_type00", "number")
B738DR_nd_object_type01 = create_dataref("laminar/B738/nd/object_type01", "number")
B738DR_nd_object_type02 = create_dataref("laminar/B738/nd/object_type02", "number")
B738DR_nd_object_type03 = create_dataref("laminar/B738/nd/object_type03", "number")
B738DR_nd_object_type04 = create_dataref("laminar/B738/nd/object_type04", "number")
B738DR_nd_object_type05 = create_dataref("laminar/B738/nd/object_type05", "number")
B738DR_nd_object_type06 = create_dataref("laminar/B738/nd/object_type06", "number")
B738DR_nd_object_type07 = create_dataref("laminar/B738/nd/object_type07", "number")
B738DR_nd_object_type08 = create_dataref("laminar/B738/nd/object_type08", "number")
B738DR_nd_object_type09 = create_dataref("laminar/B738/nd/object_type09", "number")
B738DR_nd_object_type10 = create_dataref("laminar/B738/nd/object_type10", "number")
B738DR_nd_object_type11 = create_dataref("laminar/B738/nd/object_type11", "number")
B738DR_nd_object_type12 = create_dataref("laminar/B738/nd/object_type12", "number")
B738DR_nd_object_type13 = create_dataref("laminar/B738/nd/object_type13", "number")
B738DR_nd_object_type14 = create_dataref("laminar/B738/nd/object_type14", "number")
B738DR_nd_object_type15 = create_dataref("laminar/B738/nd/object_type15", "number")
B738DR_nd_object_type16 = create_dataref("laminar/B738/nd/object_type16", "number")
B738DR_nd_object_type17 = create_dataref("laminar/B738/nd/object_type17", "number")
B738DR_nd_object_type18 = create_dataref("laminar/B738/nd/object_type18", "number")
B738DR_nd_object_type19 = create_dataref("laminar/B738/nd/object_type19", "number")
B738DR_nd_object_type20 = create_dataref("laminar/B738/nd/object_type20", "number")
B738DR_nd_object_type21 = create_dataref("laminar/B738/nd/object_type21", "number")
B738DR_nd_object_type22 = create_dataref("laminar/B738/nd/object_type22", "number")
B738DR_nd_object_type23 = create_dataref("laminar/B738/nd/object_type23", "number")
B738DR_nd_object_type24 = create_dataref("laminar/B738/nd/object_type24", "number")
B738DR_nd_object_type25 = create_dataref("laminar/B738/nd/object_type25", "number")
B738DR_nd_object_type26 = create_dataref("laminar/B738/nd/object_type26", "number")
B738DR_nd_object_type27 = create_dataref("laminar/B738/nd/object_type27", "number")
B738DR_nd_object_type28 = create_dataref("laminar/B738/nd/object_type28", "number")
B738DR_nd_object_type29 = create_dataref("laminar/B738/nd/object_type29", "number")
B738DR_nd_object_type30 = create_dataref("laminar/B738/nd/object_type30", "number")
B738DR_nd_object_type31 = create_dataref("laminar/B738/nd/object_type31", "number")
B738DR_nd_object_type32 = create_dataref("laminar/B738/nd/object_type32", "number")
B738DR_nd_object_type33 = create_dataref("laminar/B738/nd/object_type33", "number")
B738DR_nd_object_type34 = create_dataref("laminar/B738/nd/object_type34", "number")
B738DR_nd_object_type35 = create_dataref("laminar/B738/nd/object_type35", "number")
B738DR_nd_object_type36 = create_dataref("laminar/B738/nd/object_type36", "number")
B738DR_nd_object_type37 = create_dataref("laminar/B738/nd/object_type37", "number")
B738DR_nd_object_type38 = create_dataref("laminar/B738/nd/object_type38", "number")
B738DR_nd_object_type39 = create_dataref("laminar/B738/nd/object_type39", "number")
B738DR_nd_object_type40 = create_dataref("laminar/B738/nd/object_type40", "number")
B738DR_nd_object_type41 = create_dataref("laminar/B738/nd/object_type41", "number")
B738DR_nd_object_type42 = create_dataref("laminar/B738/nd/object_type42", "number")
B738DR_nd_object_type43 = create_dataref("laminar/B738/nd/object_type43", "number")
B738DR_nd_object_type44 = create_dataref("laminar/B738/nd/object_type44", "number")
B738DR_nd_object_type45 = create_dataref("laminar/B738/nd/object_type45", "number")
B738DR_nd_object_type46 = create_dataref("laminar/B738/nd/object_type46", "number")
B738DR_nd_object_type47 = create_dataref("laminar/B738/nd/object_type47", "number")
B738DR_nd_object_type48 = create_dataref("laminar/B738/nd/object_type48", "number")
B738DR_nd_object_type49 = create_dataref("laminar/B738/nd/object_type49", "number")




-- ROUTEs
B738DR_rte_x	 		= create_dataref("laminar/B738/nd/rte_x", "array[20]")
B738DR_rte_y	 		= create_dataref("laminar/B738/nd/rte_y", "array[20]")
B738DR_rte_rot	 		= create_dataref("laminar/B738/nd/rte_rot", "array[20]")
B738DR_rte_dist	 		= create_dataref("laminar/B738/nd/rte_dist", "array[20]")
B738DR_rte_show			= create_dataref("laminar/B738/nd/rte_show", "array[20]")
B738DR_rte_edit 			= create_dataref("laminar/B738/nd/rte_edit", "array[20]")
--B738DR_rte_type			= create_dataref("laminar/B738/nd/rte_type", "array[20]")

B738DR_rte_x_act	 	= create_dataref("laminar/B738/nd/rte_x_act", "number")
B738DR_rte_y_act	 	= create_dataref("laminar/B738/nd/rte_y_act", "number")
B738DR_rte_rot_act	 	= create_dataref("laminar/B738/nd/rte_rot_act", "number")
B738DR_rte_dist_act	 	= create_dataref("laminar/B738/nd/rte_dist_act", "number")
B738DR_rte_show_act		= create_dataref("laminar/B738/nd/rte_show_act", "number")
--B738DR_rte_edit_act		= create_dataref("laminar/B738/nd/rte_edit_act", "number")

B738DR_rte_edit_x_act	 	= create_dataref("laminar/B738/nd/rte_edit_x_act", "number")
B738DR_rte_edit_y_act	 	= create_dataref("laminar/B738/nd/rte_edit_y_act", "number")
B738DR_rte_edit_rot_act	 	= create_dataref("laminar/B738/nd/rte_edit_rot_act", "number")
B738DR_rte_edit_dist_act	= create_dataref("laminar/B738/nd/rte_edit_dist_act", "number")
B738DR_rte_edit_show_act	= create_dataref("laminar/B738/nd/rte_edit_show_act", "number")
B738DR_rte_edit_type_act	= create_dataref("laminar/B738/nd/rte_edit_type_act", "number")

-- T/C
B738DR_tc_x 			= create_dataref("laminar/B738/nd/tc_x", "number")
B738DR_tc_y 			= create_dataref("laminar/B738/nd/tc_y", "number")
B738DR_tc_id 			= create_dataref("laminar/B738/nd/tc_id", "string")
B738DR_tc_show 			= create_dataref("laminar/B738/nd/tc_show", "number")
B738DR_tc_lat			= create_dataref("laminar/B738/nd/tc_lat", "number")
B738DR_tc_lon			= create_dataref("laminar/B738/nd/tc_lon", "number")

-- T/D
B738DR_td_x 			= create_dataref("laminar/B738/nd/td_x", "number")
B738DR_td_y 			= create_dataref("laminar/B738/nd/td_y", "number")
B738DR_td_id 			= create_dataref("laminar/B738/nd/td_id", "string")
B738DR_td_show 			= create_dataref("laminar/B738/nd/td_show", "number")
B738DR_td_lat			= create_dataref("laminar/B738/nd/td_lat", "number")
B738DR_td_lon			= create_dataref("laminar/B738/nd/td_lon", "number")


-- DECEL
B738DR_decel_x 			= create_dataref("laminar/B738/nd/decel_x", "number")
B738DR_decel_y 			= create_dataref("laminar/B738/nd/decel_y", "number")
B738DR_decel_id 		= create_dataref("laminar/B738/nd/decel_id", "string")
B738DR_decel_show 		= create_dataref("laminar/B738/nd/decel_show", "number")
B738DR_decel_lat		= create_dataref("laminar/B738/nd/decel_lat", "number")
B738DR_decel_lon		= create_dataref("laminar/B738/nd/decel_lon", "number")


-- FIX
B738DR_fix_show			= create_dataref("laminar/B738/nd/fix_show", "array[5]")
B738DR_fix_x			= create_dataref("laminar/B738/nd/fix_x", "array[5]")
B738DR_fix_y			= create_dataref("laminar/B738/nd/fix_y", "array[5]")
B738DR_fix_type			= create_dataref("laminar/B738/nd/fix_type", "array[5]")
B738DR_fix_rot_0		= create_dataref("laminar/B738/nd/fix_rot_0", "array[5]")
B738DR_fix_rot_1		= create_dataref("laminar/B738/nd/fix_rot_1", "array[5]")
B738DR_fix_rot_2		= create_dataref("laminar/B738/nd/fix_rot_2", "array[5]")
B738DR_fix_dist_0		= create_dataref("laminar/B738/nd/fix_dist_0", "array[5]")
B738DR_fix_dist_1		= create_dataref("laminar/B738/nd/fix_dist_1", "array[5]")
B738DR_fix_dist_2		= create_dataref("laminar/B738/nd/fix_dist_2", "array[5]")
B738DR_fix_id00			= create_dataref("laminar/B738/nd/fix_id00", "string")
B738DR_fix_id01			= create_dataref("laminar/B738/nd/fix_id01", "string")
B738DR_fix_id02			= create_dataref("laminar/B738/nd/fix_id02", "string")
B738DR_fix_id03			= create_dataref("laminar/B738/nd/fix_id03", "string")
B738DR_fix_id04			= create_dataref("laminar/B738/nd/fix_id04", "string")
B738DR_fix_rad_dist_0	= create_dataref("laminar/B738/nd/fix_rad_dist_0", "array[5]")
B738DR_fix_rad_dist_1	= create_dataref("laminar/B738/nd/fix_rad_dist_1", "array[5]")
B738DR_fix_rad_dist_2	= create_dataref("laminar/B738/nd/fix_rad_dist_2", "array[5]")
B738DR_fix_rad00_0		= create_dataref("laminar/B738/nd/fix_rad00_0", "string")
B738DR_fix_rad00_1		= create_dataref("laminar/B738/nd/fix_rad00_1", "string")
B738DR_fix_rad00_2		= create_dataref("laminar/B738/nd/fix_rad00_2", "string")
B738DR_fix_rad01_0		= create_dataref("laminar/B738/nd/fix_rad01_0", "string")
B738DR_fix_rad01_1		= create_dataref("laminar/B738/nd/fix_rad01_1", "string")
B738DR_fix_rad01_2		= create_dataref("laminar/B738/nd/fix_rad01_2", "string")
B738DR_fix_rad02_0		= create_dataref("laminar/B738/nd/fix_rad02_0", "string")
B738DR_fix_rad02_1		= create_dataref("laminar/B738/nd/fix_rad02_1", "string")
B738DR_fix_rad02_2		= create_dataref("laminar/B738/nd/fix_rad02_2", "string")
B738DR_fix_rad03_0		= create_dataref("laminar/B738/nd/fix_rad03_0", "string")
B738DR_fix_rad03_1		= create_dataref("laminar/B738/nd/fix_rad03_1", "string")
B738DR_fix_rad03_2		= create_dataref("laminar/B738/nd/fix_rad03_2", "string")
B738DR_fix_rad04_0		= create_dataref("laminar/B738/nd/fix_rad04_0", "string")
B738DR_fix_rad04_1		= create_dataref("laminar/B738/nd/fix_rad04_1", "string")
B738DR_fix_rad04_2		= create_dataref("laminar/B738/nd/fix_rad04_2", "string")

-- FIX First Officer
B738DR_fix_fo_show			= create_dataref("laminar/B738/nd/fix_fo_show", "array[5]")
B738DR_fix_fo_x				= create_dataref("laminar/B738/nd/fix_fo_x", "array[5]")
B738DR_fix_fo_y				= create_dataref("laminar/B738/nd/fix_fo_y", "array[5]")
B738DR_fix_fo_type			= create_dataref("laminar/B738/nd/fix_fo_type", "array[5]")
B738DR_fix_fo_rot_0			= create_dataref("laminar/B738/nd/fix_fo_rot_0", "array[5]")
B738DR_fix_fo_rot_1			= create_dataref("laminar/B738/nd/fix_fo_rot_1", "array[5]")
B738DR_fix_fo_rot_2			= create_dataref("laminar/B738/nd/fix_fo_rot_2", "array[5]")
B738DR_fix_fo_dist_0		= create_dataref("laminar/B738/nd/fix_fo_dist_0", "array[5]")
B738DR_fix_fo_dist_1		= create_dataref("laminar/B738/nd/fix_fo_dist_1", "array[5]")
B738DR_fix_fo_dist_2		= create_dataref("laminar/B738/nd/fix_fo_dist_2", "array[5]")
B738DR_fix_fo_id00			= create_dataref("laminar/B738/nd/fix_fo_id00", "string")
B738DR_fix_fo_id01			= create_dataref("laminar/B738/nd/fix_fo_id01", "string")
B738DR_fix_fo_id02			= create_dataref("laminar/B738/nd/fix_fo_id02", "string")
B738DR_fix_fo_id03			= create_dataref("laminar/B738/nd/fix_fo_id03", "string")
B738DR_fix_fo_id04			= create_dataref("laminar/B738/nd/fix_fo_id04", "string")
B738DR_fix_fo_rad_dist_0	= create_dataref("laminar/B738/nd/fix_fo_rad_dist_0", "array[5]")
B738DR_fix_fo_rad_dist_1	= create_dataref("laminar/B738/nd/fix_fo_rad_dist_1", "array[5]")
B738DR_fix_fo_rad_dist_2	= create_dataref("laminar/B738/nd/fix_fo_rad_dist_2", "array[5]")
B738DR_fix_fo_rad00_0		= create_dataref("laminar/B738/nd/fix_fo_rad00_0", "string")
B738DR_fix_fo_rad00_1		= create_dataref("laminar/B738/nd/fix_fo_rad00_1", "string")
B738DR_fix_fo_rad00_2		= create_dataref("laminar/B738/nd/fix_fo_rad00_2", "string")
B738DR_fix_fo_rad01_0		= create_dataref("laminar/B738/nd/fix_fo_rad01_0", "string")
B738DR_fix_fo_rad01_1		= create_dataref("laminar/B738/nd/fix_fo_rad01_1", "string")
B738DR_fix_fo_rad01_2		= create_dataref("laminar/B738/nd/fix_fo_rad01_2", "string")
B738DR_fix_fo_rad02_0		= create_dataref("laminar/B738/nd/fix_fo_rad02_0", "string")
B738DR_fix_fo_rad02_1		= create_dataref("laminar/B738/nd/fix_fo_rad02_1", "string")
B738DR_fix_fo_rad02_2		= create_dataref("laminar/B738/nd/fix_fo_rad02_2", "string")
B738DR_fix_fo_rad03_0		= create_dataref("laminar/B738/nd/fix_fo_rad03_0", "string")
B738DR_fix_fo_rad03_1		= create_dataref("laminar/B738/nd/fix_fo_rad03_1", "string")
B738DR_fix_fo_rad03_2		= create_dataref("laminar/B738/nd/fix_fo_rad03_2", "string")
B738DR_fix_fo_rad04_0		= create_dataref("laminar/B738/nd/fix_fo_rad04_0", "string")
B738DR_fix_fo_rad04_1		= create_dataref("laminar/B738/nd/fix_fo_rad04_1", "string")
B738DR_fix_fo_rad04_2		= create_dataref("laminar/B738/nd/fix_fo_rad04_2", "string")


B738DR_acf_show 			= create_dataref("laminar/B738/nd/acf_show", "number")
B738DR_acf_x 				= create_dataref("laminar/B738/nd/acf_x", "number")
B738DR_acf_y 				= create_dataref("laminar/B738/nd/acf_y", "number")
B738DR_acf_rot 				= create_dataref("laminar/B738/nd/acf_rot", "number")

B738DR_acf_fo_show			= create_dataref("laminar/B738/nd/acf_fo_show", "number")
B738DR_acf_x_fo 			= create_dataref("laminar/B738/nd/acf_x_fo", "number")
B738DR_acf_y_fo 			= create_dataref("laminar/B738/nd/acf_y_fo", "number")
B738DR_acf_rot_fo			= create_dataref("laminar/B738/nd/acf_rot_fo", "number")

B738DR_rest_wpt_spd_id 		= create_dataref("laminar/B738/fms/rest_wpt_spd_id", "string")
B738DR_rest_wpt_spd 		= create_dataref("laminar/B738/fms/rest_wpt_spd", "number")
B738DR_rest_wpt_spd_idx		= create_dataref("laminar/B738/fms/rest_wpt_spd_idx", "number")

B738DR_rest_wpt_alt_id 		= create_dataref("laminar/B738/fms/rest_wpt_alt_id", "string")
B738DR_rest_wpt_alt 		= create_dataref("laminar/B738/fms/rest_wpt_alt", "number")
B738DR_rest_wpt_alt_t 		= create_dataref("laminar/B738/fms/rest_wpt_alt_t", "number")
B738DR_rest_wpt_alt_idx		= create_dataref("laminar/B738/fms/rest_wpt_alt_idx", "number")
B738DR_rest_wpt_alt_dist	= create_dataref("laminar/B738/fms/rest_wpt_alt_dist", "number")

B738DR_calc_wpt_spd 		= create_dataref("laminar/B738/fms/calc_wpt_spd", "number")
B738DR_calc_wpt_alt 		= create_dataref("laminar/B738/fms/calc_wpt_alt", "number")

id_ed						= create_dataref("laminar/B738/fms/id_ed", "string")
idx_ed						= create_dataref("laminar/B738/fms/idx_ed", "number")
alt_ed 						= create_dataref("laminar/B738/fms/alt_ed", "number")
alt_type_ed 				= create_dataref("laminar/B738/fms/alt_type_ed", "number")
ed_dist						= create_dataref("laminar/B738/fms/ed_dist", "number")
td_dist						= create_dataref("laminar/B738/fms/td_dist", "number")

ed_alt						= create_dataref("laminar/B738/fms/ed_alt", "number")
ed_found					= create_dataref("laminar/B738/fms/ed_idx", "number")
ed_to_dist					= create_dataref("laminar/B738/fms/ed_to_dist", "number")
ed_vpa						= create_dataref("laminar/B738/fms/ed_vpa", "number")


-- AUTOPILOT
offset						= create_dataref("laminar/B738/fms/vnav_idx", "number")
--B738DR_lnav_dist_next		= create_dataref("laminar/B738/fms/lnav_dist_next", "number")
simDR_fmc_dist				= create_dataref("laminar/B738/fms/lnav_dist_next", "number")
simDR_fmc_dist2				= create_dataref("laminar/B738/fms/lnav_dist2_next", "number")
simDR_fmc_crs				= create_dataref("laminar/B738/fms/gps_course_degtm", "number")
simDR_fmc_trk				= create_dataref("laminar/B738/fms/gps_track_degtm", "number")
simDR_fmc_trk2				= create_dataref("laminar/B738/fms/gps_track2_degtm", "number")
B738DR_fpln_active			= create_dataref("laminar/B738/fms/fpln_acive", "number")
B738DR_fpln_active_fo		= create_dataref("laminar/B738/fms/fpln_acive_fo", "number")
B738DR_fpln_nav_id			= create_dataref("laminar/B738/fms/fpln_nav_id", "string")
B738DR_xtrack				= create_dataref("laminar/B738/fms/xtrack", "number")
simDR_fmc_trk_turn			= create_dataref("laminar/B738/fms/gps_track_turn", "number")
simDR_fmc_trk_turn2			= create_dataref("laminar/B738/fms/gps_track_turn2", "number")
B738DR_wpt_path				= create_dataref("laminar/B738/fms/gps_wpt_path", "string")
B738DR_rnp					= create_dataref("laminar/B738/fms/rnp", "number")
B738DR_anp					= create_dataref("laminar/B738/fms/anp", "number")
B738DR_fmc_bank_angle		= create_dataref("laminar/B738/fms/bank_angle", "number")
B738DR_radii_turn_act		= create_dataref("laminar/B738/fms/radii_turn_act", "number")
B738DR_radii_correct		= create_dataref("laminar/B738/fms/radii_correct", "number")
legs_intdir_act				= create_dataref("laminar/B738/fms/intdir_act", "number")
nav_mode					= create_dataref("laminar/B738/fms/nav_mode", "number")

td_idx 						= create_dataref("laminar/B738/fms/vnav_td_idx", "number")
tc_idx						= create_dataref("laminar/B738/fms/vnav_tc_idx", "number")
decel_idx					= create_dataref("laminar/B738/fms/vnav_decel_idx", "number")
decel_before_idx			= create_dataref("laminar/B738/fms/vnav_decel_before_idx", "number")
decel_dist					= create_dataref("laminar/B738/fms/vnav_decel_dist", "number")
tc_dist						= create_dataref("laminar/B738/fms/vnav_tc_dist", "number")

td_fix_dist 				= create_dataref("laminar/B738/fms/vnav_td_fix_dist", "number")
td_fix_idx 					= create_dataref("laminar/B738/fms/vnav_td_fix_idx", "number")
ed_fix_found				= create_dataref("laminar/B738/fms/vnav_td_fix_ed", "number")
ed_fix_alt					= create_dataref("laminar/B738/fms/vnav_td_fix_alt", "number")
ed_fix_num					= create_dataref("laminar/B738/fms/vnav_ed_fix_num", "number")


B738DR_vnav_td_dist 		= create_dataref("laminar/B738/fms/vnav_td_dist", "number")
B738DR_vnav_pth_alt			= create_dataref("laminar/B738/fms/vnav_pth_alt", "number")
B738DR_vnav_alt_err			= create_dataref("laminar/B738/fms/vnav_alt_err", "number")
B738DR_vnav_vvi				= create_dataref("laminar/B738/fms/vnav_vvi", "number")
B738DR_vnav_vvi_corr		= create_dataref("laminar/B738/fms/vnav_vvi_corr", "number")
B738DR_vnav_err_pfd			= create_dataref("laminar/B738/fms/vnav_err_pfd", "number")
B738DR_vnav_pth_show		= create_dataref("laminar/B738/fms/vnav_pth_show", "number")


B738DR_gp_vvi				= create_dataref("laminar/B738/fms/gp_vvi", "number")
B738DR_gp_vvi_corr			= create_dataref("laminar/B738/fms/gp_vvi_corr", "number")
B738DR_gp_err_pfd			= create_dataref("laminar/B738/fms/gp_err_pfd", "number")
B738DR_gp_alt_err 			= create_dataref("laminar/B738/fms/gp_alt_err", "number")
B738DR_gp_pth_alt 			= create_dataref("laminar/B738/fms/gp_pth_alt", "number")
B738DR_fac_xtrack			= create_dataref("laminar/B738/fms/fac_xtrack", "number")
B738DR_fac_trk				= create_dataref("laminar/B738/fms/fac_trk", "number")
B738DR_pfd_gp_path			= create_dataref("laminar/B738/fms/pfd_gp_path", "number")


calc_to_time 				= create_dataref("laminar/B738/fms/calc_to_time", "number")

B738DR_rnav_enable			= create_dataref("laminar/B738/fms/rnav_enable", "number")
rnav_idx_first				= create_dataref("laminar/B738/fms/rnav_idx_first", "number")
rnav_idx_last				= create_dataref("laminar/B738/fms/rnav_idx_last", "number")
rnav_alt					= create_dataref("laminar/B738/fms/rnav_alt", "number")
rnav_vpa					= create_dataref("laminar/B738/fms/rnav_vpa", "number")

B738DR_gp_active			= create_dataref("laminar/B738/fms/vnav_gp_active", "number")
B738DR_vnav_app_active		= create_dataref("laminar/B738/fms/vnav_app_active", "number")

B738DR_missed_app_alt		= create_dataref("laminar/B738/fms/missed_app_alt", "number")
B738DR_missed_app_act		= create_dataref("laminar/B738/fms/missed_app_act", "number")
first_miss_app_idx 			= create_dataref("laminar/B738/fms/missed_app_wpt_idx", "number")

--des_icao					= create_dataref("laminar/B738/fms/des_icao", "string")
-- ils_id						= create_dataref("laminar/B738/fms/ils_id", "string")
-- ils_freq					= find_dataref("laminar/B738/fms/ils_freq")
-- ils_course				= find_dataref("laminar/B738/fms/ils_course")

--navaid					= create_dataref("laminar/B738/fms/navaid", "string")


B738DR_bank_angle		= create_dataref("laminar/B738/FMS/bank_angle", "number")

B738DR_fms_id_eta		= create_dataref("laminar/B738/fms/id_eta", "string")
B738DR_end_route		= create_dataref("laminar/B738/fms/end_route", "number")
B738DR_no_perf			= create_dataref("laminar/B738/fms/no_perf", "number")


B738DR_pause_td			= create_dataref("laminar/B738/fms/pause_td", "number")
B738DR_lock_idle_thrust	= create_dataref("laminar/B738/fms/lock_idle_thrust", "number")
B738DR_engine_no_running_state = create_dataref("laminar/B738/fms/engine_no_running_state", "number")
B738DR_parkbrake_remove_chock = create_dataref("laminar/B738/fms/parkbrake_remove_chock", "number")
B738DR_toe_brakes_ovr	= create_dataref("laminar/B738/fms/toe_brakes_ovr", "number")
B738DR_throttle_noise	= create_dataref("laminar/B738/fms/throttle_noise", "number")
B738DR_fuelgauge		= create_dataref("laminar/B738/effects/fuelgauge", "number")
B738DR_nosewheel		= create_dataref("laminar/B738/effects/nosewheel", "number")
B738DR_fpln_format		= create_dataref("laminar/B738/fms/fpln_format", "number")
B738DR_track_up			= create_dataref("laminar/B738/fms/track_up", "number")
B738DR_sync_baro		= create_dataref("laminar/B738/fms/sync_baro", "number")

B738_legs_num			= create_dataref("laminar/B738/vnav/legs_num", "number")
B738_legs_num_before	= create_dataref("laminar/B738/vnav/legs_num_before", "number")
B738_legs_num_first		= create_dataref("laminar/B738/vnav/legs_num_first", "number")

B738DR_fpln_dist		= create_dataref("laminar/B738/FMS/fpln_dist", "number")
dist_dest				= create_dataref("laminar/B738/FMS/dist_dest", "number")
time_dest				= create_dataref("laminar/B738/FMS/time_dest", "string")

B738DR_vnav_desc_spd_disable = create_dataref("laminar/B738/fms/vnav_desc_spd_disable", "number")

B738DR_fmc_message 		= create_dataref("laminar/B738/fmc/fmc_message", "number")
B738DR_fmc_message_warn = create_dataref("laminar/B738/fmc/fmc_message_warn", "number")

pfd_cpt_nav_txt1		= create_dataref("laminar/B738/pfd/cpt_nav_txt1", "string")
pfd_cpt_nav_txt2		= create_dataref("laminar/B738/pfd/cpt_nav_txt2", "string")
pfd_fo_nav_txt1			= create_dataref("laminar/B738/pfd/fo_nav_txt1", "string")
pfd_fo_nav_txt2			= create_dataref("laminar/B738/pfd/fo_nav_txt2", "string")

B738DR_rw_wind_dir		= create_dataref("laminar/B738/fms/rw_wind_dir", "number")
B738DR_rw_wind_spd		= create_dataref("laminar/B738/fms/rw_wind_spd", "number")
B738DR_rw_slope			= create_dataref("laminar/B738/fms/rw_slope", "number")
B738DR_rw_hdg			= create_dataref("laminar/B738/fms/rw_hdg", "number")


B738DR_ils_rotate	 	= create_dataref("laminar/B738/pfd/ils_rotate", "number")
B738DR_ils_x	 		= create_dataref("laminar/B738/pfd/ils_x", "number")
B738DR_ils_y	 		= create_dataref("laminar/B738/pfd/ils_y", "number")
B738DR_ils_runway 		= create_dataref("laminar/B738/pfd/ils_runway", "string")
B738DR_ils_show	 		= create_dataref("laminar/B738/pfd/ils_show", "number")
B738DR_ils_copilot_show	= create_dataref("laminar/B738/pfd/ils_copilot_show", "number")

B738DR_ils_rotate0	 		= create_dataref("laminar/B738/pfd/ils_rotate0", "number")
B738DR_ils_x0	 			= create_dataref("laminar/B738/pfd/ils_x0", "number")
B738DR_ils_y0	 			= create_dataref("laminar/B738/pfd/ils_y0", "number")
B738DR_ils_runway0 			= create_dataref("laminar/B738/pfd/ils_runway0", "string")
B738DR_ils_show0	 		= create_dataref("laminar/B738/pfd/ils_show0", "number")
B738DR_ils_copilot_show0	= create_dataref("laminar/B738/pfd/ils_copilot_show0", "number")

-- AIRPORTs
B738DR_apt_obj		 		= create_dataref("laminar/B738/nd/apt_enable", "array[30]")
B738DR_apt_x 				= create_dataref("laminar/B738/nd/apt_x", "array[30]")
B738DR_apt_y 				= create_dataref("laminar/B738/nd/apt_y", "array[30]")
B738DR_apt_id00				= create_dataref("laminar/B738/nd/apt_id00", "string")
B738DR_apt_id01				= create_dataref("laminar/B738/nd/apt_id01", "string")
B738DR_apt_id02				= create_dataref("laminar/B738/nd/apt_id02", "string")
B738DR_apt_id03				= create_dataref("laminar/B738/nd/apt_id03", "string")
B738DR_apt_id04				= create_dataref("laminar/B738/nd/apt_id04", "string")
B738DR_apt_id05				= create_dataref("laminar/B738/nd/apt_id05", "string")
B738DR_apt_id06				= create_dataref("laminar/B738/nd/apt_id06", "string")
B738DR_apt_id07				= create_dataref("laminar/B738/nd/apt_id07", "string")
B738DR_apt_id08				= create_dataref("laminar/B738/nd/apt_id08", "string")
B738DR_apt_id09				= create_dataref("laminar/B738/nd/apt_id09", "string")
B738DR_apt_id10				= create_dataref("laminar/B738/nd/apt_id10", "string")
B738DR_apt_id11				= create_dataref("laminar/B738/nd/apt_id11", "string")
B738DR_apt_id12				= create_dataref("laminar/B738/nd/apt_id12", "string")
B738DR_apt_id13				= create_dataref("laminar/B738/nd/apt_id13", "string")
B738DR_apt_id14				= create_dataref("laminar/B738/nd/apt_id14", "string")
B738DR_apt_id15				= create_dataref("laminar/B738/nd/apt_id15", "string")
B738DR_apt_id16				= create_dataref("laminar/B738/nd/apt_id16", "string")
B738DR_apt_id17				= create_dataref("laminar/B738/nd/apt_id17", "string")
B738DR_apt_id18				= create_dataref("laminar/B738/nd/apt_id18", "string")
B738DR_apt_id19				= create_dataref("laminar/B738/nd/apt_id19", "string")
B738DR_apt_id20				= create_dataref("laminar/B738/nd/apt_id20", "string")
B738DR_apt_id21				= create_dataref("laminar/B738/nd/apt_id21", "string")
B738DR_apt_id22				= create_dataref("laminar/B738/nd/apt_id22", "string")
B738DR_apt_id23				= create_dataref("laminar/B738/nd/apt_id23", "string")
B738DR_apt_id24				= create_dataref("laminar/B738/nd/apt_id24", "string")
B738DR_apt_id25				= create_dataref("laminar/B738/nd/apt_id25", "string")
B738DR_apt_id26				= create_dataref("laminar/B738/nd/apt_id26", "string")
B738DR_apt_id27				= create_dataref("laminar/B738/nd/apt_id27", "string")
B738DR_apt_id28				= create_dataref("laminar/B738/nd/apt_id28", "string")
B738DR_apt_id29				= create_dataref("laminar/B738/nd/apt_id29", "string")

-- AIRPORTs
B738DR_apt_fo_obj		 		= create_dataref("laminar/B738/nd/apt_fo_enable", "array[30]")
B738DR_apt_fo_x 				= create_dataref("laminar/B738/nd/apt_fo_x", "array[30]")
B738DR_apt_fo_y 				= create_dataref("laminar/B738/nd/apt_fo_y", "array[30]")
B738DR_apt_fo_id00				= create_dataref("laminar/B738/nd/apt_fo_id00", "string")
B738DR_apt_fo_id01				= create_dataref("laminar/B738/nd/apt_fo_id01", "string")
B738DR_apt_fo_id02				= create_dataref("laminar/B738/nd/apt_fo_id02", "string")
B738DR_apt_fo_id03				= create_dataref("laminar/B738/nd/apt_fo_id03", "string")
B738DR_apt_fo_id04				= create_dataref("laminar/B738/nd/apt_fo_id04", "string")
B738DR_apt_fo_id05				= create_dataref("laminar/B738/nd/apt_fo_id05", "string")
B738DR_apt_fo_id06				= create_dataref("laminar/B738/nd/apt_fo_id06", "string")
B738DR_apt_fo_id07				= create_dataref("laminar/B738/nd/apt_fo_id07", "string")
B738DR_apt_fo_id08				= create_dataref("laminar/B738/nd/apt_fo_id08", "string")
B738DR_apt_fo_id09				= create_dataref("laminar/B738/nd/apt_fo_id09", "string")
B738DR_apt_fo_id10				= create_dataref("laminar/B738/nd/apt_fo_id10", "string")
B738DR_apt_fo_id11				= create_dataref("laminar/B738/nd/apt_fo_id11", "string")
B738DR_apt_fo_id12				= create_dataref("laminar/B738/nd/apt_fo_id12", "string")
B738DR_apt_fo_id13				= create_dataref("laminar/B738/nd/apt_fo_id13", "string")
B738DR_apt_fo_id14				= create_dataref("laminar/B738/nd/apt_fo_id14", "string")
B738DR_apt_fo_id15				= create_dataref("laminar/B738/nd/apt_fo_id15", "string")
B738DR_apt_fo_id16				= create_dataref("laminar/B738/nd/apt_fo_id16", "string")
B738DR_apt_fo_id17				= create_dataref("laminar/B738/nd/apt_fo_id17", "string")
B738DR_apt_fo_id18				= create_dataref("laminar/B738/nd/apt_fo_id18", "string")
B738DR_apt_fo_id19				= create_dataref("laminar/B738/nd/apt_fo_id19", "string")
B738DR_apt_fo_id20				= create_dataref("laminar/B738/nd/apt_fo_id20", "string")
B738DR_apt_fo_id21				= create_dataref("laminar/B738/nd/apt_fo_id21", "string")
B738DR_apt_fo_id22				= create_dataref("laminar/B738/nd/apt_fo_id22", "string")
B738DR_apt_fo_id23				= create_dataref("laminar/B738/nd/apt_fo_id23", "string")
B738DR_apt_fo_id24				= create_dataref("laminar/B738/nd/apt_fo_id24", "string")
B738DR_apt_fo_id25				= create_dataref("laminar/B738/nd/apt_fo_id25", "string")
B738DR_apt_fo_id26				= create_dataref("laminar/B738/nd/apt_fo_id26", "string")
B738DR_apt_fo_id27				= create_dataref("laminar/B738/nd/apt_fo_id27", "string")
B738DR_apt_fo_id28				= create_dataref("laminar/B738/nd/apt_fo_id28", "string")
B738DR_apt_fo_id29				= create_dataref("laminar/B738/nd/apt_fo_id29", "string")

-- NAVAIDs and FIXs
B738DR_nd_object_fo_x = 	create_dataref("laminar/B738/nd/object_fo_x", "array[50]")
B738DR_nd_object_fo_y = 	create_dataref("laminar/B738/nd/object_fo_y", "array[50]")

B738DR_nd_object_fo_id00 = create_dataref("laminar/B738/nd/object_fo_id00", "string")
B738DR_nd_object_fo_id01 = create_dataref("laminar/B738/nd/object_fo_id01", "string")
B738DR_nd_object_fo_id02 = create_dataref("laminar/B738/nd/object_fo_id02", "string")
B738DR_nd_object_fo_id03 = create_dataref("laminar/B738/nd/object_fo_id03", "string")
B738DR_nd_object_fo_id04 = create_dataref("laminar/B738/nd/object_fo_id04", "string")
B738DR_nd_object_fo_id05 = create_dataref("laminar/B738/nd/object_fo_id05", "string")
B738DR_nd_object_fo_id06 = create_dataref("laminar/B738/nd/object_fo_id06", "string")
B738DR_nd_object_fo_id07 = create_dataref("laminar/B738/nd/object_fo_id07", "string")
B738DR_nd_object_fo_id08 = create_dataref("laminar/B738/nd/object_fo_id08", "string")
B738DR_nd_object_fo_id09 = create_dataref("laminar/B738/nd/object_fo_id09", "string")
B738DR_nd_object_fo_id10 = create_dataref("laminar/B738/nd/object_fo_id10", "string")
B738DR_nd_object_fo_id11 = create_dataref("laminar/B738/nd/object_fo_id11", "string")
B738DR_nd_object_fo_id12 = create_dataref("laminar/B738/nd/object_fo_id12", "string")
B738DR_nd_object_fo_id13 = create_dataref("laminar/B738/nd/object_fo_id13", "string")
B738DR_nd_object_fo_id14 = create_dataref("laminar/B738/nd/object_fo_id14", "string")
B738DR_nd_object_fo_id15 = create_dataref("laminar/B738/nd/object_fo_id15", "string")
B738DR_nd_object_fo_id16 = create_dataref("laminar/B738/nd/object_fo_id16", "string")
B738DR_nd_object_fo_id17 = create_dataref("laminar/B738/nd/object_fo_id17", "string")
B738DR_nd_object_fo_id18 = create_dataref("laminar/B738/nd/object_fo_id18", "string")
B738DR_nd_object_fo_id19 = create_dataref("laminar/B738/nd/object_fo_id19", "string")
B738DR_nd_object_fo_id20 = create_dataref("laminar/B738/nd/object_fo_id20", "string")
B738DR_nd_object_fo_id21 = create_dataref("laminar/B738/nd/object_fo_id21", "string")
B738DR_nd_object_fo_id22 = create_dataref("laminar/B738/nd/object_fo_id22", "string")
B738DR_nd_object_fo_id23 = create_dataref("laminar/B738/nd/object_fo_id23", "string")
B738DR_nd_object_fo_id24 = create_dataref("laminar/B738/nd/object_fo_id24", "string")
B738DR_nd_object_fo_id25 = create_dataref("laminar/B738/nd/object_fo_id25", "string")
B738DR_nd_object_fo_id26 = create_dataref("laminar/B738/nd/object_fo_id26", "string")
B738DR_nd_object_fo_id27 = create_dataref("laminar/B738/nd/object_fo_id27", "string")
B738DR_nd_object_fo_id28 = create_dataref("laminar/B738/nd/object_fo_id28", "string")
B738DR_nd_object_fo_id29 = create_dataref("laminar/B738/nd/object_fo_id29", "string")
B738DR_nd_object_fo_id30 = create_dataref("laminar/B738/nd/object_fo_id30", "string")
B738DR_nd_object_fo_id31 = create_dataref("laminar/B738/nd/object_fo_id31", "string")
B738DR_nd_object_fo_id32 = create_dataref("laminar/B738/nd/object_fo_id32", "string")
B738DR_nd_object_fo_id33 = create_dataref("laminar/B738/nd/object_fo_id33", "string")
B738DR_nd_object_fo_id34 = create_dataref("laminar/B738/nd/object_fo_id34", "string")
B738DR_nd_object_fo_id35 = create_dataref("laminar/B738/nd/object_fo_id35", "string")
B738DR_nd_object_fo_id36 = create_dataref("laminar/B738/nd/object_fo_id36", "string")
B738DR_nd_object_fo_id37 = create_dataref("laminar/B738/nd/object_fo_id37", "string")
B738DR_nd_object_fo_id38 = create_dataref("laminar/B738/nd/object_fo_id38", "string")
B738DR_nd_object_fo_id39 = create_dataref("laminar/B738/nd/object_fo_id39", "string")
B738DR_nd_object_fo_id40 = create_dataref("laminar/B738/nd/object_fo_id40", "string")
B738DR_nd_object_fo_id41 = create_dataref("laminar/B738/nd/object_fo_id41", "string")
B738DR_nd_object_fo_id42 = create_dataref("laminar/B738/nd/object_fo_id42", "string")
B738DR_nd_object_fo_id43 = create_dataref("laminar/B738/nd/object_fo_id43", "string")
B738DR_nd_object_fo_id44 = create_dataref("laminar/B738/nd/object_fo_id44", "string")
B738DR_nd_object_fo_id45 = create_dataref("laminar/B738/nd/object_fo_id45", "string")
B738DR_nd_object_fo_id46 = create_dataref("laminar/B738/nd/object_fo_id46", "string")
B738DR_nd_object_fo_id47 = create_dataref("laminar/B738/nd/object_fo_id47", "string")
B738DR_nd_object_fo_id48 = create_dataref("laminar/B738/nd/object_fo_id48", "string")
B738DR_nd_object_fo_id49 = create_dataref("laminar/B738/nd/object_fo_id49", "string")


B738DR_nd_object_fo_id00w = create_dataref("laminar/B738/nd/object_fo_id00w", "string")
B738DR_nd_object_fo_id01w = create_dataref("laminar/B738/nd/object_fo_id01w", "string")
B738DR_nd_object_fo_id02w = create_dataref("laminar/B738/nd/object_fo_id02w", "string")
B738DR_nd_object_fo_id03w = create_dataref("laminar/B738/nd/object_fo_id03w", "string")
B738DR_nd_object_fo_id04w = create_dataref("laminar/B738/nd/object_fo_id04w", "string")
B738DR_nd_object_fo_id05w = create_dataref("laminar/B738/nd/object_fo_id05w", "string")
B738DR_nd_object_fo_id06w = create_dataref("laminar/B738/nd/object_fo_id06w", "string")
B738DR_nd_object_fo_id07w = create_dataref("laminar/B738/nd/object_fo_id07w", "string")
B738DR_nd_object_fo_id08w = create_dataref("laminar/B738/nd/object_fo_id08w", "string")
B738DR_nd_object_fo_id09w = create_dataref("laminar/B738/nd/object_fo_id09w", "string")
B738DR_nd_object_fo_id10w = create_dataref("laminar/B738/nd/object_fo_id10w", "string")
B738DR_nd_object_fo_id11w = create_dataref("laminar/B738/nd/object_fo_id11w", "string")
B738DR_nd_object_fo_id12w = create_dataref("laminar/B738/nd/object_fo_id12w", "string")
B738DR_nd_object_fo_id13w = create_dataref("laminar/B738/nd/object_fo_id13w", "string")
B738DR_nd_object_fo_id14w = create_dataref("laminar/B738/nd/object_fo_id14w", "string")
B738DR_nd_object_fo_id15w = create_dataref("laminar/B738/nd/object_fo_id15w", "string")
B738DR_nd_object_fo_id16w = create_dataref("laminar/B738/nd/object_fo_id16w", "string")
B738DR_nd_object_fo_id17w = create_dataref("laminar/B738/nd/object_fo_id17w", "string")
B738DR_nd_object_fo_id18w = create_dataref("laminar/B738/nd/object_fo_id18w", "string")
B738DR_nd_object_fo_id19w = create_dataref("laminar/B738/nd/object_fo_id19w", "string")
B738DR_nd_object_fo_id20w = create_dataref("laminar/B738/nd/object_fo_id20w", "string")
B738DR_nd_object_fo_id21w = create_dataref("laminar/B738/nd/object_fo_id21w", "string")
B738DR_nd_object_fo_id22w = create_dataref("laminar/B738/nd/object_fo_id22w", "string")
B738DR_nd_object_fo_id23w = create_dataref("laminar/B738/nd/object_fo_id23w", "string")
B738DR_nd_object_fo_id24w = create_dataref("laminar/B738/nd/object_fo_id24w", "string")
B738DR_nd_object_fo_id25w = create_dataref("laminar/B738/nd/object_fo_id25w", "string")
B738DR_nd_object_fo_id26w = create_dataref("laminar/B738/nd/object_fo_id26w", "string")
B738DR_nd_object_fo_id27w = create_dataref("laminar/B738/nd/object_fo_id27w", "string")
B738DR_nd_object_fo_id28w = create_dataref("laminar/B738/nd/object_fo_id28w", "string")
B738DR_nd_object_fo_id29w = create_dataref("laminar/B738/nd/object_fo_id29w", "string")
B738DR_nd_object_fo_id30w = create_dataref("laminar/B738/nd/object_fo_id30w", "string")
B738DR_nd_object_fo_id31w = create_dataref("laminar/B738/nd/object_fo_id31w", "string")
B738DR_nd_object_fo_id32w = create_dataref("laminar/B738/nd/object_fo_id32w", "string")
B738DR_nd_object_fo_id33w = create_dataref("laminar/B738/nd/object_fo_id33w", "string")
B738DR_nd_object_fo_id34w = create_dataref("laminar/B738/nd/object_fo_id34w", "string")
B738DR_nd_object_fo_id35w = create_dataref("laminar/B738/nd/object_fo_id35w", "string")
B738DR_nd_object_fo_id36w = create_dataref("laminar/B738/nd/object_fo_id36w", "string")
B738DR_nd_object_fo_id37w = create_dataref("laminar/B738/nd/object_fo_id37w", "string")
B738DR_nd_object_fo_id38w = create_dataref("laminar/B738/nd/object_fo_id38w", "string")
B738DR_nd_object_fo_id39w = create_dataref("laminar/B738/nd/object_fo_id39w", "string")
B738DR_nd_object_fo_id40w = create_dataref("laminar/B738/nd/object_fo_id40w", "string")
B738DR_nd_object_fo_id41w = create_dataref("laminar/B738/nd/object_fo_id41w", "string")
B738DR_nd_object_fo_id42w = create_dataref("laminar/B738/nd/object_fo_id42w", "string")
B738DR_nd_object_fo_id43w = create_dataref("laminar/B738/nd/object_fo_id43w", "string")
B738DR_nd_object_fo_id44w = create_dataref("laminar/B738/nd/object_fo_id44w", "string")
B738DR_nd_object_fo_id45w = create_dataref("laminar/B738/nd/object_fo_id45w", "string")
B738DR_nd_object_fo_id46w = create_dataref("laminar/B738/nd/object_fo_id46w", "string")
B738DR_nd_object_fo_id47w = create_dataref("laminar/B738/nd/object_fo_id47w", "string")
B738DR_nd_object_fo_id48w = create_dataref("laminar/B738/nd/object_fo_id48w", "string")
B738DR_nd_object_fo_id49w = create_dataref("laminar/B738/nd/object_fo_id49w", "string")


B738DR_nd_object_fo_type00 = create_dataref("laminar/B738/nd/object_fo_type00", "number")
B738DR_nd_object_fo_type01 = create_dataref("laminar/B738/nd/object_fo_type01", "number")
B738DR_nd_object_fo_type02 = create_dataref("laminar/B738/nd/object_fo_type02", "number")
B738DR_nd_object_fo_type03 = create_dataref("laminar/B738/nd/object_fo_type03", "number")
B738DR_nd_object_fo_type04 = create_dataref("laminar/B738/nd/object_fo_type04", "number")
B738DR_nd_object_fo_type05 = create_dataref("laminar/B738/nd/object_fo_type05", "number")
B738DR_nd_object_fo_type06 = create_dataref("laminar/B738/nd/object_fo_type06", "number")
B738DR_nd_object_fo_type07 = create_dataref("laminar/B738/nd/object_fo_type07", "number")
B738DR_nd_object_fo_type08 = create_dataref("laminar/B738/nd/object_fo_type08", "number")
B738DR_nd_object_fo_type09 = create_dataref("laminar/B738/nd/object_fo_type09", "number")
B738DR_nd_object_fo_type10 = create_dataref("laminar/B738/nd/object_fo_type10", "number")
B738DR_nd_object_fo_type11 = create_dataref("laminar/B738/nd/object_fo_type11", "number")
B738DR_nd_object_fo_type12 = create_dataref("laminar/B738/nd/object_fo_type12", "number")
B738DR_nd_object_fo_type13 = create_dataref("laminar/B738/nd/object_fo_type13", "number")
B738DR_nd_object_fo_type14 = create_dataref("laminar/B738/nd/object_fo_type14", "number")
B738DR_nd_object_fo_type15 = create_dataref("laminar/B738/nd/object_fo_type15", "number")
B738DR_nd_object_fo_type16 = create_dataref("laminar/B738/nd/object_fo_type16", "number")
B738DR_nd_object_fo_type17 = create_dataref("laminar/B738/nd/object_fo_type17", "number")
B738DR_nd_object_fo_type18 = create_dataref("laminar/B738/nd/object_fo_type18", "number")
B738DR_nd_object_fo_type19 = create_dataref("laminar/B738/nd/object_fo_type19", "number")
B738DR_nd_object_fo_type20 = create_dataref("laminar/B738/nd/object_fo_type20", "number")
B738DR_nd_object_fo_type21 = create_dataref("laminar/B738/nd/object_fo_type21", "number")
B738DR_nd_object_fo_type22 = create_dataref("laminar/B738/nd/object_fo_type22", "number")
B738DR_nd_object_fo_type23 = create_dataref("laminar/B738/nd/object_fo_type23", "number")
B738DR_nd_object_fo_type24 = create_dataref("laminar/B738/nd/object_fo_type24", "number")
B738DR_nd_object_fo_type25 = create_dataref("laminar/B738/nd/object_fo_type25", "number")
B738DR_nd_object_fo_type26 = create_dataref("laminar/B738/nd/object_fo_type26", "number")
B738DR_nd_object_fo_type27 = create_dataref("laminar/B738/nd/object_fo_type27", "number")
B738DR_nd_object_fo_type28 = create_dataref("laminar/B738/nd/object_fo_type28", "number")
B738DR_nd_object_fo_type29 = create_dataref("laminar/B738/nd/object_fo_type29", "number")
B738DR_nd_object_fo_type30 = create_dataref("laminar/B738/nd/object_fo_type30", "number")
B738DR_nd_object_fo_type31 = create_dataref("laminar/B738/nd/object_fo_type31", "number")
B738DR_nd_object_fo_type32 = create_dataref("laminar/B738/nd/object_fo_type32", "number")
B738DR_nd_object_fo_type33 = create_dataref("laminar/B738/nd/object_fo_type33", "number")
B738DR_nd_object_fo_type34 = create_dataref("laminar/B738/nd/object_fo_type34", "number")
B738DR_nd_object_fo_type35 = create_dataref("laminar/B738/nd/object_fo_type35", "number")
B738DR_nd_object_fo_type36 = create_dataref("laminar/B738/nd/object_fo_type36", "number")
B738DR_nd_object_fo_type37 = create_dataref("laminar/B738/nd/object_fo_type37", "number")
B738DR_nd_object_fo_type38 = create_dataref("laminar/B738/nd/object_fo_type38", "number")
B738DR_nd_object_fo_type39 = create_dataref("laminar/B738/nd/object_fo_type39", "number")
B738DR_nd_object_fo_type40 = create_dataref("laminar/B738/nd/object_fo_type40", "number")
B738DR_nd_object_fo_type41 = create_dataref("laminar/B738/nd/object_fo_type41", "number")
B738DR_nd_object_fo_type42 = create_dataref("laminar/B738/nd/object_fo_type42", "number")
B738DR_nd_object_fo_type43 = create_dataref("laminar/B738/nd/object_fo_type43", "number")
B738DR_nd_object_fo_type44 = create_dataref("laminar/B738/nd/object_fo_type44", "number")
B738DR_nd_object_fo_type45 = create_dataref("laminar/B738/nd/object_fo_type45", "number")
B738DR_nd_object_fo_type46 = create_dataref("laminar/B738/nd/object_fo_type46", "number")
B738DR_nd_object_fo_type47 = create_dataref("laminar/B738/nd/object_fo_type47", "number")
B738DR_nd_object_fo_type48 = create_dataref("laminar/B738/nd/object_fo_type48", "number")
B738DR_nd_object_fo_type49 = create_dataref("laminar/B738/nd/object_fo_type49", "number")

-- WAYPOINTs
B738DR_wpt_fo_x	 		= create_dataref("laminar/B738/nd/wpt_fo_x", "array[20]")
B738DR_wpt_fo_y	 		= create_dataref("laminar/B738/nd/wpt_fo_y", "array[20]")

B738DR_wpt_fo_id00w 		= create_dataref("laminar/B738/nd/wpt_fo_id00w", "string")
B738DR_wpt_fo_alt00w 		= create_dataref("laminar/B738/nd/wpt_fo_alt00w", "string")
B738DR_wpt_fo_eta00w 		= create_dataref("laminar/B738/nd/wpt_fo_eta00w", "string")
B738DR_wpt_fo_id00m 		= create_dataref("laminar/B738/nd/wpt_fo_id00m", "string")
B738DR_wpt_fo_alt00m 		= create_dataref("laminar/B738/nd/wpt_fo_alt00m", "string")
B738DR_wpt_fo_eta00m 		= create_dataref("laminar/B738/nd/wpt_fo_eta00m", "string")
B738DR_wpt_fo_type00 		= create_dataref("laminar/B738/nd/wpt_fo_type00", "number")

B738DR_wpt_fo_id01w 		= create_dataref("laminar/B738/nd/wpt_fo_id01w", "string")
B738DR_wpt_fo_alt01w 		= create_dataref("laminar/B738/nd/wpt_fo_alt01w", "string")
B738DR_wpt_fo_eta01w 		= create_dataref("laminar/B738/nd/wpt_fo_eta01w", "string")
B738DR_wpt_fo_id01m 		= create_dataref("laminar/B738/nd/wpt_fo_id01m", "string")
B738DR_wpt_fo_alt01m 		= create_dataref("laminar/B738/nd/wpt_fo_alt01m", "string")
B738DR_wpt_fo_eta01m 		= create_dataref("laminar/B738/nd/wpt_fo_eta01m", "string")
B738DR_wpt_fo_type01 		= create_dataref("laminar/B738/nd/wpt_fo_type01", "number")

B738DR_wpt_fo_id02w 		= create_dataref("laminar/B738/nd/wpt_fo_id02w", "string")
B738DR_wpt_fo_alt02w 		= create_dataref("laminar/B738/nd/wpt_fo_alt02w", "string")
B738DR_wpt_fo_eta02w 		= create_dataref("laminar/B738/nd/wpt_fo_eta02w", "string")
B738DR_wpt_fo_id02m 		= create_dataref("laminar/B738/nd/wpt_fo_id02m", "string")
B738DR_wpt_fo_alt02m 		= create_dataref("laminar/B738/nd/wpt_fo_alt02m", "string")
B738DR_wpt_fo_eta02m 		= create_dataref("laminar/B738/nd/wpt_fo_eta02m", "string")
B738DR_wpt_fo_type02 		= create_dataref("laminar/B738/nd/wpt_fo_type02", "number")

B738DR_wpt_fo_id03w 		= create_dataref("laminar/B738/nd/wpt_fo_id03w", "string")
B738DR_wpt_fo_alt03w 		= create_dataref("laminar/B738/nd/wpt_fo_alt03w", "string")
B738DR_wpt_fo_eta03w 		= create_dataref("laminar/B738/nd/wpt_fo_eta03w", "string")
B738DR_wpt_fo_id03m 		= create_dataref("laminar/B738/nd/wpt_fo_id03m", "string")
B738DR_wpt_fo_alt03m 		= create_dataref("laminar/B738/nd/wpt_fo_alt03m", "string")
B738DR_wpt_fo_eta03m 		= create_dataref("laminar/B738/nd/wpt_fo_eta03m", "string")
B738DR_wpt_fo_type03 		= create_dataref("laminar/B738/nd/wpt_fo_type03", "number")

B738DR_wpt_fo_id04w 		= create_dataref("laminar/B738/nd/wpt_fo_id04w", "string")
B738DR_wpt_fo_alt04w 		= create_dataref("laminar/B738/nd/wpt_fo_alt04w", "string")
B738DR_wpt_fo_eta04w 		= create_dataref("laminar/B738/nd/wpt_fo_eta04w", "string")
B738DR_wpt_fo_id04m 		= create_dataref("laminar/B738/nd/wpt_fo_id04m", "string")
B738DR_wpt_fo_alt04m 		= create_dataref("laminar/B738/nd/wpt_fo_alt04m", "string")
B738DR_wpt_fo_eta04m 		= create_dataref("laminar/B738/nd/wpt_fo_eta04m", "string")
B738DR_wpt_fo_type04 		= create_dataref("laminar/B738/nd/wpt_fo_type04", "number")

B738DR_wpt_fo_id05w 		= create_dataref("laminar/B738/nd/wpt_fo_id05w", "string")
B738DR_wpt_fo_alt05w 		= create_dataref("laminar/B738/nd/wpt_fo_alt05w", "string")
B738DR_wpt_fo_eta05w 		= create_dataref("laminar/B738/nd/wpt_fo_eta05w", "string")
B738DR_wpt_fo_id05m 		= create_dataref("laminar/B738/nd/wpt_fo_id05m", "string")
B738DR_wpt_fo_alt05m 		= create_dataref("laminar/B738/nd/wpt_fo_alt05m", "string")
B738DR_wpt_fo_eta05m 		= create_dataref("laminar/B738/nd/wpt_fo_eta05m", "string")
B738DR_wpt_fo_type05 		= create_dataref("laminar/B738/nd/wpt_fo_type05", "number")

B738DR_wpt_fo_id06w 		= create_dataref("laminar/B738/nd/wpt_fo_id06w", "string")
B738DR_wpt_fo_alt06w 		= create_dataref("laminar/B738/nd/wpt_fo_alt06w", "string")
B738DR_wpt_fo_eta06w 		= create_dataref("laminar/B738/nd/wpt_fo_eta06w", "string")
B738DR_wpt_fo_id06m 		= create_dataref("laminar/B738/nd/wpt_fo_id06m", "string")
B738DR_wpt_fo_alt06m 		= create_dataref("laminar/B738/nd/wpt_fo_alt06m", "string")
B738DR_wpt_fo_eta06m 		= create_dataref("laminar/B738/nd/wpt_fo_eta06m", "string")
B738DR_wpt_fo_type06 		= create_dataref("laminar/B738/nd/wpt_fo_type06", "number")

B738DR_wpt_fo_id07w 		= create_dataref("laminar/B738/nd/wpt_fo_id07w", "string")
B738DR_wpt_fo_alt07w 		= create_dataref("laminar/B738/nd/wpt_fo_alt07w", "string")
B738DR_wpt_fo_eta07w 		= create_dataref("laminar/B738/nd/wpt_fo_eta07w", "string")
B738DR_wpt_fo_id07m 		= create_dataref("laminar/B738/nd/wpt_fo_id07m", "string")
B738DR_wpt_fo_alt07m 		= create_dataref("laminar/B738/nd/wpt_fo_alt07m", "string")
B738DR_wpt_fo_eta07m 		= create_dataref("laminar/B738/nd/wpt_fo_eta07m", "string")
B738DR_wpt_fo_type07 		= create_dataref("laminar/B738/nd/wpt_fo_type07", "number")

B738DR_wpt_fo_id08w 		= create_dataref("laminar/B738/nd/wpt_fo_id08w", "string")
B738DR_wpt_fo_alt08w 		= create_dataref("laminar/B738/nd/wpt_fo_alt08w", "string")
B738DR_wpt_fo_eta08w 		= create_dataref("laminar/B738/nd/wpt_fo_eta08w", "string")
B738DR_wpt_fo_id08m 		= create_dataref("laminar/B738/nd/wpt_fo_id08m", "string")
B738DR_wpt_fo_alt08m 		= create_dataref("laminar/B738/nd/wpt_fo_alt08m", "string")
B738DR_wpt_fo_eta08m 		= create_dataref("laminar/B738/nd/wpt_fo_eta08m", "string")
B738DR_wpt_fo_type08 		= create_dataref("laminar/B738/nd/wpt_fo_type08", "number")

B738DR_wpt_fo_id09w 		= create_dataref("laminar/B738/nd/wpt_fo_id09w", "string")
B738DR_wpt_fo_alt09w 		= create_dataref("laminar/B738/nd/wpt_fo_alt09w", "string")
B738DR_wpt_fo_eta09w 		= create_dataref("laminar/B738/nd/wpt_fo_eta09w", "string")
B738DR_wpt_fo_id09m 		= create_dataref("laminar/B738/nd/wpt_fo_id09m", "string")
B738DR_wpt_fo_alt09m 		= create_dataref("laminar/B738/nd/wpt_fo_alt09m", "string")
B738DR_wpt_fo_eta09m 		= create_dataref("laminar/B738/nd/wpt_fo_eta09m", "string")
B738DR_wpt_fo_type09 		= create_dataref("laminar/B738/nd/wpt_fo_type09", "number")

B738DR_wpt_fo_id10w 		= create_dataref("laminar/B738/nd/wpt_fo_id10w", "string")
B738DR_wpt_fo_alt10w 		= create_dataref("laminar/B738/nd/wpt_fo_alt10w", "string")
B738DR_wpt_fo_eta10w 		= create_dataref("laminar/B738/nd/wpt_fo_eta10w", "string")
B738DR_wpt_fo_id10m 		= create_dataref("laminar/B738/nd/wpt_fo_id10m", "string")
B738DR_wpt_fo_alt10m 		= create_dataref("laminar/B738/nd/wpt_fo_alt10m", "string")
B738DR_wpt_fo_eta10m 		= create_dataref("laminar/B738/nd/wpt_fo_eta10m", "string")
B738DR_wpt_fo_type10 		= create_dataref("laminar/B738/nd/wpt_fo_type10", "number")

B738DR_wpt_fo_id11w 		= create_dataref("laminar/B738/nd/wpt_fo_id11w", "string")
B738DR_wpt_fo_alt11w 		= create_dataref("laminar/B738/nd/wpt_fo_alt11w", "string")
B738DR_wpt_fo_eta11w 		= create_dataref("laminar/B738/nd/wpt_fo_eta11w", "string")
B738DR_wpt_fo_id11m 		= create_dataref("laminar/B738/nd/wpt_fo_id11m", "string")
B738DR_wpt_fo_alt11m 		= create_dataref("laminar/B738/nd/wpt_fo_alt11m", "string")
B738DR_wpt_fo_eta11m 		= create_dataref("laminar/B738/nd/wpt_fo_eta11m", "string")
B738DR_wpt_fo_type11 		= create_dataref("laminar/B738/nd/wpt_fo_type11", "number")

B738DR_wpt_fo_id12w 		= create_dataref("laminar/B738/nd/wpt_fo_id12w", "string")
B738DR_wpt_fo_alt12w 		= create_dataref("laminar/B738/nd/wpt_fo_alt12w", "string")
B738DR_wpt_fo_eta12w 		= create_dataref("laminar/B738/nd/wpt_fo_eta12w", "string")
B738DR_wpt_fo_id12m 		= create_dataref("laminar/B738/nd/wpt_fo_id12m", "string")
B738DR_wpt_fo_alt12m 		= create_dataref("laminar/B738/nd/wpt_fo_alt12m", "string")
B738DR_wpt_fo_eta12m 		= create_dataref("laminar/B738/nd/wpt_fo_eta12m", "string")
B738DR_wpt_fo_type12 		= create_dataref("laminar/B738/nd/wpt_fo_type12", "number")

B738DR_wpt_fo_id13w 		= create_dataref("laminar/B738/nd/wpt_fo_id13w", "string")
B738DR_wpt_fo_alt13w 		= create_dataref("laminar/B738/nd/wpt_fo_alt13w", "string")
B738DR_wpt_fo_eta13w 		= create_dataref("laminar/B738/nd/wpt_fo_eta13w", "string")
B738DR_wpt_fo_id13m 		= create_dataref("laminar/B738/nd/wpt_fo_id13m", "string")
B738DR_wpt_fo_alt13m 		= create_dataref("laminar/B738/nd/wpt_fo_alt13m", "string")
B738DR_wpt_fo_eta13m 		= create_dataref("laminar/B738/nd/wpt_fo_eta13m", "string")
B738DR_wpt_fo_type13 		= create_dataref("laminar/B738/nd/wpt_fo_type13", "number")

B738DR_wpt_fo_id14w 		= create_dataref("laminar/B738/nd/wpt_fo_id14w", "string")
B738DR_wpt_fo_alt14w 		= create_dataref("laminar/B738/nd/wpt_fo_alt14w", "string")
B738DR_wpt_fo_eta14w 		= create_dataref("laminar/B738/nd/wpt_fo_eta14w", "string")
B738DR_wpt_fo_id14m 		= create_dataref("laminar/B738/nd/wpt_fo_id14m", "string")
B738DR_wpt_fo_alt14m 		= create_dataref("laminar/B738/nd/wpt_fo_alt14m", "string")
B738DR_wpt_fo_eta14m 		= create_dataref("laminar/B738/nd/wpt_fo_eta14m", "string")
B738DR_wpt_fo_type14 		= create_dataref("laminar/B738/nd/wpt_fo_type14", "number")

B738DR_wpt_fo_id15w 		= create_dataref("laminar/B738/nd/wpt_fo_id15w", "string")
B738DR_wpt_fo_alt15w 		= create_dataref("laminar/B738/nd/wpt_fo_alt15w", "string")
B738DR_wpt_fo_eta15w 		= create_dataref("laminar/B738/nd/wpt_fo_eta15w", "string")
B738DR_wpt_fo_id15m 		= create_dataref("laminar/B738/nd/wpt_fo_id15m", "string")
B738DR_wpt_fo_alt15m 		= create_dataref("laminar/B738/nd/wpt_fo_alt15m", "string")
B738DR_wpt_fo_eta15m 		= create_dataref("laminar/B738/nd/wpt_fo_eta15m", "string")
B738DR_wpt_fo_type15 		= create_dataref("laminar/B738/nd/wpt_fo_type15", "number")

B738DR_wpt_fo_id16w 		= create_dataref("laminar/B738/nd/wpt_fo_id16w", "string")
B738DR_wpt_fo_alt16w 		= create_dataref("laminar/B738/nd/wpt_fo_alt16w", "string")
B738DR_wpt_fo_eta16w 		= create_dataref("laminar/B738/nd/wpt_fo_eta16w", "string")
B738DR_wpt_fo_id16m 		= create_dataref("laminar/B738/nd/wpt_fo_id16m", "string")
B738DR_wpt_fo_alt16m 		= create_dataref("laminar/B738/nd/wpt_fo_alt16m", "string")
B738DR_wpt_fo_eta16m 		= create_dataref("laminar/B738/nd/wpt_fo_eta16m", "string")
B738DR_wpt_fo_type16 		= create_dataref("laminar/B738/nd/wpt_fo_type16", "number")

B738DR_wpt_fo_id17w 		= create_dataref("laminar/B738/nd/wpt_fo_id17w", "string")
B738DR_wpt_fo_alt17w 		= create_dataref("laminar/B738/nd/wpt_fo_alt17w", "string")
B738DR_wpt_fo_eta17w 		= create_dataref("laminar/B738/nd/wpt_fo_eta17w", "string")
B738DR_wpt_fo_id17m 		= create_dataref("laminar/B738/nd/wpt_fo_id17m", "string")
B738DR_wpt_fo_alt17m 		= create_dataref("laminar/B738/nd/wpt_fo_alt17m", "string")
B738DR_wpt_fo_eta17m 		= create_dataref("laminar/B738/nd/wpt_fo_eta17m", "string")
B738DR_wpt_fo_type17 		= create_dataref("laminar/B738/nd/wpt_fo_type17", "number")

B738DR_wpt_fo_id18w 		= create_dataref("laminar/B738/nd/wpt_fo_id18w", "string")
B738DR_wpt_fo_alt18w 		= create_dataref("laminar/B738/nd/wpt_fo_alt18w", "string")
B738DR_wpt_fo_eta18w 		= create_dataref("laminar/B738/nd/wpt_fo_eta18w", "string")
B738DR_wpt_fo_id18m 		= create_dataref("laminar/B738/nd/wpt_fo_id18m", "string")
B738DR_wpt_fo_alt18m 		= create_dataref("laminar/B738/nd/wpt_fo_alt18m", "string")
B738DR_wpt_fo_eta18m 		= create_dataref("laminar/B738/nd/wpt_fo_eta18m", "string")
B738DR_wpt_fo_type18 		= create_dataref("laminar/B738/nd/wpt_fo_type18", "number")

B738DR_wpt_fo_id19w 		= create_dataref("laminar/B738/nd/wpt_fo_id19w", "string")
B738DR_wpt_fo_alt19w 		= create_dataref("laminar/B738/nd/wpt_fo_alt19w", "string")
B738DR_wpt_fo_eta19w 		= create_dataref("laminar/B738/nd/wpt_fo_eta19w", "string")
B738DR_wpt_fo_id19m 		= create_dataref("laminar/B738/nd/wpt_fo_id19m", "string")
B738DR_wpt_fo_alt19m 		= create_dataref("laminar/B738/nd/wpt_fo_alt19m", "string")
B738DR_wpt_fo_eta19m 		= create_dataref("laminar/B738/nd/wpt_fo_eta19m", "string")
B738DR_wpt_fo_type19 		= create_dataref("laminar/B738/nd/wpt_fo_type19", "number")

-- ROUTEs
B738DR_rte_fo_x	 			= create_dataref("laminar/B738/nd/rte_fo_x", "array[20]")
B738DR_rte_fo_y	 			= create_dataref("laminar/B738/nd/rte_fo_y", "array[20]")
B738DR_rte_fo_rot	 		= create_dataref("laminar/B738/nd/rte_fo_rot", "array[20]")
B738DR_rte_fo_dist	 		= create_dataref("laminar/B738/nd/rte_fo_dist", "array[20]")
B738DR_rte_fo_show			= create_dataref("laminar/B738/nd/rte_fo_show", "array[20]")
--B738DR_rte_fo_type			= create_dataref("laminar/B738/nd/rte_fo_type", "array[20]")

B738DR_rte_fo_x_act	 		= create_dataref("laminar/B738/nd/rte_fo_x_act", "number")
B738DR_rte_fo_y_act	 		= create_dataref("laminar/B738/nd/rte_fo_y_act", "number")
B738DR_rte_fo_rot_act	 	= create_dataref("laminar/B738/nd/rte_fo_rot_act", "number")
B738DR_rte_fo_dist_act	 	= create_dataref("laminar/B738/nd/rte_fo_dist_act", "number")
B738DR_rte_fo_show_act		= create_dataref("laminar/B738/nd/rte_fo_show_act", "number")

B738DR_rte_fo_edit			= create_dataref("laminar/B738/nd/rte_fo_edit", "array[20]")

B738DR_rte_fo_edit_x_act	 	= create_dataref("laminar/B738/nd/rte_fo_edit_x_act", "number")
B738DR_rte_fo_edit_y_act	 	= create_dataref("laminar/B738/nd/rte_fo_edit_y_act", "number")
B738DR_rte_fo_edit_rot_act	 	= create_dataref("laminar/B738/nd/rte_fo_edit_rot_act", "number")
B738DR_rte_fo_edit_dist_act		= create_dataref("laminar/B738/nd/rte_fo_edit_dist_act", "number")
B738DR_rte_fo_edit_show_act		= create_dataref("laminar/B738/nd/rte_fo_edit_show_act", "number")
B738DR_rte_fo_edit_type_act		= create_dataref("laminar/B738/nd/rte_fo_edit_type_act", "number")


-- T/C
B738DR_tc_fo_x 			= create_dataref("laminar/B738/nd/tc_fo_x", "number")
B738DR_tc_fo_y 			= create_dataref("laminar/B738/nd/tc_fo_y", "number")
B738DR_tc_fo_id 			= create_dataref("laminar/B738/nd/tc_fo_id", "string")
B738DR_tc_fo_show 			= create_dataref("laminar/B738/nd/tc_fo_show", "number")

-- T/D
B738DR_td_fo_x 			= create_dataref("laminar/B738/nd/td_fo_x", "number")
B738DR_td_fo_y 			= create_dataref("laminar/B738/nd/td_fo_y", "number")
B738DR_td_fo_id 			= create_dataref("laminar/B738/nd/td_fo_id", "string")
B738DR_td_fo_show 			= create_dataref("laminar/B738/nd/td_fo_show", "number")

-- DECEL
B738DR_decel_fo_x 			= create_dataref("laminar/B738/nd/decel_fo_x", "number")
B738DR_decel_fo_y 			= create_dataref("laminar/B738/nd/decel_fo_y", "number")
B738DR_decel_fo_id 		= create_dataref("laminar/B738/nd/decel_fo_id", "string")
B738DR_decel_fo_show 		= create_dataref("laminar/B738/nd/decel_fo_show", "number")

-- RUNWAYS
B738DR_ils_fo_rotate	 	= create_dataref("laminar/B738/pfd/ils_fo_rotate", "number")
B738DR_ils_fo_x	 		= create_dataref("laminar/B738/pfd/ils_fo_x", "number")
B738DR_ils_fo_y	 		= create_dataref("laminar/B738/pfd/ils_fo_y", "number")
B738DR_ils_fo_runway 		= create_dataref("laminar/B738/pfd/ils_fo_runway", "string")
B738DR_ils_fo_show	 		= create_dataref("laminar/B738/pfd/ils_fo_show", "number")
B738DR_ils_fo_copilot_show	= create_dataref("laminar/B738/pfd/ils_fo_copilot_show", "number")

B738DR_ils_fo_rotate0	 		= create_dataref("laminar/B738/pfd/ils_fo_rotate0", "number")
B738DR_ils_fo_x0	 			= create_dataref("laminar/B738/pfd/ils_fo_x0", "number")
B738DR_ils_fo_y0	 			= create_dataref("laminar/B738/pfd/ils_fo_y0", "number")
B738DR_ils_fo_runway0 			= create_dataref("laminar/B738/pfd/ils_fo_runway0", "string")
B738DR_ils_fo_show0	 		= create_dataref("laminar/B738/pfd/ils_fo_show0", "number")
B738DR_ils_fo_copilot_show0	= create_dataref("laminar/B738/pfd/ils_fo_copilot_show0", "number")

-- HOLDs
B738DR_hold_x	 		= create_dataref("laminar/B738/nd/hold_x", "array[5]")
B738DR_hold_y	 		= create_dataref("laminar/B738/nd/hold_y", "array[5]")
B738DR_hold_crs	 		= create_dataref("laminar/B738/nd/hold_crs", "array[5]")
B738DR_hold_dist 		= create_dataref("laminar/B738/nd/hold_dist", "array[5]")
B738DR_hold_type 		= create_dataref("laminar/B738/nd/hold_type", "array[5]")

B738DR_hold_fo_x	 		= create_dataref("laminar/B738/nd/hold_fo_x", "array[5]")
B738DR_hold_fo_y	 		= create_dataref("laminar/B738/nd/hold_fo_y", "array[5]")
B738DR_hold_fo_crs	 		= create_dataref("laminar/B738/nd/hold_fo_crs", "array[5]")
B738DR_hold_fo_dist 		= create_dataref("laminar/B738/nd/hold_fo_dist", "array[5]")
B738DR_hold_fo_type 		= create_dataref("laminar/B738/nd/hold_fo_type", "array[5]")



B738DR_center_line			= create_dataref("laminar/B738/fms/center_line", "number")
-- temporary
B7378DR_ctr_line_dist	= create_dataref("laminar/B738/fms/ctr_line_min_delta", "number")

B738DR_fms_light_pilot		= create_dataref("laminar/B738/push_button/fms_light_pilot", "number")
B738DR_fms_light_fo			= create_dataref("laminar/B738/push_button/fms_light_fo", "number")

-- LEGS as string
B738DR_fms_legs				= create_dataref("laminar/B738/fms/legs", "string")
B738DR_fms_legs_lat        = create_dataref("laminar/B738/fms/legs_lat", "array[100]")
B738DR_fms_legs_lon        = create_dataref("laminar/B738/fms/legs_lon", "array[100]")
B738DR_fms_legs_type        = create_dataref("laminar/B738/fms/legs_type", "array[100]")

B738DR_fms_legs2			= create_dataref("laminar/B738/fms/legs2", "string")
B738DR_fms_legs_num2		= create_dataref("laminar/B738/fms/legs_num2", "number")
B738DR_fms_legs_lat2 		= create_dataref("laminar/B738/fms/legs_lat2", "array[100]")
B738DR_fms_legs_lon2 		= create_dataref("laminar/B738/fms/legs_lon2", "array[100]")
B738DR_fms_legs_type2 		= create_dataref("laminar/B738/fms/legs_type2", "array[100]")
B738DR_fms_legs_connect2	= create_dataref("laminar/B738/fms/legs_connect2", "array[100]")


B738DR_wind_show			= create_dataref("laminar/B738/nd/wind_show", "number")

B738DR_nd_navaid			= create_dataref("laminar/B738/nd/disable_navaid", "number")
B738DR_nd_apt				= create_dataref("laminar/B738/nd/disable_apt", "number")

B738DR_last_pos_lat			= create_dataref("laminar/B738/irs/last_pos_lat", "number")
B738DR_last_pos_lon			= create_dataref("laminar/B738/irs/last_pos_lon", "number")

vnav_alt_err_ratio			= create_dataref("laminar/B738/fms/vnav_alt_err_ratio", "number")

--*************************************************************************************--
--** 				       READ-WRITE CUSTOM DATAREF HANDLERS     	        	     **--
--*************************************************************************************--


function DRindex_DRhandler()end
function decode_value_DRhandler()end
function index_pos_DRhandler()end

function DR_test_DRhandler()end
function DR_test2_DRhandler()end

function B738DR_fms_takeoff_flaps_DRhandler()end
function B738DR_fms_approach_flaps_DRhandler()end
function B738DR_fms_approach_speed_DRhandler()end
function B738DR_fms_approach_wind_corr_DRhandler()end

function B738DR_fms_descent_now_DRhandler()end

--function B7368DR_fmc1_show_DRhandler()end

function B738DR_vvi_const_DRhandler()end

-- function B738DR_found_ils_DRhandler()end
-- function B738DR_navaid_num_DRhandler()end
-- function B738DR_found_navaid_DRhandler()end

function B738DR_vnav_disconnect_DRhandler()end
function B738DR_lnav_disconnect_DRhandler()end

function B738DR_chock_status_DRhandler()end

function B738DR_hold_phase_DRhandler()end

function B738DR_test_DRhandler()end
function B738DR_test1_DRhandler()end
function B738DR_test3_DRhandler()end

function B738DR_kill_fms_DRhandler()end
function B738DR_kill_fms_navaid_DRhandler()end
function B738DR_kill_fms_navaid2_DRhandler()end
function B738DR_kill_fms_navaid3_DRhandler()end

--*************************************************************************************--
--** 				       CREATE READ-WRITE CUSTOM DATAREFS                         **--
--*************************************************************************************--

B738DR_kill_fms	= create_dataref("laminar/B738/perf/kill_fms", "number", B738DR_kill_fms_DRhandler)
B738DR_kill_fms_navaid = create_dataref("laminar/B738/perf/kill_fms_navaid", "number", B738DR_kill_fms_navaid_DRhandler)
B738DR_kill_fms_navaid2 = create_dataref("laminar/B738/perf/kill_fms_navaid2", "number", B738DR_kill_fms_navaid2_DRhandler)
B738DR_kill_fms_navaid3 = create_dataref("laminar/B738/perf/kill_fms_navaid3", "number", B738DR_kill_fms_navaid3_DRhandler)

B738DR_fms_test			= create_dataref("laminar/B738/fms/test", "number", B738DR_test_DRhandler)
B738DR_fms_test1		= create_dataref("laminar/B738/fms/test1", "number", B738DR_test1_DRhandler)
B738DR_fms_test3		= create_dataref("laminar/B738/fms/test3", "number", B738DR_test3_DRhandler)

B738DR_hold_phase		= create_dataref("laminar/B738/fms/hold_phase", "number", B738DR_hold_phase_DRhandler)

B738DR_chock_status		= create_dataref("laminar/B738/fms/chock_status", "number", B738DR_chock_status_DRhandler)

-- found_ils => 0-no find, 1-find, 2-founded, 3-readed
-- found_ils			= create_dataref("laminar/B738/fms/found_ils", "number", B738DR_found_ils_DRhandler)
-- navaid_num			= create_dataref("laminar/B738/fms/navaid_num", "number", B738DR_navaid_num_DRhandler)
-- found_navaid		= create_dataref("laminar/B738/fms/found_navaid", "number", B738DR_found_navaid_DRhandler)

B738DR_vvi_const	= create_dataref("laminar/B738/fms/vnav_vvi_const", "number", B738DR_vvi_const_DRhandler)

DRindex	= create_dataref("laminar/B738/fmc/vnav/DRindex", "number", DRindex_DRhandler)

decode_value		= create_dataref("laminar/B738/fmc/decode_value", "number", decode_value_DRhandler)
index_pos			= create_dataref("laminar/B738/fmc/index_pos", "number", index_pos_DRhandler)

DR_test				= create_dataref("laminar/B738/fmc/DR_test", "number", DR_test_DRhandler)
DR_test2				= create_dataref("laminar/B738/fmc/DR_test2", "number", DR_test2_DRhandler)


B738DR_fms_takeoff_flaps	= create_dataref("laminar/B738/FMS/takeoff_flaps", "number", B738DR_fms_takeoff_flaps_DRhandler)
B738DR_fms_approach_flaps	= create_dataref("laminar/B738/FMS/approach_flaps", "number", B738DR_fms_approach_flaps_DRhandler)
B738DR_fms_approach_speed		= create_dataref("laminar/B738/FMS/approach_speed", "number", B738DR_fms_approach_speed_DRhandler)
B738DR_fms_approach_wind_corr	= create_dataref("laminar/B738/FMS/approach_wind_corr", "number", B738DR_fms_approach_wind_corr_DRhandler)

B738DR_fms_descent_now		= create_dataref("laminar/B738/FMS/descent_now", "number", B738DR_fms_descent_now_DRhandler)

--B7368DR_fmc1_show                   = create_dataref("laminar/B738/fmc1/fmc1_show", "number", B7368DR_fmc1_show_DRhandler)

B738DR_vnav_disconnect		= create_dataref("laminar/B738/fms/vnav_disconnect", "number", B738DR_vnav_disconnect_DRhandler)
B738DR_lnav_disconnect		= create_dataref("laminar/B738/fms/lnav_disconnect", "number", B738DR_lnav_disconnect_DRhandler)

simDR_pos_x		= find_dataref("sim/flightmodel/position/local_x")
simDR_pos_y		= find_dataref("sim/flightmodel/position/local_y")
simDR_pos_z		= find_dataref("sim/flightmodel/position/local_z")
simDR_pos_vx		= find_dataref("sim/flightmodel/position/local_vx")
simDR_pos_vy		= find_dataref("sim/flightmodel/position/local_vy")
simDR_pos_vz		= find_dataref("sim/flightmodel/position/local_vz")
simDR_pos_ax		= find_dataref("sim/flightmodel/position/local_ax")
simDR_pos_ay		= find_dataref("sim/flightmodel/position/local_ay")
simDR_pos_az		= find_dataref("sim/flightmodel/position/local_az")

--*************************************************************************************--
--** 				              CUSTOM COMMAND HANDLERS            			     **--
--*************************************************************************************--

function B738CMD_chock_toggle_CMDhandler(phase, duration)
	if phase == 0 then
		if B738DR_chock_status == 0 then
			if simDR_on_ground_0 == 1 and simDR_on_ground_1 == 1 and simDR_on_ground_2 == 1 then
				B738DR_chock_status = 1
				chock_pos_x = simDR_pos_x
				chock_pos_y = simDR_pos_y
				chock_pos_z = simDR_pos_z
			end
		else
			B738DR_chock_status = 0
		end
	end
end

function B738CMD_pause_td_toggle_CMDhandler(phase, duration)
	if phase == 0 then
		if B738DR_pause_td == 0 then
			B738DR_pause_td = 1
		else
			B738DR_pause_td = 0
		end
	end
end

function B738_fms_light_pilot_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_light_pilot = 1
		B738DR_fmc_message_warn = 0
		fmc_message_warn_dis = 1
	elseif phase == 2 then
		B738DR_fms_light_pilot = 0
	end
end

function B738_fms_light_fo_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_light_fo = 1
		B738DR_fmc_message_warn = 0
		fmc_message_warn_dis = 1
	elseif phase == 2 then
		B738DR_fms_light_fo = 0
	end
end

-- --*************************************************************************************--
-- --** 				              CREATE CUSTOM COMMANDS              			     **--
-- --*************************************************************************************--


B738CMD_chock_toggle	= create_command("laminar/B738/toggle_switch/chock", "Chock toggle", B738CMD_chock_toggle_CMDhandler)
B738CMD_pause_td_toggle		= create_command("laminar/B738/toggle_switch/pause_td", "Pause at T/D toggle", B738CMD_pause_td_toggle_CMDhandler)

B738CMD_fms_light_pilot		 	= create_command("laminar/B738/push_button/fms_light_pilot", "FMS light captain button", B738_fms_light_pilot_CMDhandler)
B738CMD_fms_light_fo		 	= create_command("laminar/B738/push_button/fms_light_fo", "FMS light captain button", B738_fms_light_fo_CMDhandler)


--*************************************************************************************--
--** 				             X-PLANE COMMAND HANDLERS               	    	 **--
--*************************************************************************************--


-- ROUNDING ---
function roundUpToIncrement(number, increment)

    local y = number / increment
    local q = math.ceil(y)
    local z = q * increment

    return z

end

function roundDownToIncrement(number, increment)

    local y = number / increment
    local q = math.floor(y)
    local z = q * increment

    return z

end

----- ANIMATION UTILITY -----------------------------------------------------------------

function B738_set_anim_value(current_value, target, min, max, speed)

    if target >= (max - 0.001) and current_value >= (max - 0.01) then
        return max
    elseif target <= (min + 0.001) and current_value <= (min + 0.01) then
        return min
    else
        return current_value + ((target - current_value) * (speed * SIM_PERIOD))
    end

end


function B738_set_anim_value2(current_value, target, min, max, speed, limit)

    local mmm = 0
	if target >= (max - 0.001) and current_value >= (max - 0.01) then
        return max
    elseif target <= (min + 0.001) and current_value <= (min + 0.01) then
        return min
    else
        mmm = math.abs((target - current_value) * (speed * SIM_PERIOD))
		if mmm > limit then
			if target > current_value then
				return current_value + limit
			else
				return current_value - limit
			end
		else
			return current_value + ((target - current_value) * (speed * SIM_PERIOD))
		end
    end

end

----- RESCALE FLOAT AND CLAMP TO OUTER LIMITS -------------------------------------------

function B738_rescale(in1, out1, in2, out2, x)
    if x < in1 then return out1 end
    if x > in2 then return out2 end
    return out1 + (out2 - out1) * (x - in1) / (in2 - in1)
end


function Angle180(angle)
    return (angle + 180) % 360
end



function spaces_before(strings, max_num)
	local temp_strings = ""
	local num_strings = string.len(strings)
	local num1 = 0
	
	if num_strings > max_num then
		return string.sub(strings, 1, max_num)
	else
		if num_strings == max_num then
			return strings
		else
			temp_strings = strings
			for num1 = num_strings, max_num - 1 do
				temp_strings = " " .. temp_strings
			end
			return temp_strings
		end
	
	end
end

function spaces_after(strings, max_num)
	local temp_strings = ""
	local num_strings = string.len(strings)
	local num1 = 0
	
	if num_strings > max_num then
		return string.sub(strings, 1, max_num)
	else
		if num_strings == max_num then
			return strings
		else
			temp_strings = strings
			for num1 = num_strings, max_num - 1 do
				temp_strings = temp_strings .. " "
			end
			return temp_strings
		end
	
	end
end


function wind_alt_order()

	local swap_alt = ""
	local swap_alt_num = 0
	local swap_dir = ""
	local swap_spd = ""
	
	if forec_alt_2_num > forec_alt_1_num then
		-- swap 2 - 1
		swap_alt = forec_alt_2
		swap_alt_num = forec_alt_2_num
		swap_dir = forec_dir_2
		swap_spd = forec_spd_2
		forec_alt_2 = forec_alt_1
		forec_alt_2_num = forec_alt_1_num
		forec_dir_2 = forec_dir_1
		forec_spd_2 = forec_spd_1
		forec_alt_1 = swap_alt
		forec_alt_1_num = swap_alt_num
		forec_dir_1 = swap_dir
		forec_spd_1 = swap_spd
	end
	if forec_alt_3_num > forec_alt_2_num then
		if forec_alt_3_num > forec_alt_1_num then
			-- swap 3 - 1
			swap_alt = forec_alt_3
			swap_alt_num = forec_alt_3_num
			swap_dir = forec_dir_3
			swap_spd = forec_spd_3
			forec_alt_3 = forec_alt_1
			forec_alt_3_num = forec_alt_1_num
			forec_dir_3 = forec_dir_1
			forec_spd_3 = forec_spd_1
			forec_alt_1 = swap_alt
			forec_alt_1_num = swap_alt_num
			forec_dir_1 = swap_dir
			forec_spd_1 = swap_spd
			-- swap 3 - 2
			swap_alt = forec_alt_3
			swap_alt_num = forec_alt_3_num
			swap_dir = forec_dir_3
			swap_spd = forec_spd_3
			forec_alt_3 = forec_alt_2
			forec_alt_3_num = forec_alt_2_num
			forec_dir_3 = forec_dir_2
			forec_spd_3 = forec_spd_2
			forec_alt_2 = swap_alt
			forec_alt_2_num = swap_alt_num
			forec_dir_2 = swap_dir
			forec_spd_2 = swap_spd
		else
		-- swap 3 - 2
			swap_alt = forec_alt_3
			swap_alt_num = forec_alt_3_num
			swap_dir = forec_dir_3
			swap_spd = forec_spd_3
			forec_alt_3 = forec_alt_2
			forec_alt_3_num = forec_alt_2_num
			forec_dir_3 = forec_dir_2
			forec_spd_3 = forec_spd_2
			forec_alt_2 = swap_alt
			forec_alt_2_num = swap_alt_num
			forec_dir_2 = swap_dir
			forec_spd_2 = swap_spd
		end
	end

end

function check_navdata()
	
	local navdata_status1 = 0
	local navdata_status2 = 0
	
	cust_def_data = 0
	airac_navdata = ""
	airac_navdata_active = ""
	
	-- check Custom NavData
	file_name_path = "Custom Data/"
	file_name = file_name_path .. "earth_nav.dat"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		navdata_status1 = navdata_status1 + 1
		file_navdata:close()
	end
	file_name = file_name_path .. "earth_fix.dat"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		navdata_status1 = navdata_status1 + 1
		file_navdata:close()
	end
	file_name = file_name_path .. "earth_awy.dat"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		navdata_status1 = navdata_status1 + 1
		file_navdata:close()
	end
	
	-- check Default NavData
	file_name_path = "Resources/default data/"
	file_name = file_name_path .. "earth_nav.dat"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		navdata_status2 = navdata_status2 + 1
		file_navdata:close()
	end
	file_name = file_name_path .. "earth_fix.dat"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		navdata_status2 = navdata_status2 + 1
		file_navdata:close()
	end
	file_name = file_name_path .. "earth_awy.dat"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		navdata_status2 = navdata_status2 + 1
		file_navdata:close()
	end
	
	if navdata_status1 > 2 then
		file_name_path = "Custom Data/"
		read_navdata2()
		cust_def_data = 1
	elseif navdata_status2 > 2 then
		file_name_path = "Resources/default data/"
		read_navdata2()
		cust_def_data = 2
	end
	
end


function read_navdata2()
	
	local line = "" 
	local i = 0
	local j = 0
	local k = 0
	local build = ""
	--local airac_cycle = ""
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	local old_lat = ""
	local old_lon = ""
	local old_id = ""
	local old_freq = ""
	local old_icao = ""
	local old_type = 0
	local skip = 0
	local words = {}
	
	file_name = file_name_path .. "earth_nav.dat"
	file_navdata = io.open(file_name, "r")
			
	-- looking for AIRAC
	line = file_navdata:read()
	while line do
		i,j = string.find(line, "cycle ")
		if i ~= nil then
			break
		end
		line = file_navdata:read()
	end
	if i ~= nil then
		airac_cycle = string.sub(line, (j+1), (j+4))
		i,j = string.find(line, "build ")
		build = string.sub(line, (j+1), (j+8))
		airac_navdata = string.sub(build, 3, 8) .. airac_cycle
	end
	-- looking for NAV
	line = file_navdata:read()
	while line do
		i = 0
		j = 0
		line_trim = ""
		line_char = ""
		line_lenght = string.len(line)
		if line_lenght > 0 then
			for k = 1, line_lenght do
				line_char = string.sub(line, k, k)
				if line_char == " " then
					if i == 1 then
						j = j + 1
						words[j] = line_trim
						i = 0
						line_trim = ""
					end
				else
					line_trim = line_trim .. line_char
					i = 1
				end
			end
			if string.len(line_trim) > 0 then
				j = j + 1
				words[j] = line_trim
			end
			
			if j > 0 then
				if string.len(words[j]) > 1 and string.byte(words[j], -1) == 13 then	-- CR
					words[j] = string.sub(words[j], 1, -2)
				end
			end
			
			if j > 11 then
				
				-- ILS navaids
				if words[1] == "4" and string.sub(words[12], 1, 3) == "ILS" then
					ils_nav_num = ils_nav_num + 1
					ils_nav[ils_nav_num] = {}
					ils_nav[ils_nav_num][1] = words[8]				--id
					ils_nav[ils_nav_num][2] = tonumber(words[2]) 	--lat
					ils_nav[ils_nav_num][3] = tonumber(words[3]) 	--lon
					ils_nav[ils_nav_num][4] = words[11] 			--runway
					ils_nav[ils_nav_num][5] = tonumber(words[7])	--course
					ils_nav[ils_nav_num][6] = tonumber(words[5]) 	--frequency
					ils_nav[ils_nav_num][7] = words[9] 				--ICAO
					ils_nav[ils_nav_num][8] = words[10]				-- reg code
				end
				
				if old_id == words[8] and old_freq == words[5] then
					if old_type == 1 and words[1] == "12" then -- VOR-DME, VORTAG
						earth_nav[earth_nav_num][1] = 2
						old_type = 2
					end
				end
				if old_type == 5 and words[1] == "12" and old_icao == words[9] then -- ILS -> APT
					skip = 1
				elseif old_type == 5 and words[1] == "6" and old_icao == words[9] then -- ILS -> APT
					skip = 1
				elseif old_type == 5 and words[1] == "4" and old_icao == words[9] then -- ILS -> APT
					skip = 1
				end
				if skip == 1 then
					skip = 0
					old_id = words[8]
					old_freq = words[5]
					old_icao = words[9]
				else
					if words[1] == "3" then	-- VOR
						earth_nav_num = earth_nav_num + 1
						earth_nav[earth_nav_num] = {}  		--new row
						earth_nav[earth_nav_num][1] = 1			--type 1-VOR
						earth_nav[earth_nav_num][2] = tonumber(words[2])  --lat
						earth_nav[earth_nav_num][3] = tonumber(words[3])  --lon
						earth_nav[earth_nav_num][4] = words[8]  --id
						earth_nav[earth_nav_num][5] = words[9]  --ICAO
						earth_nav[earth_nav_num][6] = words[5] --freq
						earth_nav[earth_nav_num][7] = words[11] --name
						earth_nav[earth_nav_num][8] = words[10] --reg_code
						earth_nav[earth_nav_num][9] = tonumber(words[7]) --mag variation
						old_type = 1
						old_freq = words[5]
						old_icao = "" --words[9]
						old_id = words[8]
					elseif words[1] == "2" then	-- NDB
						earth_nav_num = earth_nav_num + 1
						earth_nav[earth_nav_num] = {}  		--new row
						earth_nav[earth_nav_num][1] = 3			--type 3-NDB
						earth_nav[earth_nav_num][2] = tonumber(words[2])  --lat
						earth_nav[earth_nav_num][3] = tonumber(words[3])  --lon
						earth_nav[earth_nav_num][4] = words[8]  --id
						earth_nav[earth_nav_num][5] = words[9]  --ICAO
						earth_nav[earth_nav_num][6] = words[5] --freq
						earth_nav[earth_nav_num][7] = words[11] --name
						earth_nav[earth_nav_num][8] = words[10] --reg_code
						earth_nav[earth_nav_num][9] = 0
						old_type = 3
						old_freq = words[5]
						old_icao = "" --words[9]
						old_id = words[8]
					elseif words[1] == "13" then	-- DME
						earth_nav_num = earth_nav_num + 1
						earth_nav[earth_nav_num] = {}  		--new row
						earth_nav[earth_nav_num][1] = 5			--type 5-only DME
						earth_nav[earth_nav_num][2] = tonumber(words[2])  --lat
						earth_nav[earth_nav_num][3] = tonumber(words[3])  --lon
						earth_nav[earth_nav_num][4] = words[8]  --id
						earth_nav[earth_nav_num][5] = words[9]  --ICAO
						earth_nav[earth_nav_num][6] = words[5] --freq
						earth_nav[earth_nav_num][7] = words[11] --name
						earth_nav[earth_nav_num][8] = words[10] --reg_code
						earth_nav[earth_nav_num][9] = 0
						old_type = 5
						old_freq = words[5]
						old_icao = "" --words[9]
						old_id = words[8]
					end
				end
			end
		end
		line = file_navdata:read()
	end
	file_navdata:close()
	
	-- fixes
	file_name = file_name_path .. "earth_fix.dat"
	file_navdata = io.open(file_name, "r")
	-- looking for fix
	line = file_navdata:read()
	line = file_navdata:read()
	line = file_navdata:read()
	while line do
		i = 0
		j = 0
		line_trim = ""
		line_char = ""
		line_lenght = string.len(line)
		if line_lenght > 0 then
			for k = 1, line_lenght do
				line_char = string.sub(line, k, k)
				if line_char == " " then
					if i == 1 then
						j = j + 1
						words[j] = line_trim
						i = 0
						line_trim = ""
					end
				else
					line_trim = line_trim .. line_char
					i = 1
				end
			end
			if string.len(line_trim) > 0 then
				j = j + 1
				words[j] = line_trim
			end
			
			if j > 0 then
				if string.len(words[j]) > 1 and string.byte(words[j], -1) == 13 then	-- CR
					words[j] = string.sub(words[j], 1, -2)
				end
			end
			
			
			if j > 4 then
				earth_nav_num = earth_nav_num + 1
				earth_nav[earth_nav_num] = {}  		--new row
				earth_nav[earth_nav_num][1] = 4			--type 4-FIX
				earth_nav[earth_nav_num][2] = tonumber(words[1])  --lat
				earth_nav[earth_nav_num][3] = tonumber(words[2])  --lon
				earth_nav[earth_nav_num][4] = words[3]  --id
				earth_nav[earth_nav_num][5] = words[4]  --ICAO
				earth_nav[earth_nav_num][6] = "" --freq
				earth_nav[earth_nav_num][7] = "" --name
				earth_nav[earth_nav_num][8] = words[5] --reg_code
				earth_nav[earth_nav_num][9] = 0
			end
		end
		line = file_navdata:read()
	end
	file_navdata:close()
	
	find_airac_cycle(airac_cycle)
	
end

function create_idx_table()
	
	local ii = 0
	local tmp_byte = 0
	local tmp_idx = 0
	
	-- clear idx tables
	idx_earth_nav = {}
	idx_apt = {}
	idx_ils = {}
	idx_ils_icao = {}
	idx_rnw = {}
	idx_awy = {}
	
	for ii = 48, 57 do
		idx_earth_nav[ii] = {}
		idx_earth_nav[ii][99999] = 0
		idx_apt[ii] = {}
		idx_apt[ii][99999] = 0
		idx_ils[ii] = {}
		idx_ils[ii][99999] = 0
		idx_ils_icao[ii] = {}
		idx_ils_icao[ii][99999] = 0
		idx_rnw[ii] = {}
		idx_rnw[ii][99999] = 0
		idx_awy[ii] = {}
		idx_awy[ii][99999] = 0
	end
	for ii = 65, 90 do
		idx_earth_nav[ii] = {}
		idx_earth_nav[ii][99999] = 0
		idx_apt[ii] = {}
		idx_apt[ii][99999] = 0
		idx_ils[ii] = {}
		idx_ils[ii][99999] = 0
		idx_ils_icao[ii] = {}
		idx_ils_icao[ii][99999] = 0
		idx_rnw[ii] = {}
		idx_rnw[ii][99999] = 0
		idx_awy[ii] = {}
		idx_awy[ii][99999] = 0
	end
	
	if earth_nav_num > 0 then
		for ii = 1, earth_nav_num do
			tmp_byte = string.byte(string.sub(earth_nav[ii][4], 1, 1))
			if (tmp_byte >= 48 and tmp_byte <= 57) or (tmp_byte >= 65 and tmp_byte <= 90) then
				tmp_idx = idx_earth_nav[tmp_byte][99999]
				if tmp_idx < 99998 then
					tmp_idx = tmp_idx + 1
					idx_earth_nav[tmp_byte][99999] = tmp_idx
					idx_earth_nav[tmp_byte][tmp_idx] = ii
				end
			end
		end
	end
	
	if apt_data_num > 0 then
		for ii = 1, apt_data_num do
			tmp_byte = string.byte(string.sub(apt_data[ii][1], 1, 1))
			if (tmp_byte >= 48 and tmp_byte <= 57) or (tmp_byte >= 65 and tmp_byte <= 90) then
				tmp_idx = idx_apt[tmp_byte][99999]
				if tmp_idx < 99998 then
					tmp_idx = tmp_idx + 1
					idx_apt[tmp_byte][99999] = tmp_idx
					idx_apt[tmp_byte][tmp_idx] = ii
				end
			end
		end
	end
	
	if ils_nav_num > 0 then
		for ii = 1, ils_nav_num do
			tmp_byte = string.byte(string.sub(ils_nav[ii][1], 1, 1))
			if (tmp_byte >= 48 and tmp_byte <= 57) or (tmp_byte >= 65 and tmp_byte <= 90) then
				tmp_idx = idx_ils[tmp_byte][99999]
				if tmp_idx < 99998 then
					tmp_idx = tmp_idx + 1
					idx_ils[tmp_byte][99999] = tmp_idx
					idx_ils[tmp_byte][tmp_idx] = ii
				end
			end
			tmp_byte = string.byte(string.sub(ils_nav[ii][7], 1, 1))
			if (tmp_byte >= 48 and tmp_byte <= 57) or (tmp_byte >= 65 and tmp_byte <= 90) then
				tmp_idx = idx_ils_icao[tmp_byte][99999]
				if tmp_idx < 99998 then
					tmp_idx = tmp_idx + 1
					idx_ils_icao[tmp_byte][99999] = tmp_idx
					idx_ils_icao[tmp_byte][tmp_idx] = ii
				end
			end
		end
	end
	
	if rnw_data_num > 0 then
		for ii = 1, rnw_data_num do
			tmp_byte = string.byte(string.sub(rnw_data[ii][1], 1, 1))
			if (tmp_byte >= 48 and tmp_byte <= 57) or (tmp_byte >= 65 and tmp_byte <= 90) then
				tmp_idx = idx_rnw[tmp_byte][99999]
				if tmp_idx < 99998 then
					tmp_idx = tmp_idx + 1
					idx_rnw[tmp_byte][99999] = tmp_idx
					idx_rnw[tmp_byte][tmp_idx] = ii
				end
			end
		end
	end
	
	if awy_data_num > 0 then
		for ii = 1, awy_data_num do
			tmp_byte = string.byte(string.sub(awy_data[ii][1], 1, 1))
			if (tmp_byte >= 48 and tmp_byte <= 57) or (tmp_byte >= 65 and tmp_byte <= 90) then
				tmp_idx = idx_awy[tmp_byte][99999]
				if tmp_idx < 99998 then
					tmp_idx = tmp_idx + 1
					idx_awy[tmp_byte][99999] = tmp_idx
					idx_awy[tmp_byte][tmp_idx] = ii
				end
			end
		end
	end
	--dump_idx_table()
end


function dump_idx_table()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	for vvv = 48, 57 do
		fms_line = tostring(vvv) .. ">" .. tostring(idx_awy[vvv][99999]) .. "\n"
		file_navdata2:write(fms_line)
	end
	for vvv = 65, 90 do
		fms_line = tostring(vvv) .. ">" .. tostring(idx_awy[vvv][99999]) .. "\n"
		file_navdata2:write(fms_line)
	end
	file_navdata2:close()
end

-- function read_navdata()
	
	-- local line = "" 	--{}
	-- local i = 0
	-- local j = 0
	-- local k = 0
	-- local build = ""
	-- --local airac_cycle = ""
	-- local line_trim = ""
	-- local line_char = ""
	-- local line_lenght = 0
	-- local old_lat = ""
	-- local old_lon = ""
	-- local old_id = ""
	-- local old_freq = ""
	-- local old_icao = ""
	-- local old_type = 0
	-- local skip = 0
	-- local words = {}
	
	-- file_name = "Custom Data/earth_nav.dat"
	-- file_navdata = io.open(file_name, "r")
	-- if file_navdata == nil then
		-- file_name = "Resources/default data/earth_nav.dat"
		-- file_navdata = io.open(file_name, "r")
		-- if file_navdata == nil then
			-- airac_navdata = ""
			-- airac_navdata_active = ""
		-- else
			-- -- looking for AIRAC
			-- line = file_navdata:read()
			-- while line do
				-- i,j = string.find(line, "cycle ")
				-- if i ~= nil then
					-- break
				-- end
				-- line = file_navdata:read()
			-- end
			-- if i ~= nil then
				-- airac_cycle = string.sub(line, (j+1), (j+4))
				-- i,j = string.find(line, "build ")
				-- build = string.sub(line, (j+1), (j+8))
				-- airac_navdata = string.sub(build, 3, 8) .. airac_cycle
				-- -- looking for NAV
				-- line = file_navdata:read()
				-- while line do
					-- i = 0
					-- j = 0
					-- line_trim = ""
					-- line_char = ""
					-- line_lenght = string.len(line)
					-- if line_lenght > 0 then
						-- for k = 1, line_lenght do
							-- line_char = string.sub(line, k, k)
							-- if line_char == " " then
								-- if i == 1 then
									-- j = j + 1
									-- words[j] = line_trim
									-- i = 0
									-- line_trim = ""
								-- end
							-- else
								-- line_trim = line_trim .. line_char
								-- i = 1
							-- end
						-- end
						-- if string.len(line_trim) > 0 then
							-- j = j + 1
							-- words[j] = line_trim
						-- end
						
						
						-- if j > 0 then
							-- if string.len(words[j]) > 1 and string.byte(words[j], -1) == 13 then	-- CR
								-- words[j] = string.sub(words[j], 1, -2)
							-- end
						-- end
						
						
						
						-- if j > 11 then
							
							
							
							-- -- ILS navaids
							-- if words[1] == "4" and string.sub(words[12], 1, 3) == "ILS" then
								-- ils_nav_num = ils_nav_num + 1
								-- ils_nav[ils_nav_num] = {}
								-- ils_nav[ils_nav_num][1] = words[8]				--id
								-- ils_nav[ils_nav_num][2] = tonumber(words[2]) 	--lat
								-- ils_nav[ils_nav_num][3] = tonumber(words[3]) 	--lon
								-- ils_nav[ils_nav_num][4] = words[11] 			--runway
								-- ils_nav[ils_nav_num][5] = tonumber(words[7])	--course
								-- ils_nav[ils_nav_num][6] = tonumber(words[5]) 	--frequency
								-- ils_nav[ils_nav_num][7] = words[9] 				--ICAO
								-- ils_nav[ils_nav_num][8] = words[10]				-- reg code
							-- end
							
							
							
							-- if old_id == words[8] and old_freq == words[5] then
								-- if old_type == 1 and words[1] == "12" then -- VOR-DME, VORTAG
									-- earth_nav[earth_nav_num][1] = 2
									-- old_type = 2
								-- end
							-- end
							-- if old_type == 5 and words[1] == "12" and old_icao == words[9] then -- ILS -> APT
								-- skip = 1
							-- elseif old_type == 5 and words[1] == "6" and old_icao == words[9] then -- ILS -> APT
								-- skip = 1
							-- elseif old_type == 5 and words[1] == "4" and old_icao == words[9] then -- ILS -> APT
								-- skip = 1
							-- end
							-- if skip == 1 then
								-- skip = 0
								-- old_id = words[8]
								-- old_freq = words[5]
								-- old_icao = words[9]
							-- else
								-- if words[1] == "3" then	-- VOR
									-- earth_nav_num = earth_nav_num + 1
									-- earth_nav[earth_nav_num] = {}  		--new row
									-- earth_nav[earth_nav_num][1] = 1			--type 1-VOR
									-- earth_nav[earth_nav_num][2] = tonumber(words[2])  --lat
									-- earth_nav[earth_nav_num][3] = tonumber(words[3])  --lon
									-- earth_nav[earth_nav_num][4] = words[8]  --id
									-- earth_nav[earth_nav_num][5] = words[9]  --ICAO
									-- earth_nav[earth_nav_num][6] = words[5] --freq
									-- earth_nav[earth_nav_num][7] = words[11] --name
									-- earth_nav[earth_nav_num][8] = words[10] --reg_code
									-- earth_nav[earth_nav_num][9] = tonumber(words[7]) --mag variation
									-- old_type = 1
									-- old_freq = words[5]
									-- old_icao = "" --words[9]
									-- old_id = words[8]
								-- elseif words[1] == "2" then	-- NDB
									-- earth_nav_num = earth_nav_num + 1
									-- earth_nav[earth_nav_num] = {}  		--new row
									-- earth_nav[earth_nav_num][1] = 3			--type 3-NDB
									-- earth_nav[earth_nav_num][2] = tonumber(words[2])  --lat
									-- earth_nav[earth_nav_num][3] = tonumber(words[3])  --lon
									-- earth_nav[earth_nav_num][4] = words[8]  --id
									-- earth_nav[earth_nav_num][5] = words[9]  --ICAO
									-- earth_nav[earth_nav_num][6] = words[5] --freq
									-- earth_nav[earth_nav_num][7] = words[11] --name
									-- earth_nav[earth_nav_num][8] = words[10] --reg_code
									-- earth_nav[earth_nav_num][9] = 0
									-- old_type = 3
									-- old_freq = words[5]
									-- old_icao = "" --words[9]
									-- old_id = words[8]
								-- elseif words[1] == "13" then	-- DME
									-- earth_nav_num = earth_nav_num + 1
									-- earth_nav[earth_nav_num] = {}  		--new row
									-- earth_nav[earth_nav_num][1] = 5			--type 5-only DME
									-- earth_nav[earth_nav_num][2] = tonumber(words[2])  --lat
									-- earth_nav[earth_nav_num][3] = tonumber(words[3])  --lon
									-- earth_nav[earth_nav_num][4] = words[8]  --id
									-- earth_nav[earth_nav_num][5] = words[9]  --ICAO
									-- earth_nav[earth_nav_num][6] = words[5] --freq
									-- earth_nav[earth_nav_num][7] = words[11] --name
									-- earth_nav[earth_nav_num][8] = words[10] --reg_code
									-- earth_nav[earth_nav_num][9] = 0
									-- old_type = 5
									-- old_freq = words[5]
									-- old_icao = "" --words[9]
									-- old_id = words[8]
								-- end
							-- end
						-- --------
						-- end
					-- end
					-- line = file_navdata:read()
					-- ------------
				-- end
			-- end
			-- file_navdata:close()
			-- -- fixes
			-- file_name = "Resources/default data/earth_fix.dat"
			-- file_navdata = io.open(file_name, "r")
			-- if file_navdata ~= nil then
				-- -- looking for fix
				-- line = file_navdata:read()
				-- line = file_navdata:read()
				-- line = file_navdata:read()
				-- while line do
					-- i = 0
					-- j = 0
					-- line_trim = ""
					-- line_char = ""
					-- line_lenght = string.len(line)
					-- if line_lenght > 0 then
						-- for k = 1, line_lenght do
							-- line_char = string.sub(line, k, k)
							-- if line_char == " " then
								-- if i == 1 then
									-- j = j + 1
									-- words[j] = line_trim
									-- i = 0
									-- line_trim = ""
								-- end
							-- else
								-- line_trim = line_trim .. line_char
								-- i = 1
							-- end
						-- end
						-- if string.len(line_trim) > 0 then
							-- j = j + 1
							-- words[j] = line_trim
						-- end
						
						-- if j > 0 then
							-- if string.len(words[j]) > 1 and string.byte(words[j], -1) == 13 then	-- CR
								-- words[j] = string.sub(words[j], 1, -2)
							-- end
						-- end
						
						
						-- if j > 4 then
							-- earth_nav_num = earth_nav_num + 1
							-- earth_nav[earth_nav_num] = {}  		--new row
							-- earth_nav[earth_nav_num][1] = 4			--type 4-FIX
							-- earth_nav[earth_nav_num][2] = tonumber(words[1])  --lat
							-- earth_nav[earth_nav_num][3] = tonumber(words[2])  --lon
							-- earth_nav[earth_nav_num][4] = words[3]  --id
							-- earth_nav[earth_nav_num][5] = words[4]  --ICAO
							-- earth_nav[earth_nav_num][6] = "" --freq
							-- earth_nav[earth_nav_num][7] = "" --name
							-- earth_nav[earth_nav_num][8] = words[5] --reg_code
							-- earth_nav[earth_nav_num][9] = 0
						-- end
					-- end
					-- line = file_navdata:read()
				-- end
				-- file_navdata:close()
			-- end
		-- end
	-- else
		-- -- looking for AIRAC
		-- line = file_navdata:read()
		-- while line do
			-- i,j = string.find(line, "cycle ")
			-- if i ~= nil then
				-- break
			-- end
			-- line = file_navdata:read()
		-- end
		-- if i ~= nil then
			-- airac_cycle = string.sub(line, (j+1), (j+4))
			-- i,j = string.find(line, "build ")
			-- build = string.sub(line, (j+1), (j+8))
			-- airac_navdata = string.sub(build, 3, 8) .. airac_cycle
			-- -- looking for NAV
			-- line = file_navdata:read()
			-- while line do
				-- i = 0
				-- j = 0
				-- line_trim = ""
				-- line_char = ""
				-- line_lenght = string.len(line)
				-- if line_lenght > 0 then
					-- for k = 1, line_lenght do
						-- line_char = string.sub(line, k, k)
						-- if line_char == " " then
							-- if i == 1 then
								-- j = j + 1
								-- words[j] = line_trim
								-- i = 0
								-- line_trim = ""
							-- end
						-- else
							-- line_trim = line_trim .. line_char
							-- i = 1
						-- end
					-- end
					-- if string.len(line_trim) > 0 then
						-- j = j + 1
						-- words[j] = line_trim
					-- end
					
					
					-- if j > 0 then
						-- if string.len(words[j]) > 1 and string.byte(words[j], -1) == 13 then	-- CR
							-- words[j] = string.sub(words[j], 1, -2)
						-- end
					-- end
					
					
					-- if j > 11 then
						
						
						
						-- -- ILS navaids
						-- if words[1] == "4" and string.sub(words[12], 1, 3) == "ILS" then
							-- ils_nav_num = ils_nav_num + 1
							-- ils_nav[ils_nav_num] = {}
							-- ils_nav[ils_nav_num][1] = words[8]				--id
							-- ils_nav[ils_nav_num][2] = tonumber(words[2]) 	--lat
							-- ils_nav[ils_nav_num][3] = tonumber(words[3]) 	--lon
							-- ils_nav[ils_nav_num][4] = words[11] 			--runway
							-- ils_nav[ils_nav_num][5] = tonumber(words[7])	--course
							-- ils_nav[ils_nav_num][6] = tonumber(words[5]) 	--frequency
							-- ils_nav[ils_nav_num][7] = words[9] 				--ICAO
							-- ils_nav[ils_nav_num][8] = words[10]				--reg code
						-- end
						
						
						
						-- if old_id == words[8] and old_freq == words[5] then
							-- if old_type == 1 and words[1] == "12" then -- VOR-DME, VORTAG
								-- earth_nav[earth_nav_num][1] = 2
								-- old_type = 2
							-- end
						-- end
						-- if old_type == 5 and words[1] == "12" and old_icao == words[9] then -- ILS -> APT
							-- skip = 1
						-- elseif old_type == 5 and words[1] == "6" and old_icao == words[9] then -- ILS -> APT
							-- skip = 1
						-- elseif old_type == 5 and words[1] == "4" and old_icao == words[9] then -- ILS -> APT
							-- skip = 1
						-- end
						-- if skip == 1 then
							-- skip = 0
							-- old_id = words[8]
							-- old_freq = words[5]
							-- old_icao = words[9]
						-- else
							-- if words[1] == "3" then	-- VOR
								-- earth_nav_num = earth_nav_num + 1
								-- earth_nav[earth_nav_num] = {}  		--new row
								-- earth_nav[earth_nav_num][1] = 1			--type 1-VOR
								-- earth_nav[earth_nav_num][2] = tonumber(words[2])  --lat
								-- earth_nav[earth_nav_num][3] = tonumber(words[3])  --lon
								-- earth_nav[earth_nav_num][4] = words[8]  --id
								-- earth_nav[earth_nav_num][5] = words[9]  --ICAO
								-- earth_nav[earth_nav_num][6] = words[5] --freq
								-- earth_nav[earth_nav_num][7] = words[11] --name
								-- earth_nav[earth_nav_num][8] = words[10] --reg_code
								-- earth_nav[earth_nav_num][9] = tonumber(words[7]) --mag variation
								-- old_type = 1
								-- old_freq = words[5]
								-- old_icao = "" --words[9]
								-- old_id = words[8]
							-- elseif words[1] == "2" then	-- NDB
								-- earth_nav_num = earth_nav_num + 1
								-- earth_nav[earth_nav_num] = {}  		--new row
								-- earth_nav[earth_nav_num][1] = 3			--type 3-NDB
								-- earth_nav[earth_nav_num][2] = tonumber(words[2])  --lat
								-- earth_nav[earth_nav_num][3] = tonumber(words[3])  --lon
								-- earth_nav[earth_nav_num][4] = words[8]  --id
								-- earth_nav[earth_nav_num][5] = words[9]  --ICAO
								-- earth_nav[earth_nav_num][6] = words[5] --freq
								-- earth_nav[earth_nav_num][7] = words[11] --name
								-- earth_nav[earth_nav_num][8] = words[10] --reg_code
								-- earth_nav[earth_nav_num][9] = 0
								-- old_type = 3
								-- old_freq = words[5]
								-- old_icao = "" --words[9]
								-- old_id = words[8]
							-- elseif words[1] == "13" then	-- DME
								-- earth_nav_num = earth_nav_num + 1
								-- earth_nav[earth_nav_num] = {}  		--new row
								-- earth_nav[earth_nav_num][1] = 5			--type 5-only DME
								-- earth_nav[earth_nav_num][2] = tonumber(words[2])  --lat
								-- earth_nav[earth_nav_num][3] = tonumber(words[3])  --lon
								-- earth_nav[earth_nav_num][4] = words[8]  --id
								-- earth_nav[earth_nav_num][5] = words[9]  --ICAO
								-- earth_nav[earth_nav_num][6] = words[5] --freq
								-- earth_nav[earth_nav_num][7] = words[11] --name
								-- earth_nav[earth_nav_num][8] = words[10] --reg_code
								-- earth_nav[earth_nav_num][9] = 0
								-- old_type = 5
								-- old_freq = words[5]
								-- old_icao = "" --words[9]
								-- old_id = words[8]
							-- end
						-- end
					-- --------
					-- end
				-- end
				-- line = file_navdata:read()
				-- ------------
			-- end
		-- end
		-- file_navdata:close()
		-- -- fixes
		-- file_name = "Custom Data/earth_fix.dat"
		-- file_navdata = io.open(file_name, "r")
		-- if file_navdata ~= nil then
			-- -- looking for fix
			-- line = file_navdata:read()
			-- line = file_navdata:read()
			-- line = file_navdata:read()
			-- while line do
				-- i = 0
				-- j = 0
				-- line_trim = ""
				-- line_char = ""
				-- line_lenght = string.len(line)
				-- if line_lenght > 0 then
					-- for k = 1, line_lenght do
						-- line_char = string.sub(line, k, k)
						-- if line_char == " " then
							-- if i == 1 then
								-- j = j + 1
								-- words[j] = line_trim
								-- i = 0
								-- line_trim = ""
							-- end
						-- else
							-- line_trim = line_trim .. line_char
							-- i = 1
						-- end
					-- end
					-- if string.len(line_trim) > 0 then
						-- j = j + 1
						-- words[j] = line_trim
					-- end
					
					-- if j > 0 then
						-- if string.len(words[j]) > 1 and string.byte(words[j], -1) == 13 then	-- CR
							-- words[j] = string.sub(words[j], 1, -2)
						-- end
					-- end
					
					
					-- if j > 4 then
						-- earth_nav_num = earth_nav_num + 1
						-- earth_nav[earth_nav_num] = {}  		--new row
						-- earth_nav[earth_nav_num][1] = 4			--type 4-FIX
						-- earth_nav[earth_nav_num][2] = tonumber(words[1])  --lat
						-- earth_nav[earth_nav_num][3] = tonumber(words[2])  --lon
						-- earth_nav[earth_nav_num][4] = words[3]  --id
						-- earth_nav[earth_nav_num][5] = words[4]  --ICAO
						-- earth_nav[earth_nav_num][6] = "" --freq
						-- earth_nav[earth_nav_num][7] = "" --name
						-- earth_nav[earth_nav_num][8] = words[5] --reg_code
						-- earth_nav[earth_nav_num][9] = 0
					-- end
				-- end
				-- line = file_navdata:read()
			-- end
			-- file_navdata:close()
		-- end
	-- end
	
	-- find_airac_cycle(airac_cycle)
	
-- end


function find_airac_cycle(a_c)

	local ii = 0
	
	airac_navdata_active = ""
	
	for ii = 1, cycle_n do
		if cycle_data[ii][1] == a_c then
			airac_navdata_active = cycle_data[ii][2]
			break
		end
	end

end

function detect_apt_dat()

	local navdata_ok = 1
	local apt_line = ""
	
	local file_navdata_log = io.open("Log.txt", "r")
	if file_navdata_log ~= nil then
		log_line = file_navdata_log:read()
		file_navdata_log:close()
	end

	local file_navdata2 = io.open(file_path .. FILE_NAME_APT_DAT, "r")
	if file_navdata2 == nil then
		navdata_ok = 0
	else
		apt_line = file_navdata2:read()
		file_navdata2:close()
		if apt_line ~= log_line then
			navdata_ok = 0
		end
	end
	
	local file_navdata3 = io.open(file_path .. FILE_NAME_RNW_DAT, "r")
	if file_navdata3 == nil then
		navdata_ok = 0
	else
		apt_line = file_navdata3:read()
		file_navdata3:close()
		if apt_line ~= log_line then
			navdata_ok = 0
		end
	end
	
	if navdata_ok == 0 then
		create_apt_rnw_dat2()
	end
	
end


function create_apt_rnw_dat2()

	local apt_line = ""
	local apt_word = {}
	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local mm = 0
	local token = ""
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	
	local apt_icao = ""
	local apt_lat = "0"
	local apt_lon = "0"
	local apt_tns_alt = "0"
	local apt_tns_lvl = "0"
	local apt_rnw0 = ""
	local apt_rnw_lat0 = ""
	local apt_rnw_lon0 = ""
	local apt_rnw1 = ""
	local apt_rnw_lat1 = ""
	local apt_rnw_lon1 = ""
	local apt_rnw_lenght = "0"
	local num_rnw = 0
	local apt_rnw = {}
	local apt_rnw_lat_start = {}
	local apt_rnw_lon_start = {}
	local apt_rnw_lat_end = {}
	local apt_rnw_lon_end = {}
	local apt_len = {}
	local apt_rnw_crs = {}
	local apt_idx = {}
	
	local sort_rnw = ""
	local sort_rnw_lat_start = ""
	local sort_rnw_lon_start = ""
	local sort_rnw_lat_end = ""
	local sort_rnw_lon_end = ""
	local sort_len = ""
	local sort_rnw_crs = ""
	local sort_idx = 0
	local temp_idx = 0
	
	local lat_temp = "0"
	local lon_temp = "0"
	local longest_rnw = 0
	
	local nd_lat = 0
	local nd_lon = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_x = 0
	local nd_y = 0
	local nd_dis = 0
	local nd_hdg = 0

	local fms_line = ""

	
	local apt_file_name = "Resources/default scenery/default apt dat/Earth nav data/apt.dat"
	local file_aptdata = io.open(apt_file_name, "r")
	if file_aptdata ~= nil then
		
		local file_navdata2 = io.open(file_path .. FILE_NAME_APT_DAT, "w")
		if file_navdata2 == nil then
			file_aptdata:close()
			return
		end
		
		local file_navdata3 = io.open(file_path .. FILE_NAME_RNW_DAT, "w")
		if file_navdata3 == nil then
			file_navdata2:close()
			file_aptdata:close()
			return
		end
		
		if log_line ~= nil then
			fms_line = log_line .. "\n"
			--fms_line = log_line .. "\10"
			file_navdata2:write(fms_line)
			file_navdata3:write(fms_line)
			fms_line = ""
		end
		
		apt_line = file_aptdata:read()
		while apt_line do
			ii = 0
			jj = 0
			line_trim = ""
			line_char = ""
			line_lenght = string.len(apt_line)
			if line_lenght > 0 then
				for kk = 1, line_lenght do
					line_char = string.sub(apt_line, kk, kk)
					if line_char == " " then
						if ii == 1 then
							jj = jj + 1
							apt_word[jj] = line_trim
							ii = 0
							line_trim = ""
						end
					else
						line_trim = line_trim .. line_char
						ii = 1
					end
				end
				if string.len(line_trim) > 0 then
					jj = jj + 1
					apt_word[jj] = line_trim
				end
				
				if jj > 0 then
					if string.len(apt_word[jj]) > 1 and string.byte(apt_word[jj], -1) == 13 then	-- CR
						apt_word[jj] = string.sub(apt_word[jj], 1, -2)
					end
				end
					
				-- Read airport datum_lat, datum_lon
				if jj > 5 then		--new airport
					
					if apt_word[1] == "1" or apt_word[1] == "16" or apt_word[1] == "17" then
						if apt_icao ~= "" then
							-- Write B738X_apt.dat
							fms_line = apt_icao .. " " .. apt_lat .. " " .. apt_lon .. " " .. apt_tns_alt .. " " .. apt_tns_lvl
							fms_line = fms_line .. " " .. tostring(longest_rnw) .. "\n"
							--fms_line = fms_line .. " " .. tostring(longest_rnw) .. "\10"
							file_navdata2:write(fms_line)
							
							-- Write B738X_rnw.dat
							if num_rnw > 1 then
								-- Sort runways
								for kk = 1, num_rnw - 1 do
									mm = kk + 1 
									for ll = mm, num_rnw do
										if apt_idx[kk] > apt_idx[ll] then
											sort_rnw = apt_rnw[kk]
											sort_rnw_lat_start = apt_rnw_lat_start[kk]
											sort_rnw_lon_start = apt_rnw_lon_start[kk]
											sort_rnw_lat_end = apt_rnw_lat_end[kk]
											sort_rnw_lon_end = apt_rnw_lon_end[kk]
											sort_len = apt_len[kk]
											sort_idx = apt_idx[kk]
											sort_rnw_crs = apt_rnw_crs[kk]
											apt_rnw[kk] = apt_rnw[ll]
											apt_rnw_lat_start[kk] = apt_rnw_lat_start[ll]
											apt_rnw_lon_start[kk] = apt_rnw_lon_start[ll]
											apt_rnw_lat_end[kk] = apt_rnw_lat_end[ll]
											apt_rnw_lon_end[kk] = apt_rnw_lon_end[ll]
											apt_len[kk] = apt_len[ll]
											apt_idx[kk] = apt_idx[ll]
											apt_rnw_crs[kk] = apt_rnw_crs[ll]
											apt_rnw[ll] = sort_rnw
											apt_rnw_lat_start[ll] = sort_rnw_lat_start
											apt_rnw_lon_start[ll] = sort_rnw_lon_start
											apt_rnw_lat_end[ll] = sort_rnw_lat_end
											apt_rnw_lon_end[ll] = sort_rnw_lon_end
											apt_len[ll] = sort_len
											apt_rnw_crs[ll] = sort_rnw_crs
											apt_idx[ll] = sort_idx
										end
									end
								end
								for kk = 1, num_rnw do
									fms_line = apt_icao .. " " .. apt_rnw[kk] .. " " .. apt_rnw_lat_start[kk] .. " " .. apt_rnw_lon_start[kk] .. " "
									fms_line = fms_line .. apt_rnw_lat_end[kk] .. " " .. apt_rnw_lon_end[kk] .. " " .. apt_len[kk] .. " "
									fms_line = fms_line .. apt_rnw_crs[kk] .. "\n"
									--fms_line = fms_line .. apt_rnw_crs[kk] .. "\10"
									file_navdata3:write(fms_line)
								end
							end
						end
						
						apt_icao = ""
						apt_lat = "0"
						apt_lon = "0"
						apt_tns_alt = "0"
						apt_tns_lvl = "0"
						apt_rnw0 = ""
						apt_rnw1 = ""
						apt_rnw_lat0 = ""
						apt_rnw_lon0 = ""
						apt_rnw_lat1 = ""
						apt_rnw_lon1 = ""
						apt_rnw_lenght = "0"
						num_rnw = 0
						apt_rnw = {}
						apt_rnw_lat_start = {}
						apt_rnw_lon_start = {}
						apt_rnw_lat_end = {}
						apt_rnw_lon_end = {}
						apt_len = {}
						apt_rnw_crs = {}
						apt_idx = {}
						longest_rnw = 0
						
					end
				end
				
				if jj == 3 then
					if apt_word[1] == "1302" and apt_word[2] == "datum_lat" then
						--lat_temp = apt_word[3]
						if apt_lat == "0" then
							apt_lat = apt_word[3]
						end
					end
					if apt_word[1] == "1302" and apt_word[2] == "datum_lon" then
						--lon_temp = apt_word[3]
						if apt_lon == "0" then
							apt_lon = apt_word[3]
						end
					end
					if apt_word[1] == "1302" and apt_word[2] == "transition_alt" then
						apt_tns_alt = apt_word[3]
					end
					if apt_word[1] == "1302" and apt_word[2] == "transition_level" then
						apt_tns_lvl = apt_word[3]
					end
				end
				
				-- if jj > 1 then
					-- if apt_word[1] == "1302" and apt_word[2] == "icao_code" then
						-- if jj == 3 then
							-- --save_airport = 1
							-- apt_icao = apt_word[3]
							-- apt_lat = lat_temp
							-- apt_lon = lon_temp
						-- end
						-- lat_temp = "0"
						-- lon_temp = "0"
					-- end
				-- end
				-- add protect against missing datas
				if jj > 5 then
					if apt_word[1] == "1" and string.len(apt_word[5]) == 4 then
						apt_icao = apt_word[5]
						apt_lat = "0"	--lat_temp
						apt_lon = "0"	--lon_temp
						lat_temp = "0"
						lon_temp = "0"
					end
				end
				
				-- Read runway data
				if jj > 19 then
					if apt_word[1] == "100" then
						apt_rnw0 = apt_word[9]
						apt_rnw_lat0 = apt_word[10]
						apt_rnw_lon0 = apt_word[11]
						apt_rnw1 = apt_word[18]
						apt_rnw_lat1 = apt_word[19]
						apt_rnw_lon1 = apt_word[20]
						-- calc runway lenght
						
						nd_lat = tonumber(apt_rnw_lat0)
						nd_lon = tonumber(apt_rnw_lon0)
						nd_lat2 = tonumber(apt_rnw_lat1)
						nd_lon2 = tonumber(apt_rnw_lon1)
						if nd_lat == nil or nd_lon == nil or nd_lat2 == nil or nd_lon2 == nil then
							-- bad data
						else
						
							nd_dis = nd_calc_dist2(nd_lat, nd_lon, nd_lat2, nd_lon2)
							
							nd_dis = nd_dis * 1852	-- in m
							nd_dis = math.floor(nd_dis + 0.5)
							
							nd_lat = math.rad(nd_lat)
							nd_lon = math.rad(nd_lon)
							nd_lat2 = math.rad(nd_lat2)
							nd_lon2 = math.rad(nd_lon2)
							
							nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
							nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
							nd_hdg = math.atan2(nd_y, nd_x)
							nd_hdg = math.deg(nd_hdg)
							--nd_hdg = math.floor(nd_hdg + 0.5)
							nd_hdg = (nd_hdg + 360) % 360
							
							apt_rnw_lenght = tostring(nd_dis)
							num_rnw = num_rnw + 1
							apt_rnw[num_rnw] = apt_rnw0
							apt_rnw_lat_start[num_rnw] = apt_rnw_lat0
							apt_rnw_lon_start[num_rnw] = apt_rnw_lon0
							apt_rnw_lat_end[num_rnw] = apt_rnw_lat1
							apt_rnw_lon_end[num_rnw] = apt_rnw_lon1
							apt_len[num_rnw] = apt_rnw_lenght
							apt_rnw_crs[num_rnw] = tostring(nd_hdg)
							
							temp_idx = tonumber(apt_rnw0)
							if temp_idx == nil then
								temp_idx = tonumber(string.sub(apt_rnw0, 1, -2))
								if temp_idx == nil then
									apt_idx[num_rnw] = 0
								else
									apt_idx[num_rnw] = temp_idx
								end
								if string.sub(apt_rnw0, -1, -1) == "L" then
									apt_idx[num_rnw] = apt_idx[num_rnw] + 0.3
								elseif string.sub(apt_rnw0, -1, -1) == "R" then
									apt_idx[num_rnw] = apt_idx[num_rnw] + 0.7
								end
							else
								apt_idx[num_rnw] = temp_idx
							end
							
							num_rnw = num_rnw + 1
							nd_hdg = (nd_hdg + 180) % 360
							apt_rnw[num_rnw] = apt_rnw1
							apt_rnw_lat_start[num_rnw] = apt_rnw_lat1
							apt_rnw_lon_start[num_rnw] = apt_rnw_lon1
							apt_rnw_lat_end[num_rnw] = apt_rnw_lat0
							apt_rnw_lon_end[num_rnw] = apt_rnw_lon0
							apt_len[num_rnw] = apt_rnw_lenght
							apt_rnw_crs[num_rnw] = tostring(nd_hdg)
							temp_idx = tonumber(apt_rnw1)
							if temp_idx == nil then
								temp_idx = tonumber(string.sub(apt_rnw1, 1, -2))
								if temp_idx == nil then
									apt_idx[num_rnw] = 0
								else
									apt_idx[num_rnw] = temp_idx
								end
								if string.sub(apt_rnw1, -1, -1) == "L" then
									apt_idx[num_rnw] = apt_idx[num_rnw] + 0.3
								elseif string.sub(apt_rnw1, -1, -1) == "R" then
									apt_idx[num_rnw] = apt_idx[num_rnw] + 0.7
								end
							else
								apt_idx[num_rnw] = temp_idx
							end
							if longest_rnw < nd_dis then
								longest_rnw = nd_dis
							end
							
							-- add protect against missing datas
							if apt_lat == "0" and apt_lon == "0" then
								apt_lat = apt_rnw_lat1
								apt_lon = apt_rnw_lon1
							end
						end
					end
				end
				
				-- END OF FILE
				if jj > 0 then
					if apt_word[1] == "99" then
						--if apt_word[1] == "1" or apt_word[1] == "16" or apt_word[1] == "17" then
							if apt_icao ~= "" then
								-- Write B738X_apt.dat
								fms_line = apt_icao .. " " .. apt_lat .. " " .. apt_lon .. " " .. apt_tns_alt .. " " .. apt_tns_lvl
								fms_line = fms_line .. " " .. tostring(longest_rnw) .. "\n"
								--fms_line = fms_line .. " " .. tostring(longest_rnw) .. "\10"
								file_navdata2:write(fms_line)
								
								-- Write B738X_rnw.dat
								if num_rnw > 1 then
									-- Sort runways
									for kk = 1, num_rnw - 1 do
										mm = kk + 1
										for ll = mm, num_rnw do
											if apt_idx[kk] < apt_idx[ll] then
												sort_rnw = apt_rnw[kk]
												sort_rnw_lat_start = apt_rnw_lat_start[kk]
												sort_rnw_lon_start = apt_rnw_lon_start[kk]
												sort_rnw_lat_end = apt_rnw_lat_end[kk]
												sort_rnw_lon_end = apt_rnw_lon_end[kk]
												sort_len = apt_len[kk]
												sort_idx = apt_idx[kk]
												sort_rnw_crs = apt_rnw_crs[kk]
												apt_rnw[kk] = apt_rnw[ll]
												apt_rnw_lat_start[kk] = apt_rnw_lat_start[ll]
												apt_rnw_lon_start[kk] = apt_rnw_lon_start[ll]
												apt_rnw_lat_end[kk] = apt_rnw_lat_end[ll]
												apt_rnw_lon_end[kk] = apt_rnw_lon_end[ll]
												apt_len[kk] = apt_len[ll]
												apt_idx[kk] = apt_idx[ll]
												apt_rnw_crs[kk] = apt_rnw_crs[ll]
												apt_rnw[ll] = sort_rnw
												apt_rnw_lat_start[ll] = sort_rnw_lat_start
												apt_rnw_lon_start[ll] = sort_rnw_lon_start
												apt_rnw_lat_end[ll] = sort_rnw_lat_end
												apt_rnw_lon_end[ll] = sort_rnw_lon_end
												apt_len[ll] = sort_len
												apt_rnw_crs[ll] = sort_rnw_crs
												apt_idx[ll] = sort_idx
											end
										end
									end
									for kk = 1, num_rnw do
										fms_line = apt_icao .. " " .. apt_rnw[kk] .. " " .. apt_rnw_lat_start[kk] .. " " .. apt_rnw_lon_start[kk] .. " "
										fms_line = fms_line .. apt_rnw_lat_end[kk] .. " " .. apt_rnw_lon_end[kk] .. " " .. apt_len[kk] .. " "
										fms_line = fms_line .. apt_rnw_crs[kk] .. "\n"
										--fms_line = fms_line .. apt_rnw_crs[kk] .. "\10"
										file_navdata3:write(fms_line)
									end
								end
							end
							------------
							apt_icao = ""
							apt_lat = "0"
							apt_lon = "0"
							apt_tns_alt = "0"
							apt_tns_lvl = "0"
							apt_rnw0 = ""
							apt_rnw1 = ""
							apt_rnw_lat0 = ""
							apt_rnw_lon0 = ""
							apt_rnw_lat1 = ""
							apt_rnw_lon1 = ""
							apt_rnw_lenght = "0"
							num_rnw = 0
							apt_rnw = {}
							apt_rnw_lat_start = {}
							apt_rnw_lon_start = {}
							apt_rnw_lat_end = {}
							apt_rnw_lon_end = {}
							apt_len = {}
							apt_rnw_crs = {}
							apt_idx = {}
							longest_rnw = 0
						--end
					end
				end
			end
			apt_line = file_aptdata:read()
		end
		file_aptdata:close()
		file_navdata2:close()
		file_navdata3:close()
	end

end


function read_apt_dat()

	local ii = 0
	local jj = 0
	local kk = 0
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	local apt_line = ""
	local apt_word = {}
	local mm = 0
	
	local apt_first = 0
	
	apt_data_num = 0
	apt_data = {}
	
	local file_navdata2 = io.open(file_path .. FILE_NAME_APT_DAT, "r")
	if file_navdata2 ~= nil then
		apt_line = file_navdata2:read()
		if string.sub(apt_line, 1, 7) == "log.txt" then
			apt_line = file_navdata2:read()
		end
		while apt_line do
			if apt_first ~= 0 then
				ii = 0
				jj = 0
				line_trim = ""
				line_char = ""
				line_lenght = string.len(apt_line)
				if line_lenght > 0 then
					for kk = 1, line_lenght do
						line_char = string.sub(apt_line, kk, kk)
						if line_char == " " then
							if ii == 1 then
								jj = jj + 1
								apt_word[jj] = line_trim
								ii = 0
								line_trim = ""
							end
						else
							line_trim = line_trim .. line_char
							ii = 1
						end
					end
					if string.len(line_trim) > 0 then
						jj = jj + 1
						apt_word[jj] = line_trim
					end
					
					if jj > 0 then
						if string.len(apt_word[jj]) > 1 and string.byte(apt_word[jj], -1) == 13 then	-- CR
							apt_word[jj] = string.sub(apt_word[jj], 1, -2)
						end
					end
					
					
					if jj == 6 then
						apt_data_num = apt_data_num + 1
						apt_data[apt_data_num] = {}
						apt_data[apt_data_num][1] = apt_word[1]		-- ICAO
						apt_data[apt_data_num][2] = tonumber(apt_word[2])		-- lat
						apt_data[apt_data_num][3] = tonumber(apt_word[3])		-- lon
						mm = tonumber(apt_word[4])		-- trans alt
						if mm == nil then
							apt_data[apt_data_num][4] = 0		-- trans alt
						else
							apt_data[apt_data_num][4] = mm		-- trans alt
						end
						mm = tonumber(apt_word[5])		-- trans lvl
						if mm == nil then
							mm = tonumber(string.sub(apt_word[5], 3, -1))
							if mm == nil then
								apt_data[apt_data_num][5] = 0		-- trans lvl
							else
								apt_data[apt_data_num][5] = mm * 100		-- trans lvl
							end
						else
							apt_data[apt_data_num][5] = mm		-- trans lvl
						end
						apt_data[apt_data_num][6] = tonumber(apt_word[6])		-- longest rnw
					end
				end
			end
			apt_first = 1
			apt_line = file_navdata2:read()
		end
		file_navdata2:close()
	end

end

function read_rnw_dat()

	local ii = 0
	local jj = 0
	local kk = 0
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	local apt_line = ""
	local apt_word = {}
	
	local apt_first = 0
	
	local file_navdata2 = io.open(file_path .. FILE_NAME_RNW_DAT, "r")
	if file_navdata2 ~= nil then
		apt_line = file_navdata2:read()
		if string.sub(apt_line, 1, 7) == "log.txt" then
			apt_line = file_navdata2:read()
		end
		while apt_line do
			if apt_first ~= 0 then
				ii = 0
				jj = 0
				line_trim = ""
				line_char = ""
				line_lenght = string.len(apt_line)
				if line_lenght > 0 then
					for kk = 1, line_lenght do
						line_char = string.sub(apt_line, kk, kk)
						if line_char == " " then
							if ii == 1 then
								jj = jj + 1
								apt_word[jj] = line_trim
								ii = 0
								line_trim = ""
							end
						else
							line_trim = line_trim .. line_char
							ii = 1
						end
					end
					if string.len(line_trim) > 0 then
						jj = jj + 1
						apt_word[jj] = line_trim
					end
					
					if jj > 0 then
						if string.len(apt_word[jj]) > 1 and string.byte(apt_word[jj], -1) == 13 then	-- CR
							apt_word[jj] = string.sub(apt_word[jj], 1, -2)
						end
					end
					
					if jj == 8 then
						rnw_data_num = rnw_data_num + 1
						rnw_data[rnw_data_num] = {}
						rnw_data[rnw_data_num][1] = apt_word[1]		-- ICAO
						rnw_data[rnw_data_num][2] = apt_word[2]		-- runway
						rnw_data[rnw_data_num][3] = tonumber(apt_word[3])		-- lat start
						rnw_data[rnw_data_num][4] = tonumber(apt_word[4])		-- lon start
						rnw_data[rnw_data_num][5] = tonumber(apt_word[5])		-- lat end
						rnw_data[rnw_data_num][6] = tonumber(apt_word[6])		-- lon end
						rnw_data[rnw_data_num][7] = tonumber(apt_word[7])		-- lenght
						rnw_data[rnw_data_num][8] = tonumber(apt_word[8])		-- course
					end
				end
			end
			apt_first = 1
			apt_line = file_navdata2:read()
		end
		file_navdata2:close()
		
	end
	--dump_rnw_data()
	
end


function read_mag_declination()

	local ii = 0
	local jj = 0
	local kk = 0
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	local apt_line = ""
	local apt_word = {}
	local mm = 0
	local md1 = 1
	local md2 = 0
	
	mag_dec = {}
	
	for ii = 1, 37 do
		mag_dec[ii] = {}
		for jj = 1, 73 do
			mag_dec[ii][jj] = 0
		end
	end
	
	local file_navdata2 = io.open(file_path .. "mag_dec.dat", "r")
	if file_navdata2 ~= nil then
		apt_line = file_navdata2:read()
		while apt_line do
				ii = 0
				jj = 0
				line_trim = ""
				line_char = ""
				line_lenght = string.len(apt_line)
				if line_lenght > 0 then
					for kk = 1, line_lenght do
						line_char = string.sub(apt_line, kk, kk)
						if line_char == "," then
							if ii == 1 then
								jj = jj + 1
								apt_word[jj] = line_trim
								ii = 0
								line_trim = ""
							end
						else
							line_trim = line_trim .. line_char
							ii = 1
						end
					end
					if string.len(line_trim) > 0 then
						jj = jj + 1
						apt_word[jj] = line_trim
					end
					
					if jj > 0 then
						if string.len(apt_word[jj]) > 1 and string.byte(apt_word[jj], -1) == 13 then	-- CR
							apt_word[jj] = string.sub(apt_word[jj], 1, -2)
						end
					end
					
					
					if jj > 4 then
						
						-- if apt_word[2] == "-89" then
							-- md1 = 1
						-- elseif apt_word[2] == "89" then
							-- md1 = 19
						-- else
							-- if string.sub(apt_word[2], 1, 1) == "-" then
								-- md1 = 10 - tonumber(string.sub(apt_word[2], 2, 2))
							-- else
								-- md1 = tonumber(string.sub(apt_word[2], 1, 1)) + 10
							-- end
						-- end
						
						if md1 < 38 then
							md2 = md2 + 1
							
							kk = tonumber(apt_word[5])
							if kk ~= nil then
								mag_dec[md1][md2] = kk
							end
							
							if md2 == 73 then
								md2 = 0
								md1 = md1 + 1
							end
						end
						
					end
				end
			apt_line = file_navdata2:read()
		end
		file_navdata2:close()
	end
	--dump_mag_dec()

end


function dump_mag_dec()
	local vvv = 0
	local www = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		for vvv = 1, 37 do
			for www = 1, 73 do
				fms_line = fms_line .. mag_dec[vvv][www] .. ","
				file_navdata2:write(fms_line)
			end
			fms_line = fms_line .. "\n"
			file_navdata2:write(fms_line)
			fms_line = ""
		end
		file_navdata2:close()
	end
end



function read_awy_dat2()

	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local mm = 0
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	local apt_line = ""
	local apt_word = {}
	
	local apt_first = 0
	local awy_temp = ""
	local awy_tempx = ""
	local awy_skip = 0
	local awy_skip_txt = ""
	local awy_skip_txt2 = ""
	
	local awy_swap = {}
	
	awy_data_num = 0
	awy_data = {}
	
	local file_name_2 = file_name_path .. "earth_awy.dat"
	local file_navdata2 = io.open(file_name_2, "r")
	
	-- read data
	apt_line = file_navdata2:read()
	while apt_line do
		--space_first = 0
		if apt_first ~= 0 then
			ii = 0
			jj = 0
			line_trim = ""
			line_char = ""
			line_lenght = string.len(apt_line)
			if line_lenght > 0 then
				for kk = 1, line_lenght do
					line_char = string.sub(apt_line, kk, kk)
					if line_char == " " then
						if ii == 1 then
							jj = jj + 1
							apt_word[jj] = line_trim
							ii = 0
							line_trim = ""
						end
					else
						line_trim = line_trim .. line_char
						ii = 1
					end
				end
				if string.len(line_trim) > 0 then
					jj = jj + 1
					apt_word[jj] = line_trim
				end
				
				if jj == 11 then
					if string.len(apt_word[11]) > 1 and string.byte(apt_word[11], -1) == 13 then	-- CR
						apt_word[11] = string.sub(apt_word[11], 1, -2)
					end
					awy_skip_txt = apt_word[11] .. apt_word[1] .. apt_word[4]
					awy_temp = apt_word[11]
					jj, kk = string.find(awy_temp, "-")
					if jj == nil then
						awy_data_num = awy_data_num + 1
						awy_data[awy_data_num] = {}
						awy_data[awy_data_num][1] = apt_word[11]	-- airway
						awy_data[awy_data_num][2] = apt_word[1]		-- navaid from
						awy_data[awy_data_num][3] = apt_word[4]		-- navaid to
						awy_data[awy_data_num][4] = apt_word[2]		-- region code from
						awy_data[awy_data_num][5] = apt_word[5]		-- region code to
						awy_data[awy_data_num][6] = apt_word[7]		-- direction restrict: Forward, Back, None
					else
						while jj ~= nil do 
							awy_tempx = string.sub(awy_temp, 1, jj - 1)
							awy_data_num = awy_data_num + 1
							awy_data[awy_data_num] = {}
							awy_data[awy_data_num][1] = awy_tempx	-- airway
							awy_data[awy_data_num][2] = apt_word[1]		-- navaid
							awy_data[awy_data_num][3] = apt_word[4]		-- navaid
							awy_data[awy_data_num][4] = apt_word[2]		-- region code from
							awy_data[awy_data_num][5] = apt_word[5]		-- region code to
							awy_data[awy_data_num][6] = apt_word[7]		-- direction restrict: Forward, Back, None
							awy_temp = string.sub(awy_temp, jj + 1, -1)
							jj, kk = string.find(awy_temp, "-")
						end
						awy_data_num = awy_data_num + 1
						awy_data[awy_data_num] = {}
						awy_data[awy_data_num][1] = awy_temp	-- airway
						awy_data[awy_data_num][2] = apt_word[1]		-- navaid
						awy_data[awy_data_num][3] = apt_word[4]		-- navaid
						awy_data[awy_data_num][4] = apt_word[2]		-- region code from
						awy_data[awy_data_num][5] = apt_word[5]		-- region code to
						awy_data[awy_data_num][6] = apt_word[7]		-- direction restrict: Forward, Back, None
					end
				end
			end
		end
		apt_first = 1
		apt_line = file_navdata2:read()
	end
	file_navdata2:close()
	
end

function find_awy(awy_from, awy_from_rc, awy)
	
	local ii = 0
	local from_find = 0
	local kk = 0
	local compare1 = ""
	local compare2 = ""
	local nd_x = 0
	local idx_rec = 0
	
	local awy_temp = {}
	local awy_temp_num = 0
	
	awy_temp2 = {}
	awy_temp_num2 = 0
	
	if string.len(awy_from_rc) > 0 then
		kk = 1
	end
	
	if awy_data_num > 0 and awy ~= "" then
		nd_x = string.byte(string.sub(awy, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_awy[nd_x][99999] > 0 then
				for ii = 1, idx_awy[nd_x][99999] do
					idx_rec = idx_awy[nd_x][ii]
--		for ii = 1, awy_data_num  do
					if awy_data[idx_rec][1] == awy then
						awy_temp_num = awy_temp_num + 1
						awy_temp[awy_temp_num] = {}
						awy_temp[awy_temp_num][1] = awy_data[idx_rec][1]
						awy_temp[awy_temp_num][2] = awy_data[idx_rec][2]
						awy_temp[awy_temp_num][3] = awy_data[idx_rec][3]
						awy_temp[awy_temp_num][4] = awy_data[idx_rec][4]
						awy_temp[awy_temp_num][5] = awy_data[idx_rec][5]
						awy_temp[awy_temp_num][6] = awy_data[idx_rec][6]
						awy_temp[awy_temp_num][7] = 0
						awy_temp[awy_temp_num][8] = 0
						if kk == 0 then
							if awy_data[idx_rec][6] == "N" or awy_data[idx_rec][6] == "F" then
								if awy_data[idx_rec][2] == awy_from then --or awy_data[ii][3] == awy_from then
									from_find = 1
								end
							end
							if awy_data[idx_rec][6] == "N" or awy_data[idx_rec][6] == "B" then
								if awy_data[idx_rec][3] == awy_from then
									from_find = 1
								end
							end
						else
							if awy_data[idx_rec][6] == "N" or awy_data[idx_rec][6] == "F" then
								if awy_data[idx_rec][2] == awy_from and awy_data[idx_rec][4] == awy_from_rc then
									from_find = 1
								end
							end
							if awy_data[idx_rec][6] == "N" or awy_data[idx_rec][6] == "B" then
								if awy_data[idx_rec][3] == awy_from and awy_data[idx_rec][5] == awy_from_rc then
									from_find = 1
								end
							end
						end
					end
				end
			end
		end
	end
	
	--delete the same airways
	if awy_temp_num == 1 then
		awy_temp_num2 = awy_temp_num2 + 1
		awy_temp2[awy_temp_num2] = {}
		for kk = 1, 8 do
			awy_temp2[awy_temp_num2][kk] = awy_temp[1][kk]
		end
	elseif awy_temp_num > 1 then
		compare1 = awy_temp[1][1] .. awy_temp[1][2] .. awy_temp[1][3]
		awy_temp_num2 = awy_temp_num2 + 1
		awy_temp2[awy_temp_num2] = {}
		for kk = 1, 8 do
			awy_temp2[awy_temp_num2][kk] = awy_temp[1][kk]
		end
		for ii = 2, awy_temp_num do
			compare2 = awy_temp[ii][1] .. awy_temp[ii][2] .. awy_temp[ii][3]
			if compare1 ~= compare2 then
				awy_temp_num2 = awy_temp_num2 + 1
				awy_temp2[awy_temp_num2] = {}
				for kk = 1, 8 do
					awy_temp2[awy_temp_num2][kk] = awy_temp[ii][kk]
				end
			end
			compare1 = compare2
		end
	end
	
	if from_find == 0 then
		awy_temp_num2 = 0
	end
	
	return from_find

end


function find_awy_path(awy_from, awy_from_rc, awy_to, awy_to_rc, awy)

	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local awy_idx = 0
	local awy_idx2 = 0
	local from_tmp = awy_from
	local from_tmp_rc = awy_from_rc
	local to_find = 0
	local awy_repeat_n = 0
	local awy_repeat = 0
	local aw_used = 0
	local awy_enable = 0
	
	awy_path = {}
	awy_path_num = 0
	
	if string.len(awy_from_rc) > 0 then
		kk = 1
	end
	
	if string.len(awy_to_rc) > 0 then
		ll = 1
	end
	
	if awy_temp_num2 > 0 then
		
		awy_repeat_n = 2
		for awy_repeat = 1, awy_repeat_n do
			
			awy_path = {}
			awy_path_num = 0
			
			for jj = 1, awy_temp_num2 do 
				for ii = 1, awy_temp_num2 do
					
					awy_enable = 0
					if awy_repeat == 1 then
						if awy_temp2[ii][7] == 0 and awy_temp2[ii][8] == 0 then
							awy_enable = 1
						end
					else
						awy_enable = 1
						if awy_temp2[ii][7] == 1 and awy_temp2[ii][8] == 1 then
							awy_enable = 0
						end
					end
					
					if awy_enable == 1 then
						if kk == 0 then
							aw_used = 0
							if awy_temp2[ii][7] == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "F") then
								if awy_temp2[ii][2] == from_tmp then
									--if awy_path_num == 0 or awy_temp2[ii][3] ~= awy_path[awy_path_num][1] then
										awy_path_num = awy_path_num + 1
										awy_path[awy_path_num] = {}
										awy_path[awy_path_num][1] = awy_temp2[ii][3]
										awy_path[awy_path_num][2] = awy_temp2[ii][5]
										awy_temp2[ii][7] = 1	-- used
										from_tmp = awy_temp2[ii][3]
										from_tmp_rc = awy_temp2[ii][5]
										aw_used = 1
									--end
								end
							end
							if awy_temp2[ii][8] == 0 and aw_used == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "B") then
								if awy_temp2[ii][3] == from_tmp then
									--if awy_path_num == 0 or awy_temp2[ii][2] ~= awy_path[awy_path_num][1] then
										awy_path_num = awy_path_num + 1
										awy_path[awy_path_num] = {}
										awy_path[awy_path_num][1] = awy_temp2[ii][2]
										awy_path[awy_path_num][2] = awy_temp2[ii][4]
										awy_temp2[ii][8] = 1	-- used
										from_tmp = awy_temp2[ii][2]
										from_tmp_rc = awy_temp2[ii][4]
										aw_used = 1
									--end
								end
							end
						else
							aw_used = 0
							if awy_temp2[ii][7] == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "F") then
								if awy_temp2[ii][2] == from_tmp and awy_temp2[ii][4] == from_tmp_rc then
									awy_path_num = awy_path_num + 1
									awy_path[awy_path_num] = {}
									awy_path[awy_path_num][1] = awy_temp2[ii][3]
									awy_path[awy_path_num][2] = awy_temp2[ii][5]
									awy_temp2[ii][7] = 1	-- used
									from_tmp = awy_temp2[ii][3]
									from_tmp_rc = awy_temp2[ii][5]
									aw_used = 1
								end
							end
							if awy_temp2[ii][8] == 0 and aw_used == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "B") then
								if awy_temp2[ii][3] == from_tmp and awy_temp2[ii][5] == from_tmp_rc then
									awy_path_num = awy_path_num + 1
									awy_path[awy_path_num] = {}
									awy_path[awy_path_num][1] = awy_temp2[ii][2]
									awy_path[awy_path_num][2] = awy_temp2[ii][4]
									awy_temp2[ii][8] = 1	-- used
									from_tmp = awy_temp2[ii][2]
									from_tmp_rc = awy_temp2[ii][4]
									aw_used = 1
								end
							end
						end
						
						if ll == 0 then
							if awy_to == from_tmp then
								to_find = 1
								break
							end
						else
							if awy_to == from_tmp and awy_to_rc == from_tmp_rc then
								to_find = 1
								break
							end
						end
					end
				end
				if to_find == 1 then
					break
				end
			end
			if to_find == 1 then
				break
			end
			
			from_tmp = awy_from
			from_tmp_rc = awy_from_rc
		end
	
	end
	
	--dump_awy()
	--dump_awy2()
	
	return to_find

end


function via_via_check()
	
	if calc_rte_enable2 == 0 then
		if via_via_ok == 1 then
			fpln_num2 = fpln_num2 + 1
			fpln_data2[fpln_num2] = {}
			fpln_data2[fpln_num2][1] = ""
			fpln_data2[fpln_num2][2] = via_via_entry
			fpln_data2[fpln_num2][3] = ""
			fpln_data2[fpln_num2][4] = 1	--legs_data_idx
			fpln_data2[fpln_num2][5] = 0	-- num_legs_data
			via_via_entry = ""
			via_via_ok = 0
			
			if legs_num > 1 then
				rte_exec = 1
			end
			
			find_awy(fpln_data2[fpln_num2-1][1], fpln_data2[fpln_num2-1][3], fpln_data2[fpln_num2][2])
		end
	end
end

function via_via_add()
	
	local idx_tmp = 0
	local idx_tmp2 = 0
	
	via_via_ok = 0
	
	if find_via_via(fpln_data2[fpln_num2-1][1], fpln_data2[fpln_num2-1][3], fpln_data2[fpln_num2][2], entry) == 0 then
		entry = ">INVALID ENTRY"
	else
		--entry = tostring(awy_path_num)
		--dump_awy2()
		fpln_data2[fpln_num2][4] = fpln_data2[fpln_num2-1][4] + fpln_data2[fpln_num2-1][5]	--legs_data_idx
		idx_tmp = fpln_data2[fpln_num2][4] + fpln_data2[fpln_num2][5]
		fpln_data2[fpln_num2][5] = awy_path_num
		
		-- add airways waypoints
		idx_tmp2 = fpln_data2[fpln_num2][4]
		fpln_add_leg_dir2(idx_tmp, idx_tmp2, fpln_data2[fpln_num2][2])
		
		via_via_entry = entry
		via_via_ok = 1
		
		entry = ""
		
		if legs_num > 1 then
			rte_exec = 1
		end
	
	end
	
end

function find_via_via(awy_from, awy_from_rc, awy1, awy2)
	
	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local mm = 0
	local awy_idx = 0
	local awy_idx2 = 0
	local from_tmp = awy_from
	local from_tmp_rc = awy_from_rc
	local to_find = 0
	
	local check_awy = 0
	local awy_repeat_n = 0
	local awy_repeat = 0
	local aw_used = 0
	local awy_enable = 0
	
	local nd_x = 0
	local idx_rec = 0
	
	local awy_temp_next_num = 0
	local awy_temp_next = {}
	
	awy_path = {}
	awy_path_num = 0
	
	if string.len(awy_from_rc) > 0 then
		kk = 1
	end
	
	
	-- find awy2
	if awy_data_num > 0 and awy2 ~= "" then
		nd_x = string.byte(string.sub(awy2, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_awy[nd_x][99999] > 0 then
				for ll = 1, idx_awy[nd_x][99999] do
					idx_rec = idx_awy[nd_x][ll]
		-- for ll = 1, awy_data_num do
					if awy_data[idx_rec][1] == awy2 then
						awy_temp_next_num = awy_temp_next_num + 1
						awy_temp_next[awy_temp_next_num] = {}
						for ii = 1, 6 do
							awy_temp_next[awy_temp_next_num][ii] = awy_data[idx_rec][ii]
						end
					end
				end
			end
		end
	end
	
	if awy_temp_next_num > 0 then
	
		if awy_temp_num2 > 0 then
			
			awy_repeat_n = 2
			for awy_repeat = 1, awy_repeat_n do
				
				awy_path = {}
				awy_path_num = 0
				
				for jj = 1, awy_temp_num2 do 
					for ii = 1, awy_temp_num2 do
				
						awy_enable = 0
						if awy_repeat == 1 then
							if awy_temp2[ii][7] == 0 and awy_temp2[ii][8] == 0 then
								awy_enable = 1
							end
						else
							awy_enable = 1
							if awy_temp2[ii][7] == 1 and awy_temp2[ii][8] == 1 then
								awy_enable = 0
							end
						end
				
						if awy_enable == 1 then
							if kk == 0 then
								aw_used = 0
								if awy_temp2[ii][7] == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "F") then
									if awy_temp2[ii][2] == from_tmp then
										awy_path_num = awy_path_num + 1
										awy_path[awy_path_num] = {}
										awy_path[awy_path_num][1] = awy_temp2[ii][3]
										awy_path[awy_path_num][2] = awy_temp2[ii][5]
										awy_temp2[ii][7] = 1	-- used
										from_tmp = awy_temp2[ii][3]
										from_tmp_rc = awy_temp2[ii][5]
										check_awy = 1
										aw_used = 1
									end
								end
								if awy_temp2[ii][8] == 0 and aw_used == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "B") then
									if awy_temp2[ii][3] == from_tmp then
										awy_path_num = awy_path_num + 1
										awy_path[awy_path_num] = {}
										awy_path[awy_path_num][1] = awy_temp2[ii][2]
										awy_path[awy_path_num][2] = awy_temp2[ii][4]
										awy_temp2[ii][8] = 1	-- used
										from_tmp = awy_temp2[ii][2]
										from_tmp_rc = awy_temp2[ii][4]
										check_awy = 1
									end
								end
							else
								aw_used = 0
								if awy_temp2[ii][7] == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "F") then
									if awy_temp2[ii][2] == from_tmp and awy_temp2[ii][4] == from_tmp_rc then
										awy_path_num = awy_path_num + 1
										awy_path[awy_path_num] = {}
										awy_path[awy_path_num][1] = awy_temp2[ii][3]
										awy_path[awy_path_num][2] = awy_temp2[ii][5]
										awy_temp2[ii][7] = 1	-- used
										from_tmp = awy_temp2[ii][3]
										from_tmp_rc = awy_temp2[ii][5]
										check_awy = 1
										aw_used = 1
									end
								end
								if awy_temp2[ii][8] == 0 and aw_used == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "B") then
									if awy_temp2[ii][3] == from_tmp and awy_temp2[ii][5] == from_tmp_rc then
										awy_path_num = awy_path_num + 1
										awy_path[awy_path_num] = {}
										awy_path[awy_path_num][1] = awy_temp2[ii][2]
										awy_path[awy_path_num][2] = awy_temp2[ii][4]
										awy_temp2[ii][8] = 1	-- used
										from_tmp = awy_temp2[ii][2]
										from_tmp_rc = awy_temp2[ii][4]
										check_awy = 1
									end
								end
							end
							
							if check_awy == 1 then
									
								for ll = 1, awy_temp_next_num do
									if awy_temp_next[ll][2] == from_tmp and awy_temp_next[ll][4] == from_tmp_rc then
										to_find = 1
									end
									if awy_temp_next[ll][3] == from_tmp and awy_temp_next[ll][5] == from_tmp_rc then
										to_find = 1
									end
									if to_find == 1 then
										if awy_path_num == 1 and awy_temp_next[ll][3] == "N" then
											awy_path_num = 0
										end
										break
									end
								end
							end
							
							check_awy = 0
							
							if to_find == 1 then
								break
							end
						end
					end
					if to_find == 1 then
						break
					end
				end
				if to_find == 1 then
					break
				end
				
				from_tmp = awy_from
				from_tmp_rc = awy_from_rc
			end
		
		end
		--dump_awy2()
		if awy_path_num == 0 then
			to_find = 0
		end
	
	end
	
	return to_find

end

function find_via_viax(awy_from, awy_from_rc, awy1, awy2)
	
	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local mm = 0
	local awy_idx = 0
	local awy_idx2 = 0
	local from_tmp = awy_from
	local from_tmp_rc = awy_from_rc
	local to_find = 0
	
	local check_awy = 0
	local awy_repeat_n = 0
	local awy_repeat = 0
	local aw_used = 0
	local awy_enable = 0
	
	local nd_x = 0
	local idx_rec = 0
	
	awy_path = {}
	awy_path_num = 0
	
	if string.len(awy_from_rc) > 0 then
		kk = 1
	end
	
	
	if awy_temp_num2 > 0 then
		
		awy_repeat_n = 2
		for awy_repeat = 1, awy_repeat_n do
			
			awy_path = {}
			awy_path_num = 0
			
			for jj = 1, awy_temp_num2 do 
				for ii = 1, awy_temp_num2 do
			
					awy_enable = 0
					if awy_repeat == 1 then
						if awy_temp2[ii][7] == 0 and awy_temp2[ii][8] == 0 then
							awy_enable = 1
						end
					else
						awy_enable = 1
						if awy_temp2[ii][7] == 1 and awy_temp2[ii][8] == 1 then
							awy_enable = 0
						end
					end
			
					if awy_enable == 1 then
						if kk == 0 then
							aw_used = 0
							if awy_temp2[ii][7] == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "F") then
								if awy_temp2[ii][2] == from_tmp then
									awy_path_num = awy_path_num + 1
									awy_path[awy_path_num] = {}
									awy_path[awy_path_num][1] = awy_temp2[ii][3]
									awy_path[awy_path_num][2] = awy_temp2[ii][5]
									awy_temp2[ii][7] = 1	-- used
									from_tmp = awy_temp2[ii][3]
									from_tmp_rc = awy_temp2[ii][5]
									check_awy = 1
									aw_used = 1
								end
							end
							if awy_temp2[ii][8] == 0 and aw_used == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "B") then
								if awy_temp2[ii][3] == from_tmp then
									awy_path_num = awy_path_num + 1
									awy_path[awy_path_num] = {}
									awy_path[awy_path_num][1] = awy_temp2[ii][2]
									awy_path[awy_path_num][2] = awy_temp2[ii][4]
									awy_temp2[ii][8] = 1	-- used
									from_tmp = awy_temp2[ii][2]
									from_tmp_rc = awy_temp2[ii][4]
									check_awy = 1
								end
							end
						else
							aw_used = 0
							if awy_temp2[ii][7] == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "F") then
								if awy_temp2[ii][2] == from_tmp and awy_temp2[ii][4] == from_tmp_rc then
									awy_path_num = awy_path_num + 1
									awy_path[awy_path_num] = {}
									awy_path[awy_path_num][1] = awy_temp2[ii][3]
									awy_path[awy_path_num][2] = awy_temp2[ii][5]
									awy_temp2[ii][7] = 1	-- used
									from_tmp = awy_temp2[ii][3]
									from_tmp_rc = awy_temp2[ii][5]
									check_awy = 1
									aw_used = 1
								end
							end
							if awy_temp2[ii][8] == 0 and aw_used == 0 and (awy_temp2[ii][6] == "N" or awy_temp2[ii][6] == "B") then
								if awy_temp2[ii][3] == from_tmp and awy_temp2[ii][5] == from_tmp_rc then
									awy_path_num = awy_path_num + 1
									awy_path[awy_path_num] = {}
									awy_path[awy_path_num][1] = awy_temp2[ii][2]
									awy_path[awy_path_num][2] = awy_temp2[ii][4]
									awy_temp2[ii][8] = 1	-- used
									from_tmp = awy_temp2[ii][2]
									from_tmp_rc = awy_temp2[ii][4]
									check_awy = 1
								end
							end
						end
						
						if check_awy == 1 then
							if awy_data_num > 0 and awy2 ~= "" then
								nd_x = string.byte(string.sub(awy2, 1, 1))
								if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
									if idx_awy[nd_x][99999] > 0 then
										for ll = 1, idx_awy[nd_x][99999] do
											idx_rec = idx_awy[nd_x][ll]
--								for ll = 1, awy_data_num do
											if awy_data[idx_rec][1] == awy2 then
												if awy_data[idx_rec][2] == from_tmp and awy_data[idx_rec][4] == from_tmp_rc then
													to_find = 1
												end
												if awy_data[idx_rec][3] == from_tmp and awy_data[idx_rec][5] == from_tmp_rc then
													to_find = 1
												end
												if to_find == 1 then
													if awy_path[1][1] == awy_data[idx_rec][2] and awy_path[1][2] == awy_data[idx_rec][4] 
													and awy_data[idx_rec][2] == "N" then
														awy_path_num = 0
													end
													if awy_path[1][1] == awy_data[idx_rec][3] and awy_path[1][2] == awy_data[idx_rec][5] 
													and awy_data[idx_rec][2] == "N" then
														awy_path_num = 0
													end
													-- if awy_path_num == 1 then
														-- awy_path_num = 0
													-- end
													break
												end
											end
										end
									end
								end
							end
						end
						
						check_awy = 0
						
						if to_find == 1 then
							break
						end
					end
				end
				if to_find == 1 then
					break
				end
			end
			if to_find == 1 then
				break
			end
			
			from_tmp = awy_from
			from_tmp_rc = awy_from_rc
		end
	
	end
	--dump_awy2()
	if awy_path_num == 0 then
		to_find = 0
	end
	
	return to_find

end


function via_add(awy_from2, awy_from_rc2)
	
	-- check via
	if find_awy(awy_from2, awy_from_rc2, entry) == 0 then
		entry = ">INVALID ENTRY"
	else
		-- add fpln -> via
		fpln_num2 = fpln_num2 + 1
		fpln_data2[fpln_num2] = {}
		fpln_data2[fpln_num2][1] = ""
		fpln_data2[fpln_num2][2] = entry
		fpln_data2[fpln_num2][3] = ""
		fpln_data2[fpln_num2][4] = 1	--legs_data_idx
		fpln_data2[fpln_num2][5] = 0	-- num_legs_data
		entry = ""
		
		if legs_num > 1 then
			rte_exec = 1
		end
	end
	
end

function via_chg(awy_from2, awy_from_rc2, via_id)
	
	local idx_tmp = 0
	local idx_tmp2 = 0
	
	-- check via
	if find_awy(awy_from2, awy_from_rc2, entry) == 0 then
		entry = ">INVALID ENTRY"
	else
		if fpln_data2[via_id][1] == "" then
			fpln_data2[via_id][2] = entry
			idx_tmp = fpln_data2[via_id-1][4] + fpln_data2[via_id-1][5]
			legs_data2[idx_tmp][9] = entry
		else
			if find_awy_path(awy_from2, awy_from_rc2, fpln_data2[via_id][1], fpln_data2[via_id][3], entry) == 0 then
				entry = ">INVALID ENTRY"
			else
				if via_id == 1 then
					fpln_data2[via_id][4] = 2	--legs_data_idx
					idx_tmp = fpln_data2[via_id][4] + fpln_data2[via_id][5]
					fpln_data2[via_id][5] = awy_path_num
				else
					fpln_data2[via_id][4] = fpln_data2[via_id-1][4] + fpln_data2[via_id-1][5]	--legs_data_idx
					idx_tmp = fpln_data2[via_id][4] + fpln_data2[via_id][5]
					fpln_data2[via_id][5] = awy_path_num
				end
				
				-- add airways waypoints
				idx_tmp2 = fpln_data2[via_id][4]
				fpln_add_leg_dir2(idx_tmp, idx_tmp2, entry)
			end
		end
		--dump_leg()
		
		entry = ""
		
		if legs_num > 1 then
			rte_exec = 1
		end
	end
	
end


function dir_via_add(awy_from2, awy_from_rc2, awy_to2, awy_to_rc2, via2, via_idx)
	
	local idx_tmp = 0
	local idx_tmp2 = 0
	
	dir_change = 0
	dir_idx = via_idx
	dir_disco = 0
	
	if via2 == "" then
		-- check navaid
		-- nav mode => distance from 0-PPOS, 1-REF ICAO, 2-DES ICAO
		find_navaid(entry, "", 0, "")
		if navaid_list_n == 0 then
			-- fmc_message_num = fmc_message_num + 1
			-- fmc_message[fmc_message_num] = NOT_IN_DATABASE
			add_fmc_msg(NOT_IN_DATABASE, 1)
		elseif navaid_list_n == 1 then
			-- add fpln -> direct navaid
			if via_idx > fpln_num2 then
				fpln_num2 = fpln_num2 + 1
				fpln_data2[fpln_num2] = {}
				fpln_data2[via_idx][1] = navaid_list[1][4]	--entry
				fpln_data2[via_idx][2] = "DIRECT"
				fpln_data2[via_idx][3] = navaid_list[1][8]	--reg_code
				if via_idx == 1 then
					if legs_num2 == 1 then
						fpln_data2[via_idx][4] = 2	--legs_data_idx
					else
						fpln_data2[via_idx][4] = 3	--legs_data_idx
					end
					fpln_data2[via_idx][5] = 1
				else
					fpln_data2[via_idx][4] = fpln_data2[via_idx-1][4] + fpln_data2[via_idx-1][5]	--legs_data_idx
					fpln_data2[via_idx][5] = 1
				end
				idx_tmp = fpln_data2[via_idx][4]
				idx_tmp2 = idx_tmp
			else
				fpln_data2[via_idx][1] = navaid_list[1][4]	--entry
				fpln_data2[via_idx][2] = "DIRECT"
				fpln_data2[via_idx][3] = navaid_list[1][8]	--reg_code
				
				idx_tmp = fpln_data2[via_idx][4] + fpln_data2[via_idx][5]
				idx_tmp2 = fpln_data2[via_idx][4]
				fpln_data2[via_idx][5] = 1
				
				-- add DISCONTINUITY
				if via_idx < fpln_num2 then
					if legs_data2[idx_tmp][1] ~= fpln_data2[via_idx][1] then
						dir_disco = 1
					end
				end
			end
			
			-- add legs direct waypoint
			fpln_add_leg_dir(idx_tmp, idx_tmp2, "DIRECT", 1)
			
			entry = ""
			if legs_num > 1 then
				rte_exec = 1
			end
			create_fpln()
		else
			-- more navaids
			page_sel_wpt2 = 1
			page_rte_init = 0
			act_page_old = act_page
			act_page = 1
			entry = ""
		end
	elseif via2 == "DIRECT" then
		find_navaid(entry, "", 0, "")
		if navaid_list_n == 0 then
			-- fmc_message_num = fmc_message_num + 1
			-- fmc_message[fmc_message_num] = NOT_IN_DATABASE
			add_fmc_msg(NOT_IN_DATABASE, 1)
		elseif navaid_list_n == 1 then
			fpln_data2[via_idx][1] = navaid_list[1][4]	--entry
			fpln_data2[via_idx][2] = "DIRECT"
			fpln_data2[via_idx][3] = navaid_list[1][8]	--reg_code
			
			idx_tmp = fpln_data2[via_idx][4] + fpln_data2[via_idx][5]
			idx_tmp2 = fpln_data2[via_idx][4]
			fpln_data2[via_idx][5] = 1
			
			-- add DISCONTINUITY
			if via_idx < fpln_num2 then
				if legs_data2[idx_tmp][1] ~= fpln_data2[via_idx][1] then
					dir_disco = 1
				end
			end
			
			-- change legs direct waypoint
			fpln_add_leg_dir(idx_tmp, idx_tmp2, "DIRECT", 1)
			
			entry = ""
			if legs_num > 1 then
				rte_exec = 1
			end
			create_fpln()
		else
			-- more navaids
			page_sel_wpt2 = 1
			page_rte_init = 0
			act_page_old = act_page
			act_page = 1
			entry = ""
			dir_change = 1
		end
	else
		-- add fpln -> via navaid
		find_awy(awy_from2, awy_from_rc2, via2)
		if find_awy_path(awy_from2, awy_from_rc2, awy_to2, awy_to_rc2, via2) == 0 then
			entry = ">INVALID ENTRY"
		else
			fpln_data2[via_idx][1] = awy_path[awy_path_num][1]	--entry
			fpln_data2[via_idx][3] = awy_path[awy_path_num][2]	--reg_code
			
			if via_idx == 1 then
				fpln_data2[via_idx][4] = 2	--legs_data_idx
				idx_tmp = fpln_data2[via_idx][4] + fpln_data2[via_idx][5]
				fpln_data2[via_idx][5] = awy_path_num
			else
				fpln_data2[via_idx][4] = fpln_data2[via_idx-1][4] + fpln_data2[via_idx-1][5]	--legs_data_idx
				idx_tmp = fpln_data2[via_idx][4] + fpln_data2[via_idx][5]
				fpln_data2[via_idx][5] = awy_path_num
			end
			
			-- add airways waypoints
			idx_tmp2 = fpln_data2[via_idx][4]
			fpln_add_leg_dir2(idx_tmp, idx_tmp2, via2)
			
			entry = ""
			if legs_num > 1 then
				rte_exec = 1
			end
		end
	end
	
end

function dir_add(awy_idx)
	
	local idx_tmp = 0
	local idx_tmp2 = 0
	
	if dir_change == 0 then
		-- add navaid
		if dir_idx > fpln_num2 then
			fpln_num2 = fpln_num2 + 1
			fpln_data2[fpln_num2] = {}
			fpln_data2[dir_idx][1] = navaid_list[awy_idx][4]
			fpln_data2[dir_idx][2] = "DIRECT"
			fpln_data2[dir_idx][3] = navaid_list[awy_idx][8]
			-- if dir_idx == 1 then
				-- fpln_data2[dir_idx][4] = 2	--legs_data_idx
				-- fpln_data2[dir_idx][5] = 1
			-- else
				-- fpln_data2[dir_idx][4] = fpln_data2[dir_idx-1][4] + fpln_data2[dir_idx-1][5]	--legs_data_idx
				-- fpln_data2[dir_idx][5] = 1
			-- end
			
			if dir_idx == 1 then
				if legs_num2 == 1 then
					fpln_data2[dir_idx][4] = 2	--legs_data_idx
				else
					fpln_data2[dir_idx][4] = 3	--legs_data_idx
				end
				fpln_data2[dir_idx][5] = 1
			else
				fpln_data2[dir_idx][4] = fpln_data2[dir_idx-1][4] + fpln_data2[dir_idx-1][5]	--legs_data_idx
				fpln_data2[dir_idx][5] = 1
			end
			
			idx_tmp = fpln_data2[dir_idx][4]
			idx_tmp2 = idx_tmp
		else
			fpln_data2[dir_idx][1] = navaid_list[awy_idx][4]
			fpln_data2[dir_idx][2] = "DIRECT"
			fpln_data2[dir_idx][3] = navaid_list[awy_idx][8]
			idx_tmp = fpln_data2[dir_idx][4] + fpln_data2[dir_idx][5]
			idx_tmp2 = fpln_data2[dir_idx][4]
			fpln_data2[dir_idx][5] = 1
			
			-- add DISCONTINUITY
			if dir_idx < fpln_num2 then
				if legs_data2[idx_tmp][1] ~= fpln_data2[dir_idx][1] then
					dir_disco = 1
				end
			end
		
		end
		
		
		-- add legs direct waypoint
		fpln_add_leg_dir(idx_tmp, idx_tmp2, "DIRECT", awy_idx)
		
	else
		-- change navaid
		fpln_data2[dir_idx][1] = navaid_list[awy_idx][4]
		fpln_data2[dir_idx][2] = "DIRECT"
		fpln_data2[dir_idx][3] = navaid_list[awy_idx][8]
		idx_tmp = fpln_data2[dir_idx][4] + fpln_data2[dir_idx][5]
		idx_tmp2 = fpln_data2[dir_idx][4]
		fpln_data2[dir_idx][5] = 1
		
		-- add DISCONTINUITY
		if dir_idx < fpln_num2 then
			if legs_data2[idx_tmp][1] ~= fpln_data2[dir_idx][1] then
				dir_disco = 1
			end
		end
		
		-- change legs direct waypoint
		fpln_add_leg_dir(idx_tmp, idx_tmp2, "DIRECT", awy_idx)
	end
	
	entry = ""
	if legs_num > 1 then
		rte_exec = 1
	end
	page_sel_wpt2 = 0
	page_rte_init = 1
	act_page = act_page_old
	--create_fpln()
	
end


function del_via(via_id)
	
	local idx_tmp = 0
	local idx_tmp2 = 0
	
	if fpln_data2[via_id][2] ~= "DIRECT" and fpln_data2[via_id][1] ~= "" then
		
		fpln_data2[via_id][2] = "DIRECT"
		idx_tmp = fpln_data2[via_id][4] + fpln_data2[via_id][5] - 1
		idx_tmp2 = fpln_data2[via_id][4]
		fpln_data2[via_id][5] = 1
		
		fpln_del_leg(idx_tmp, idx_tmp2)
		
		--entry = ""
		if legs_num > 1 then
			rte_exec = 1
		end
	elseif fpln_data2[via_id][2] ~= "DIRECT" and fpln_data2[via_id][1] == "" then
		fpln_data2[via_id][2] = ""
		idx_tmp = fpln_data2[via_id][4] + fpln_data2[via_id][5]
		legs_data2[idx_tmp][9] = ""
		if legs_num > 1 then
			rte_exec = 1
		end
	end
	
	entry = ""
	
end


function fpln_del_leg(idx_copy, idx_first)
	
	if idx_first > 1 and idx_first <= legs_num2 then
		legs_data2[idx_copy][9] = "DIRECT"
		rte_copy(idx_copy)
		rte_paste(idx_first)
		--if legs_num > 1 then
			legs_delete = 1
		--end
		calc_rte_enable2 = 1
		--dump_leg()
	end
	
end

function fpln_add_leg_disco(idx_disco)
	
	-- create DISCONTINUITY
	legs_num2 = idx_disco
	legs_data2[legs_num2] = {}
	legs_data2[legs_num2][1] = "DISCONTINUITY"
	legs_data2[legs_num2][2] = 0		-- brg
	legs_data2[legs_num2][3] = 0		-- distance
	legs_data2[legs_num2][4] = 0		-- speed
	legs_data2[legs_num2][5] = 0		-- altitude
	legs_data2[legs_num2][6] = 0	-- altitude type
	legs_data2[legs_num2][7] = 0		-- latitude
	legs_data2[legs_num2][8] = 0		-- longitude
	legs_data2[legs_num2][9] = ""			-- via id
	legs_data2[legs_num2][10] = 0		-- calc speed
	legs_data2[legs_num2][11] = 0		-- calc altitude
	legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
	legs_data2[legs_num2][13] = 0
	legs_data2[legs_num2][14] = 0		-- rest alt
	legs_data2[legs_num2][15] = 0		-- last fuel
	legs_data2[legs_num2][16] = ""
	legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
	legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
	legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
	legs_data2[legs_num2][20] = 0
	legs_data2[legs_num2][21] = -1
	legs_data2[legs_num2][22] = ""
	legs_data2[legs_num2][23] = 0
	legs_data2[legs_num2][24] = 0
	legs_data2[legs_num2][25] = 0
	legs_data2[legs_num2][26] = 0
	legs_data2[legs_num2][27] = ""
	legs_data2[legs_num2][28] = ""
	legs_data2[legs_num2][29] = ""
	legs_data2[legs_num2][30] = ""
	legs_data2[legs_num2][31] = ""
	legs_data2[legs_num2][32] = 0
	legs_data2[legs_num2][33] = ""
	legs_data2[legs_num2][34] = ""
	legs_data2[legs_num2][35] = ""
	legs_data2[legs_num2][36] = 0
	legs_data2[legs_num2][37] = 0
	legs_data2[legs_num2][38] = ""
	legs_data2[legs_num2][39] = ""
	legs_data2[legs_num2][40] = 0
	
end

function fpln_add_leg_dir2(idx_copy, idx_paste, idx_via)
	
	local leg_wpt_id = ""
	local leg_wpt_rg = ""
	local legs_num_tmp = legs_num2
	
	rte_copy(idx_copy)
	legs_num2 = idx_paste - 1
	
	if awy_path_num > 0 then
		
		for ii = 1, awy_path_num do
			
			
			leg_wpt_id = awy_path[ii][1]
			leg_wpt_rg = awy_path[ii][2]
			find_navaid(leg_wpt_id, "", 0, leg_wpt_rg)
			
			legs_num2 = legs_num2 + 1
			if navaid_list_n ~= 0 then
				legs_data2[legs_num2] = {}
				legs_data2[legs_num2][1] = navaid_list[1][4]	--entry
				legs_data2[legs_num2][2] = 0		-- brg
				legs_data2[legs_num2][3] = 0		-- distance
				legs_data2[legs_num2][4] = 0		-- speed
				legs_data2[legs_num2][5] = 0		-- altitude
				legs_data2[legs_num2][6] = 0	-- altitude type
				legs_data2[legs_num2][7] = navaid_list[1][2]		-- latitude
				legs_data2[legs_num2][8] = navaid_list[1][3]		-- longitude
				legs_data2[legs_num2][9] = idx_via			-- via id
				legs_data2[legs_num2][10] = 0		-- calc speed
				legs_data2[legs_num2][11] = 0		-- calc altitude
				legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
				legs_data2[legs_num2][13] = 0
				legs_data2[legs_num2][14] = 0		-- rest alt
				legs_data2[legs_num2][15] = 0		-- last fuel
				legs_data2[legs_num2][16] = navaid_list[1][8]		-- reg code
				legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
				legs_data2[legs_num2][20] = 0
				legs_data2[legs_num2][21] = -1
				legs_data2[legs_num2][22] = ""
				legs_data2[legs_num2][23] = 0
				legs_data2[legs_num2][24] = 0
				legs_data2[legs_num2][25] = 0
				legs_data2[legs_num2][26] = 0
				legs_data2[legs_num2][27] = ""
				legs_data2[legs_num2][28] = ""
				legs_data2[legs_num2][29] = ""
				legs_data2[legs_num2][30] = ""
				legs_data2[legs_num2][31] = ""
				legs_data2[legs_num2][32] = 0
				legs_data2[legs_num2][33] = ""
				legs_data2[legs_num2][34] = ""
				legs_data2[legs_num2][35] = ""
				legs_data2[legs_num2][36] = navaid_list[1][1]
				legs_data2[legs_num2][37] = 0
				legs_data2[legs_num2][38] = ""
				legs_data2[legs_num2][39] = ""
				legs_data2[legs_num2][40] = 0
			else
				legs_data2[legs_num2] = {}
				legs_data2[legs_num2][1] = leg_wpt_id	--entry
				legs_data2[legs_num2][2] = 0		-- brg
				legs_data2[legs_num2][3] = 0		-- distance
				legs_data2[legs_num2][4] = 0		-- speed
				legs_data2[legs_num2][5] = 0		-- altitude
				legs_data2[legs_num2][6] = 0	-- altitude type
				legs_data2[legs_num2][7] = 0		-- latitude
				legs_data2[legs_num2][8] = 0		-- longitude
				legs_data2[legs_num2][9] = idx_via			-- via id
				legs_data2[legs_num2][10] = 0		-- calc speed
				legs_data2[legs_num2][11] = 0		-- calc altitude
				legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
				legs_data2[legs_num2][13] = 0
				legs_data2[legs_num2][14] = 0		-- rest alt
				legs_data2[legs_num2][15] = 0		-- last fuel
				legs_data2[legs_num2][16] = leg_wpt_rg		-- reg code
				legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
				legs_data2[legs_num2][20] = 0
				legs_data2[legs_num2][21] = -1
				legs_data2[legs_num2][22] = ""
				legs_data2[legs_num2][23] = 0
				legs_data2[legs_num2][24] = 0
				legs_data2[legs_num2][25] = 0
				legs_data2[legs_num2][26] = 0
				legs_data2[legs_num2][27] = ""
				legs_data2[legs_num2][28] = ""
				legs_data2[legs_num2][29] = ""
				legs_data2[legs_num2][30] = ""
				legs_data2[legs_num2][31] = ""
				legs_data2[legs_num2][32] = 0
				legs_data2[legs_num2][33] = ""
				legs_data2[legs_num2][34] = ""
				legs_data2[legs_num2][35] = ""
				legs_data2[legs_num2][36] = 0
				legs_data2[legs_num2][37] = 0
				legs_data2[legs_num2][38] = ""
				legs_data2[legs_num2][39] = ""
				legs_data2[legs_num2][40] = 0
			end
			
		end
		
		if dir_disco == 1 then
			legs_num2 = legs_num2 + 1
			legs_data2[legs_num2] = {}
			fpln_add_leg_disco(legs_num2)
		else
			if legs_data2_tmp_n > 1 then
				legs_num2 = legs_num2 - 1
				-- change last WAYPOINT to DIRECT
				legs_data2_tmp[1][9] = "DIRECT"
				legs_data2_tmp[1][19] = 4
			end
		end
		
	else
		legs_num2 = legs_num_tmp
	end
	
	dir_disco = 0
	rte_paste(legs_num2 + 1)
	--if legs_num > 1 then
		legs_delete = 1
	--end
	calc_rte_enable2 = 1
end


function fpln_add_leg_dir(idx_copy, idx_paste, idx_via, wpt_idx)
	
	rte_copy(idx_copy)
	legs_num2 = idx_paste
	
	legs_data2[legs_num2] = {}
	legs_data2[legs_num2][1] = navaid_list[wpt_idx][4]	--entry
	legs_data2[legs_num2][2] = 0		-- brg
	legs_data2[legs_num2][3] = 0		-- distance
	legs_data2[legs_num2][4] = 0		-- speed
	legs_data2[legs_num2][5] = 0		-- altitude
	legs_data2[legs_num2][6] = 0	-- altitude type
	legs_data2[legs_num2][7] = navaid_list[wpt_idx][2]		-- latitude
	legs_data2[legs_num2][8] = navaid_list[wpt_idx][3]		-- longitude
	legs_data2[legs_num2][9] = idx_via			-- via id
	legs_data2[legs_num2][10] = 0		-- calc speed
	legs_data2[legs_num2][11] = 0		-- calc altitude
	legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
	legs_data2[legs_num2][13] = 0
	legs_data2[legs_num2][14] = 0		-- rest alt
	legs_data2[legs_num2][15] = 0		-- last fuel
	legs_data2[legs_num2][16] = navaid_list[wpt_idx][8]		-- reg code
	legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
	legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
	legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
	legs_data2[legs_num2][20] = 0
	legs_data2[legs_num2][21] = -1
	legs_data2[legs_num2][22] = ""
	legs_data2[legs_num2][23] = 0
	legs_data2[legs_num2][24] = 0
	legs_data2[legs_num2][25] = 0
	legs_data2[legs_num2][26] = 0
	legs_data2[legs_num2][27] = ""
	legs_data2[legs_num2][28] = ""
	legs_data2[legs_num2][29] = ""
	legs_data2[legs_num2][30] = ""
	legs_data2[legs_num2][31] = ""
	legs_data2[legs_num2][32] = 0
	legs_data2[legs_num2][33] = ""
	legs_data2[legs_num2][34] = ""
	legs_data2[legs_num2][35] = ""
	legs_data2[legs_num2][36] = navaid_list[wpt_idx][1]
	legs_data2[legs_num2][37] = 0
	legs_data2[legs_num2][38] = ""
	legs_data2[legs_num2][39] = ""
	legs_data2[legs_num2][40] = 0
		
	if dir_disco == 1 then
		-- add DISCO
		legs_num2 = legs_num2 + 1
		legs_data2[legs_num2] = {}
		fpln_add_leg_disco(legs_num2)
	else
		if legs_data2_tmp_n > 1 then
			legs_num2 = legs_num2 - 1
		-- change last WAYPOINT to DIRECT
			legs_data2_tmp[1][9] = "DIRECT"
			legs_data2_tmp[1][19] = 4
		end
	end
	dir_disco = 0
	
	rte_paste(legs_num2 + 1)
	--if legs_num > 1 then
		legs_delete = 1
	--end
	calc_rte_enable2 = 1
end



function del_fpln(via_id)
	
	fpln_num2 = via_id - 1
	entry = ""
	if legs_num > 1 then
		rte_exec = 1
	end
	
end


function copy_fpln(fpln_idx)

	local ii = 0
	local jj = 0
	
	fpln_data_tmp_n = 0
	fpln_data_tmp = {}
	
	if fpln_idx <= fpln_num2 and fpln_idx > 0 then
		for ii = fpln_idx, fpln_num2 do
			fpln_data_tmp_n = fpln_data_tmp_n + 1
			fpln_data_tmp[fpln_data_tmp_n] = {}
			for jj = 1, 5 do
				fpln_data_tmp[fpln_data_tmp_n][jj] = fpln_data2[ii][jj]
			end
		end
	end
	
end

function paste_fpln(fpln_idx)

	local ii = 0
	local jj = 0
	local kk = fpln_num2 + 1
	
	if fpln_idx <= kk and fpln_idx > 0 and fpln_data_tmp_n > 0 then
		fpln_num2 = fpln_num2 - 1
		for ii = 1, fpln_data_tmp_n do
			fpln_num2 = fpln_num2 + 1
			fpln_data2[fpln_num2] = {}
			for jj = 1, 5 do
				fpln_data2[fpln_num2][jj] = fpln_data_tmp[ii][jj]
			end
		end
	end
	
end


function create_fpln()

	local ii = 0
	local compare_txt = ""
	
	fpln_num2 = 0
	fpln_data2 = {}
	
	hold_data_num2 = 0
	hold_data2 = {}
	
	--dump_leg()
	
	if legs_num2 == 2 then
		--fpln_num2 = 0
		--fpln_data2 = {}
		
		if string.sub(legs_data2[2][1], 1, 2) ~= "RW" then
			fpln_num2 = fpln_num2 + 1
			fpln_data2[fpln_num2] = {}
			if legs_data2[2][1] == "DISCONTINUITY" then
				fpln_data2[fpln_num2][1] = ""
				fpln_data2[fpln_num2][2] = legs_data2[2][9]
				fpln_data2[fpln_num2][3] = ""
				fpln_data2[fpln_num2][4] = 2
				fpln_data2[fpln_num2][5] = 1
			else
				if legs_data2[2][19] == 3 then
					legs_data2[2][9] = "DIRECT"
					legs_data2[2][19] = 0
				end
				fpln_data2[fpln_num2][1] = legs_data2[2][1]
				fpln_data2[fpln_num2][2] = legs_data2[2][9]
				fpln_data2[fpln_num2][3] = legs_data2[2][16]
				fpln_data2[fpln_num2][4] = 2
				fpln_data2[fpln_num2][5] = 1
			end
		end
	elseif legs_num2 > 2 then
		--fpln_num2 = 0
		--fpln_data2 = {}
		
		if string.sub(legs_data2[2][1], 1, 2) ~= "RW" then
			fpln_num2 = fpln_num2 + 1
			fpln_data2[fpln_num2] = {}
			if legs_data2[2][1] == "DISCONTINUITY" then
				fpln_data2[fpln_num2][1] = ""
				fpln_data2[fpln_num2][2] = legs_data2[2][9]
				fpln_data2[fpln_num2][3] = ""
				fpln_data2[fpln_num2][4] = 2
				fpln_data2[fpln_num2][5] = 1
			else
				if legs_data2[2][19] == 3 then
					legs_data2[2][9] = "DIRECT"
					legs_data2[2][19] = 0
				end
				fpln_data2[fpln_num2][1] = legs_data2[2][1]
				fpln_data2[fpln_num2][2] = legs_data2[2][9]
				fpln_data2[fpln_num2][3] = legs_data2[2][16]
				fpln_data2[fpln_num2][4] = 2
				fpln_data2[fpln_num2][5] = 1
			end
			compare_txt = legs_data2[2][9]
			if compare_txt == "DIRECT" then
				compare_txt = compare_txt .. "ZZZZZZZ"
			end
			for ii = 3, legs_num2 do
				if legs_data2[ii][9] ~= compare_txt then
					fpln_num2 = fpln_num2 + 1
					fpln_data2[fpln_num2] = {}
					if legs_data2[ii][1] == "DISCONTINUITY" then
						fpln_data2[fpln_num2][1] = ""
						fpln_data2[fpln_num2][2] = legs_data2[ii][9]
						fpln_data2[fpln_num2][3] = ""
						fpln_data2[fpln_num2][4] = ii
						fpln_data2[fpln_num2][5] = 1
					else
						if legs_data2[ii][19] == 3 then
							legs_data2[ii][9] = "DIRECT"
							legs_data2[ii][19] = 0
						end
						fpln_data2[fpln_num2][1] = legs_data2[ii][1]
						fpln_data2[fpln_num2][2] = legs_data2[ii][9]
						fpln_data2[fpln_num2][3] = legs_data2[ii][16]
						fpln_data2[fpln_num2][4] = ii
						fpln_data2[fpln_num2][5] = 1
					end
				else
					if legs_data2[ii][1] == "DISCONTINUITY" then
						fpln_data2[fpln_num2][5] = fpln_data2[fpln_num2][5] + 1
					else
						fpln_data2[fpln_num2][1] = legs_data2[ii][1]
						fpln_data2[fpln_num2][3] = legs_data2[ii][16]
						fpln_data2[fpln_num2][5] = fpln_data2[fpln_num2][5] + 1
					end
				end
				compare_txt = legs_data2[ii][9]
				if compare_txt == "DIRECT" then
					compare_txt = compare_txt .. "ZZZZZZZ"
				end
				-- create hold data
				if legs_data2[ii][31] == "HA" or legs_data2[ii][31] == "HF" or legs_data2[ii][31] == "HM" then
					hold_data_num2 = hold_data_num2 + 1
					hold_data2[hold_data_num2] = ii
				end
			end
		else
			if legs_num2 > 3 then
				fpln_num2 = fpln_num2 + 1
				fpln_data2[fpln_num2] = {}
				if legs_data2[3][1] == "DISCONTINUITY" then
					fpln_data2[fpln_num2][1] = ""
					fpln_data2[fpln_num2][2] = legs_data2[3][9]
					fpln_data2[fpln_num2][3] = ""
					fpln_data2[fpln_num2][4] = 3
					fpln_data2[fpln_num2][5] = 1
				else
					if legs_data2[3][19] == 3 then
						legs_data2[3][9] = "DIRECT"
						legs_data2[3][19] = 0
					end
					fpln_data2[fpln_num2][1] = legs_data2[3][1]
					fpln_data2[fpln_num2][2] = legs_data2[3][9]
					fpln_data2[fpln_num2][3] = legs_data2[3][16]
					fpln_data2[fpln_num2][4] = 3
					fpln_data2[fpln_num2][5] = 1
				end
				compare_txt = legs_data2[3][9]
				if compare_txt == "DIRECT" then
					compare_txt = compare_txt .. "ZZZZZZZ"
				end
				for ii = 4, legs_num2 do
					if legs_data2[ii][9] ~= compare_txt then
						fpln_num2 = fpln_num2 + 1
						fpln_data2[fpln_num2] = {}
						if legs_data2[ii][1] == "DISCONTINUITY" then
							fpln_data2[fpln_num2][1] = ""
							fpln_data2[fpln_num2][2] = legs_data2[ii][9]
							fpln_data2[fpln_num2][3] = ""
							fpln_data2[fpln_num2][4] = ii
							fpln_data2[fpln_num2][5] = 1
						else
							if legs_data2[ii][19] == 3 then
								legs_data2[ii][9] = "DIRECT"
								legs_data2[ii][19] = 0
							end
							fpln_data2[fpln_num2][1] = legs_data2[ii][1]
							fpln_data2[fpln_num2][2] = legs_data2[ii][9]
							fpln_data2[fpln_num2][3] = legs_data2[ii][16]
							fpln_data2[fpln_num2][4] = ii
							fpln_data2[fpln_num2][5] = 1
						end
					else
						if legs_data2[ii][1] == "DISCONTINUITY" then
							fpln_data2[fpln_num2][5] = fpln_data2[fpln_num2][5] + 1
						else
							fpln_data2[fpln_num2][1] = legs_data2[ii][1]
							fpln_data2[fpln_num2][3] = legs_data2[ii][16]
							fpln_data2[fpln_num2][5] = fpln_data2[fpln_num2][5] + 1
						end
					end
					compare_txt = legs_data2[ii][9]
					if compare_txt == "DIRECT" then
						compare_txt = compare_txt .. "ZZZZZZZ"
					end
					-- create hold data
					if legs_data2[ii][31] == "HA" or legs_data2[ii][31] == "HF" or legs_data2[ii][31] == "HM" then
						hold_data_num2 = hold_data_num2 + 1
						hold_data2[hold_data_num2] = ii
					end
				end
			else
				fpln_num2 = fpln_num2 + 1
				fpln_data2[fpln_num2] = {}
				if legs_data2[3][1] == "DISCONTINUITY" then
					fpln_data2[fpln_num2][1] = ""
					fpln_data2[fpln_num2][2] = legs_data2[3][9]
					fpln_data2[fpln_num2][3] = ""
					fpln_data2[fpln_num2][4] = 3
					fpln_data2[fpln_num2][5] = 1
				else
					if legs_data2[3][19] == 3 then
						legs_data2[3][9] = "DIRECT"
						legs_data2[3][19] = 0
					end
					fpln_data2[fpln_num2][1] = legs_data2[3][1]
					fpln_data2[fpln_num2][2] = legs_data2[3][9]
					fpln_data2[fpln_num2][3] = legs_data2[3][16]
					fpln_data2[fpln_num2][4] = 3
					fpln_data2[fpln_num2][5] = 1
				end
			end
		end
	end
	--dump_leg()
	--dump_fpln2()
end

function copy_to_fpln()
	
	local ii = 0
	
	fpln_num = 0
	fpln_data = {}
	
	hold_data_num = 0
	hold_data = {}
	
	if fpln_num2 > 0 then
		for ii = 1, fpln_num2 do
			fpln_num = fpln_num + 1
			fpln_data[fpln_num] = {}
			fpln_data[fpln_num][1] = fpln_data2[ii][1]
			fpln_data[fpln_num][2] = fpln_data2[ii][2]
			fpln_data[fpln_num][3] = fpln_data2[ii][3]
			fpln_data[fpln_num][4] = fpln_data2[ii][4]
			fpln_data[fpln_num][5] = fpln_data2[ii][5]
		end
	end
	
	-- copy hold data
	if hold_data_num2 > 0 then
		for ii = 1, hold_data_num2 do
			hold_data_num = hold_data_num + 1
			hold_data[hold_data_num] = hold_data2[ii]
		end
	end
	
end


-- function copy_to_fpln2()
	
	-- local ii = 0
	
	-- fpln_num2 = 0
	-- fpln_data2 = {}
	
	-- hold_data_num2 = 0
	-- hold_data2 = {}
	
	-- if fpln_num > 0 then
		-- for ii = 1, fpln_num do
			-- fpln_num2 = fpln_num2 + 1
			-- fpln_data2[fpln_num2] = {}
			-- fpln_data2[fpln_num2][1] = fpln_data[ii][1]
			-- fpln_data2[fpln_num2][2] = fpln_data[ii][2]
			-- fpln_data2[fpln_num2][3] = fpln_data[ii][3]
			-- fpln_data2[fpln_num2][4] = fpln_data[ii][4]
			-- fpln_data2[fpln_num2][5] = fpln_data[ii][5]
		-- end
	-- end
	
	-- -- copy hold data
	-- if hold_data_num > 0 then
		-- for ii = 1, hold_data_num do
			-- hold_data_num2 = hold_data_num2 + 1
			-- hold_data2[hold_data_num2] = hold_data[ii]
		-- end
	-- end
	
-- end

function dump_fpln2()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		-- if fpln_num2 > 0 then
			-- for vvv = 1, fpln_num2  do
-- --				if awy_temp2[vvv][1] == "R232" then
					-- fms_line = fpln_data2[vvv][1] .. "," .. fpln_data2[vvv][2] .. "," .. fpln_data2[vvv][3] .. "," 
					-- fms_line = fms_line .. tostring(fpln_data2[vvv][4]) .. "," .. tostring(fpln_data2[vvv][5]) .. "\n"
					-- file_navdata2:write(fms_line)
-- --				end
			-- end
		-- end
		if hold_data_num2 > 0 then
			for vvv = 1, hold_data_num2  do
				fms_line = ">" .. tostring(hold_data2[vvv]) .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
end


function dump_awy()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if awy_temp_num2 > 0 then
			for vvv = 1, awy_temp_num2  do
--				if awy_temp2[vvv][1] == "R232" then
					fms_line = awy_temp2[vvv][1] .. "," .. awy_temp2[vvv][2] .. "," .. awy_temp2[vvv][4] .. "," .. awy_temp2[vvv][3] .. "," .. awy_temp2[vvv][5] .. "," .. awy_temp2[vvv][6] .. "\n"
					file_navdata2:write(fms_line)
--				end
			end
		end
		file_navdata2:close()
	end
end

function dump_awy2()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if awy_path_num > 0 then
			for vvv = 1, awy_path_num  do
				fms_line = awy_path[vvv][1] .. "/" .. awy_path[vvv][2] "\n"
				--fms_line = awy_path[vvv] ..  "\n"
				file_navdata2:write(fms_line)
			end
		else
			fms_line = "NOT FOUND" .. "\n"
			file_navdata2:write(fms_line)
		end
		file_navdata2:close()
	end
end

-- function find_rnw_data()

	-- local ii = 0
	-- local jj = 0
	-- local kk = 0
	-- local rnw_temp0 = ""
	-- des_rnw = ""
	
	-- ref_runway_lenght = 0
	-- ref_runway_lat = 0
	-- ref_runway_lon = 0
	-- ref_runway_crs = 0
	-- des_runway_lenght = 0
	-- des_runway_lat = 0
	-- des_runway_lon = 0
	-- des_runway_crs = 0
	
	
	-- if string.sub(ref_rwy2, -1, -1) == " " then
		-- rnw_temp0 = string.sub(ref_rwy2, 1, -2)
	-- else
		-- rnw_temp0 = ref_rwy2
	-- end
	
	-- if string.sub(des_app2, 1, 2) == "RW" then
		-- des_rnw = string.sub(des_app2, 3, -1)
	-- else
		-- if string.len(des_app2) > 4 then
			-- jj, kk = string.find(des_app2, "-")
			-- if jj == nil then
				-- des_rnw = string.sub(des_app2, 2, -2)
			-- else
				-- des_rnw = string.sub(des_app2, 2, jj-1)
			-- end
		-- else
			-- des_rnw = string.sub(des_app2, 2, -1)
		-- end
	-- end
	
	-- if rnw_data_num > 0 then
		-- for ii = 1, rnw_data_num do
			-- if ref_icao == rnw_data[ii][1] and rnw_temp0 == rnw_data[ii][2] then
				-- ref_runway_lenght = rnw_data[ii][7]
				-- ref_runway_lat = rnw_data[ii][3]
				-- ref_runway_lon = rnw_data[ii][4]
				-- ref_runway_crs = rnw_data[ii][8]
			-- end
			-- if des_icao == rnw_data[ii][1] and des_rnw == rnw_data[ii][2] then
				-- des_runway_lenght = rnw_data[ii][7]
				-- des_runway_lat = rnw_data[ii][3]
				-- des_runway_lon = rnw_data[ii][4]
				-- des_runway_crs = rnw_data[ii][8]
			-- end
			-- if ref_runway_lenght > 0 and des_runway_lenght > 0 then
				-- break
			-- end
		-- end
	-- end
	
	-- ils_id = ""
	-- ils_freq = 0
	-- ils_course = 0
	
	-- if ils_nav_num > 0 then
		-- for ii = 1, ils_nav_num do
			-- if des_icao == ils_nav[ii][7] and des_rnw == ils_nav[ii][4] then
				-- ils_id = ils_nav[ii][1]
				-- ils_freq = ils_nav[ii][6]
				-- ils_course = (ils_nav[ii][5] - mag_variation_deg(ils_nav[ii][2], ils_nav[ii][3]) + 360) % 360
				-- --ils_course = ils_nav[ii][5]
				-- break
			-- end
		-- end
	-- end
	-- -- ilssk
	-- --dump_rnw(des_icao)
	
-- end

function find_rnw_data()

	local ii = 0
	local jj = 0
	local kk = 0
	local rnw_temp0 = ""
	local nd_x = 0
	local idx_rec = 0
	
	des_rnw = ""
	
	ref_runway_lenght = 0
	ref_runway_lat = 0
	ref_runway_lon = 0
	ref_runway_crs = 0
	des_runway_lenght = 0
	des_runway_lat = 0
	des_runway_lon = 0
	des_runway_crs = 0
	
	
	if string.sub(ref_rwy2, -1, -1) == " " then
		rnw_temp0 = string.sub(ref_rwy2, 1, -2)
	else
		rnw_temp0 = ref_rwy2
	end
	
	if string.sub(des_app2, 1, 2) == "RW" then
		des_rnw = string.sub(des_app2, 3, -1)
	else
		if string.len(des_app2) > 4 then
			jj, kk = string.find(des_app2, "-")
			if jj == nil then
				des_rnw = string.sub(des_app2, 2, -2)
			else
				des_rnw = string.sub(des_app2, 2, jj-1)
			end
		else
			des_rnw = string.sub(des_app2, 2, -1)
		end
	end
	
	if rnw_data_num > 0 then
		nd_x = string.byte(string.sub(ref_icao, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_rnw[nd_x][99999] > 0 then
				for ii = 1, idx_rnw[nd_x][99999] do
					idx_rec = idx_rnw[nd_x][ii]
					if ref_icao == rnw_data[idx_rec][1] and rnw_temp0 == rnw_data[idx_rec][2] then
						ref_runway_lenght = rnw_data[idx_rec][7]
						ref_runway_lat = rnw_data[idx_rec][3]
						ref_runway_lon = rnw_data[idx_rec][4]
						ref_runway_crs = rnw_data[idx_rec][8]
						break
					end
				end
			end
		end
		
		nd_x = string.byte(string.sub(des_icao, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_rnw[nd_x][99999] > 0 then
				for ii = 1, idx_rnw[nd_x][99999] do
					idx_rec = idx_rnw[nd_x][ii]
					if des_icao == rnw_data[idx_rec][1] and des_rnw == rnw_data[idx_rec][2] then
						des_runway_lenght = rnw_data[idx_rec][7]
						des_runway_lat = rnw_data[idx_rec][3]
						des_runway_lon = rnw_data[idx_rec][4]
						des_runway_crs = rnw_data[idx_rec][8]
						break
					end
				end
			end
		end
	end
	
	ils_id = ""
	ils_freq = 0
	ils_course = 0
	
	if ils_nav_num > 0 then
		nd_x = string.byte(string.sub(des_icao, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_ils_icao[nd_x][99999] > 0 then
				for ii = 1, idx_ils_icao[nd_x][99999] do
					idx_rec = idx_ils_icao[nd_x][ii]
					if des_icao == ils_nav[idx_rec][7] and des_rnw == ils_nav[idx_rec][4] then
						ils_id = ils_nav[idx_rec][1]
						ils_freq = ils_nav[idx_rec][6]
						ils_course = (ils_nav[idx_rec][5] - mag_variation_deg(ils_nav[idx_rec][2], ils_nav[idx_rec][3]) + 360) % 360
						--entry = tostring(mag_variation_deg(ils_nav[idx_rec][2], ils_nav[idx_rec][3]))
						break
					end
				end
			end
		end
	end
	
end




function dump_rnw(rrr_icao)
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if rnw_data_num > 0 then
			for vvv = 1, rnw_data_num  do
				if rnw_data[vvv][1] == rrr_icao then
					fms_line = rnw_data[vvv][1] .. "," .. rnw_data[vvv][2] .. "\n"
					file_navdata2:write(fms_line)
				end
			end
		end
		file_navdata2:close()
	end
end



function import_fms()
	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local mm = 0
	local nn = 0
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	local apt_line = ""
	local apt_word = {}
	local apt_ok = 0
	
	rte_data_num = 0
	rte_data = {}
	
	local file_name_imp = "Output/FMS plans/" .. entry .. ".fms"
	local file_navdata2 = io.open(file_name_imp, "r")
	if file_navdata2 ~= nil then
		apt_line = file_navdata2:read()
		while apt_line do
			ii = 0
			jj = 0
			line_trim = ""
			line_char = ""
			line_lenght = string.len(apt_line)
			if line_lenght > 0 then
				for kk = 1, line_lenght do
					line_char = string.sub(apt_line, kk, kk)
					if line_char == " " then
						if ii == 1 then
							jj = jj + 1
							apt_word[jj] = line_trim
							ii = 0
							line_trim = ""
						end
					else
						line_trim = line_trim .. line_char
						ii = 1
					end
				end
				if string.len(line_trim) > 0 then
					jj = jj + 1
					apt_word[jj] = line_trim
				end
				
				if jj > 0 then
					if string.len(apt_word[jj]) > 1 and string.byte(apt_word[jj], -1) == 13 then	-- CR
						apt_word[jj] = string.sub(apt_word[jj], 1, -2)
					end
				end
				
				if jj > 4 then
					-- if string.byte(apt_word[5], -1) == 13 then
						-- apt_word[5] = string.sub(apt_word[5], 1, -2)
					-- end
					if apt_word[1] == "1" or apt_word[1] == "2" or apt_word[1] == "3" or apt_word[1] == "11" or
					apt_word[1] == "28" then --or apt_word[1] == "28" then
						
						if apt_word[1] == "28" then
							apt_word[2] = "WPT01"
							mm = 1
							nn = 0
							for ll = 1, rte_data_num do
								if rte_data[ll][2] == apt_word[2] then
									mm = mm + 1
									apt_word[2] = "WPT" .. string.format("%02d", mm)
								end
							end
						elseif string.len(apt_word[2]) > 7 then
							apt_word[2] = string.sub(apt_word[2], 1, 7)
						end
						
						rte_data_num = rte_data_num + 1
						rte_data[rte_data_num] = {}
						rte_data[rte_data_num][1] = tonumber(apt_word[1])		-- type
						rte_data[rte_data_num][2] = apt_word[2]		-- id name
						rte_data[rte_data_num][3] = apt_word[3]		-- alt
						rte_data[rte_data_num][4] = tonumber(apt_word[4])		-- lat
						rte_data[rte_data_num][5] = tonumber(apt_word[5])		-- lon
						rte_data[rte_data_num][6] = "DIRECT"		-- via
						rte_data[rte_data_num][7] = ""		-- reg code
					end
				end
			end
			apt_line = file_navdata2:read()
		end
		file_navdata2:close()
		use_import_data()
	end
	
end

function import_fms_v11()
	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local mm = 0
	local nn = 0
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	local apt_line = ""
	local apt_word = {}
	local apt_ok = 0
	
	local rwy_tmp = ""
	local sid_tmp = ""
	local sid_tns_tmp = ""
	local star_tmp = ""
	local star_tns_tmp = ""
	local app_tmp = ""
	local app_tns_tmp = ""
	
	local tmp_txt_via = ""
	
	rte_data_num = 0
	rte_data = {}
	
	local file_name_imp = "Output/FMS plans/" .. entry .. ".fms"
	local file_navdata2 = io.open(file_name_imp, "r")
	if file_navdata2 ~= nil then
		apt_line = file_navdata2:read()
		while apt_line do
			ii = 0
			jj = 0
			line_trim = ""
			line_char = ""
			line_lenght = string.len(apt_line)
			if line_lenght > 0 then
				for kk = 1, line_lenght do
					line_char = string.sub(apt_line, kk, kk)
					if line_char == " " or string.byte(line_char) == 9 then		-- SP or TAB
						if ii == 1 then
							jj = jj + 1
							apt_word[jj] = line_trim
							ii = 0
							line_trim = ""
						end
					else
						line_trim = line_trim .. line_char
						ii = 1
					end
				end
				if string.len(line_trim) > 0 then
					jj = jj + 1
					apt_word[jj] = line_trim
				end
				
				if jj > 0 then
					if string.len(apt_word[jj]) > 1 and string.byte(apt_word[jj], -1) == 13 then	-- CR
						apt_word[jj] = string.sub(apt_word[jj], 1, -2)
					end
				end
				
				if jj > 5 then
					-- if string.byte(apt_word[5], -1) == 13 then
						-- apt_word[5] = string.sub(apt_word[5], 1, -2)
					-- end
					if apt_word[1] == "1" or apt_word[1] == "2" or apt_word[1] == "3" or apt_word[1] == "11" or
					apt_word[1] == "28" then --or apt_word[1] == "28" then
						
						if apt_word[1] == "28" then
							apt_word[2] = "WPT01"
							mm = 1
							nn = 0
							for ll = 1, rte_data_num do
								if rte_data[ll][2] == apt_word[2] then
									mm = mm + 1
									apt_word[2] = "WPT" .. string.format("%02d", mm)
								end
							end
						elseif string.len(apt_word[2]) > 7 then
							apt_word[2] = string.sub(apt_word[2], 1, 7)
						end
						
						rte_data_num = rte_data_num + 1
						rte_data[rte_data_num] = {}
						rte_data[rte_data_num][1] = tonumber(apt_word[1])		-- type
						rte_data[rte_data_num][2] = apt_word[2]		-- id name
						rte_data[rte_data_num][3] = apt_word[4]		-- alt
						rte_data[rte_data_num][4] = tonumber(apt_word[5])		-- lat
						rte_data[rte_data_num][5] = tonumber(apt_word[6])		-- lon
						tmp_txt_via = apt_word[3]
						if apt_word[3] == "ADEP" then
							tmp_txt_via = ""
						elseif apt_word[3] == "ADES" then
							tmp_txt_via = ""
						elseif apt_word[3] == "DRCT" then
							tmp_txt_via = "DIRECT"
						end
						--rte_data[rte_data_num][6] = "DIRECT"		-- via
						rte_data[rte_data_num][6] = tmp_txt_via		-- via
						rte_data[rte_data_num][7] = ""		-- reg code
					end
				elseif jj > 1 then
					if apt_word[1] == "DEPRWY" then
						rwy_tmp = apt_word[2]
						if string.len(rwy_tmp) > 3 then
							rwy_tmp = string.sub(rwy_tmp, 3, -1)
						end
					elseif apt_word[1] == "SID" then
						sid_tmp = apt_word[2]
					elseif apt_word[1] == "SIDTRANS" then
						sid_tns_tmp = apt_word[2]
					elseif apt_word[1] == "STAR" then
						star_tmp = apt_word[2]
					elseif apt_word[1] == "STARTRANS" then
						star_tns_tmp = apt_word[2]
					elseif apt_word[1] == "APP" then
						app_tmp = apt_word[2]
					elseif apt_word[1] == "APPTRANS" then
						app_tns_tmp = apt_word[2]
					end
				end
			end
			apt_line = file_navdata2:read()
		end
		file_navdata2:close()
		use_import_data()
		
		-- add sid-star-app
		if fpln_import_ok == 1 then
			-- file_name = "Custom Data/CIFP/" .. ref_icao_x
			-- file_name = file_name .. ".dat"
			-- file_navdata = io.open(file_name, "r")
			-- if file_navdata == nil then
				-- file_name = "Resources/default data/CIFP/" .. ref_icao_x
				-- file_name = file_name .. ".dat"
				-- file_navdata = io.open(file_name, "r")
				-- if file_navdata == nil then
					-- if apt_exist(ref_icao_x) == true then
						-- apt_ok = 1
					-- end
				-- else
					-- read_ref_data(ref_icao_x)		-- read reference airport data
					-- file_navdata:close()
					-- apt_ok = 1
				-- end
			-- else
				-- read_ref_data(ref_icao_x)		-- read reference airport data
				-- file_navdata:close()
				-- apt_ok = 1
			-- end
			
			if cust_def_data == 1 then
				file_name = "Custom Data/CIFP/" .. ref_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(ref_icao_x) == true then
						apt_ok = 1
					end
				else
					read_ref_data(ref_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			elseif cust_def_data == 2 then
				file_name = "Resources/default data/CIFP/" .. ref_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(ref_icao_x) == true then
						apt_ok = 1
					end
				else
					read_ref_data(ref_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			end
			
			if apt_ok == 1 then
				import_sid(rwy_tmp, sid_tmp, sid_tns_tmp)
			end
			
			apt_ok = 0
			-- file_name = "Custom Data/CIFP/" .. des_icao_x
			-- file_name = file_name .. ".dat"
			-- file_navdata = io.open(file_name, "r")
			-- if file_navdata == nil then
				-- file_name = "Resources/default data/CIFP/" .. des_icao_x
				-- file_name = file_name .. ".dat"
				-- file_navdata = io.open(file_name, "r")
				-- if file_navdata == nil then
					-- if apt_exist(des_icao_x) == true then
						-- apt_ok = 1
					-- end
				-- else
					-- read_des_data(des_icao_x)		-- read destination airport data
					-- file_navdata:close()
					-- apt_ok = 1
				-- end
			-- else
				-- read_des_data(des_icao_x)		-- read destination airport data
				-- file_navdata:close()
				-- apt_ok = 1
				
			-- end
			
			if cust_def_data == 1 then
				file_name = "Custom Data/CIFP/" .. des_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(des_icao_x) == true then
						apt_ok = 1
					end
				else
					read_des_data(des_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			elseif cust_def_data == 2 then
				file_name = "Resources/default data/CIFP/" .. des_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(des_icao_x) == true then
						apt_ok = 1
					end
				else
					read_des_data(des_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			end
			
			if apt_ok == 1 then
				import_star(star_tmp, star_tns_tmp)
				import_app(app_tmp, app_tns_tmp)
			end
		end
	end
	
end

function import_sid(i_rwy, i_sid, i_sid_tns)
	if i_rwy ~= "" then
		ref_rwy2 = i_rwy
	end
	if i_sid ~= "" then
		ref_sid2 = i_sid
	end
	if i_sid_tns ~= "" then
		ref_sid_tns2 = i_sid_tns
	end
	--rte_add_sid()
	rte_add_sid_act = 1
	
end

function import_star(i_star, i_star_tns)
	if i_star ~= "" then
		des_star2 = i_star
	end
	if i_star_tns ~= "" then
		des_star_trans2 = i_star_tns
	end
	--rte_add_star()
	rte_add_star_act = 1
	
end

function import_app(i_app, i_app_tns)
	if i_app ~= "" then
		des_app2 = i_app
	end
	if i_app_tns ~= "" then
		des_app_tns2 = i_app_tns
	end
	--rte_add_app()
	rte_add_star_act = 1
	rte_add_app_act = 1
	
end

function import_flp()
	local ii = 0
	local jj = 0
	local kk = 0
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	local apt_line = ""
	local apt_word = {}
	local apt_ok = 0
	local ref_icao_idx = 0
	local des_icao_idx = 0
	
	rte_data_num = 0
	rte_data = {}
	
	local file_name_imp = "Output/FMS plans/" .. entry .. ".flp"
	local file_navdata2 = io.open(file_name_imp, "r")
	if file_navdata2 ~= nil then
		apt_line = file_navdata2:read()
		while apt_line do
			ii = 0
			jj = 0
			line_trim = ""
			line_char = ""
			line_lenght = string.len(apt_line)
			if line_lenght > 0 then
				for kk = 1, line_lenght do
					line_char = string.sub(apt_line, kk, kk)
					if line_char == " " then
						if ii == 1 then
							jj = jj + 1
							apt_word[jj] = line_trim
							ii = 0
							line_trim = ""
						end
					else
						line_trim = line_trim .. line_char
						ii = 1
					end
				end
				if string.len(line_trim) > 0 then
					jj = jj + 1
					apt_word[jj] = line_trim
				end
				
				if jj > 0 then
					-- delete CR char
					if string.len(apt_word[jj]) > 1 and string.byte(apt_word[jj], -1) == 13 then	-- CR
						apt_word[jj] = string.sub(apt_word[jj], 1, -2)
					end
					
					-- read REF ICAO
					if apt_word[1] == "ArptDep=" then
						rte_data_num = rte_data_num + 1
						rte_data[rte_data_num] = {}
						rte_data[rte_data_num][1] = 1		-- type APT
						rte_data[rte_data_num][2] = string.sub(apt_word[1], -4, -1)		-- id name
						rte_data[rte_data_num][3] = ""		-- alt
						rte_data[rte_data_num][4] = 0		-- lat
						rte_data[rte_data_num][5] = 0		-- lon
						rte_data[rte_data_num][6] = ""		-- via
						rte_data[rte_data_num][7] = ""		-- reg code
						ref_icao_idx = rte_data_num
					end
					
					-- read DES ICAO
					if apt_word[1] == "ArptArr=" then
						rte_data_num = rte_data_num + 1
						rte_data[rte_data_num] = {}
						rte_data[rte_data_num][1] = 1		-- type APT
						rte_data[rte_data_num][2] = string.sub(apt_word[1], -4, -1)		-- id name
						rte_data[rte_data_num][3] = ""		-- alt
						rte_data[rte_data_num][4] = 0		-- lat
						rte_data[rte_data_num][5] = 0		-- lon
						rte_data[rte_data_num][6] = ""		-- via
						rte_data[rte_data_num][7] = ""		-- reg code
						des_icao_idx = rte_data_num
					end
				end
			end
			apt_line = file_navdata2:read()
		end
		file_navdata2:close()
		use_import_data()
	end

end



function use_import_data_old()

	local ii = 0
	local jj = 0
	local kk = 0
	local apt_ok = 0
  local xy = 0
	
	-- USE DATA
	if rte_data_num > 2 then
		if rte_data[1][1] == 1 and rte_data[rte_data_num][1] == 1 then
			
			copy_to_legsdata2()
			kk = 0		-- no error
			legs_num = 0
			legs_data = {}
			
			-- REF ICAO
			apt_ok = 0	-- no error
			ref_icao = rte_data[1][2]
			ref_icao_x = ref_icao
			file_name = "Custom Data/CIFP/" .. ref_icao
			file_name = file_name .. ".dat"
			file_navdata = io.open(file_name, "r")
			if file_navdata == nil then
				file_name = "Resources/default data/CIFP/" .. ref_icao
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(ref_icao) == true then
						apt_ok = 1
					end
				else
					read_ref_data(ref_icao)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			else
				read_ref_data(ref_icao)		-- read reference airport data
				file_navdata:close()
				apt_ok = 1
			end
			
			if apt_ok == 1 then
				des_icao = "****"
				ref_gate = "-----"
				trans_alt = "-----"
				ref_rwy = "-----"
				ref_sid = "------"
				ref_sid_tns = "------"
				des_app = "------"
				des_app_tns = "------"
				des_star = "------"
				des_star_trans = "------"
				----
				ref_rwy2 = "-----"
				ref_sid2 = "------"
				ref_sid_tns2 = "------"
				des_app2 = "------"
				des_app_tns2 = "------"
				des_star2 = "------"
				des_star_trans2 = "------"
				----
				crz_alt = "*****"
				crz_alt_num = 0
				crz_alt_num2 = 0
				offset = 0
				if apt_exist(ref_icao) == true then
					ref_icao_lat = icao_latitude
					ref_icao_lon = icao_longitude
					ref_tns_alt = icao_tns_alt
					ref_tns_lvl = icao_tns_lvl
					ref_icao_alt = 0
					if rwy_num > 0 then
						xy = tonumber(ref_data[1][2])
						if xy ~= nil then
							ref_icao_alt = xy
						end
					end
				else
					ref_tns_alt = 0
					ref_tns_lvl = 0
				end
				if ref_tns_alt == 0 then
					trans_alt = "-----"
				else
					trans_alt = string.format("%5d", ref_tns_alt)
				end
				
				legs_num = legs_num + 1
				legs_data[legs_num] = {}
				legs_data[legs_num][1] = ref_icao	--entry
				legs_data[legs_num][2] = 0		-- brg
				legs_data[legs_num][3] = 0		-- distance
				legs_data[legs_num][4] = 0		-- speed
				legs_data[legs_num][5] = 0		-- altitude
				legs_data[legs_num][6] = 0	-- altitude type
				legs_data[legs_num][7] = ref_icao_lat		-- latitude
				legs_data[legs_num][8] = ref_icao_lon		-- longitude
				legs_data[legs_num][9] = ""			-- via id
				legs_data[legs_num][10] = 0		-- calc speed
				legs_data[legs_num][11] = 0		-- calc altitude
				legs_data[legs_num][12] = 0		-- calc altitude vnav pth
				legs_data[legs_num][13] = 0
				legs_data[legs_num][14] = 0		-- rest alt
				legs_data[legs_num][15] = 0		-- last fuel
				legs_data[legs_num][16] = ""
				legs_data[legs_num][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				legs_data[legs_num][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data[legs_num][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
				legs_data[legs_num][20] = 0
				legs_data[legs_num][21] = -1		-- none HOLD
				legs_data[legs_num][22] = ""
				legs_data[legs_num][23] = 0
				legs_data[legs_num][24] = 0
				legs_data[legs_num][25] = 0
				legs_data[legs_num][26] = 0
				legs_data[legs_num][27] = ""
				legs_data[legs_num][28] = ""
				legs_data[legs_num][29] = ""
				legs_data[legs_num][30] = ""
				legs_data[legs_num][31] = ""
				legs_data[legs_num][32] = 0
				legs_data[legs_num][33] = ""
				legs_data[legs_num][34] = ""
				legs_data[legs_num][35] = ""
				legs_data[legs_num][36] = 9
				legs_data[legs_num][37] = 0
				legs_data[legs_num][38] = ""
				legs_data[legs_num][39] = ""
				legs_data[legs_num][40] = 0
			else
				kk = 1
			end
			
			-- ROUTE
			jj = rte_data_num - 1
			for ii = 2, jj do
				legs_num = legs_num + 1
				legs_data[legs_num] = {}
				legs_data[legs_num][1] = rte_data[ii][2]	--entry
				legs_data[legs_num][2] = 0		-- brg
				legs_data[legs_num][3] = 0		-- distance
				legs_data[legs_num][4] = 0		-- speed
				legs_data[legs_num][5] = 0		-- altitude
				legs_data[legs_num][6] = 0	-- altitude type
				legs_data[legs_num][7] = rte_data[ii][4]		-- latitude
				legs_data[legs_num][8] = rte_data[ii][5]		-- longitude
				legs_data[legs_num][9] = rte_data[ii][6]			-- via id
				legs_data[legs_num][10] = 0		-- calc speed
				legs_data[legs_num][11] = 0		-- calc altitude
				legs_data[legs_num][12] = 0		-- calc altitude vnav pth
				legs_data[legs_num][13] = 0
				legs_data[legs_num][14] = 0		-- rest alt
				legs_data[legs_num][15] = 0		-- last fuel
				if rte_data[ii][7] == "" then
					find_lat = rte_data[ii][4]
					find_lon = rte_data[ii][5]
					find_navaid(rte_data[ii][2], "", 3, "")
					if navaid_list_n > 0 then
						rte_data[ii][7] = navaid_list[1][8]
					end
				end
				legs_data[legs_num][16] = rte_data[ii][7]
				legs_data[legs_num][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				legs_data[legs_num][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data[legs_num][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
				legs_data[legs_num][20] = 0
				legs_data[legs_num][21] = -1
				legs_data[legs_num][22] = ""
				legs_data[legs_num][23] = 0
				legs_data[legs_num][24] = 0
				legs_data[legs_num][25] = 0
				legs_data[legs_num][26] = 0
				legs_data[legs_num][27] = ""
				legs_data[legs_num][28] = ""
				legs_data[legs_num][29] = ""
				legs_data[legs_num][30] = ""
				legs_data[legs_num][31] = "TF"
				legs_data[legs_num][32] = 0
				legs_data[legs_num][33] = ""
				legs_data[legs_num][34] = ""
				legs_data[legs_num][35] = ""
				legs_data[legs_num][36] = 0
				legs_data[legs_num][37] = 0
				legs_data[legs_num][38] = ""
				legs_data[legs_num][39] = ""
				legs_data[legs_num][40] = 0
			end
			
			-- DES ICAO
			apt_ok = 0	-- no error
			des_icao = rte_data[rte_data_num][2]
			file_name = "Custom Data/CIFP/" .. des_icao
			file_name = file_name .. ".dat"
			file_navdata = io.open(file_name, "r")
			if file_navdata == nil then
				file_name = "Resources/default data/CIFP/" .. des_icao
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(des_icao) == true then
						apt_ok = 1
					end
				else
					read_des_data(des_icao)		-- read destination airport data
					file_navdata:close()
					apt_ok = 1
				end
			else
				read_des_data(des_icao)		-- read destination airport data
				file_navdata:close()
				apt_ok = 1
				
			end
			
			if apt_ok == 1 then
				
				offset = 1
				des_app = "------"
				des_app_tns = "------"
				des_star = "------"
				des_star_trans = "------"
				----
				des_app2 = "------"
				des_app_tns2 = "------"
				des_star2 = "------"
				des_star_trans2 = "------"
				----
				des_icao_x = des_icao
				if apt_exist(des_icao) == true then
					des_icao_lat = icao_latitude
					des_icao_lon = icao_longitude
					des_tns_alt = icao_tns_alt
					des_tns_lvl = icao_tns_lvl
					des_icao_alt = 2500
					if des_rwy_num > 0 then
						ii = tonumber(des_data[1][5])
						if ii ~= nil then
							des_icao_alt = ii
						end
					end
				else
					des_tns_alt = 0
					des_tns_lvl = 0
				end
				if des_tns_lvl == 0 then
					trans_lvl = "-----"
				else
					apt_ok = des_tns_lvl / 100
					trans_lvl = "FL" .. string.format("%03d", apt_ok)
				end
				
				legs_num = legs_num + 1
				legs_data[legs_num] = {}
				legs_data[legs_num][1] = des_icao	--entry
				legs_data[legs_num][2] = 0		-- brg
				legs_data[legs_num][3] = 0		-- distance
				legs_data[legs_num][4] = 0		-- speed
				legs_data[legs_num][5] = 0		-- altitude
				legs_data[legs_num][6] = 0	-- altitude type
				legs_data[legs_num][7] = des_icao_lat		-- latitude
				legs_data[legs_num][8] = des_icao_lon		-- longitude
				legs_data[legs_num][9] = ""			-- via id
				legs_data[legs_num][10] = 0		-- calc speed
				legs_data[legs_num][11] = 0		-- calc altitude
				legs_data[legs_num][12] = 0		-- calc altitude vnav pth
				legs_data[legs_num][13] = 0
				legs_data[legs_num][14] = 0		-- rest alt
				legs_data[legs_num][15] = 0		-- last fuel
				legs_data[legs_num][16] = ""
				legs_data[legs_num][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				legs_data[legs_num][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data[legs_num][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
				legs_data[legs_num][20] = 0
				legs_data[legs_num][21] = -1		-- none HOLD
				legs_data[legs_num][22] = ""
				legs_data[legs_num][23] = 0
				legs_data[legs_num][24] = 0
				legs_data[legs_num][25] = 0
				legs_data[legs_num][26] = 0
				legs_data[legs_num][27] = ""
				legs_data[legs_num][28] = ""
				legs_data[legs_num][29] = ""
				legs_data[legs_num][30] = ""
				legs_data[legs_num][31] = ""
				legs_data[legs_num][32] = 0
				legs_data[legs_num][33] = ""
				legs_data[legs_num][34] = ""
				legs_data[legs_num][35] = ""
			else
				kk = 1
			end
			
			legs_num = legs_num - 1
			
			if kk == 0 then
				co_route = entry
				calc_rte_enable = 1
				calc_rte_act = 0
				rte_calc_lat = 0
				rte_calc_lon = 0
			else
				copy_to_legsdata()
				
				--copy_to_legsdata3()
				offset_act = 0
				offset_start = 0
				offset_end = 0
				offset_dist = 0
				offset_side = 0
				--copy_to_legsdata3_1()
				--copy_to_legsdata3()
				
				ref_icao = "----"
				ref_icao_x = "----"
				des_icao = "****"
				des_icao_x = "****"
				ref_gate = "-----"
				co_route = "------------"
				trans_alt = "-----"
				ref_rwy = "-----"
				ref_sid = "------"
				ref_sid_tns = "------"
				des_app = "------"
				des_app_tns = "------"
				des_star = "------"
				des_star_trans = "------"
				----
				ref_rwy2 = "-----"
				ref_sid2 = "------"
				ref_sid_tns2 = "------"
				des_app2 = "------"
				des_app_tns2 = "------"
				des_star2 = "------"
				des_star_trans2 = "------"
				----
				crz_alt = "*****"
				crz_alt_num = 0
				crz_alt_num2 = 0
				offset = 0
				legs_num = 0
				-- fmc_message_num = fmc_message_num + 1
				-- fmc_message[fmc_message_num] = "LOAD ROUTE ERR"
				add_fmc_msg("LOAD ROUTE ERR", 1)
			end
		else
			-- fmc_message_num = fmc_message_num + 1
			-- fmc_message[fmc_message_num] = "LOAD ROUTE ERR"
			add_fmc_msg("LOAD ROUTE ERR", 1)
		end
	else
		-- fmc_message_num = fmc_message_num + 1
		-- fmc_message[fmc_message_num] = "LOAD ROUTE ERR"
		add_fmc_msg("LOAD ROUTE ERR", 1)
	end
	
	entry = ""
	
end

function use_import_data()

	local ii = 0
	local jj = 0
	local kk = 0
	local apt_ok = 0
	local xy = 0
	
	fpln_import_ok = 0
	
	fill_import_wpt_data = 0
	
	-- USE DATA
	if rte_data_num > 1 then
		if rte_data[1][1] == 1 and rte_data[rte_data_num][1] == 1 
		and rte_data[1][2] == ref_icao and rte_data[rte_data_num][2] == des_icao then
			
			--copy_to_legsdata2()
			kk = 0		-- no error
			legs_num2 = 0
			legs_data2 = {}
			
			-- REF ICAO
			apt_ok = 0	-- no error
			ref_icao_x = rte_data[1][2]
			
			-- file_name = "Custom Data/CIFP/" .. ref_icao_x
			-- file_name = file_name .. ".dat"
			-- file_navdata = io.open(file_name, "r")
			-- if file_navdata == nil then
				-- file_name = "Resources/default data/CIFP/" .. ref_icao_x
				-- file_name = file_name .. ".dat"
				-- file_navdata = io.open(file_name, "r")
				-- if file_navdata == nil then
					-- if apt_exist(ref_icao_x) == true then
						-- apt_ok = 1
					-- end
				-- else
					-- read_ref_data(ref_icao_x)		-- read reference airport data
					-- file_navdata:close()
					-- apt_ok = 1
				-- end
			-- else
				-- read_ref_data(ref_icao_x)		-- read reference airport data
				-- file_navdata:close()
				-- apt_ok = 1
			-- end
			
			if cust_def_data == 1 then
				file_name = "Custom Data/CIFP/" .. ref_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(ref_icao_x) == true then
						apt_ok = 1
					end
				else
					read_ref_data(ref_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			elseif cust_def_data == 2 then
				file_name = "Resources/default data/CIFP/" .. ref_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(ref_icao_x) == true then
						apt_ok = 1
					end
				else
					read_ref_data(ref_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			end
			
			-- if apt_ok == 1 then
				-- import_sid(rwy_tmp, sid_tmp, sid_tns_tmp)
			-- end
			
			if apt_ok == 1 then
				des_icao_x = "****"
				-- ref_gate = "-----"
				-- trans_alt = "-----"
				-- ref_rwy = "-----"
				-- ref_sid = "------"
				-- ref_sid_tns = "------"
				-- des_app = "------"
				-- des_app_tns = "------"
				-- des_star = "------"
				-- des_star_trans = "------"
				----
				ref_rwy2 = "-----"
				ref_sid2 = "------"
				ref_sid_tns2 = "------"
				des_app2 = "------"
				des_app_tns2 = "------"
				des_star2 = "------"
				des_star_trans2 = "------"
				----
				-- crz_alt = "*****"
				-- crz_alt_num = 0
				-- crz_alt_num2 = 0
				-- offset = 0
				if apt_exist(ref_icao_x) == true then
					ref_icao_lat_x = icao_latitude
					ref_icao_lon_x = icao_longitude
					ref_tns_alt_x = icao_tns_alt
					ref_tns_lvl_x = icao_tns_lvl
					ref_icao_alt_x = 0
					if rwy_num > 0 then
						xy = tonumber(ref_data[1][2])
						if xy ~= nil then
							ref_icao_alt_x = xy
						end
					end
				else
					ref_tns_alt_x = 0
					ref_tns_lvl_x = 0
				end
				if ref_tns_alt_x == 0 then
					trans_alt_x = "-----"
				else
					trans_alt_x = string.format("%5d", ref_tns_alt_x)
				end
				
				legs_num2 = legs_num2 + 1
				legs_data2[legs_num2] = {}
				legs_data2[legs_num2][1] = ref_icao_x	--entry
				legs_data2[legs_num2][2] = 0		-- brg
				legs_data2[legs_num2][3] = 0		-- distance
				legs_data2[legs_num2][4] = 0		-- speed
				legs_data2[legs_num2][5] = 0		-- altitude
				legs_data2[legs_num2][6] = 0	-- altitude type
				legs_data2[legs_num2][7] = ref_icao_lat_x		-- latitude
				legs_data2[legs_num2][8] = ref_icao_lon_x		-- longitude
				legs_data2[legs_num2][9] = ""			-- via id
				legs_data2[legs_num2][10] = 0		-- calc speed
				legs_data2[legs_num2][11] = 0		-- calc altitude
				legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
				legs_data2[legs_num2][13] = 0
				legs_data2[legs_num2][14] = 0		-- rest alt
				legs_data2[legs_num2][15] = 0		-- last fuel
				legs_data2[legs_num2][16] = ""
				legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
				legs_data2[legs_num2][20] = 0
				legs_data2[legs_num2][21] = -1		-- none HOLD
				legs_data2[legs_num2][22] = ""
				legs_data2[legs_num2][23] = 0
				legs_data2[legs_num2][24] = 0
				legs_data2[legs_num2][25] = 0
				legs_data2[legs_num2][26] = 0
				legs_data2[legs_num2][27] = ""
				legs_data2[legs_num2][28] = ""
				legs_data2[legs_num2][29] = ""
				legs_data2[legs_num2][30] = ""
				legs_data2[legs_num2][31] = ""
				legs_data2[legs_num2][32] = 0
				legs_data2[legs_num2][33] = ""
				legs_data2[legs_num2][34] = ""
				legs_data2[legs_num2][35] = ""
				legs_data2[legs_num2][36] = 9
				legs_data2[legs_num2][37] = 0
				legs_data2[legs_num2][38] = ""
				legs_data2[legs_num2][39] = ""
				legs_data2[legs_num2][40] = 0
			else
				kk = 1
			end
			
			-- ROUTE
			jj = rte_data_num - 1
			for ii = 2, jj do
				legs_num2 = legs_num2 + 1
				legs_data2[legs_num2] = {}
				legs_data2[legs_num2][1] = rte_data[ii][2]	--entry
				legs_data2[legs_num2][2] = 0		-- brg
				legs_data2[legs_num2][3] = 0		-- distance
				legs_data2[legs_num2][4] = 0		-- speed
				legs_data2[legs_num2][5] = 0		-- altitude
				legs_data2[legs_num2][6] = 0	-- altitude type
				legs_data2[legs_num2][7] = rte_data[ii][4]		-- latitude
				legs_data2[legs_num2][8] = rte_data[ii][5]		-- longitude
				legs_data2[legs_num2][9] = rte_data[ii][6]			-- via id
				legs_data2[legs_num2][10] = 0		-- calc speed
				legs_data2[legs_num2][11] = 0		-- calc altitude
				legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
				legs_data2[legs_num2][13] = 0
				legs_data2[legs_num2][14] = 0		-- rest alt
				legs_data2[legs_num2][15] = 0		-- last fuel
				
				if rte_data[ii][7] == "" then
					find_lat = rte_data[ii][4]
					find_lon = rte_data[ii][5]
					find_navaid(rte_data[ii][2], "", 3, "")
					if navaid_list_n > 0 then
						rte_data[ii][7] = navaid_list[1][8]
					end
				end
				
				legs_data2[legs_num2][16] = rte_data[ii][7]
				legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
				legs_data2[legs_num2][20] = 0
				legs_data2[legs_num2][21] = -1
				legs_data2[legs_num2][22] = ""
				legs_data2[legs_num2][23] = 0
				legs_data2[legs_num2][24] = 0
				legs_data2[legs_num2][25] = 0
				legs_data2[legs_num2][26] = 0
				legs_data2[legs_num2][27] = ""
				legs_data2[legs_num2][28] = ""
				legs_data2[legs_num2][29] = ""
				legs_data2[legs_num2][30] = ""
				legs_data2[legs_num2][31] = "TF"
				legs_data2[legs_num2][32] = 0
				legs_data2[legs_num2][33] = ""
				legs_data2[legs_num2][34] = ""
				legs_data2[legs_num2][35] = ""
				if rte_data[ii][1] == 1 then
					legs_data2[legs_num2][36] = 9
				elseif rte_data[ii][1] == 2 then
					legs_data2[legs_num2][36] = 2
				elseif rte_data[ii][1] == 3 then
					legs_data2[legs_num2][36] = 1
				elseif rte_data[ii][1] == 11 then
					legs_data2[legs_num2][36] = 4
				elseif rte_data[ii][1] == 28 then
					legs_data2[legs_num2][36] = 4
				else
					legs_data2[legs_num2][36] = 0
				end
				legs_data2[legs_num2][37] = 0
				legs_data2[legs_num2][38] = ""
				legs_data2[legs_num2][39] = ""
				legs_data2[legs_num2][40] = 0
			end
			
			-- DES ICAO
			apt_ok = 0	-- no error
			des_icao_x = rte_data[rte_data_num][2]
			
			-- file_name = "Custom Data/CIFP/" .. des_icao_x
			-- file_name = file_name .. ".dat"
			-- file_navdata = io.open(file_name, "r")
			-- if file_navdata == nil then
				-- file_name = "Resources/default data/CIFP/" .. des_icao_x
				-- file_name = file_name .. ".dat"
				-- file_navdata = io.open(file_name, "r")
				-- if file_navdata == nil then
					-- if apt_exist(des_icao_x) == true then
						-- apt_ok = 1
					-- end
				-- else
					-- read_des_data(des_icao_x)		-- read destination airport data
					-- file_navdata:close()
					-- apt_ok = 1
				-- end
			-- else
				-- read_des_data(des_icao_x)		-- read destination airport data
				-- file_navdata:close()
				-- apt_ok = 1
				
			-- end
			
			if cust_def_data == 1 then
				file_name = "Custom Data/CIFP/" .. des_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(des_icao_x) == true then
						apt_ok = 1
					end
				else
					read_des_data(des_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			elseif cust_def_data == 2 then
				file_name = "Resources/default data/CIFP/" .. des_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(des_icao_x) == true then
						apt_ok = 1
					end
				else
					read_des_data(des_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			end
			
			if apt_ok == 1 then
				
				-- offset = 1
				-- des_app = "------"
				-- des_app_tns = "------"
				-- des_star = "------"
				-- des_star_trans = "------"
				----
				des_app2 = "------"
				des_app_tns2 = "------"
				des_star2 = "------"
				des_star_trans2 = "------"
				----
				--des_icao_x = des_icao
				if apt_exist(des_icao_x) == true then
					des_icao_lat_x = icao_latitude
					des_icao_lon_x = icao_longitude
					des_tns_alt_x = icao_tns_alt
					des_tns_lvl_x = icao_tns_lvl
					des_icao_alt_x = 2500
					if des_rwy_num > 0 then
						ii = tonumber(des_data[1][5])
						if ii ~= nil then
							des_icao_alt_x = ii
						end
					end
				else
					des_tns_alt_x = 0
					des_tns_lvl_x = 0
				end
				if des_tns_lvl_x == 0 then
					trans_lvl_x = "-----"
				else
					apt_ok = des_tns_lvl_x / 100
					trans_lvl_x = "FL" .. string.format("%03d", apt_ok)
				end
				
				legs_num2 = legs_num2 + 1
				legs_data2[legs_num2] = {}
				legs_data2[legs_num2][1] = des_icao_x	--entry
				legs_data2[legs_num2][2] = 0		-- brg
				legs_data2[legs_num2][3] = 0		-- distance
				legs_data2[legs_num2][4] = 0		-- speed
				legs_data2[legs_num2][5] = 0		-- altitude
				legs_data2[legs_num2][6] = 0	-- altitude type
				legs_data2[legs_num2][7] = des_icao_lat_x		-- latitude
				legs_data2[legs_num2][8] = des_icao_lon_x		-- longitude
				legs_data2[legs_num2][9] = ""			-- via id
				legs_data2[legs_num2][10] = 0		-- calc speed
				legs_data2[legs_num2][11] = 0		-- calc altitude
				legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
				legs_data2[legs_num2][13] = 0
				legs_data2[legs_num2][14] = 0		-- rest alt
				legs_data2[legs_num2][15] = 0		-- last fuel
				legs_data2[legs_num2][16] = ""
				legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
				legs_data2[legs_num2][20] = 0
				legs_data2[legs_num2][21] = -1		-- none HOLD
				legs_data2[legs_num2][22] = ""
				legs_data2[legs_num2][23] = 0
				legs_data2[legs_num2][24] = 0
				legs_data2[legs_num2][25] = 0
				legs_data2[legs_num2][26] = 0
				legs_data2[legs_num2][27] = ""
				legs_data2[legs_num2][28] = ""
				legs_data2[legs_num2][29] = ""
				legs_data2[legs_num2][30] = ""
				legs_data2[legs_num2][31] = ""
				legs_data2[legs_num2][32] = 0
				legs_data2[legs_num2][33] = ""
				legs_data2[legs_num2][34] = ""
				legs_data2[legs_num2][35] = ""
				legs_data2[legs_num2][36] = 9
				legs_data2[legs_num2][37] = 0
				legs_data2[legs_num2][38] = ""
				legs_data2[legs_num2][39] = ""
				legs_data2[legs_num2][40] = 0
			else
				kk = 1
			end
			
			legs_num2 = legs_num2 - 1
			
			if kk == 0 then
				co_route_x = entry
				ref_gate_x = "-----"
				calc_rte_enable2 = 1
				--calc_rte_act2 = 0
				rte_calc_lat2 = 0
				rte_calc_lon2 = 0
				--legs_delete = 1
				--rte_exec = 1
				exec_load_fpln = 1
				fpln_import_ok = 1
				
				fill_import_wpt_data = 1
				--dump_leg4()
				--dump_leg()
			else
				exec_load_fpln = 0
				legs_delete = 0
				copy_to_legsdata2()
				
				ref_icao_x = ref_icao
				des_icao_x = des_icao
				
				ref_gate_x = "-----"
				co_route_x = "------------"
				trans_alt_x = "-----"
				
				ref_rwy2 = ref_rwy
				ref_sid2 = ref_sid
				ref_sid_tns2 = ref_sid_tns
				des_app2 = des_app
				des_app_tns2 = des_app_tns
				des_star2 = des_star
				des_star_trans2 = des_star_trans
				--legs_num2 = 0
				add_fmc_msg("LOAD ROUTE ERR", 1)
			end
		else
			add_fmc_msg("LOAD ROUTE ERR", 1)
		end
	else
		add_fmc_msg("LOAD ROUTE ERR", 1)
	end
	
	entry = ""
	
end


-- function fill_data()
	
	-- if fill_import_wpt_data == 1 then
		-- fill_cnt = 1
		
	-- end
	-- -- if rte_data[ii][7] == "" then
					-- -- find_lat = rte_data[ii][4]
					-- -- find_lon = rte_data[ii][5]
					-- -- find_navaid(rte_data[ii][2], "", 3, "")
					-- -- if navaid_list_n > 0 then
						-- -- rte_data[ii][7] = navaid_list[1][8]
					-- -- end
				-- -- end

-- end

function export_fms()
	
	local vvv = 0
	local www = 0
	local fms_line = ""
	local file_name2 = ""
	
	if fpln_num2 > 0 then
		file_name2 = "Output/FMS plans/" .. entry .. ".fms"
		local file_navdata2 = io.open(file_name2, "w")
		
		if file_navdata2 ~= nil then
			
			-- header
			fms_line = "I\n"
			file_navdata2:write(fms_line)
			fms_line = "3 version\n"
			file_navdata2:write(fms_line)
			fms_line = "0\n"
			file_navdata2:write(fms_line)
			
			-- num waypoints
			www = fpln_num2 + 1
			fms_line = tostring(www) .. "\n"
			file_navdata2:write(fms_line)
			
			-- save REF airport
			fms_line = "1 " .. ref_icao .. " 0 " .. tostring(legs_data[1][7]) .. " " .. tostring(legs_data[1][8]) .. "\n"
			file_navdata2:write(fms_line)
			
			-- save waypoints
			for vvv = 1, fpln_num2 do
				www = fpln_data2[vvv][4] + fpln_data2[vvv][5] - 1
				if www <= legs_num and www > 0 then
					fms_line = "11 " .. fpln_data2[vvv][1] .. " 0 " .. tostring(legs_data[www][7]) .. " " .. tostring(legs_data[www][8]) .. "\n"
				end
				file_navdata2:write(fms_line)
			end
			
			www = legs_num + 1
			-- save DES airport
			fms_line = "1 " .. des_icao .. " 0 " .. tostring(legs_data[www][7]) .. " " .. tostring(legs_data[www][8]) .. "\n"
			file_navdata2:write(fms_line)
			
			-- empty line
			fms_line = "\n"
			file_navdata2:write(fms_line)
			
			file_navdata2:close()
		end
	end
	
end

function import_fmx_old()
	
	local fms_line = ""
	local fms_word = {}
	local ii = 0
	local token = ""
	
	rte_data_num = 0
	rte_data = {}

	local file_name2 = "Output/FMS plans/" .. entry .. ".fmx"
	local file_navdata2 = io.open(file_name2, "r")
	
	if file_navdata2 ~= nil then
		fms_line = file_navdata2:read()
		while fms_line do
			-- read Flight number
			if string.len (fms_line) > 11 then
				if string.sub(fms_line, 1, 11) == "FLIGHT_NUM:" then
				end
			end
			
			-- split DATA
			fms_word = {}
			ii = 0
			for token in string.gmatch(fms_line, "[^,]+") do
				ii = ii + 1
				fms_word[ii] = token
			end
			
			if ii > 0 then
				if string.len(fms_word[ii]) > 1 and string.byte(fms_word[ii], -1) == 13 then	-- CR
					fms_word[ii] = string.sub(fms_word[ii], 1, -2)
				end
			end
			
			--entry = tostring(rte_data_num)
			if ii == 5 then
				-- if string.byte(apt_word[5], -1) == 13 then
					-- apt_word[5] = string.sub(apt_word[5], 1, -2)
				-- end
				rte_data_num = rte_data_num + 1
				rte_data[rte_data_num] = {}
				rte_data[rte_data_num][1] = 0		-- type
				rte_data[rte_data_num][2] = fms_word[1]		-- id name
				rte_data[rte_data_num][3] = 0		-- alt
				rte_data[rte_data_num][4] = tonumber(fms_word[4])		-- lat
				rte_data[rte_data_num][5] = tonumber(fms_word[5])		-- lon
				if string.len(fms_word[3]) > 0 then
					if string.len(fms_word[3]) > 2 and string.sub(fms_word[1], 1, 2) == "RW" then
						rte_data[rte_data_num][6] = ""
					else
						rte_data[rte_data_num][6] = fms_word[3]		-- via
					end
				else
					rte_data[rte_data_num][6] = ""
				end
				rte_data[rte_data_num][7] = fms_word[2]		-- reg_code
			end
			if rte_data_num > 0 then
				rte_data[1][1] = 1
				rte_data[rte_data_num][1] = 1
			end
			
			fms_line = file_navdata2:read()
		end
		file_navdata2:close()
		use_import_data()
	end
	
end


function import_fmx()
	
	local fms_line = ""
	local fms_word = {}
	local ii = 0
	local token = ""
	
	local apt_ok = 0
	
	local rwy_tmp = ""
	local sid_tmp = ""
	local sid_tns_tmp = ""
	local star_tmp = ""
	local star_tns_tmp = ""
	local app_tmp = ""
	local app_tns_tmp = ""
	
	local flight_num_tmp = ""
	
	rte_data_num = 0
	rte_data = {}

	local file_name2 = "Output/FMS plans/" .. entry .. ".fmx"
	local file_navdata2 = io.open(file_name2, "r")
	
	if file_navdata2 ~= nil then
		fms_line = file_navdata2:read()
		while fms_line do
			-- read Flight number
			if string.len(fms_line) > 11 then
				if string.sub(fms_line, 1, 11) == "FLIGHT_NUM:" then
					flight_num_tmp = string.sub(fms_line, 12, -1)
				end
			end
			
			-- split DATA
			fms_word = {}
			ii = 0
			for token in string.gmatch(fms_line, "[^,]+") do
				ii = ii + 1
				fms_word[ii] = token
			end
			
			if ii > 0 then
				if string.len(fms_word[ii]) > 1 and string.byte(fms_word[ii], -1) == 13 then	-- CR
					fms_word[ii] = string.sub(fms_word[ii], 1, -2)
				end
			end
			
			--entry = tostring(rte_data_num)
			if ii == 5 then
				-- if string.byte(apt_word[5], -1) == 13 then
					-- apt_word[5] = string.sub(apt_word[5], 1, -2)
				-- end
				rte_data_num = rte_data_num + 1
				rte_data[rte_data_num] = {}
				rte_data[rte_data_num][1] = 0		-- type
				rte_data[rte_data_num][2] = fms_word[1]		-- id name
				rte_data[rte_data_num][3] = 0		-- alt
				rte_data[rte_data_num][4] = tonumber(fms_word[4])		-- lat
				rte_data[rte_data_num][5] = tonumber(fms_word[5])		-- lon
				if string.len(fms_word[3]) > 0 then
					if string.len(fms_word[3]) > 2 and string.sub(fms_word[1], 1, 2) == "RW" then
						rte_data[rte_data_num][6] = ""
					else
						rte_data[rte_data_num][6] = fms_word[3]		-- via
					end
				else
					rte_data[rte_data_num][6] = ""
				end
				rte_data[rte_data_num][7] = fms_word[2]		-- reg_code
			
			elseif ii > 1 then
				if fms_word[1] == "DEPRWY" then
					rwy_tmp = fms_word[2]
					if string.len(rwy_tmp) > 3 then
						rwy_tmp = string.sub(rwy_tmp, 3, -1)
					end
				elseif fms_word[1] == "SID" then
					sid_tmp = fms_word[2]
				elseif fms_word[1] == "SIDTRANS" then
					sid_tns_tmp = fms_word[2]
				elseif fms_word[1] == "STAR" then
					star_tmp = fms_word[2]
				elseif fms_word[1] == "STARTRANS" then
					star_tns_tmp = fms_word[2]
				elseif fms_word[1] == "APP" then
					app_tmp = fms_word[2]
				elseif fms_word[1] == "APPTRANS" then
					app_tns_tmp = fms_word[2]
				end
			end
			fms_line = file_navdata2:read()
		end
		if rte_data_num > 1 then
			rte_data[1][1] = 1
			rte_data[rte_data_num][1] = 1
		end
		file_navdata2:close()
		use_import_data()
		
		-- add sid-star-app
		if fpln_import_ok == 1 then
			if string.len(flight_num_tmp) > 8 then
				flt_num = string.sub(flight_num_tmp, 1, 8)
			else
				flt_num = flight_num_tmp
			end
			
			-- file_name = "Custom Data/CIFP/" .. ref_icao_x
			-- file_name = file_name .. ".dat"
			-- file_navdata = io.open(file_name, "r")
			-- if file_navdata == nil then
				-- file_name = "Resources/default data/CIFP/" .. ref_icao_x
				-- file_name = file_name .. ".dat"
				-- file_navdata = io.open(file_name, "r")
				-- if file_navdata == nil then
					-- if apt_exist(ref_icao_x) == true then
						-- apt_ok = 1
					-- end
				-- else
					-- read_ref_data(ref_icao_x)		-- read reference airport data
					-- file_navdata:close()
					-- apt_ok = 1
				-- end
			-- else
				-- read_ref_data(ref_icao_x)		-- read reference airport data
				-- file_navdata:close()
				-- apt_ok = 1
			-- end
			-- if apt_ok == 1 then
				-- import_sid(rwy_tmp, sid_tmp, sid_tns_tmp)
			-- end
			
			if cust_def_data == 1 then
				file_name = "Custom Data/CIFP/" .. ref_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(ref_icao_x) == true then
						apt_ok = 1
					end
				else
					read_ref_data(ref_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			elseif cust_def_data == 2 then
				file_name = "Resources/default data/CIFP/" .. ref_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(ref_icao_x) == true then
						apt_ok = 1
					end
				else
					read_ref_data(ref_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			end
			
			if apt_ok == 1 then
				import_sid(rwy_tmp, sid_tmp, sid_tns_tmp)
			end
			
			apt_ok = 0
			
			-- file_name = "Custom Data/CIFP/" .. des_icao_x
			-- file_name = file_name .. ".dat"
			-- file_navdata = io.open(file_name, "r")
			-- if file_navdata == nil then
				-- file_name = "Resources/default data/CIFP/" .. des_icao_x
				-- file_name = file_name .. ".dat"
				-- file_navdata = io.open(file_name, "r")
				-- if file_navdata == nil then
					-- if apt_exist(des_icao_x) == true then
						-- apt_ok = 1
					-- end
				-- else
					-- read_des_data(des_icao_x)		-- read destination airport data
					-- file_navdata:close()
					-- apt_ok = 1
				-- end
			-- else
				-- read_des_data(des_icao_x)		-- read destination airport data
				-- file_navdata:close()
				-- apt_ok = 1
				
			-- end
			
			if cust_def_data == 1 then
				file_name = "Custom Data/CIFP/" .. des_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(des_icao_x) == true then
						apt_ok = 1
					end
				else
					read_des_data(des_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			elseif cust_def_data == 2 then
				file_name = "Resources/default data/CIFP/" .. des_icao_x
				file_name = file_name .. ".dat"
				file_navdata = io.open(file_name, "r")
				if file_navdata == nil then
					if apt_exist(des_icao_x) == true then
						apt_ok = 1
					end
				else
					read_des_data(des_icao_x)		-- read reference airport data
					file_navdata:close()
					apt_ok = 1
				end
			end
			
			if apt_ok == 1 then
				import_star(star_tmp, star_tns_tmp)
				import_app(app_tmp, app_tns_tmp)
			end
		end
	end
	
end


function import_fml()
	local fms_line = ""
	local fms_word = {}
	local ii = 0
	local jj = 0
	local kk = 0
	local token = ""
	
	-- ref_rwy_map = {}
	-- ref_rwy_map_num = 0
	
	-- fpln_data2 = {}
	-- fpln_num2 = 0
	
	local fpln_active = 0
	local ref_icao_active = 0
	local ref_icao_found = 0
	local des_icao_active = 0
	local des_icao_found = 0
	local ref_rwy_found = 0
	local des_rwy_found = 0
	local trans_alt_found = 0
	local ref_rwy_map_active = 0
	local ref_rwy_map_found = 0
	
	-- legs_data = {}
	-- legs_num = 0
	local leg_enable = 0
	local leg_entry = 0
	local leg_id = ""
	local leg_brg = 0
	local leg_spd = 0
	local leg_alt = 0
	local leg_alt_type = 0
	local leg_dis = 0
	local leg_lat = 0
	local leg_lon = 0
	local via_id = ""
	local leg_vpa = 0
	local leg_hld_trk = -1
	local leg_hld_out_trk = 0
	local leg_hld_lft = 0
	local leg_hld_len_nm = 0
	local leg_hld_len_min = 0
	local leg_hld_spd_kts = 0
	local lat_lon_disable = 0
	local last_leg_id = ""
	local next_waypoint = 0
	local ref_idx = 0
	
	local www = des_app
	
	msg_chk_alt_constr = 0
	
	
	
	local ref_sid_imp = "-"
	local ref_sid_tns_imp = "-"
	local des_star_imp = "-"
	local des_star_tns_imp = "-"
	local des_app_imp = "-"
	local des_app_tns_imp = "-"
	
	rte_data_num = 0
	rte_data = {}
	
	local rte_data_temp = {}
	
	-------------
	-- rte_data_num = rte_data_num + 1
	-- rte_data[rte_data_num] = {}
	-- rte_data[rte_data_num][1] = tonumber(apt_word[1])		-- type
	-- rte_data[rte_data_num][2] = apt_word[2]		-- id name
	-- rte_data[rte_data_num][3] = apt_word[3]		-- alt
	-- rte_data[rte_data_num][4] = tonumber(apt_word[4])		-- lat
	-- rte_data[rte_data_num][5] = tonumber(apt_word[5])		-- lon
	-- rte_data[rte_data_num][6] = "DIRECT"		-- via
	-- rte_data[rte_data_num][7] = ""		-- reg code
	----------------
	
	
	-- file_name = "Output/FMS plans/B738X.fml"
	-- file_navdata = io.open(file_name, "r")
	
	local file_name2 = "Output/FMS plans/" .. entry .. ".fml"
	local file_navdata2 = io.open(file_name2, "r")
	if file_navdata2 ~= nil then
		fms_line = file_navdata2:read()
		while fms_line do
			
			-- Reference ICAO
			if ref_icao_found == 0 then
				ii,jj = string.find(fms_line, 'class_id="37"')
				if ii ~= nil then
					ref_icao_active = 1
				end
			end
			if ref_icao_active == 1 then
				-- lat and lon
				ii,jj = string.find(fms_line, "<rad_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</rad_>")
					jj = ii - 1
					if kk > jj then
						leg_lat = 0
						leg_lon = 0
					else
						if ref_idx == 0 then
							leg_lat = string.sub(fms_line, kk, jj)
						elseif ref_idx == 1 then
							leg_lon = string.sub(fms_line, kk, jj)
						end
					end
					ref_idx = ref_idx + 1
				end
				
				ii,jj = string.find(fms_line, "<id_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</id_>")
					jj = ii - 1
					if kk > jj then
						ref_icao = "----"
					else
						rte_data_num = rte_data_num + 1
						rte_data[rte_data_num] = {}
						rte_data[rte_data_num][1] = 1		-- type
						rte_data[rte_data_num][2] = string.sub(fms_line, kk, jj)		-- id name
						rte_data[rte_data_num][3] = 0	-- alt
						rte_data[rte_data_num][4] = math.deg(tonumber(leg_lat))		-- lat
						rte_data[rte_data_num][5] = math.deg(tonumber(leg_lon))		-- lon
						rte_data[rte_data_num][6] = ""		-- via
						rte_data[rte_data_num][7] = ""		-- reg code
						
					end
					ref_icao_found = 1
					ref_icao_active = 0
				end
			end
			
			-- SID
			ii,jj = string.find(fms_line, "<sid_id_>")
			if ii ~= nil then
				kk = jj + 1
				ii,jj = string.find(fms_line, "</sid_id_>")
				jj = ii - 1
				if kk > jj then
					ref_sid_imp = "-"
				else
					ref_sid_imp = string.sub(fms_line, kk, jj)
				end
			end
			
			-- SID TRANSITION
			ii,jj = string.find(fms_line, "<sid_trans_id_>")
			if ii ~= nil then
				kk = jj + 1
				ii,jj = string.find(fms_line, "</sid_trans_id_>")
				jj = ii - 1
				if kk > jj then
					ref_sid_tns_imp = "-"
				else
					ref_sid_tns_imp = string.sub(fms_line, kk, jj)
				end
			end
			
			-- STAR
			ii,jj = string.find(fms_line, "<star_id_>")
			if ii ~= nil then
				kk = jj + 1
				ii,jj = string.find(fms_line, "</star_id_>")
				jj = ii - 1
				if kk > jj then
					des_star_imp = "-"
				else
					des_star_imp = string.sub(fms_line, kk, jj)
				end
			end
			
			-- STAR TRANSITION
			ii,jj = string.find(fms_line, "<star_trans_id_>")
			if ii ~= nil then
				kk = jj + 1
				ii,jj = string.find(fms_line, "</star_trans_id_>")
				jj = ii - 1
				if kk > jj then
					des_star_tns_imp = "-"
				else
					des_star_tns_imp = string.sub(fms_line, kk, jj)
				end
			end
			
			-- APP
			ii,jj = string.find(fms_line, "<approach_id_>")
			if ii ~= nil then
				kk = jj + 1
				ii,jj = string.find(fms_line, "</approach_id_>")
				jj = ii - 1
				if kk > jj then
					des_app_imp = "-"
				else
					des_app_imp = string.sub(fms_line, kk, jj)
				end
			end
			
			-- APP TRANSITION
			ii,jj = string.find(fms_line, "<approach_trans_id_>")
			if ii ~= nil then
				kk = jj + 1
				ii,jj = string.find(fms_line, "</approach_trans_id_>")
				jj = ii - 1
				if kk > jj then
					des_app_tns_imp = "-"
				else
					des_app_tns_imp = string.sub(fms_line, kk, jj)
				end
			end
			
			-- LEGS
			if des_icao_found == 0 then
			
			ii,jj = string.find(fms_line, "<trkToWpt>")
			if ii ~= nil then
				leg_enable = 1
				leg_entry = 4
			end
			if leg_enable == 1 then
				
				-- brg
				if leg_entry == 4 then
					ii,jj = string.find(fms_line, "<rad_>")
					if ii ~= nil then
						kk = jj + 1
						ii,jj = string.find(fms_line, "</rad_>")
						jj = ii - 1
						if kk < jj then
							leg_brg = tonumber(string.sub(fms_line, kk, jj))
						end
						leg_entry = 0
					end
				end
				
				-- distance, speed, altitude
				if leg_entry > 0 then
					ii,jj = string.find(fms_line, "<m_rep>")
					if ii ~= nil then
						kk = jj + 1
						ii,jj = string.find(fms_line, "</m_rep>")
						jj = ii - 1
						if kk < jj then
							if leg_entry == 1 then
								leg_dis = tonumber(string.sub(fms_line, kk, jj))
							elseif leg_entry == 2 then
								leg_spd = tonumber(string.sub(fms_line, kk, jj))
							elseif leg_entry == 3 then
								leg_alt = tonumber(string.sub(fms_line, kk, jj))
							end
						end
						leg_entry = 5	--0
					end
				end
				--lat, lon
				if leg_entry > 4 then
					ii,jj = string.find(fms_line, "<rad_>")
					if ii ~= nil then
						kk = jj + 1
						ii,jj = string.find(fms_line, "</rad_>")
						jj = ii - 1
						if kk < jj then
							if leg_entry == 5 then
								if lat_lon_disable == 0 then
									leg_lat = tonumber(string.sub(fms_line, kk, jj))
								end
							else
								if lat_lon_disable == 0 then
									leg_lon = tonumber(string.sub(fms_line, kk, jj))
									lat_lon_disable = 1
								end
							end
						end
						leg_entry = 0
					end
				end
				ii,jj = string.find(fms_line, "<distToWptNM>")
				if ii == nil then
					ii,jj = string.find(fms_line, "<speed_restriction_kts_>")
					if ii == nil then
						ii,jj = string.find(fms_line, "<altitude_restriction1_ft_>")
						if ii == nil then
							ii,jj = string.find(fms_line, "<lat_>")
							if ii == nil then
								ii,jj = string.find(fms_line, "<lon_>")
								if ii ~= nil then
									leg_entry = 6	-- longitude
								end
							else
								leg_entry = 5	-- latitude
							end
						else
							leg_entry = 3	-- alt restriction
						end
					else
						leg_entry = 2	-- speed restriction
					end
				else
					leg_entry = 1	-- distance
				end
				
				-- altitude type
				ii,jj = string.find(fms_line, "<altitude_restriction_type_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</altitude_restriction_type_>")
					jj = ii - 1
					if kk < jj then
						leg_alt_type = tonumber(string.sub(fms_line, kk, jj))
					end
				end
				
				-- id
				ii,jj = string.find(fms_line, "<id_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</id_>")
					jj = ii - 1
					if kk < jj then
						if leg_id == "" then
							leg_id = string.sub(fms_line, kk, jj)
						end
					end
				end
				
				-- via id
				ii,jj = string.find(fms_line, "<via_id_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</via_id_>")
					jj = ii - 1
					if kk < jj then
						via_id = string.sub(fms_line, kk, jj)
					else
						via_id = ""
					end
					if leg_id == "" then
						leg_id = "-----"
					end
				end
				-- vpa
				ii,jj = string.find(fms_line, "<vpa_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</vpa_>")
					jj = ii - 1
					if kk < jj then
						leg_vpa = tonumber(string.sub(fms_line, kk, jj))
					end
				end
				-- holding track
				ii,jj = string.find(fms_line, "<holding_track_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</holding_track_>")
					jj = ii - 1
					if kk < jj then
						leg_hld_trk = tonumber(string.sub(fms_line, kk, jj))
						--leg_id = last_leg_id
						if via_id == "" or leg_id == "-----" then
							leg_id = last_leg_id
						--else
							--leg_id = via_id
						end
						last_leg_id = ""
					end
				end
				-- holding out track
				ii,jj = string.find(fms_line, "<holding_out_track_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</holding_out_track_>")
					jj = ii - 1
					if kk < jj then
						leg_hld_out_trk = tonumber(string.sub(fms_line, kk, jj))
					end
				end
				-- holding left or right
				ii,jj = string.find(fms_line, "<is_left_holding_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</is_left_holding_>")
					jj = ii - 1
					if kk <= jj then
						leg_hld_lft = tonumber(string.sub(fms_line, kk, jj))
					end
				end
				-- holding lenght nm
				ii,jj = string.find(fms_line, "<hold_leg_length_nm_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</hold_leg_length_nm_>")
					jj = ii - 1
					if kk < jj then
						leg_hld_len_nm = tonumber(string.sub(fms_line, kk, jj))
					end
				end
				-- holding lenght min
				ii,jj = string.find(fms_line, "<hold_leg_length_min_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</hold_leg_length_min_>")
					jj = ii - 1
					if kk < jj then
						leg_hld_len_min = tonumber(string.sub(fms_line, kk, jj))
					end
				end
				-- holding speed limit kts
				ii,jj = string.find(fms_line, "<speed_limit_kts_>")
				if ii ~= nil then
					kk = jj + 1
					ii,jj = string.find(fms_line, "</speed_limit_kts_>")
					jj = ii - 1
					if kk < jj then
						leg_hld_spd_kts = tonumber(string.sub(fms_line, kk, jj))
					end
				end
				-- save waypoint data
				next_waypoint = 0
				ii,jj = string.find(fms_line, "</item>")
				if ii ~= nil then
					next_waypoint = 1
				end
				ii,jj = string.find(fms_line, "<item>")
				if ii ~= nil then
					next_waypoint = 1
				end
				
				if next_waypoint == 1 then
					rte_data_num = rte_data_num + 1
					rte_data[rte_data_num] = {}
					rte_data[rte_data_num][1] = 11		-- type
					rte_data[rte_data_num][2] = leg_id		-- id name
					rte_data[rte_data_num][3] = 0		-- alt
					rte_data[rte_data_num][4] = math.deg(tonumber(leg_lat))		-- lat
					rte_data[rte_data_num][5] = math.deg(tonumber(leg_lon))		-- lon
					rte_data[rte_data_num][6] = via_id		-- via
					rte_data[rte_data_num][7] = ""		-- reg code
					
					last_leg_id = leg_id
					leg_id = ""
					leg_brg = 0
					leg_dis = 0
					leg_spd = 0
					leg_alt = 0
					leg_alt_type = 0
					leg_lat = 0
					leg_lon = 0
					via_id = ""
					leg_vpa = 0
					leg_hld_trk = -1
					leg_hld_out_trk = 0
					leg_hld_lft = 0
					leg_hld_len_nm = 0
					leg_hld_len_min = 0
					leg_hld_spd_kts = 0
					leg_entry = 0
					leg_enable = 0
					lat_lon_disable = 0
				end
			end
			
			end
			
			fms_line = file_navdata2:read()
		end
		file_navdata2:close()
		
		if rte_data_num > 0 then
			
			if ref_sid_tns_imp == "-" then
				-- delete SID waypoints
				if ref_sid_imp ~= "-" then
					leg_brg = 0
					leg_spd = 0
					for ii = 1, rte_data_num do
						if rte_data[ii][6] == ref_sid_imp then
							if leg_brg == 0 then
								leg_brg = ii
							end
							leg_spd = ii
						end
					end
					if leg_brg > 0 then
						jj = leg_spd - leg_brg
						rte_data[leg_spd][6] = ""
						if jj > 0 then
							jj = leg_brg - 1
							for ii = leg_spd, rte_data_num do
								jj = jj + 1
								for kk = 1, 7 do
									rte_data[jj][kk] = rte_data[ii][kk]
								end
								
							end
							rte_data_num = jj
						end
					end
				end
			else
				-- delete SID waypoints
				if ref_sid_imp ~= "-" then
					ii = 1
					while ii <= rte_data_num do
						if rte_data[ii][6] == ref_sid_imp then
							for kk = 1, 7 do
								rte_data_temp[kk] = rte_data[ii][kk]
							end
							if ii < rte_data_num then
								for jj = ii + 1, rte_data_num do
									for kk = 1, 7 do
										rte_data[jj-1][kk] = rte_data[jj][kk] 
									end
								end
							end
							rte_data_num = rte_data_num - 1
						else
							ii = ii + 1
						end
					end
				end
				
				-- delete SID TNS waypoints
				if ref_sid_tns_imp ~= "-" then
					leg_brg = 0
					leg_spd = 0
					for ii = 1, rte_data_num do
						if rte_data[ii][6] == ref_sid_tns_imp then
							if leg_brg == 0 then
								leg_brg = ii
							end
							leg_spd = ii
						end
					end
					if leg_brg > 0 then
						jj = leg_spd - leg_brg
						rte_data[leg_spd][6] = ""
						if jj > 0 then
							jj = leg_brg - 1
							for ii = leg_spd, rte_data_num do
								jj = jj + 1
								for kk = 1, 7 do
									rte_data[jj][kk] = rte_data[ii][kk]
								end
								
							end
							rte_data_num = jj
						end
					end
				end
			end
			
			-- delete STAR TNS waypoints
			if des_star_tns_imp ~= "-" then
				ii = 1
				while ii <= rte_data_num do
					if rte_data[ii][6] == des_star_tns_imp then
						for kk = 1, 7 do
							rte_data_temp[kk] = rte_data[ii][kk]
						end
						if ii < rte_data_num then
							for jj = ii + 1, rte_data_num do
								for kk = 1, 7 do
									rte_data[jj-1][kk] = rte_data[jj][kk] 
								end
							end
						end
						rte_data_num = rte_data_num - 1
					else
						ii = ii + 1
					end
				end
			end
			
			-- delete STAR waypoints
			if des_star_imp ~= "-" then
				ii = 1
				while ii <= rte_data_num do
					if rte_data[ii][6] == des_star_imp then
						for kk = 1, 7 do
							rte_data_temp[kk] = rte_data[ii][kk]
						end
						if ii < rte_data_num then
							for jj = ii + 1, rte_data_num do
								for kk = 1, 7 do
									rte_data[jj-1][kk] = rte_data[jj][kk] 
								end
							end
						end
						rte_data_num = rte_data_num - 1
					else
						ii = ii + 1
					end
				end
			end
			
			-- delete APP TNS waypoints
			if des_app_tns_imp ~= "-" then
				ii = 1
				while ii <= rte_data_num do
					if rte_data[ii][6] == des_app_tns_imp then
						for kk = 1, 7 do
							rte_data_temp[kk] = rte_data[ii][kk]
						end
						if ii < rte_data_num then
							for jj = ii + 1, rte_data_num do
								for kk = 1, 7 do
									rte_data[jj-1][kk] = rte_data[jj][kk] 
								end
							end
						end
						rte_data_num = rte_data_num - 1
					else
						ii = ii + 1
					end
				end
			end
			
			-- delete APP waypoints
			if des_app_imp ~= "-" then
				ii = 1
				while ii <= rte_data_num do
					if rte_data[ii][6] == des_app_imp then
						for kk = 1, 7 do
							rte_data_temp[kk] = rte_data[ii][kk]
						end
						if ii < rte_data_num then
							for jj = ii + 1, rte_data_num do
								for kk = 1, 7 do
									rte_data[jj-1][kk] = rte_data[jj][kk] 
								end
							end
						end
						rte_data_num = rte_data_num - 1
					else
						ii = ii + 1
					end
				end
			end
			
			if string.len(rte_data[rte_data_num][2]) == 4 then
				rte_data[rte_data_num][1] = 1
			end
		end
		
		--dump_rte_data()
		
		use_import_data()
		
	end
	
end


function load_cust_wpt()
	
	local fms_line = ""
	local fms_word = {}
	local ii = 0
	local token = ""
	
	wptx_n = 0
	wptx = {}

	local file_name2 = FILE_NAME_CUST_DAT	--"Custom Data/B738X_wptx.dat"
	local file_navdata2 = io.open(file_name2, "r")
	
	if file_navdata2 ~= nil then
		fms_line = file_navdata2:read()
		while fms_line do
			
			-- split DATA
			fms_word = {}
			ii = 0
			for token in string.gmatch(fms_line, "[^,]+") do
				ii = ii + 1
				fms_word[ii] = token
			end
			
			if ii > 0 then
				if string.len(fms_word[ii]) > 1 and string.byte(fms_word[ii], -1) == 13 then	-- CR
					fms_word[ii] = string.sub(fms_word[ii], 1, -2)
				end
			end
			
			if ii == 8 then
				wptx_n = wptx_n + 1
				wptx[wptx_n] = {}
				wptx[wptx_n][1] = fms_word[1]		-- id name
				wptx[wptx_n][2] = tonumber(fms_word[2])		-- lat
				wptx[wptx_n][3] = tonumber(fms_word[3])		-- lon
				wptx[wptx_n][4] = fms_word[4]		-- rec navaid
				wptx[wptx_n][5] = fms_word[5]		-- rec navaid rc
				wptx[wptx_n][6] = fms_word[6]		-- brg
				wptx[wptx_n][7] = fms_word[7]		-- distance
				wptx[wptx_n][8] = fms_word[8]		-- mag var
			end
			
			fms_line = file_navdata2:read()
		end
		
		file_navdata2:close()
	
	end
end

function save_cust_wpt()
	
	local vvv = 0
	local fms_line = ""
	local file_name2 = ""
	
	if wptx_n > 0 then
		file_name2 = FILE_NAME_CUST_DAT	--"Custom Data/B738X_wptx.dat"
		local file_navdata2 = io.open(file_name2, "w")
		
		if file_navdata2 ~= nil then
			for vvv = 1, wptx_n do
				fms_line = wptx[vvv][1] .. "," .. tostring(wptx[vvv][2]) .. "," .. tostring(wptx[vvv][3]) .. ","
				fms_line = fms_line .. wptx[vvv][4] .. "," .. wptx[vvv][5] .. "," .. wptx[vvv][6] .. "," .. wptx[vvv][7] .. ","
				fms_line = fms_line .. wptx[vvv][8] .. "\n"
				file_navdata2:write(fms_line)
			end
			file_navdata2:close()
		end
	end
	
end


function dump_rte_data()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if rte_data_num > 0 then
			for vvv = 1, rte_data_num  do
--				if awy_temp2[vvv][1] == "R232" then
					fms_line = tostring(rte_data[vvv][1]) .. "," .. rte_data[vvv][2] .. "," .. rte_data[vvv][3] .. "," .. tostring(rte_data[vvv][4]) 
					fms_line = fms_line .. "," .. tostring(rte_data[vvv][5]) .. "," .. rte_data[vvv][6] .. "\n"
					file_navdata2:write(fms_line)
--				end
			end
		end
		file_navdata2:close()
	end
end


function load_fpln()
	
	local file_name2 = "Output/FMS plans/" .. entry .. ".fmx"
	local file_navdata2 = io.open(file_name2, "r")
	local fms_line = ""
	local fms_ver = 0
	
	if file_navdata2 == nil then
		
		file_name2 = "Output/FMS plans/" .. entry .. ".fml"
		file_navdata2 = io.open(file_name2, "r")
		if file_navdata2 == nil then
			
			file_name2 = "Output/FMS plans/" .. entry .. ".fms"
			file_navdata2 = io.open(file_name2, "r")
			if file_navdata2 == nil then 
				--add_fmc_msg(INVALID_INPUT, 1)
				add_fmc_msg(INVALID_INPUT, 1)
			else
				-- check v3 or v11
				fms_line = file_navdata2:read()
				while fms_line do
					if string.sub(fms_line, 1, 4) == "1100" then
						fms_ver = 1
						break
					end
					fms_line = file_navdata2:read()
				end
				file_navdata2:close()
				if fms_ver == 0 then
					import_fms()
				else
					import_fms_v11()
				end
			end
		else
			file_navdata2:close()
			import_fml()
		end
	else
		file_navdata2:close()
		import_fmx()
	end
	
end


function export_fmx()
	
	local vvv = 0
	local www = 0
	local fms_line = ""
	local file_name2 = ""
	
	if legs_num > 1 then
		file_name2 = "Output/FMS plans/" .. entry .. ".fmx"
		local file_navdata2 = io.open(file_name2, "w")
		
		if file_navdata2 ~= nil then
			-- save legs (id_name, reg_code, via, latitude, longitude)
			www = legs_num + 1
			for vvv = 1, www do
				if legs_data[vvv][19] == 0 or legs_data[vvv][19] == 3 or legs_data[vvv][19] == 4 then
					if ref_rwy2 == "-----" or vvv ~= 2 then
						fms_line = legs_data[vvv][1] .. "," 
						if legs_data[vvv][16] == "" then
							fms_line = fms_line .. " " .. ","
						else
							fms_line = fms_line .. legs_data[vvv][16] .. ","
						end
						if legs_data[vvv][9] == "" then
							fms_line = fms_line .. " " .. ","
						else
							fms_line = fms_line .. legs_data[vvv][9] .. ","
						end
						fms_line = fms_line .. tostring(legs_data[vvv][7]) .. "," .. tostring(legs_data[vvv][8]) .. "\n"
						file_navdata2:write(fms_line)
					end
				end
			end
			
			-- save data
			if ref_rwy2 ~= "-----" then
				fms_line = "DEPRWY," .. ref_rwy2 .. "\n"
				file_navdata2:write(fms_line)
			end
			if ref_sid2 ~= "------" then
				fms_line = "SID," .. ref_sid2 .. "\n"
				file_navdata2:write(fms_line)
			end
			if ref_sid_tns2 ~= "------" then
				fms_line = "SIDTRANS," .. ref_sid_tns2 .. "\n"
				file_navdata2:write(fms_line)
			end
			if des_star2 ~= "------" then
				fms_line = "STAR," .. des_star2 .. "\n"
				file_navdata2:write(fms_line)
			end
			if des_star_trans2 ~= "------" then
				fms_line = "STARTRANS," .. des_star_trans2 .. "\n"
				file_navdata2:write(fms_line)
			end
			if des_app2 ~= "------" then
				fms_line = "APP," .. des_app2 .. "\n"
				file_navdata2:write(fms_line)
			end
			if des_app_tns2 ~= "------" then
				fms_line = "APPTRANS," .. des_app_tns2 .. "\n"
				file_navdata2:write(fms_line)
			end
			
			fms_line = "FLIGHT_NUM:" .. flt_num .. "\n"
			file_navdata2:write(fms_line)
			
			file_navdata2:close()
		end
	end
	
end

function save_fpln()
	
	if B738DR_fpln_format == 0 then
		export_fmx()
	else
		export_fms()
	end
	
end

------------------------------------------
-- function mag_variation_rad(lat_mag, lon_mag)
	
	-- local ii = 0
	-- local jj = 999
	-- local kk = 0
	-- local nd_lat = lat_mag
	-- local nd_lon = lon_mag
	-- local nd_lat2 = 0
	-- local nd_lon2 = 0
	-- local nd_dis = 0
	-- local nd_x = 0
	-- local nd_y = 0
	
	-- --find nearest VOR
	-- if earth_nav_num > 0 then
		-- for ii = 1, earth_nav_num do
			-- if earth_nav[ii][1] == 1 then	-- VOR
				-- nd_lat2 = math.rad(earth_nav[ii][2])
				-- nd_lon2 = math.rad(earth_nav[ii][3])
				-- nd_x = (nd_lon2 - nd_lon) * math.cos((nd_lat + nd_lat2)/2)
				-- nd_y = nd_lat2 - nd_lat
				-- nd_dis = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
				-- if nd_dis < jj then
					-- jj = nd_dis
					-- kk = earth_nav[ii][9]
				-- end
			-- end
		-- end
	-- end
	-- return math.rad(kk)

-- end


-- function mag_variation_deg(lat_mag, lon_mag)
	
	-- local ii = 0
	-- local jj = 999
	-- local kk = 0
	-- local nd_lat = math.rad(lat_mag)
	-- local nd_lon = math.rad(lon_mag)
	-- local nd_lat2 = 0
	-- local nd_lon2 = 0
	-- local nd_dis = 0
	-- local nd_x = 0
	-- local nd_y = 0
	
	-- --find nearest VOR
	-- if earth_nav_num > 0 then
		-- for ii = 1, earth_nav_num do
			-- if earth_nav[ii][1] == 1 then	-- VOR
				-- nd_lat2 = math.rad(earth_nav[ii][2])
				-- nd_lon2 = math.rad(earth_nav[ii][3])
				-- nd_x = (nd_lon2 - nd_lon) * math.cos((nd_lat + nd_lat2)/2)
				-- nd_y = nd_lat2 - nd_lat
				-- nd_dis = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
				-- if nd_dis < jj then
					-- jj = nd_dis
					-- kk = earth_nav[ii][9]
				-- end
			-- end
		-- end
	-- end
	-- return kk

-- end


function mag_variation_rad(lat_mag, lon_mag)
	
	local lat_step1 = math.floor((math.deg(lat_mag) + 90.5)/5) + 1
	lat_step1 = math.min(lat_step1, 37)
	lat_step1 = math.max(lat_step1, 1)
	
	local lat_step2 = lat_step1 + 1
	if lat_step2 > 37 then
		lat_step2 = 1
	end
	
	local lon_step1 = math.floor((math.deg(lon_mag) + 180.5)/5) + 1
	lon_step1 = math.min(lon_step1, 73)
	lon_step1 = math.max(lon_step1, 1)
	
	local lon_step2 = lon_step1 + 1
	if lon_step2 > 73 then
		lon_step2 = 1
	end
	
	local mag_lu = mag_dec[lat_step1][lon_step2]
	local mag_ld = mag_dec[lat_step1][lon_step1]
	local mag_ru = mag_dec[lat_step2][lon_step2]
	local mag_rd = mag_dec[lat_step2][lon_step1]
	
	local mag_lon_left = 0
	local mag_lon_right = 0
	local temp7 = 0
	
	if math.deg(lon_mag) < 0 then
		temp7 = (math.deg(lon_mag) - ((lon_step2 * 5) - 185)) / 5
	else
		temp7 = (math.deg(lon_mag) - ((lon_step1 * 5) - 185)) / 5
	end
	if temp7 < 0 then
		temp7 = -temp7
	end
	temp7 = math.min(temp7, 1)
	temp7 = math.max(temp7, 0)
	
	if math.deg(lon_mag) < 0 then
		mag_lon_left = B738_rescale(0, mag_lu, 1, mag_ld, temp7)
		mag_lon_right = B738_rescale(0, mag_ru, 1, mag_rd, temp7)
	else
		mag_lon_left = B738_rescale(0, mag_ld, 1, mag_lu, temp7)
		mag_lon_right = B738_rescale(0, mag_rd, 1, mag_ru, temp7)
	end
	
	if math.deg(lat_mag) < 0 then
		temp7 = (math.deg(lat_mag) - ((lat_step2 * 5) - 95)) / 5
	else
		temp7 = (math.deg(lat_mag) - ((lat_step1 * 5) - 95)) / 5
	end
	if temp7 < 0 then
		temp7 = -temp7
	end
	temp7 = math.min(temp7, 1)
	temp7 = math.max(temp7, 0)
	
	local result = 0
	if math.deg(lat_mag) < 0 then
		result = B738_rescale(0, mag_lon_right, 1, mag_lon_left, temp7)
	else
		result = B738_rescale(0, mag_lon_left, 1, mag_lon_right, temp7)
	end
	
	return math.rad(result)

end


function mag_variation_deg(lat_mag, lon_mag)
	
	local lat_step1 = math.floor((lat_mag + 90.5)/5) + 1
	lat_step1 = math.min(lat_step1, 37)
	lat_step1 = math.max(lat_step1, 1)
	
	local lat_step2 = lat_step1 + 1
	if lat_step2 > 37 then
		lat_step2 = 1
	end
	
	local lon_step1 = math.floor((lon_mag + 180.5)/5) + 1
	lon_step1 = math.min(lon_step1, 73)
	lon_step1 = math.max(lon_step1, 1)
	
	local lon_step2 = lon_step1 + 1
	if lon_step2 > 73 then
		lon_step2 = 1
	end
	
	--entry = tostring(lat_step1) .. "/" .. tostring(lat_step2) .. "/" .. tostring(lon_step1) .. "/" .. tostring(lon_step2)
	
	local mag_lu = mag_dec[lat_step1][lon_step2]
	local mag_ld = mag_dec[lat_step1][lon_step1]
	local mag_ru = mag_dec[lat_step2][lon_step2]
	local mag_rd = mag_dec[lat_step2][lon_step1]
	
	--entry = tostring(mag_lu) .. "/" .. tostring(mag_ld) .. "/" .. tostring(mag_ru) .. "/" .. tostring(mag_rd)
	
	local mag_lon_left = 0
	local mag_lon_right = 0
	local temp7 = 0
	--local temp7 = lon_mag - math.floor(lon_mag + 0.5)
	if lon_mag < 0 then
		temp7 = (lon_mag - ((lon_step2 * 5) - 185)) / 5
	else
		temp7 = (lon_mag - ((lon_step1 * 5) - 185)) / 5
	end
	if temp7 < 0 then
		temp7 = -temp7
	end
	temp7 = math.min(temp7, 1)
	temp7 = math.max(temp7, 0)
	
	
	if lon_mag < 0 then
		mag_lon_left = B738_rescale(0, mag_lu, 1, mag_ld, temp7)
		mag_lon_right = B738_rescale(0, mag_ru, 1, mag_rd, temp7)
	else
		mag_lon_left = B738_rescale(0, mag_ld, 1, mag_lu, temp7)
		mag_lon_right = B738_rescale(0, mag_rd, 1, mag_ru, temp7)
	end
	
	--temp7 = lat_mag - math.floor(lat_mag + 0.5)
	if lat_mag < 0 then
		temp7 = (lat_mag - ((lat_step2 * 5) - 95)) / 5
	else
		temp7 = (lat_mag - ((lat_step1 * 5) - 95)) / 5
	end
	if temp7 < 0 then
		temp7 = -temp7
	end
	temp7 = math.min(temp7, 1)
	temp7 = math.max(temp7, 0)
	
	--entry = tostring(mag_lon_left) .. "/" .. tostring(mag_lon_right) .. "/" .. tostring(temp7)
	
	local result = 0
	if lat_mag < 0 then
		result = B738_rescale(0, mag_lon_right, 1, mag_lon_left, temp7)
	else
		result = B738_rescale(0, mag_lon_left, 1, mag_lon_right, temp7)
	end
	
	return result

end


function offset_check1(off_leg_id)
	
	local ii = 0
	
	offset_start = 0
	
	if legs_num3 > 2 and offset < legs_num3 then
		for ii = offset, legs_num3 do
			if legs_data3[ii][1] == off_leg_id and legs_data3[ii][19] == 0 then
				offset_start = ii
				break
			end
		end
	end

end

function offset_check2(off_leg_id)
	
	local ii = 0
	
	offset_end = 0
	
	if legs_num3 > 2 and offset_start <= legs_num3 then
		for ii = offset_start, legs_num3 do
			if legs_data3[ii][1] == "VECTOR" or legs_data3[ii][1] == "DISCONTINUITY" then
				break
			end
			if legs_data3[ii][21] >= 0 and legs_data3[ii][21] <= 1 then
				break
			end
			if off_leg_id == legs_data3[ii][1] and legs_data3[ii][19] == 0 then
				offset_end = ii
				break
			end
		end
	end

end



function create_legsdata3()

	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local find_off = 0
	
	legs_num3 = 0
	legs_data3 = {}
	
	offset_start = 0
	offset_end = 0
	
	for ii = 1, legs_num + 1 do
		if legs_data[ii][19] == 5 or legs_data[ii][19] == 6 then
			if offset_start == 0 then
				offset_start = ii
			else
				offset_end = ii
			end
			if find_off == 0 then
				if legs_off_tmp_n > 0 then
					for kk = 1, legs_off_tmp_n do
						legs_num3 = legs_num3 + 1
						legs_data3[legs_num3] = {}
						for ll = 1, MAX_LEGS_DATA do
							legs_data3[legs_num3][ll] = legs_off_tmp[kk][ll]
						end
					end
				end
				find_off = 1
			end
		else
			legs_num3 = legs_num3 + 1
			legs_data3[legs_num3] = {}
			for ll = 1, MAX_LEGS_DATA do
				legs_data3[legs_num3][ll] = legs_data[ii][ll]
			end
		end
	end
	legs_num3 = legs_num3 - 1
	if offset_start == 0 and offset_end == 0 then
		offset_act = 0
		offset_dist = 0
		offset_side = 0
	end
	--dump_leg3()
end

function offset_create()
	
	local ii = 0
	local jj = 0
	local nd_lat = 0
	local nd_lon = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local temp_brg = 0
	local kk = 0
	local mm = 0
	local id_nav_txt = ""
	local id_nav_txt2 = ""
	
	legs_off_tmp_n = 0
	legs_off_tmp = {}
	
	-- offset_act = 0
	-- offset_start = 0
	-- offset_end = 0
	-- offset_dist = 0
	
	-- create lateral offset route
	if offset_start > offset then
		for ii = offset_start, offset_end do
			
			-- backup offset waypoints
			legs_off_tmp_n = legs_off_tmp_n + 1
			legs_off_tmp[legs_off_tmp_n] = {}
			for jj = 1, MAX_LEGS_DATA do
				legs_off_tmp[legs_off_tmp_n][jj] = legs_data3[ii][jj]
			end
			---
			
			if string.len(legs_data3[ii][1]) < 4 then
				id_nav_txt2 = legs_data3[ii][1]
			else
				id_nav_txt2 = string.sub(legs_data3[ii][1], 1, 3)
			end
			for mm = 1, 99 do
				id_nav_txt = id_nav_txt2 .. string.format("%02d", mm)
				nd_lat = 1
				for kk = 1, legs_num2 do
					if legs_data2[kk][1] == id_nav_txt then
						nd_lat = 0
					end
				end
				if nd_lat == 1 then
					break
				end
			end
			legs_data2[ii][1] = id_nav_txt
			
			if ii == offset_start then
				legs_data2[ii][19] = 5	-- first offset waypoint
			else
				legs_data2[ii][19] = 6	-- offset waypoint
			end
			legs_data2[ii][9] = "DIRECT"	-- null via
			
			nd_lat = math.deg(legs_data3[ii][2])
			nd_lon = math.deg(legs_data3[ii+1][2])
			temp_brg = (nd_lon - nd_lat + 360) % 360
			if temp_brg > 180 then
				temp_brg = temp_brg - 360
			end
			temp_brg = -temp_brg
			if temp_brg < 0 then
				temp_brg = -temp_brg
				temp_brg = 180 - temp_brg
				temp_brg = temp_brg / 2
				temp_brg = (nd_lat + temp_brg) % 360
				if offset_side == 1 then
					-- L lateral offset
					temp_brg = (temp_brg + 180) % 360
				end
			else
				temp_brg = 180 - temp_brg
				temp_brg = temp_brg / 2
				temp_brg = (nd_lat - temp_brg + 360) % 360
				if offset_side == 2 then
					-- R lateral offset
					temp_brg = (temp_brg + 180) % 360
				end
			end
			temp_brg = math.rad(temp_brg)
			
			nd_lat = math.rad(legs_data3[ii][7])
			nd_lon = math.rad(legs_data3[ii][8])
			nd_dis = offset_dist / 3440.064795					-- distance NM
			nd_lat2 = math.asin(math.sin(nd_lat)*math.cos(nd_dis) + math.cos(nd_lat)*math.sin(nd_dis)*math.cos(temp_brg))
			nd_lon2 = nd_lon + math.atan2(math.sin(temp_brg)*math.sin(nd_dis)*math.cos(nd_lat), math.cos(nd_dis)-math.sin(nd_lat)*math.sin(nd_lat2))
			legs_data2[ii][7] = math.deg(nd_lat2)
			legs_data2[ii][8] = math.deg(nd_lon2)
		end
	end
	--offset_act = 2
	--calc_rte_enable2 = 1
	--dump_leg()
end

function calc_brg_brg(req_lat, req_lon, req_brg, req_lat2, req_lon2, req_brg2)
	
	-- first waypoint
	local nd_lat1 = math.rad(req_lat)
	local nd_lon1 = math.rad(req_lon)
	local nd_brg1 = req_brg --+ mag_variation_rad(nd_lat1, nd_lon1)
	
	-- second waypoint
	local nd_lat2 = math.rad(req_lat2)
	local nd_lon2 = math.rad(req_lon2)
	local nd_brg2 = req_brg2 --+ mag_variation_rad(nd_lat2, nd_lon2)
	
	local nd_lat = 0
	local nd_lon = 0
	local nd_x = 0
	local nd_y = 0
	local nd_a = 0
	local nd_b = 0
	local nd_c = 0
	local nd_xy = 0
	local nd_brg12 = 0
	local nd_brg21 = 0
	local pi = 3.141592653589 --math.pi()
	
	-- calculate intercept two waypoints
	nd_xy = 2 * math.asin(math.sqrt((math.sin((nd_lat1-nd_lat2)/2))^2+math.cos(nd_lat1)*math.cos(nd_lat2)*math.sin((nd_lon1-nd_lon2)/2)^2))
	
	
	nd_x = math.sin(nd_lon2 - nd_lon1)
	if nd_x > 0 then
		nd_brg12 = math.acos((math.sin(nd_lat2)-math.sin(nd_lat1)*math.cos(nd_xy))/(math.sin(nd_xy)*math.cos(nd_lat1)))
		nd_brg21 = 2 * pi-math.acos((math.sin(nd_lat1)-math.sin(nd_lat2)*math.cos(nd_xy))/(math.sin(nd_xy)*math.cos(nd_lat2)))
	else
		nd_brg12 = 2 * pi-math.acos((math.sin(nd_lat2)-math.sin(nd_lat1)*math.cos(nd_xy))/(math.sin(nd_xy)*math.cos(nd_lat1)))
		nd_brg21 = math.acos((math.sin(nd_lat1)-math.sin(nd_lat2)*math.cos(nd_xy))/(math.sin(nd_xy)*math.cos(nd_lat2)))
	end
	
	nd_a = math.rad(((math.deg(nd_brg1) - math.deg(nd_brg12)) + 360) % 360)
	nd_b = math.rad(((math.deg(nd_brg21) - math.deg(nd_brg2)) + 360) % 360)
	
	if (math.sin(nd_a) == 0 and math.sin(nd_b) == 0) then
		-- infinity of intersections
		calc_lat = rte_calc_lat
		calc_lon = rte_calc_lon
	elseif (math.sin(nd_a) * math.sin(nd_b)) < 0 then
		-- intersection ambiguous
		calc_lat = rte_calc_lat
		calc_lon = rte_calc_lon
	else
		nd_a = math.abs(nd_a)
		nd_b = math.abs(nd_b)
		nd_c = math.acos(-math.cos(nd_a)*math.cos(nd_b)+math.sin(nd_a)*math.sin(nd_b)*math.cos(nd_xy))
		
		nd_x = math.atan2(math.sin(nd_xy)*math.sin(nd_a)*math.sin(nd_b),math.cos(nd_b)+math.cos(nd_a)*math.cos(nd_c))
		nd_lat = math.asin(math.sin(nd_lat1)*math.cos(nd_x)+math.cos(nd_lat1)*math.sin(nd_x)*math.cos(nd_brg1))
		nd_lon = math.atan2(math.sin(nd_brg1)*math.sin(nd_x)*math.cos(nd_lat1),math.cos(nd_x)-math.sin(nd_lat1)*math.sin(nd_lat))
		nd_lon = ((nd_lon1+nd_lon+pi) % (2*pi)) - pi
		
		calc_lat = math.deg(nd_lat)		-- latitude
		calc_lon = math.deg(nd_lon)		-- longitude
	end

end

-- behind navaid
function calc_brg_dist3(req_lat, req_lon, req_brg, req_lat2, req_lon2, req_dist2)
		
	local nd_lat = math.rad(req_lat)
	local nd_lon = math.rad(req_lon)
	local temp_brg = req_brg --+ mag_variation_rad(nd_lat, nd_lon)
	
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	local kk = 0
	
	local nd_lat3 = math.rad(req_lat2)
	local nd_lon3 = math.rad(req_lon2)
	
	local relative_brg = 0
	local brg_to_nav = 0
	local brg_to = math.deg(req_brg)
	
	for kk = 0.1, 99.9 do
		nd_dis = kk / 3440.064795					-- distance NM
		nd_lat2 = math.asin(math.sin(nd_lat)*math.cos(nd_dis) + math.cos(nd_lat)*math.sin(nd_dis)*math.cos(temp_brg))
		nd_lon2 = nd_lon + math.atan2(math.sin(temp_brg)*math.sin(nd_dis)*math.cos(nd_lat), math.cos(nd_dis)-math.sin(nd_lat)*math.sin(nd_lat2))
		
		brg_to_nav = nd_calc_brg(math.deg(nd_lat2), math.deg(nd_lon2), req_lat2, req_lon2)
		relative_brg = (brg_to_nav - brg_to + 360) % 360
		if relative_brg > 180 then
			relative_brg = relative_brg - 360
		end
		
		if relative_brg > 90 or relative_brg < -90 then
			-- distance nd3 to nd2
			nd_x = (nd_lon2 - nd_lon3) * math.cos((nd_lat3 + nd_lat2)/2)
			nd_y = nd_lat2 - nd_lat3
			nd_dis = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
			if nd_dis >= req_dist2 then
				break
			end
		end
		
	end
	
	calc_lat = math.deg(nd_lat2)
	calc_lon = math.deg(nd_lon2)
	
end


function calc_brg_dist2(req_lat, req_lon, req_brg, req_lat2, req_lon2, req_dist2)
		
	local nd_lat = math.rad(req_lat)
	local nd_lon = math.rad(req_lon)
	local temp_brg = req_brg --+ mag_variation_rad(nd_lat, nd_lon)
	
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	local kk = 0
	
	local nd_lat3 = math.rad(req_lat2)
	local nd_lon3 = math.rad(req_lon2)
	
	for kk = 0.1, 99.9 do
		nd_dis = kk / 3440.064795					-- distance NM
		nd_lat2 = math.asin(math.sin(nd_lat)*math.cos(nd_dis) + math.cos(nd_lat)*math.sin(nd_dis)*math.cos(temp_brg))
		nd_lon2 = nd_lon + math.atan2(math.sin(temp_brg)*math.sin(nd_dis)*math.cos(nd_lat), math.cos(nd_dis)-math.sin(nd_lat)*math.sin(nd_lat2))
		
		-- distance nd3 to nd2
		nd_x = (nd_lon2 - nd_lon3) * math.cos((nd_lat3 + nd_lat2)/2)
		nd_y = nd_lat2 - nd_lat3
		nd_dis = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
		if nd_dis >= req_dist2 then
			break
		end
	end
	calc_lat = math.deg(nd_lat2)
	calc_lon = math.deg(nd_lon2)
	
end

function calc_brg_dist20(req_lat, req_lon, req_brg, req_lat2, req_lon2, req_dist2)
		
	local nd_lat = math.rad(req_lat)
	local nd_lon = math.rad(req_lon)
	local temp_brg = req_brg --+ mag_variation_rad(nd_lat, nd_lon)
	
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	local kk = 0
	
	local nd_lat3 = math.rad(req_lat2)
	local nd_lon3 = math.rad(req_lon2)
	
	for kk = 0.1, 99.9 do
		nd_dis = kk / 3440.064795					-- distance NM
		nd_lat2 = math.asin(math.sin(nd_lat)*math.cos(nd_dis) + math.cos(nd_lat)*math.sin(nd_dis)*math.cos(temp_brg))
		nd_lon2 = nd_lon + math.atan2(math.sin(temp_brg)*math.sin(nd_dis)*math.cos(nd_lat), math.cos(nd_dis)-math.sin(nd_lat)*math.sin(nd_lat2))
		
		-- distance nd3 to nd2
		nd_x = (nd_lon2 - nd_lon3) * math.cos((nd_lat3 + nd_lat2)/2)
		nd_y = nd_lat2 - nd_lat3
		nd_dis = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
		if nd_dis <= req_dist2 then
			break
		end
	end
	calc_lat = math.deg(nd_lat2)
	calc_lon = math.deg(nd_lon2)
	
end


function calc_brg_dist(req_lat, req_lon, req_brg, req_dist)
	
	local nd_lat = math.rad(req_lat)
	local nd_lon = math.rad(req_lon)
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local temp_brg = 0
	
	temp_brg = req_brg --+ mag_variation_rad(nd_lat, nd_lon)
	nd_dis = req_dist / 3440.064795					-- distance NM
	nd_lat2 = math.asin(math.sin(nd_lat)*math.cos(nd_dis) + math.cos(nd_lat)*math.sin(nd_dis)*math.cos(temp_brg))
	nd_lon2 = nd_lon + math.atan2(math.sin(temp_brg)*math.sin(nd_dis)*math.cos(nd_lat), math.cos(nd_dis)-math.sin(nd_lat)*math.sin(nd_lat2))
	
	calc_lat = math.deg(nd_lat2)
	calc_lon = math.deg(nd_lon2)
	
end

function nd_calc_dist(req_lat, req_lon, req_lat2, req_lon2)
	
	local nd_lat = math.rad(req_lat)
	local nd_lon = math.rad(req_lon)
	
	local nd_lat2 = math.rad(req_lat2)
	local nd_lon2 = math.rad(req_lon2)
	
	local nd_x = (nd_lon2 - nd_lon) * math.cos((nd_lat + nd_lat2)/2)
	local nd_y = nd_lat2 - nd_lat
	local nd_dis = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
	
	return nd_dis
	
end

function nd_calc_dist2(req_lat, req_lon, req_lat2, req_lon2)
	
	local nd_lat = math.rad(req_lat)
	local nd_lat2 = math.rad(req_lat2)
	
	local nd_dlat = math.rad(req_lat2-req_lat)
	local nd_dlon = math.rad(req_lon2-req_lon)
	
	local nd_a = math.sin(nd_dlat/2)*math.sin(nd_dlat/2)+math.cos(nd_lat)*math.cos(nd_lat2)*math.sin(nd_dlon/2)*math.sin(nd_dlon/2)
	local nd_b = 2 * math.atan2(math.sqrt(nd_a), math.sqrt(1-nd_a))
	local nd_dis = nd_b * 3440.064795	--nm
	
	return nd_dis
end

function nd_calc_brg(req_lat, req_lon, req_lat2, req_lon2)
	
	local nd_lat = math.rad(req_lat)
	local nd_lon = math.rad(req_lon)
	
	local nd_lat2 = math.rad(req_lat2)
	local nd_lon2 = math.rad(req_lon2)
	
	local nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
	local nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
	local nd_hdg = math.atan2(nd_y, nd_x)
	nd_hdg = math.deg(nd_hdg)
	nd_hdg = (nd_hdg + 360) % 360
	
	return nd_hdg
	
end


function find_sid_app_idx()

	local ii = 0
	
	last_sid_idx = 0
	first_sid_idx = 0
	first_app_idx = 0
	first_star_idx = 0
	
	if legs_num > 1 then
		for ii = 1, legs_num do
			if legs_data[ii][19] == 1 or legs_data[ii][19] == 3 or legs_data[ii][19] == 10 then
				if first_sid_idx == 0 then
					first_sid_idx = ii
				end
				last_sid_idx = ii
			end
			if first_star_idx == 0 then
				if legs_data[ii][19] == 2 or legs_data[ii][19] == 4 then
					first_star_idx = ii
				end
			end
			if first_app_idx == 0 then
				if legs_data[ii][19] == 7 or legs_data[ii][19] == 8 or legs_data[ii][19] == 9 then
					first_app_idx = ii
				end
			end
		end
	end
	if first_star_idx == 0 and first_app_idx > 0 then
		first_star_idx = first_app_idx
	end

end


function find_sid_app_idx_mod()

	local ii = 0
	
	last_sid_idx_mod = 0
	first_sid_idx_mod = 0
	first_app_idx_mod = 0
	first_star_idx_mod = 0
	
	if legs_num2 > 1 then
		for ii = 1, legs_num2 do
			if legs_data2[ii][19] == 1 or legs_data2[ii][19] == 3 or legs_data2[ii][19] == 10 then
				if first_sid_idx_mod == 0 then
					first_sid_idx_mod = ii
				end
				last_sid_idx_mod = ii
			end
			if first_star_idx_mod == 0 then
				if legs_data2[ii][19] == 2 or legs_data2[ii][19] == 4 then
					first_star_idx_mod = ii
				end
			end
			if first_app_idx_mod == 0 then
				if legs_data2[ii][19] == 7 or legs_data2[ii][19] == 8 or legs_data2[ii][19] == 9 then
					first_app_idx_mod = ii
				end
			end
		end
	end
	if first_star_idx_mod == 0 and first_app_idx_mod > 0 then
		first_star_idx_mod = first_app_idx_mod
	end

end


function rte_copy1(aaa)

	local tt1 = 0
	local tt2 = 0
	local tt3 = 0
	
	legs_data_tmp_n = 0
	legs_data_tmp = {}
	
	tt3 = legs_num + 1
	if aaa <= tt3 and aaa > 0 then
		for tt1 = aaa, tt3 do
			legs_data_tmp_n = legs_data_tmp_n + 1
			legs_data_tmp[legs_data_tmp_n] = {}
			for tt2 = 1, MAX_LEGS_DATA do
				legs_data_tmp[legs_data_tmp_n][tt2] = legs_data[tt1][tt2]
			end
		end
	end
	
	
end

function rte_paste1(aaa)

	local tt1 = 0
	local tt2 = 0
	local cnt_leg = aaa - 1
	
	if legs_data_tmp_n > 0 then
	
		for tt1 = 1, legs_data_tmp_n do
			cnt_leg = cnt_leg + 1
			legs_data[cnt_leg] = {}
			for tt2 = 1, MAX_LEGS_DATA do
				legs_data[cnt_leg][tt2] = legs_data_tmp[tt1][tt2]
			end
		end
		legs_num = cnt_leg - 1
	end
end

-- mode: 0-legs_data,1-legs_data2
function del_if(del_mode)
	
	local ii = 0
	del_execute = 0
	
	if del_mode == 0 then
		for ii = 1, legs_num do
			if legs_data[ii][32] > 19 then
				legs_data[ii][32] = legs_data[ii][32] - 20
			elseif legs_data[ii][32] > 9 then
				legs_data[ii][32] = legs_data[ii][32] - 10
			end
		end
		ii = 1
		while ii <= legs_num do
			if legs_data[ii][19] == 99 then
				rte_copy1(ii+1)
				rte_paste1(ii)
				del_execute = 1
			else
				ii = ii + 1
			end
		end
	else
		for ii = 1, legs_num2 do
			if legs_data2[ii][32] > 19 then
				legs_data2[ii][32] = legs_data2[ii][32] - 20
			elseif legs_data2[ii][32] > 9 then
				legs_data2[ii][32] = legs_data2[ii][32] - 10
			end
		end
		ii = 1
		while ii <= legs_num2 do
			if legs_data2[ii][19] == 99 then
				rte_copy(ii+1)
				rte_paste(ii)
				del_execute = 1
			else
				ii = ii + 1
			end
		end
	end
end

function z_dec_lat_lon(dec_mode, dec_idx)
		
	local dec_calc_lat = 0
	local dec_calc_lon = 0
	local dec_calc_brg = 0
	local dec_calc_brg_true = 0
	local dec_calc_dist = 0
	
	local dec_navaid = ""
	local dec_navaid_rc = ""
	local dec_path = ""
	local dec_crs = 0
	local dec_brg = ""
	local dec_alt = 0
	local dec_dist = ""
	local dec_rnavaid = ""
	local dec_rnavaid_rc = ""
	
	local dec_prev_lat = 0
	local dec_prev_lon = 0
	local dec_prev_crs = 0
	
	local dec_next_brg = 0
	
	local crs1 = 0
	local crs2 = 0
	local radius = 0
	local dist = 0
	local dist2 = 0
	local idx1 = 0
	local lat1 = 0
	local lon1 = 0
	local lat2 = 0
	local lon2 = 0
	local lat3 = 0
	local lon3 = 0
	local nd_dis = 0
	
	local ctr_lat = 0
	local ctr_lon = 0
	local turn_dir = 0
	local ndb_navaid = 0
	
	B738DR_freeze = 5
		
	if dec_mode == 0 then
		-- previous wpt
		dec_prev_lat = legs_data[dec_idx-1][7]
		dec_prev_lon = legs_data[dec_idx-1][8]
		dec_prev_crs = legs_data[dec_idx-1][2]
		
		
		dec_calc_lat = dec_prev_lat
		dec_calc_lon = dec_prev_lon
		dec_calc_brg = dec_prev_crs
		dec_calc_dist = 0
		
		-- actual wpt
		dec_navaid = legs_data[dec_idx][1]
		dec_crs = legs_data[dec_idx][2]
		dec_alt = legs_data[dec_idx][5]
		dec_navaid_rc = legs_data[dec_idx][16]
		dec_rnavaid = legs_data[dec_idx][27]
		dec_rnavaid_rc = legs_data[dec_idx][28]
		dec_brg = legs_data[dec_idx][29]
		dec_dist = legs_data[dec_idx][30]
		dec_path = legs_data[dec_idx][31]
	else
		-- previous wpt
		dec_prev_lat = legs_data2[dec_idx-1][7]
		dec_prev_lon = legs_data2[dec_idx-1][8]
		dec_prev_crs = legs_data2[dec_idx-1][2]
		
		
		dec_calc_lat = dec_prev_lat
		dec_calc_lon = dec_prev_lon
		dec_calc_brg = dec_prev_crs
		dec_calc_dist = 0
		
		-- actual wpt
		dec_navaid = legs_data2[dec_idx][1]
		dec_crs = legs_data2[dec_idx][2]
		dec_alt = legs_data2[dec_idx][5]
		dec_navaid_rc = legs_data2[dec_idx][16]
		dec_rnavaid = legs_data2[dec_idx][27]
		dec_rnavaid_rc = legs_data2[dec_idx][28]
		dec_brg = legs_data2[dec_idx][29]
		dec_dist = legs_data2[dec_idx][30]
		dec_path = legs_data2[dec_idx][31]
	end
	
		if dec_mode == 0 then
			if legs_data[dec_idx][32] > 19 then
				ndb_navaid = 2
			elseif legs_data[dec_idx][32] > 9 then
				ndb_navaid = 1
			end
			if legs_data[dec_idx][19] == 1 or legs_data[dec_idx][19] == 3 then
				find_navaid2(legs_data[dec_idx][34], "", 1, legs_data[dec_idx][16], ndb_navaid)
			elseif legs_data[dec_idx][19] == 2 or legs_data[dec_idx][19] == 4 then
				find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
			elseif legs_data[dec_idx][19] == 7 or legs_data[dec_idx][19] == 8 or legs_data[dec_idx][19] == 9 then
				find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
			else
				find_navaid2(legs_data[dec_idx][34], "", 0, legs_data[dec_idx][16], ndb_navaid)
			end
		else
			if legs_data2[dec_idx][32] > 19 then
				ndb_navaid = 2
			elseif legs_data2[dec_idx][32] > 9 then
				ndb_navaid = 1
			end
			if legs_data2[dec_idx][19] == 1 or legs_data2[dec_idx][19] == 3 then
				find_navaid2(legs_data2[dec_idx][34], "", 1, legs_data2[dec_idx][16], ndb_navaid)
			elseif legs_data2[dec_idx][19] == 2 or legs_data2[dec_idx][19] == 4 then
				find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
			elseif legs_data2[dec_idx][19] == 7 or legs_data2[dec_idx][19] == 8 or legs_data2[dec_idx][19] == 9 then
				find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
			else
				find_navaid2(legs_data2[dec_idx][34], "", 0, legs_data2[dec_idx][16], ndb_navaid)
			end
		end
		if navaid_list_n > 0 then
			dec_calc_lat = navaid_list[1][2]
			dec_calc_lon = navaid_list[1][3]
			dec_find_type = navaid_list[1][1]
			dec_calc_brg = nd_calc_brg(dec_prev_lat, dec_prev_lon, dec_calc_lat, dec_calc_lon)
			--dec_calc_brg = (dec_calc_brg - mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
		end
	-- save decoded data
	if dec_mode == 0 then
		legs_data[dec_idx][7] = dec_calc_lat
		legs_data[dec_idx][8] = dec_calc_lon
		legs_data[dec_idx][18] = math.rad(dec_calc_brg)
	else
		legs_data2[dec_idx][7] = dec_calc_lat
		legs_data2[dec_idx][8] = dec_calc_lon
		legs_data2[dec_idx][18] = math.rad(dec_calc_brg)
	end
	
	B738DR_freeze = 6
end

-- mode: 0-legs_data,1-legs_data2 / calc_rte_act
function dec_lat_lon(dec_mode, dec_idx)
	
	B738DR_freeze = 5
	
	local dec_calc_lat = 0
	local dec_calc_lon = 0
	local dec_calc_brg = 0
	local dec_calc_brg_true = 0
	local dec_calc_dist = 0
	
	local dec_navaid = ""
	local dec_navaid_rc = ""
	local dec_path = ""
	local dec_crs = 0
	local dec_brg = ""
	local dec_alt = 0
	local dec_dist = ""
	local dec_rnavaid = ""
	local dec_rnavaid_rc = ""
	
	local dec_prev_lat = 0
	local dec_prev_lon = 0
	local dec_prev_crs = 0
	local dec_prev_navaid = ""
	
	local dec_next_brg = 0
	
	local crs1 = 0
	local crs2 = 0
	local radius = 0
	local dist = 0
	local dist2 = 0
	local idx1 = 0
	local lat1 = 0
	local lon1 = 0
	local lat2 = 0
	local lon2 = 0
	local lat3 = 0
	local lon3 = 0
	local nd_dis = 0
	
	local ctr_lat = 0
	local ctr_lon = 0
	local turn_dir = 0
	local ndb_navaid = 0
	local calc_lat1 = 0
	local calc_lon1 = 0
	
	
	if dec_mode == 0 then
		-- previous wpt
		dec_prev_lat = legs_data[dec_idx-1][7]
		dec_prev_lon = legs_data[dec_idx-1][8]
		dec_prev_crs = legs_data[dec_idx-1][2]
		dec_prev_navaid = legs_data[dec_idx-1][1]
		
		dec_calc_lat = dec_prev_lat
		dec_calc_lon = dec_prev_lon
		dec_calc_brg = dec_prev_crs
		dec_calc_dist = 0
		
		-- actual wpt
		dec_navaid = legs_data[dec_idx][1]
		dec_crs = legs_data[dec_idx][2]
		dec_alt = legs_data[dec_idx][5]
		dec_navaid_rc = legs_data[dec_idx][16]
		dec_rnavaid = legs_data[dec_idx][27]
		dec_rnavaid_rc = legs_data[dec_idx][28]
		dec_brg = legs_data[dec_idx][29]
		dec_dist = legs_data[dec_idx][30]
		dec_path = legs_data[dec_idx][31]
	else
		-- previous wpt
		dec_prev_lat = legs_data2[dec_idx-1][7]
		dec_prev_lon = legs_data2[dec_idx-1][8]
		dec_prev_crs = legs_data2[dec_idx-1][2]
		dec_prev_navaid = legs_data2[dec_idx-1][1]
		
		
		dec_calc_lat = dec_prev_lat
		dec_calc_lon = dec_prev_lon
		dec_calc_brg = dec_prev_crs
		dec_calc_dist = 0
		
		-- actual wpt
		dec_navaid = legs_data2[dec_idx][1]
		dec_crs = legs_data2[dec_idx][2]
		dec_alt = legs_data2[dec_idx][5]
		dec_navaid_rc = legs_data2[dec_idx][16]
		dec_rnavaid = legs_data2[dec_idx][27]
		dec_rnavaid_rc = legs_data2[dec_idx][28]
		dec_brg = legs_data2[dec_idx][29]
		dec_dist = legs_data2[dec_idx][30]
		dec_path = legs_data2[dec_idx][31]
	end
	
	-- IF Initial Fix
	if dec_path == "IF" then
		ndb_navaid = 0
		if dec_mode == 0 then
			if legs_data[dec_idx][32] > 19 then
				ndb_navaid = 2
			elseif legs_data[dec_idx][32] > 9 then
				ndb_navaid = 1
			end
			if legs_data[dec_idx][19] == 1 or legs_data[dec_idx][19] == 3 then
				find_navaid2(legs_data[dec_idx][34], "", 1, legs_data[dec_idx][16], ndb_navaid)
			elseif legs_data[dec_idx][19] == 2 or legs_data[dec_idx][19] == 4 then
				find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
			elseif legs_data[dec_idx][19] == 7 or legs_data[dec_idx][19] == 8 or legs_data[dec_idx][19] == 9 then
				find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
			else
				find_navaid2(legs_data[dec_idx][34], "", 0, legs_data[dec_idx][16], ndb_navaid)
			end
		else
			if legs_data2[dec_idx][32] > 19 then
				ndb_navaid = 2
			elseif legs_data2[dec_idx][32] > 9 then
				ndb_navaid = 1
			end
			if legs_data2[dec_idx][19] == 1 or legs_data2[dec_idx][19] == 3 then
				find_navaid2(legs_data2[dec_idx][34], "", 1, legs_data2[dec_idx][16], ndb_navaid)
			elseif legs_data2[dec_idx][19] == 2 or legs_data2[dec_idx][19] == 4 then
				find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
			elseif legs_data2[dec_idx][19] == 7 or legs_data2[dec_idx][19] == 8 or legs_data2[dec_idx][19] == 9 then
				find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
			else
				find_navaid2(legs_data2[dec_idx][34], "", 0, legs_data2[dec_idx][16], ndb_navaid)
			end
		end
		if navaid_list_n > 0 then
			dec_calc_lat = navaid_list[1][2]
			dec_calc_lon = navaid_list[1][3]
			dec_find_type = navaid_list[1][1]
			dec_calc_brg = nd_calc_brg(dec_prev_lat, dec_prev_lon, dec_calc_lat, dec_calc_lon)
			dec_calc_brg = (dec_calc_brg - mag_variation_deg(dec_prev_lat, dec_prev_lon) + 360) % 360
		end
		
	-- TF/DF Track/Direct to Fix
	elseif dec_path == "TF" or dec_path == "DF" or dec_path == "" then
		ndb_navaid = 0
		if dec_mode == 0 then
			if legs_data[dec_idx][32] > 19 then
				ndb_navaid = 2
			elseif legs_data[dec_idx][32] > 9 then
				ndb_navaid = 1
			end
			if legs_data[dec_idx][19] == 1 or legs_data[dec_idx][19] == 3 then
				find_navaid2(legs_data[dec_idx][34], "", 1, legs_data[dec_idx][16], ndb_navaid)
			elseif legs_data[dec_idx][19] == 2 or legs_data[dec_idx][19] == 4 then
				find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
			elseif legs_data[dec_idx][19] == 7 or legs_data[dec_idx][19] == 8 or legs_data[dec_idx][19] == 9 then
				find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
			else
				find_navaid2(legs_data[dec_idx][34], "", 0, legs_data[dec_idx][16], ndb_navaid)
			end
		else
			if legs_data2[dec_idx][32] > 19 then
				ndb_navaid = 2
			elseif legs_data2[dec_idx][32] > 9 then
				ndb_navaid = 1
			end
			if legs_data2[dec_idx][19] == 1 or legs_data2[dec_idx][19] == 3 then
				find_navaid2(legs_data2[dec_idx][34], "", 1, legs_data2[dec_idx][16], ndb_navaid)
			elseif legs_data2[dec_idx][19] == 2 or legs_data2[dec_idx][19] == 4 then
				find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
			elseif legs_data2[dec_idx][19] == 7 or legs_data2[dec_idx][19] == 8 or legs_data2[dec_idx][19] == 9 then
				find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
			else
				find_navaid2(legs_data2[dec_idx][34], "", 0, legs_data2[dec_idx][16], ndb_navaid)
			end
		end
		if navaid_list_n > 0 then
			dec_calc_lat = navaid_list[1][2]
			dec_calc_lon = navaid_list[1][3]
			dec_find_type = navaid_list[1][1]
			dec_calc_brg = nd_calc_brg(dec_prev_lat, dec_prev_lon, dec_calc_lat, dec_calc_lon)
			dec_calc_brg = (dec_calc_brg - mag_variation_deg(dec_prev_lat, dec_prev_lon) + 360) % 360
		end
		
	-- (INTC) Course to Fix -> CF
	elseif dec_path == "CF" then
		ndb_navaid = 0
		if dec_mode == 0 then
			if legs_data[dec_idx][32] > 19 then
				ndb_navaid = 2
			elseif legs_data[dec_idx][32] > 9 then
				ndb_navaid = 1
			end
			if legs_data[dec_idx][19] == 1 or legs_data[dec_idx][19] == 3 then
				find_navaid2(legs_data[dec_idx][34], "", 1, legs_data[dec_idx][16], ndb_navaid)
			elseif legs_data[dec_idx][19] == 2 or legs_data[dec_idx][19] == 4 then
				find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
			elseif legs_data[dec_idx][19] == 7 or legs_data[dec_idx][19] == 8 or legs_data[dec_idx][19] == 9 then
				find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
			else
				find_navaid2(legs_data[dec_idx][34], "", 0, legs_data[dec_idx][16], ndb_navaid)
			end
		else
			if legs_data2[dec_idx][32] > 19 then
				ndb_navaid = 2
			elseif legs_data2[dec_idx][32] > 9 then
				ndb_navaid = 1
			end
			if legs_data2[dec_idx][19] == 1 or legs_data2[dec_idx][19] == 3 then
				find_navaid2(legs_data2[dec_idx][34], "", 1, legs_data2[dec_idx][16], ndb_navaid)
			elseif legs_data2[dec_idx][19] == 2 or legs_data2[dec_idx][19] == 4 then
				find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
			elseif legs_data2[dec_idx][19] == 7 or legs_data2[dec_idx][19] == 8 or legs_data2[dec_idx][19] == 9 then
				find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
			else
				find_navaid2(legs_data2[dec_idx][34], "", 0, legs_data2[dec_idx][16], ndb_navaid)
			end
		end
		if navaid_list_n > 0 then
			dec_calc_lat = navaid_list[1][2]
			dec_calc_lon = navaid_list[1][3]
			dec_find_type = navaid_list[1][1]
			crs1 = tonumber(dec_brg)
			if crs1 == nil then
				crs1 = 0
			else
				crs1 = crs1 / 10
			end
			dec_calc_brg = crs1
		end
		
	-- (INTC) Course to Intercept -> CI/VI
	elseif dec_path == "CI" or dec_path == "VI" then
		-- calc next course
		idx1 = 0
		
		ndb_navaid = 0
		if dec_mode == 0 then
			if (dec_idx + 1) <= legs_num then
				if legs_data[dec_idx+1][31] == "IF" then
					if (dec_idx + 2) <= legs_num then
						if legs_data[dec_idx+1][32] > 19 then
							ndb_navaid = 2
						elseif legs_data[dec_idx+1][32] > 9 then
							ndb_navaid = 1
						end
						if legs_data[dec_idx+1][19] == 1 or legs_data[dec_idx+1][19] == 3 then
							find_navaid2(legs_data[dec_idx+1][34], "", 1, legs_data[dec_idx+1][16], ndb_navaid)
						elseif legs_data[dec_idx+1][19] == 2 or legs_data[dec_idx+1][19] == 4 then
							find_navaid2(legs_data[dec_idx+1][34], "", 2, legs_data[dec_idx+1][16], ndb_navaid)
						elseif legs_data[dec_idx+1][19] == 7 or legs_data[dec_idx+1][19] == 8 or legs_data[dec_idx+1][19] == 9 then
							find_navaid2(legs_data[dec_idx+1][34], "", 2, legs_data[dec_idx+1][16], ndb_navaid)
						else
							find_navaid2(legs_data[dec_idx+1][34], "", 0, legs_data[dec_idx+1][16], ndb_navaid)
						end
						if navaid_list_n > 0 then
							lat1 = navaid_list[1][2]
							lon1 = navaid_list[1][3]
							legs_data[dec_idx+2][7] = lat1
							legs_data[dec_idx+2][8] = lon1
							ndb_navaid = 0
							if legs_data[dec_idx+2][32] > 19 then
								ndb_navaid = 2
							elseif legs_data[dec_idx+2][32] > 9 then
								ndb_navaid = 1
							end
							if legs_data[dec_idx+2][19] == 1 or legs_data[dec_idx+2][19] == 3 then
								find_navaid2(legs_data[dec_idx+2][34], "", 1, legs_data[dec_idx+2][16], ndb_navaid)
							elseif legs_data[dec_idx+2][19] == 2 or legs_data[dec_idx+2][19] == 4 then
								find_navaid2(legs_data[dec_idx+2][34], "", 2, legs_data[dec_idx+2][16], ndb_navaid)
							elseif legs_data[dec_idx+2][19] == 7 or legs_data[dec_idx+2][19] == 8 or legs_data[dec_idx+2][19] == 9 then
								find_navaid2(legs_data[dec_idx+2][34], "", 2, legs_data[dec_idx+2][16], ndb_navaid)
							else
								find_navaid2(legs_data[dec_idx+2][34], "", 0, legs_data[dec_idx+2][16], ndb_navaid)
							end
							if navaid_list_n > 0 then
								lat2 = navaid_list[1][2]
								lon2 = navaid_list[1][3]
								dec_next_brg = nd_calc_brg(lat1, lon1, lat2, lon2)
								legs_data[dec_idx+2][7] = lat2
								legs_data[dec_idx+2][8] = lon2
								idx1 = 1
							end
						end
					end
					legs_data[dec_idx+1][19] = 99	-- delete wpt
				elseif legs_data[dec_idx+1][31] == "CF" then
					if legs_data[dec_idx+1][32] > 19 then
						ndb_navaid = 2
					elseif legs_data[dec_idx+1][32] > 9 then
						ndb_navaid = 1
					end
					if legs_data[dec_idx+1][19] == 1 or legs_data[dec_idx+1][19] == 3 then
						find_navaid2(legs_data[dec_idx+1][34], "", 1, legs_data[dec_idx+1][16], ndb_navaid)
					elseif legs_data[dec_idx+1][19] == 2 or legs_data[dec_idx+1][19] == 4 then
						find_navaid2(legs_data[dec_idx+1][34], "", 2, legs_data[dec_idx+1][16], ndb_navaid)
					elseif legs_data[dec_idx+1][19] == 7 or legs_data[dec_idx+1][19] == 8 or legs_data[dec_idx+1][19] == 9 then
						find_navaid2(legs_data[dec_idx+1][34], "", 2, legs_data[dec_idx+1][16], ndb_navaid)
					else
						find_navaid2(legs_data[dec_idx+1][34], "", 0, legs_data[dec_idx+1][16], ndb_navaid)
					end
					if navaid_list_n > 0 then
						lat1 = navaid_list[1][2]
						lon1 = navaid_list[1][3]
					end
					crs2 = tonumber(legs_data[dec_idx+1][29])
					if crs2 == nil then
						crs2 = 0
					else
						crs2 = crs2 / 10
						idx1 = 1
					end
					crs2 = (crs2 + 180) % 360
					dec_next_brg = (crs2 + mag_variation_deg(lat1, lon1)) % 360
				elseif legs_data[dec_idx+1][31] == "AF" then
					find_navaid(legs_data[dec_idx+1][27], "", 0, legs_data[dec_idx+1][28])
					if navaid_list_n > 0 then
						lat3 = navaid_list[1][2]
						lon3 = navaid_list[1][3]
						dist = tonumber(legs_data[dec_idx+1][22])
						if dist == nil then
							dist = 0
						else
							dist = dist / 10
						end
						-- calc first wpt
						crs1 = (math.deg(legs_data[dec_idx+1][2]) + mag_variation_deg(lat3, lon3) + 360) % 360
						calc_brg_dist(lat3, lon3, math.rad(crs1), dist)
						lat1 = calc_lat
						lon1 = calc_lon
						-- calc second wpt
						crs1 = tonumber(legs_data[dec_idx+1][29])
						if crs1 == nil then
							crs1 = 0
						else
							crs1 = crs1 / 10
						end
						crs1 = (crs1 + mag_variation_deg(lat3, lon3)) % 360
						calc_brg_dist(lat3, lon3, math.rad(crs1), dist)
						lat2 = calc_lat
						lon2 = calc_lon
						dec_next_brg = nd_calc_brg(lat1, lon1, lat2, lon2)
						idx1 = 2
					end
					
				-- else	-- AF, TF,...
				end
			end
		else
			if (dec_idx + 1) <= legs_num2 then
				if legs_data2[dec_idx+1][31] == "IF" then
					if (dec_idx + 2) <= legs_num2 then
						if legs_data2[dec_idx+1][32] > 19 then
							ndb_navaid = 2
						elseif legs_data2[dec_idx+1][32] > 9 then
							ndb_navaid = 1
						end
						if legs_data2[dec_idx+1][19] == 1 or legs_data2[dec_idx+1][19] == 3 then
							find_navaid2(legs_data2[dec_idx+1][34], "", 1, legs_data2[dec_idx+1][16], ndb_navaid)
						elseif legs_data2[dec_idx+1][19] == 2 or legs_data2[dec_idx+1][19] == 4 then
							find_navaid2(legs_data2[dec_idx+1][34], "", 2, legs_data2[dec_idx+1][16], ndb_navaid)
						elseif legs_data2[dec_idx+1][19] == 7 or legs_data2[dec_idx+1][19] == 8 or legs_data2[dec_idx+1][19] == 9 then
							find_navaid2(legs_data2[dec_idx+1][34], "", 2, legs_data2[dec_idx+1][16], ndb_navaid)
						else
							find_navaid2(legs_data2[dec_idx+1][34], "", 0, legs_data2[dec_idx+1][16], ndb_navaid)
						end
						if navaid_list_n > 0 then
							lat1 = navaid_list[1][2]
							lon1 = navaid_list[1][3]
							legs_data2[dec_idx+2][7] = lat1
							legs_data2[dec_idx+2][8] = lon1
							ndb_navaid = 0
							if legs_data2[dec_idx+2][32] > 19 then
								ndb_navaid = 2
							elseif legs_data2[dec_idx+2][32] > 9 then
								ndb_navaid = 1
							end
							if legs_data2[dec_idx+2][19] == 1 or legs_data2[dec_idx+2][19] == 3 then
								find_navaid2(legs_data2[dec_idx+2][34], "", 1, legs_data2[dec_idx+2][16], ndb_navaid)
							elseif legs_data2[dec_idx+2][19] == 2 or legs_data2[dec_idx+2][19] == 4 then
								find_navaid2(legs_data2[dec_idx+2][34], "", 2, legs_data2[dec_idx+2][16], ndb_navaid)
							elseif legs_data2[dec_idx+2][19] == 7 or legs_data2[dec_idx+2][19] == 8 or legs_data2[dec_idx+2][19] == 9 then
								find_navaid2(legs_data2[dec_idx+2][34], "", 2, legs_data2[dec_idx+2][16], ndb_navaid)
							else
								find_navaid2(legs_data2[dec_idx+2][34], "", 0, legs_data2[dec_idx+2][16], ndb_navaid)
							end
							if navaid_list_n > 0 then
								lat2 = navaid_list[1][2]
								lon2 = navaid_list[1][3]
								dec_next_brg = nd_calc_brg(lat1, lon1, lat2, lon2)
								legs_data2[dec_idx+2][7] = lat2
								legs_data2[dec_idx+2][8] = lon2
								idx1 = 1
							end
						end
						legs_data2[dec_idx+1][19] = 99	-- delete wpt
					end
				elseif legs_data2[dec_idx+1][31] == "CF" then
					if legs_data2[dec_idx+1][32] > 19 then
						ndb_navaid = 2
					elseif legs_data2[dec_idx+1][32] > 9 then
						ndb_navaid = 1
					end
					if legs_data2[dec_idx+1][19] == 1 or legs_data2[dec_idx+1][19] == 3 then
						find_navaid2(legs_data2[dec_idx+1][34], "", 1, legs_data2[dec_idx+1][16], ndb_navaid)
					elseif legs_data2[dec_idx+1][19] == 2 or legs_data2[dec_idx+1][19] == 4 then
						find_navaid2(legs_data2[dec_idx+1][34], "", 2, legs_data2[dec_idx+1][16], ndb_navaid)
					elseif legs_data2[dec_idx+1][19] == 7 or legs_data2[dec_idx+1][19] == 8 or legs_data2[dec_idx+1][19] == 9 then
						find_navaid2(legs_data2[dec_idx+1][34], "", 2, legs_data2[dec_idx+1][16], ndb_navaid)
					else
						find_navaid2(legs_data2[dec_idx+1][34], "", 0, legs_data2[dec_idx+1][16], ndb_navaid)
					end
					if navaid_list_n > 0 then
						lat1 = navaid_list[1][2]
						lon1 = navaid_list[1][3]
					end
					crs2 = tonumber(legs_data2[dec_idx+1][29])
					if crs2 == nil then
						crs2 = 0
					else
						crs2 = crs2 / 10
						idx1 = 1
					end
					crs2 = (crs2 + 180) % 360
					dec_next_brg = (crs2 + mag_variation_deg(lat1, lon1)) % 360
				elseif legs_data2[dec_idx+1][31] == "AF" then
					find_navaid(legs_data2[dec_idx+1][27], "", 0, legs_data2[dec_idx+1][28])
					if navaid_list_n > 0 then
						lat3 = navaid_list[1][2]
						lon3 = navaid_list[1][3]
						dist = tonumber(legs_data2[dec_idx+1][22])
						if dist == nil then
							dist = 0
						else
							dist = dist / 10
						end
						-- calc first wpt
						crs1 = (math.deg(legs_data2[dec_idx+1][2]) + mag_variation_deg(lat3, lon3) + 360) % 360
						calc_brg_dist(lat3, lon3, math.rad(crs1), dist)
						lat1 = calc_lat
						lon1 = calc_lon
						-- calc second wpt
						crs1 = tonumber(legs_data2[dec_idx+1][29])
						if crs1 == nil then
							crs1 = 0
						else
							crs1 = crs1 / 10
						end
						crs1 = (crs1 + mag_variation_deg(lat3, lon3)) % 360
						calc_brg_dist(lat3, lon3, math.rad(crs1), dist)
						lat2 = calc_lat
						lon2 = calc_lon
						dec_next_brg = nd_calc_brg(lat1, lon1, lat2, lon2)
						idx1 = 2
					end
					
				-- else	-- AF, TF,...
				end
			end
		
		end
		
		if idx1 > 0 then
			crs1 = tonumber(dec_brg)
			if crs1 == nil then
				crs1 = 0
			else
				crs1 = crs1 / 10
			end
			dec_calc_brg = crs1
			crs1 = (crs1 + mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
			
			crs2 = (crs2 + 180) % 360
			crs2 = (crs2 - crs1 + 360) % 360
			if crs2 > 180 then
				crs2 = crs2 - 360
			end
			
			--if crs2 > -45 and crs2 < 45 then
			if crs2 > -90 and crs2 < 90 then
				
				calc_brg_brg(dec_prev_lat, dec_prev_lon, math.rad(crs1), lat1, lon1, math.rad(dec_next_brg))
				
			else
			
				-- temporary protection for double waypoints
				if dec_mode == 0 then
					if legs_data[dec_idx-1][34] == legs_data[dec_idx-2][34] then
						dec_prev_crs = legs_data[dec_idx-2][2]
					end
				else
					if legs_data2[dec_idx-1][34] == legs_data2[dec_idx-2][34] then
						dec_prev_crs = legs_data2[dec_idx-2][2]
					end
				end
				---------------------------------------------
				
				dist = 0
				if dec_mode == 0 then
					turn_dir = legs_data[dec_idx][21]
				else
					turn_dir = legs_data2[dec_idx][21]
				end
				
				if turn_dir == -1 then
					-- calc turn dir
					crs2 = (crs1 - math.deg(dec_prev_crs) + 360) % 360
					if crs2 > 180 then
						crs2 = crs2 - 360
					end
					if crs2 < 0 then
						turn_dir = 2	--left
					else
						turn_dir = 3	--right
					end
				end
				
				if turn_dir == 2 then
					--left
					crs2 = (math.deg(dec_prev_crs) + 270) % 360
					calc_brg_dist(dec_prev_lat, dec_prev_lon, math.rad(crs2), 2)	-- radius 2NM
					ctr_lat = calc_lat
					ctr_lon = calc_lon
					
					crs2 = (crs1 - math.deg(dec_prev_crs) + 360) % 360
					if crs2 > 180 then
						crs2 = crs2 - 360
					end
					if crs2 < 0 then
						crs2 = crs2 + 90
					else
						crs2 = crs2 - 270
					end
					crs2 = (math.deg(dec_prev_crs) + crs2 + 360) % 360
					calc_brg_dist(ctr_lat, ctr_lon, math.rad(crs2), 2)	-- radius 2NM
					
					-- crs2 = (crs1 + 180) % 360
					-- calc_brg_brg(calc_lat, calc_lon, math.rad(crs2), dec_prev_lat, dec_prev_lon, math.deg(dec_prev_crs))
					
					dist = 1
				elseif turn_dir == 3 then
					--right
					crs2 = (math.deg(dec_prev_crs) + 90) % 360
					calc_brg_dist(dec_prev_lat, dec_prev_lon, math.rad(crs2), 2)	-- radius 2NM
					ctr_lat = calc_lat
					ctr_lon = calc_lon
					
					crs2 = (crs1 - math.deg(dec_prev_crs) + 360) % 360
					if crs2 > 180 then
						crs2 = crs2 - 360
					end
					if crs2 > 0 then
						crs2 = crs2 - 90
					else
						crs2 = crs2 + 270
					end
					crs2 = (math.deg(dec_prev_crs) + crs2 + 360) % 360
					calc_brg_dist(ctr_lat, ctr_lon, math.rad(crs2), 2)	-- radius 2NM
					
					-- crs2 = (crs1 + 180) % 360
					-- calc_brg_brg(calc_lat, calc_lon, math.rad(crs2), dec_prev_lat, dec_prev_lon, math.deg(dec_prev_crs))
					
					dist = 1
				end
				
				if dist == 0 then --or idx1 == 2 then
					calc_lat = dec_prev_lat
					calc_lon = dec_prev_lon
				end
				
				calc_lat1 = calc_lat
				calc_lon1 = calc_lon
				calc_brg_brg(calc_lat, calc_lon, math.rad(crs1), lat1, lon1, math.rad(dec_next_brg))
				
				dist = nd_calc_dist2(calc_lat1, calc_lon1, calc_lat, calc_lon)
				if dist > 500 then
					calc_brg_brg(calc_lat1, calc_lon1, math.rad((crs1+180)%360), lat1, lon1, math.rad(dec_next_brg))
				end
			
			end
			
			dec_calc_lat = calc_lat
			dec_calc_lon = calc_lon
			--entry = tostring(dec_prev_crs)
		end
		dec_find_type = 4
	
	-- -- (1000) -> FA
	-- elseif dec_path == "FA" then
		
		-- if string.sub(dec_prev_navaid, 1, 2) ~= "RW" then
			-- ndb_navaid = 0
			-- if dec_mode == 0 then
				-- if legs_data[dec_idx][32] > 19 then
					-- ndb_navaid = 2
				-- elseif legs_data[dec_idx][32] > 9 then
					-- ndb_navaid = 1
				-- end
				-- if legs_data[dec_idx][19] == 1 or legs_data[dec_idx][19] == 3 then
					-- find_navaid2(legs_data[dec_idx][34], "", 1, legs_data[dec_idx][16], ndb_navaid)
				-- elseif legs_data[dec_idx][19] == 2 or legs_data[dec_idx][19] == 4 then
					-- find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
				-- elseif legs_data[dec_idx][19] == 7 or legs_data[dec_idx][19] == 8 or legs_data[dec_idx][19] == 9 then
					-- find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
				-- else
					-- find_navaid2(legs_data[dec_idx][34], "", 0, legs_data[dec_idx][16], ndb_navaid)
				-- end
			-- else
				-- if legs_data2[dec_idx][32] > 19 then
					-- ndb_navaid = 2
				-- elseif legs_data2[dec_idx][32] > 9 then
					-- ndb_navaid = 1
				-- end
				-- if legs_data2[dec_idx][19] == 1 or legs_data2[dec_idx][19] == 3 then
					-- find_navaid2(legs_data2[dec_idx][34], "", 1, legs_data2[dec_idx][16], ndb_navaid)
				-- elseif legs_data2[dec_idx][19] == 2 or legs_data2[dec_idx][19] == 4 then
					-- find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
				-- elseif legs_data2[dec_idx][19] == 7 or legs_data2[dec_idx][19] == 8 or legs_data2[dec_idx][19] == 9 then
					-- find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
				-- else
					-- find_navaid2(legs_data2[dec_idx][34], "", 0, legs_data2[dec_idx][16], ndb_navaid)
				-- end
			-- end
			
			-- if navaid_list_n > 0 then
				-- dec_prev_lat = navaid_list[1][2]
				-- dec_prev_lon = navaid_list[1][3]
			-- end
		-- end
		
		-- crs1 = tonumber(dec_brg)
		-- if crs1 == nil then
			-- crs1 = 0
		-- else
			-- crs1 = crs1 / 10
		-- end
		-- dec_calc_brg = crs1
		-- crs1 = (crs1 + mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
		-- if dec_mode == 0 then
			-- if legs_data[dec_idx][19] == 1 then
				-- dist = ref_icao_alt
			-- else
				-- dist = des_icao_alt
			-- end
		-- else
			-- if legs_data2[dec_idx][19] == 1 then
				-- dist = ref_icao_alt
			-- else
				-- dist = des_icao_alt
			-- end
		-- end
		-- dist = ((dec_alt - dist) / 1500) * 60		--sec
		-- dist = 105.5 * dist * 0.0005399568	-- NM  (105.5 m/s = 205 knots)
		-- if dec_mode == 0 then
			-- if string.sub(legs_data[dec_idx-1][1], 1, 2) == "RW" then
				-- dist = dist + 1.7
			-- else
				-- if legs_data[dec_idx-1][5] == 0 then
					-- dist = (dec_alt - ref_icao_alt) / 500
				-- else
					-- dist = (dec_alt - legs_data[dec_idx-1][5]) / 500
				-- end
			-- end
		-- else
			-- if string.sub(legs_data2[dec_idx-1][1], 1, 2) == "RW" then
				-- dist = dist + 1.7
			-- else
				-- if legs_data2[dec_idx-1][5] == 0 then
					-- dist = (dec_alt - ref_icao_alt) / 500
				-- else
					-- dist = (dec_alt - legs_data2[dec_idx-1][5]) / 500
				-- end
			-- end
		-- end
		-- calc_brg_dist(dec_prev_lat, dec_prev_lon, math.rad(crs1), dist)
		-- dec_calc_lat = calc_lat
		-- dec_calc_lon = calc_lon
		-- dec_find_type = 4
	
	-- (1000) -> CA/VA/FA
	elseif dec_path == "CA" or dec_path == "VA" or dec_path == "FA" then
		crs1 = tonumber(dec_brg)
		if crs1 == nil then
			crs1 = 0
		else
			crs1 = crs1 / 10
		end
		dec_calc_brg = crs1
		crs1 = (crs1 + mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
		--B738DR_fms_test3 = mag_variation_deg(dec_prev_lat, dec_prev_lon)
		--crs1 = (crs1 + 9.24) % 360
		-- if dec_mode == 0 then
			-- if legs_data[dec_idx][19] == 1 then
				-- dist = ref_icao_alt
			-- else
				-- dist = des_icao_alt
			-- end
		-- else
			-- if legs_data2[dec_idx][19] == 1 then
				-- dist = ref_icao_alt
			-- else
				-- dist = des_icao_alt
			-- end
		-- end
		-- dist = ((dec_alt - dist) / 1500) * 60		--sec
		-- dist = 105.5 * dist * 0.0005399568	-- NM  (105.5 m/s = 205 knots)
		-- if dec_mode == 0 then
			-- if string.sub(legs_data[dec_idx-1][1], 1, 2) == "RW" then
				-- dist = dist + 1.7
			-- end
		-- else
			-- if string.sub(legs_data2[dec_idx-1][1], 1, 2) == "RW" then
				-- dist = dist + 1.7
			-- end
		-- end
		
		
		if dec_mode == 0 then
			if legs_data[dec_idx][19] == 1 then
				if string.sub(legs_data[dec_idx-1][1], 1, 2) == "RW" then
					dist = ((dec_alt - ref_icao_alt) / 500) + 1.6
				else
					if legs_data[dec_idx-1][5] == 0 then
						dist = (dec_alt - ref_icao_alt) / 500
					else
						dist = (dec_alt - legs_data[dec_idx-1][5]) / 500
					end
				end
			else
				if legs_data[dec_idx-1][5] == 0 then
					dist = (dec_alt - des_icao_alt) / 500
				else
					dist = (dec_alt - legs_data[dec_idx-1][5]) / 500
				end
			end
		else
			if legs_data2[dec_idx][19] == 1 then
				if string.sub(legs_data2[dec_idx-1][1], 1, 2) == "RW" then
					dist = ((dec_alt - ref_icao_alt) / 500) + 1.6
				else
					if legs_data2[dec_idx-1][5] == 0 then
						dist = (dec_alt - ref_icao_alt) / 500
					else
						dist = (dec_alt - legs_data2[dec_idx-1][5]) / 500
					end
				end
			else
				if legs_data2[dec_idx-1][5] == 0 then
					dist = (dec_alt - des_icao_alt) / 500
				else
					dist = (dec_alt - legs_data2[dec_idx-1][5]) / 500
				end
			end
		end
		
		calc_brg_dist(dec_prev_lat, dec_prev_lon, math.rad(crs1), dist)
		dec_calc_lat = calc_lat
		dec_calc_lon = calc_lon
		dec_find_type = 4

	-- FD Track/Course to distance
	elseif dec_path == "FD" then
		
		if string.sub(dec_prev_navaid, 1, 2) ~= "RW" then
			ndb_navaid = 0
			if dec_mode == 0 then
				if legs_data[dec_idx][32] > 19 then
					ndb_navaid = 2
				elseif legs_data[dec_idx][32] > 9 then
					ndb_navaid = 1
				end
				dec_navaid = legs_data[dec_idx][34]
				if legs_data[dec_idx][19] == 1 or legs_data[dec_idx][19] == 3 then
					find_navaid2(dec_navaid, "", 1, dec_navaid_rc, ndb_navaid)
				elseif legs_data[dec_idx][19] == 2 or legs_data[dec_idx][19] == 4 then
					find_navaid2(dec_navaid, "", 2, dec_navaid_rc, ndb_navaid)
				elseif legs_data[dec_idx][19] == 7 or legs_data[dec_idx][19] == 8 or legs_data[dec_idx][19] == 9 then
					find_navaid2(dec_navaid, "", 2, dec_navaid_rc, ndb_navaid)
				else
					find_navaid2(dec_navaid, "", 0, dec_navaid_rc, ndb_navaid)
				end
			else
				if legs_data2[dec_idx][32] > 19 then
					ndb_navaid = 2
				elseif legs_data2[dec_idx][32] > 9 then
					ndb_navaid = 1
				end
				dec_navaid = legs_data2[dec_idx][34]
				if legs_data2[dec_idx][19] == 1 or legs_data2[dec_idx][19] == 3 then
					find_navaid2(dec_navaid, "", 1, dec_navaid_rc, ndb_navaid)
				elseif legs_data2[dec_idx][19] == 2 or legs_data2[dec_idx][19] == 4 then
					find_navaid2(dec_navaid, "", 2, dec_navaid_rc, ndb_navaid)
				elseif legs_data2[dec_idx][19] == 7 or legs_data2[dec_idx][19] == 8 or legs_data2[dec_idx][19] == 9 then
					find_navaid2(dec_navaid, "", 2, dec_navaid_rc, ndb_navaid)
				else
					find_navaid2(dec_navaid, "", 0, dec_navaid_rc, ndb_navaid)
				end
			end
			
			if navaid_list_n > 0 then
				dec_prev_lat = navaid_list[1][2]
				dec_prev_lon = navaid_list[1][3]
			end
		end
		
		crs1 = tonumber(dec_brg)
		if crs1 == nil then
			crs1 = 0
		else
			crs1 = crs1 / 10
		end
		dec_calc_brg = crs1
		crs1 = (crs1 + mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
		dist = tonumber(dec_dist)
		if dist == nil then
			dist = 0
		else
			dist = dist / 10
		end
		find_navaid(dec_rnavaid, "", 0, dec_rnavaid_rc)
		if navaid_list_n > 0 then
			
			if dec_navaid == dec_rnavaid and dec_navaid_rc == dec_rnavaid_rc then
				-- direct from navaid
				calc_brg_dist2(dec_prev_lat, dec_prev_lon, math.rad(crs1), navaid_list[1][2], navaid_list[1][3], dist)
			else
				
				-- crs2 = calc dist to rnavaid
				crs2 = nd_calc_dist2(dec_prev_lat, dec_prev_lon, navaid_list[1][2], navaid_list[1][3])
				if crs2 < dist then
					-- dist higher
					calc_brg_dist2(dec_prev_lat, dec_prev_lon, math.rad(crs1), navaid_list[1][2], navaid_list[1][3], dist)
				else
					-- dist lower
					calc_brg_dist20(dec_prev_lat, dec_prev_lon, math.rad(crs1), navaid_list[1][2], navaid_list[1][3], dist)
				end
			end
			
			dec_calc_lat = calc_lat		-- latitude
			dec_calc_lon = calc_lon		-- longitude
			
		end
		
		dec_find_type = 4
		
		
	-- CD/VD Track/Course to distance
	elseif dec_path == "CD" or dec_path == "VD" then
		
		crs1 = tonumber(dec_brg)
		if crs1 == nil then
			crs1 = 0
		else
			crs1 = crs1 / 10
		end
		dec_calc_brg = crs1
		crs1 = (crs1 + mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
		dist = tonumber(dec_dist)
		if dist == nil then
			dist = 0
		else
			dist = dist / 10
		end
		
		find_navaid(dec_rnavaid, "", 0, dec_rnavaid_rc)
		if navaid_list_n > 0 then
			
			if dec_navaid == dec_rnavaid and dec_navaid_rc == dec_rnavaid_rc then
				-- direct from navaid
				calc_brg_dist2(dec_prev_lat, dec_prev_lon, math.rad(crs1), navaid_list[1][2], navaid_list[1][3], dist)
			else
				-- crs2 = calc dist to rnavaid
				crs2 = nd_calc_dist2(dec_prev_lat, dec_prev_lon, navaid_list[1][2], navaid_list[1][3])
				if crs2 < dist then
					-- dist higher
					calc_brg_dist2(dec_prev_lat, dec_prev_lon, math.rad(crs1), navaid_list[1][2], navaid_list[1][3], dist)
				else
					-- dist lower
					calc_brg_dist20(dec_prev_lat, dec_prev_lon, math.rad(crs1), navaid_list[1][2], navaid_list[1][3], dist)
				end
			
			end
			
			dec_calc_lat = calc_lat		-- latitude
			dec_calc_lon = calc_lon		-- longitude
			
		end
		dec_find_type = 4
	
	-- FC Track to Fix
	elseif dec_path == "FC" then
		
		if string.sub(dec_prev_navaid, 1, 2) ~= "RW" then
			ndb_navaid = 0
			if dec_mode == 0 then
				if legs_data[dec_idx][32] > 19 then
					ndb_navaid = 2
				elseif legs_data[dec_idx][32] > 9 then
					ndb_navaid = 1
				end
				dec_navaid = legs_data[dec_idx][34]
				if legs_data[dec_idx][19] == 1 or legs_data[dec_idx][19] == 3 then
					find_navaid2(dec_navaid, "", 1, dec_navaid_rc, ndb_navaid)
				elseif legs_data[dec_idx][19] == 2 or legs_data[dec_idx][19] == 4 then
					find_navaid2(dec_navaid, "", 2, dec_navaid_rc, ndb_navaid)
				elseif legs_data[dec_idx][19] == 7 or legs_data[dec_idx][19] == 8 or legs_data[dec_idx][19] == 9 then
					find_navaid2(dec_navaid, "", 2, dec_navaid_rc, ndb_navaid)
				else
					find_navaid2(dec_navaid, "", 0, dec_navaid_rc, ndb_navaid)
				end
			else
				if legs_data2[dec_idx][32] > 19 then
					ndb_navaid = 2
				elseif legs_data2[dec_idx][32] > 9 then
					ndb_navaid = 1
				end
				dec_navaid = legs_data2[dec_idx][34]
				if legs_data2[dec_idx][19] == 1 or legs_data2[dec_idx][19] == 3 then
					find_navaid2(dec_navaid, "", 1, dec_navaid_rc, ndb_navaid)
				elseif legs_data2[dec_idx][19] == 2 or legs_data2[dec_idx][19] == 4 then
					find_navaid2(dec_navaid, "", 2, dec_navaid_rc, ndb_navaid)
				elseif legs_data2[dec_idx][19] == 7 or legs_data2[dec_idx][19] == 8 or legs_data2[dec_idx][19] == 9 then
					find_navaid2(dec_navaid, "", 2, dec_navaid_rc, ndb_navaid)
				else
					find_navaid2(dec_navaid, "", 0, dec_navaid_rc, ndb_navaid)
				end
			end
			
			if navaid_list_n > 0 then
				dec_prev_lat = navaid_list[1][2]
				dec_prev_lon = navaid_list[1][3]
			end
		end
		
		crs1 = tonumber(dec_brg)
		if crs1 == nil then
			crs1 = 0
		else
			crs1 = crs1 / 10
		end
		dec_calc_brg = crs1
		crs1 = crs1 + mag_variation_deg(dec_prev_lat, dec_prev_lon) % 360
		dist = tonumber(dec_dist)
		if dist == nil then
			dist = 0
		else
			dist = dist / 10
		end
		calc_brg_dist(dec_prev_lat, dec_prev_lon, math.rad(crs1), dist)
		dec_calc_lat = calc_lat
		dec_calc_lon = calc_lon
		dec_find_type = 4
		
	-- VECTOR -> FM
	elseif dec_path == "FM" then
		
		if string.sub(dec_prev_navaid, 1, 2) ~= "RW" then
			ndb_navaid = 0
			if dec_mode == 0 then
				if legs_data[dec_idx][32] > 19 then
					ndb_navaid = 2
				elseif legs_data[dec_idx][32] > 9 then
					ndb_navaid = 1
				end
				if legs_data[dec_idx][19] == 1 or legs_data[dec_idx][19] == 3 then
					find_navaid2(legs_data[dec_idx][34], "", 1, legs_data[dec_idx][16], ndb_navaid)
				elseif legs_data[dec_idx][19] == 2 or legs_data[dec_idx][19] == 4 then
					find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
				elseif legs_data[dec_idx][19] == 7 or legs_data[dec_idx][19] == 8 or legs_data[dec_idx][19] == 9 then
					find_navaid2(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16], ndb_navaid)
				else
					find_navaid2(legs_data[dec_idx][34], "", 0, legs_data[dec_idx][16], ndb_navaid)
				end
			else
				if legs_data2[dec_idx][32] > 19 then
					ndb_navaid = 2
				elseif legs_data2[dec_idx][32] > 9 then
					ndb_navaid = 1
				end
				if legs_data2[dec_idx][19] == 1 or legs_data2[dec_idx][19] == 3 then
					find_navaid2(legs_data2[dec_idx][34], "", 1, legs_data2[dec_idx][16], ndb_navaid)
				elseif legs_data2[dec_idx][19] == 2 or legs_data2[dec_idx][19] == 4 then
					find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
				elseif legs_data2[dec_idx][19] == 7 or legs_data2[dec_idx][19] == 8 or legs_data2[dec_idx][19] == 9 then
					find_navaid2(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16], ndb_navaid)
				else
					find_navaid2(legs_data2[dec_idx][34], "", 0, legs_data2[dec_idx][16], ndb_navaid)
				end
			end
			
			if navaid_list_n > 0 then
				dec_prev_lat = navaid_list[1][2]
				dec_prev_lon = navaid_list[1][3]
				dec_find_type = navaid_list[1][1]
			else
				dec_find_type = 0
			end
		end
		
		crs1 = tonumber(dec_brg)
		if crs1 == nil then
			crs1 = 0
		else
			crs1 = crs1 / 10
		end
		dec_calc_brg = crs1
	
	-- VECTOR -> VM
	elseif dec_path == "VM" then
		crs1 = tonumber(dec_brg)
		if crs1 == nil then
			crs1 = 0
		else
			crs1 = crs1 / 10
		end
		dec_calc_brg = crs1
		dec_find_type = 0

	-- CR/VR Course to Radial
	elseif dec_path == "CR" or dec_path == "VR" then
		-- crs1 = tonumber(dec_brg)
		-- if crs1 == nil then
			-- crs1 = 0
		-- else
			-- crs1 = crs1 / 10
		-- end
		-- dec_calc_brg = crs1
		-- crs1 = (crs1 + mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
		-- find_navaid(dec_rnavaid, "", 0, dec_rnavaid_rc)
		-- if navaid_list_n > 0 then
			-- calc_brg_brg(dec_prev_lat, dec_prev_lon, math.rad(crs1), navaid_list[1][2], navaid_list[1][3], dec_crs)
			-- dec_calc_lat = calc_lat
			-- dec_calc_lon = calc_lon
		-- end
		----------------------------
		
		crs1 = tonumber(dec_brg)
		if crs1 == nil then
			crs1 = 0
		else
			crs1 = crs1 / 10
		end
		dec_calc_brg = crs1
		crs1 = (crs1 + mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
		
		find_navaid(dec_rnavaid, "", 0, dec_rnavaid_rc)
		if navaid_list_n > 0 then
			lat1 = navaid_list[1][2]
			lon1 = navaid_list[1][3]
			dec_next_brg = (math.deg(dec_crs) + mag_variation_deg(lat1, lon1)) % 360
			--dec_next_brg = math.deg(dec_crs)
			
			crs2 = math.deg(dec_prev_crs)
			crs2 = (crs2 - crs1 + 360) % 360
			if crs2 > 180 then
				crs2 = crs2 - 360
			end
			
			if crs2 > -45 and crs2 < 45 then
				
				calc_brg_brg(dec_prev_lat, dec_prev_lon, math.rad(crs1), lat1, lon1, math.rad(dec_next_brg))
				
			else
			
				-- temporary protection for double waypoints
				-- if dec_mode == 0 then
					-- if legs_data[dec_idx-1][34] == legs_data[dec_idx-2][34] then
						-- dec_prev_crs = legs_data[dec_idx-2][2]
					-- end
				-- else
					-- if legs_data2[dec_idx-1][34] == legs_data2[dec_idx-2][34] then
						-- dec_prev_crs = legs_data2[dec_idx-2][2]
					-- end
				-- end
				---------------------------------------------
				
				dist = 0
				if dec_mode == 0 then
					turn_dir = legs_data[dec_idx][21]
				else
					turn_dir = legs_data2[dec_idx][21]
				end
				
				if turn_dir == -1 then
					-- calc turn dir
					crs2 = (crs1 - math.deg(dec_prev_crs) + 360) % 360
					if crs2 > 180 then
						crs2 = crs2 - 360
					end
					if crs2 < 0 then
						turn_dir = 2	--left
					else
						turn_dir = 3	--right
					end
				end
				
				if turn_dir == 2 then
					--left
					-- calc CTR lat,lon
					crs2 = (math.deg(dec_prev_crs) + 270) % 360
					calc_brg_dist(dec_prev_lat, dec_prev_lon, math.rad(crs2), 1.6)	-- radius 2NM
					ctr_lat = calc_lat
					ctr_lon = calc_lon
					
					crs2 = (crs1 - math.deg(dec_prev_crs) + 360) % 360
					if crs2 > 180 then
						crs2 = crs2 - 360
					end
					if crs2 < 0 then
						crs2 = crs2 + 90
					else
						crs2 = crs2 - 270
					end
					crs2 = (math.deg(dec_prev_crs) + crs2 + 360) % 360
					calc_brg_dist(ctr_lat, ctr_lon, math.rad(crs2), 1.6)	-- radius 2NM
					
					crs2 = (crs1 + 180) % 360
					calc_brg_brg(calc_lat, calc_lon, math.rad(crs2), dec_prev_lat, dec_prev_lon, dec_prev_crs)
					
					dist = 1
				elseif turn_dir == 3 then
					--right
					crs2 = (math.deg(dec_prev_crs) + 90) % 360
					calc_brg_dist(dec_prev_lat, dec_prev_lon, math.rad(crs2), 1.6)	-- radius 2NM
					ctr_lat = calc_lat
					ctr_lon = calc_lon
					
					crs2 = (crs1 - math.deg(dec_prev_crs) + 360) % 360
					if crs2 > 180 then
						crs2 = crs2 - 360
					end
					if crs2 > 0 then
						crs2 = crs2 - 90
					else
						crs2 = crs2 + 270
					end
					crs2 = (math.deg(dec_prev_crs) + crs2 + 360) % 360
					calc_brg_dist(ctr_lat, ctr_lon, math.rad(crs2), 1.6)	-- radius 2NM
					
					crs2 = (crs1 + 180) % 360
					calc_brg_brg(calc_lat, calc_lon, math.rad(crs2), dec_prev_lat, dec_prev_lon, dec_prev_crs)
					
					dist = 1
				end
				
				--dist = 0
				if dist == 0 then --or idx1 == 2 then
					calc_lat = dec_prev_lat
					calc_lon = dec_prev_lon
				end
				
				calc_brg_brg(calc_lat, calc_lon, math.rad(crs1), lat1, lon1, math.rad(dec_next_brg))
			
			end
			
			dec_calc_lat = calc_lat
			dec_calc_lon = calc_lon
			dec_next_brg = (crs1 + mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
		end
		dec_find_type = 4
	
	-- RF Radius to Fix
	elseif dec_path == "RF" then
		dec_find_type = 0
		find_navaid(dec_navaid, "", 0, dec_navaid_rc)
		if navaid_list_n > 0 then
			dec_calc_lat = navaid_list[1][2]
			dec_calc_lon = navaid_list[1][3]
			dec_find_type = navaid_list[1][1]
			crs1 = nd_calc_brg(dec_prev_lat, dec_prev_lon, dec_calc_lat, dec_calc_lon)
			dec_calc_brg = (crs1 - mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
			
			if dec_mode == 0 then
				if legs_data[dec_idx][21] == 2 then
					-- left
					crs2 = (crs1 + 270) % 360
					radius = tonumber(legs_data[dec_idx][33])
					if radius == nil then
						radius = 0
					else
						radius = radius / 1000
					end
				else
					-- right
					crs2 = (crs1 + 90) % 360
					radius = tonumber(legs_data[dec_idx][33])
					if radius == nil then
						radius = 0
					else
						radius = radius / 1000
					end
				end
			else
				if legs_data2[dec_idx][21] == 2 then
					-- left
					crs2 = (crs1 + 270) % 360
					radius = tonumber(legs_data2[dec_idx][33])
					if radius == nil then
						radius = 0
					else
						radius = radius / 1000
					end
				else
					-- right
					crs2 = (crs1 + 90) % 360
					radius = tonumber(legs_data2[dec_idx][33])
					if radius == nil then
						radius = 0
					else
						radius = radius / 1000
					end
				end
			end
			
			-- calc midpoint
			dist = (nd_calc_dist2(dec_prev_lat, dec_prev_lon, dec_calc_lat, dec_calc_lon)) / 2
			calc_brg_dist(dec_prev_lat, dec_prev_lon, math.rad(crs1), dist)
			lat1 = calc_lat
			lon1 = calc_lon
			-- calc Center of Radius
			dist2 = math.sqrt((radius * radius) - (dist * dist))
			calc_brg_dist(lat1, lon1, math.rad(crs2), dist2)
			if dec_mode == 0 then
				legs_data[dec_idx][23] = calc_lat
				legs_data[dec_idx][24] = calc_lon
			else
				legs_data2[dec_idx][23] = calc_lat
				legs_data2[dec_idx][24] = calc_lon
			end
			
		end

	-- AF Arc to Fix
	elseif dec_path == "AF" then
		dec_find_type = 0
		find_navaid(dec_navaid, "", 0, dec_navaid_rc)
		if navaid_list_n > 0 then
			dec_calc_lat = navaid_list[1][2]
			dec_calc_lon = navaid_list[1][3]
			dec_find_type = navaid_list[1][1]
			dec_calc_brg = nd_calc_brg(dec_prev_lat, dec_prev_lon, dec_calc_lat, dec_calc_lon)
			dec_calc_brg = (dec_calc_brg - mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
		end
		-- add Arc Center Lat, Lon
		find_navaid(dec_rnavaid, "", 0, dec_rnavaid_rc)
		if navaid_list_n > 0 then
			if dec_mode == 0 then
				legs_data[dec_idx][23] = navaid_list[1][2]
				legs_data[dec_idx][24] = navaid_list[1][3]
			else
				legs_data2[dec_idx][23] = navaid_list[1][2]
				legs_data2[dec_idx][24] = navaid_list[1][3]
			end
		end

	-- PI Procedure turn
	elseif dec_path == "PI" then
		
		if dec_mode == 0 then
			if legs_data[dec_idx][19] == 1 or legs_data[dec_idx][19] == 3 then
				find_navaid(legs_data[dec_idx][34], "", 1, legs_data[dec_idx][16])
			elseif legs_data[dec_idx][19] == 2 or legs_data[dec_idx][19] == 4 then
				find_navaid(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16])
			elseif legs_data[dec_idx][19] == 7 or legs_data[dec_idx][19] == 8 or legs_data[dec_idx][19] == 9 then
				find_navaid(legs_data[dec_idx][34], "", 2, legs_data[dec_idx][16])
			else
				find_navaid(legs_data[dec_idx][34], "", 0, legs_data[dec_idx][16])
			end
		else
			if legs_data2[dec_idx][19] == 1 or legs_data2[dec_idx][19] == 3 then
				find_navaid(legs_data2[dec_idx][34], "", 1, legs_data2[dec_idx][16])
			elseif legs_data2[dec_idx][19] == 2 or legs_data2[dec_idx][19] == 4 then
				find_navaid(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16])
			elseif legs_data2[dec_idx][19] == 7 or legs_data2[dec_idx][19] == 8 or legs_data2[dec_idx][19] == 9 then
				find_navaid(legs_data2[dec_idx][34], "", 2, legs_data2[dec_idx][16])
			else
				find_navaid(legs_data2[dec_idx][34], "", 0, legs_data2[dec_idx][16])
			end
		end
		dec_find_type = 0
		if navaid_list_n > 0 then
			dec_prev_lat = navaid_list[1][2]
			dec_prev_lon = navaid_list[1][3]
			dec_find_type = navaid_list[1][1]
		end
		
		crs1 = tonumber(dec_brg)
		if crs1 == nil then
			crs1 = 0
		else
			crs1 = crs1 / 10
		end
		dec_calc_brg = crs1
		crs1 = (crs1 + mag_variation_deg(dec_prev_lat, dec_prev_lon)) % 360
		dist = tonumber(dec_dist)
		nd_dis = 0
		if dist == nil then
			if string.sub(dec_dist, 1, 1) == "T" then
				dist = tonumber(string.sub(dec_dist, 2, -1))
				if dist ~= nil then
					nd_dis = 103 * (dist / 10) * 60 * 0.00054 --NM
				end
			end
		else
			nd_dis = dist / 10
		end
		
		calc_brg_dist(dec_prev_lat, dec_prev_lon, math.rad(crs1), nd_dis)
		dec_calc_lat = calc_lat
		dec_calc_lon = calc_lon

	-- HOLD -> HA/HF/HM
	elseif dec_path == "HA" or dec_path == "HF" or dec_path == "HM" then
		crs1 = tonumber(dec_brg)
		if crs1 == nil then
			crs1 = 0
		else
			crs1 = crs1 / 10
		end
		if crs1 <= 360 then
			dec_calc_brg = crs1
		else
			dec_calc_brg = math.deg(dec_calc_brg)
			crs1 = (dec_calc_brg - mag_variation_deg(dec_prev_lat, dec_prev_lon) + 360) % 360
			crs1 = crs1 * 10
			if dec_mode == 0 then
				legs_data[dec_idx][29] = string.format("%04d", crs1)
			else
				legs_data2[dec_idx][29] = string.format("%04d", crs1)
			end
		end
		dec_find_type = 4
	end
	
	-- save decoded data
	if dec_mode == 0 then
		legs_data[dec_idx][7] = dec_calc_lat
		legs_data[dec_idx][8] = dec_calc_lon
		legs_data[dec_idx][18] = math.rad(dec_calc_brg)
	else
		legs_data2[dec_idx][7] = dec_calc_lat
		legs_data2[dec_idx][8] = dec_calc_lon
		legs_data2[dec_idx][18] = math.rad(dec_calc_brg)
	end
	
	B738DR_freeze = 6
	
end

function B738_calc_rte()

	local ii = 0
	local find_txt = ""
	local delta_crs = 0
	
	if calc_rte_enable == 1 then
			calc_rte_enable = 2
			calc_rte_act = 0
			rte_calc_lat = 0
			rte_calc_lon = 0
			if calc_rte_enable2 ~= 0 then
				calc_rte_enable2 = 0
			end
	elseif calc_rte_enable == 2 then
		calc_rte_act = calc_rte_act + 1
		ii = legs_num + 1
		if calc_rte_act > ii then
			calc_rte_enable = 3
			
			-- calc_rte_enable = 0
			-- del_if(0)
			-- find_sid_app_idx()
			-- copy_to_legsdata2()
			-- create_legsdata3()
			-- create_fpln()
			-- B738_find_rnav()
			-- dataref_legs()
			
			-- dataref_legs_latlon()
			
			-- if del_execute == 1 then
				-- -- recalc
				-- calc_rte_enable = 1
			-- end
			
			--dump_leg()
			
		elseif calc_rte_act == 1 then
			find_rnw_data()
		else
			
			--if 2 == 3 then
			
			if legs_data[calc_rte_act][7] == 0 and legs_data[calc_rte_act][8] == 0 then
				if legs_data[calc_rte_act][1] == "DISCONTINUITY" then
					legs_data[calc_rte_act][7] = legs_data[calc_rte_act-1][7]
					legs_data[calc_rte_act][8] = legs_data[calc_rte_act-1][8]
					legs_data[calc_rte_act][2] = legs_data[calc_rte_act-1][2]		-- brg
					legs_data[calc_rte_act][18] = 0
					legs_data[calc_rte_act][3] = 0		-- distance
				else
					find_txt = legs_data[calc_rte_act][1]
					if string.len(find_txt) == 0 then
						find_txt = "ZZZZZZZZ"
					end
					if string.sub(find_txt, 1, 2) == "RW" then
						if legs_data[calc_rte_act][19] == 7 or legs_data[calc_rte_act][19] == 8 
						or legs_data[calc_rte_act][19] == 2 or legs_data[calc_rte_act][19] == 4 then
							legs_data[calc_rte_act][7] = des_runway_lat
							legs_data[calc_rte_act][8] = des_runway_lon
							legs_data[calc_rte_act][2] = nd_calc_brg(legs_data[calc_rte_act-1][7], legs_data[calc_rte_act-1][8], legs_data[calc_rte_act][7], legs_data[calc_rte_act][8])
							legs_data[calc_rte_act][2] = math.rad(legs_data[calc_rte_act][2])
							legs_data[calc_rte_act][18] = legs_data[calc_rte_act][2] - mag_variation_rad(math.rad(legs_data[calc_rte_act][7]), math.rad(legs_data[calc_rte_act][8]))
							legs_data[calc_rte_act][3] = nd_calc_dist2(legs_data[calc_rte_act-1][7], legs_data[calc_rte_act-1][8], legs_data[calc_rte_act][7], legs_data[calc_rte_act][8])
						else
							dec_lat_lon(0, calc_rte_act)
							legs_data[calc_rte_act][36] = dec_find_type
							--B738DR_fms_test3 = B738DR_fms_test3 + 1
						end
					else
						dec_lat_lon(0, calc_rte_act)
						legs_data[calc_rte_act][36] = dec_find_type
						--B738DR_fms_test3 = B738DR_fms_test3 + 1
					end
				end
			end
			
			-- calc distance
			legs_data[calc_rte_act][3] = nd_calc_dist2(legs_data[calc_rte_act][7], legs_data[calc_rte_act][8], legs_data[calc_rte_act-1][7], legs_data[calc_rte_act-1][8])
			if legs_data[calc_rte_act][31] == "FM" or legs_data[calc_rte_act][31] == "VM" then
				legs_data[calc_rte_act][2] = legs_data[calc_rte_act][18] + mag_variation_rad(math.rad(legs_data[calc_rte_act][7]), math.rad(legs_data[calc_rte_act][8]))
			elseif legs_data[calc_rte_act][31] == "HM" or legs_data[calc_rte_act][31] == "HA" or legs_data[calc_rte_act][31] == "HF" then
				legs_data[calc_rte_act][2] = legs_data[calc_rte_act][18] + mag_variation_rad(math.rad(legs_data[calc_rte_act][7]), math.rad(legs_data[calc_rte_act][8]))
			elseif string.sub(legs_data[calc_rte_act][1], 1, 2) ~= "RW" or calc_rte_act ~= 2 then
				legs_data[calc_rte_act][2] = math.rad(nd_calc_brg(legs_data[calc_rte_act-1][7], legs_data[calc_rte_act-1][8], legs_data[calc_rte_act][7], legs_data[calc_rte_act][8]))
				if legs_data[calc_rte_act][31] == "TF" or legs_data[calc_rte_act][31] == "IF" then
					delta_crs = (nd_calc_brg(legs_data[calc_rte_act][7], legs_data[calc_rte_act][8], legs_data[calc_rte_act-1][7], legs_data[calc_rte_act-1][8]) + 180) % 360
					delta_crs = (delta_crs - math.deg(legs_data[calc_rte_act][2]) + 360) % 360
					if delta_crs > 180 then
						delta_crs = delta_crs - 360
					end
					legs_data[calc_rte_act][37] = delta_crs
				end
				--if legs_data[calc_rte_act][31] == "FM" or legs_data[calc_rte_act][31] == "TF" or legs_data[calc_rte_act][31] == "" then
				if legs_data[calc_rte_act][31] == "TF" or legs_data[calc_rte_act][31] == "" then
					legs_data[calc_rte_act][18] = legs_data[calc_rte_act][2] - mag_variation_rad(math.rad(legs_data[calc_rte_act][7]), math.rad(legs_data[calc_rte_act][8]))
				end
			end
			
			--end
			
		end
	elseif calc_rte_enable == 3 then
			del_if(0)
			if del_execute == 1 then
				-- recalc
				calc_rte_enable = 1
			else
				calc_rte_enable = 4
			end
	elseif calc_rte_enable == 4 then
			find_sid_app_idx()
			calc_rte_enable = 5
	elseif calc_rte_enable == 5 then
			copy_to_legsdata2()
			calc_rte_enable = 6
	elseif calc_rte_enable == 6 then
			create_legsdata3()
			calc_rte_enable = 7
	elseif calc_rte_enable == 7 then
			create_fpln()
			calc_rte_enable = 8
	elseif calc_rte_enable == 8 then
			B738_find_rnav()
			calc_rte_enable = 0
			--dataref_legs()
	end
	--B738DR_fms_test3 = calc_rte_act

end


function B738_calc_rte2()

	local ii = 0
	local find_txt = ""
	local delta_crs = 0
	
	local calc_enable = 0
	if rte_add_sid_act == 0 and rte_add_star_act == 0 and rte_add_app_act == 0 then
		calc_enable = 1
	end
	if calc_rte_enable ~= 0 then
		calc_enable = 0
	end
	
	if calc_enable == 1 then
		if calc_rte_enable2 == 1 then
				calc_rte_enable2 = 2
				calc_rte_act2 = 0
				rte_calc_lat2 = 0
				rte_calc_lon2 = 0
				--B738DR_fms_test3 = B738DR_fms_test3 + 1
				--if calc_rte_enable == 2 then
				-- if calc_rte_enable ~= 0 then
					-- calc_rte_enable = 0
				-- end
		elseif calc_rte_enable2 == 2 then
			calc_rte_act2 = calc_rte_act2 + 1
			ii = legs_num2 + 1
			if calc_rte_act2 > ii then
				calc_rte_enable2 = 3
				-- calc_rte_enable2 = 0
				-- del_if(1)
				-- find_sid_app_idx_mod()
				-- create_fpln()
				-- B738_find_rnav_mod()
				
				-- dataref_legs2_latlon()
				
				-- if del_execute == 1 then
					-- -- recalc
					-- calc_rte_enable2 = 1
				-- end
			elseif calc_rte_act2 == 1 then
				find_rnw_data()
			else
				--if 2 == 3 then
				
				B738DR_freeze = 7
				if legs_data2[calc_rte_act2][7] == 0 and legs_data2[calc_rte_act2][8] == 0 then
					if legs_data2[calc_rte_act2][1] == "DISCONTINUITY" then
						legs_data2[calc_rte_act2][7] = legs_data2[calc_rte_act2-1][7]
						legs_data2[calc_rte_act2][8] = legs_data2[calc_rte_act2-1][8]
						legs_data2[calc_rte_act2][2] = legs_data2[calc_rte_act2-1][2]		-- brg
						legs_data2[calc_rte_act2][18] = 0
						legs_data2[calc_rte_act2][3] = 0		-- distance
					else
						find_txt = legs_data2[calc_rte_act2][1]
						if string.len(find_txt) == 0 then
							find_txt = "ZZZZZZZZ"
						end
						if string.sub(find_txt, 1, 2) == "RW" then
							if legs_data2[calc_rte_act2][19] == 7 or legs_data2[calc_rte_act2][19] == 8 
							or legs_data2[calc_rte_act2][19] == 2 or legs_data2[calc_rte_act2][19] == 4 then
								legs_data2[calc_rte_act2][7] = des_runway_lat
								legs_data2[calc_rte_act2][8] = des_runway_lon
								legs_data2[calc_rte_act2][2] = nd_calc_brg(legs_data2[calc_rte_act2-1][7], legs_data2[calc_rte_act2-1][8], legs_data2[calc_rte_act2][7], legs_data2[calc_rte_act2][8])
								legs_data2[calc_rte_act2][2] = math.rad(legs_data2[calc_rte_act2][2])
								legs_data2[calc_rte_act2][18] = legs_data2[calc_rte_act2][2] - mag_variation_rad(math.rad(legs_data2[calc_rte_act2][7]), math.rad(legs_data2[calc_rte_act2][8]))
								legs_data2[calc_rte_act2][3] = nd_calc_dist2(legs_data2[calc_rte_act2-1][7], legs_data2[calc_rte_act2-1][8], legs_data2[calc_rte_act2][7], legs_data2[calc_rte_act2][8])
							else
								dec_lat_lon(1, calc_rte_act2)
								legs_data2[calc_rte_act2][36] = dec_find_type
							end
						else
							dec_lat_lon(1, calc_rte_act2)
							legs_data2[calc_rte_act2][36] = dec_find_type
						end
					end
				end
				
				-- calc distance
				legs_data2[calc_rte_act2][3] = nd_calc_dist2(legs_data2[calc_rte_act2][7], legs_data2[calc_rte_act2][8], legs_data2[calc_rte_act2-1][7], legs_data2[calc_rte_act2-1][8])
				if legs_data2[calc_rte_act2][31] == "FM" or legs_data2[calc_rte_act2][31] == "VM" then
					legs_data2[calc_rte_act2][2] = legs_data2[calc_rte_act2][18] + mag_variation_rad(math.rad(legs_data2[calc_rte_act2][7]), math.rad(legs_data2[calc_rte_act2][8]))
				elseif legs_data2[calc_rte_act2][31] == "HM" or legs_data2[calc_rte_act2][31] == "HA" or legs_data2[calc_rte_act2][31] == "HF" then
					legs_data2[calc_rte_act2][2] = legs_data2[calc_rte_act2][18] + mag_variation_rad(math.rad(legs_data2[calc_rte_act2][7]), math.rad(legs_data2[calc_rte_act2][8]))
				elseif string.sub(legs_data2[calc_rte_act2][1], 1, 2) ~= "RW" or calc_rte_act2 ~= 2 then
				--else
					legs_data2[calc_rte_act2][2] = math.rad(nd_calc_brg(legs_data2[calc_rte_act2-1][7], legs_data2[calc_rte_act2-1][8], legs_data2[calc_rte_act2][7], legs_data2[calc_rte_act2][8]))
					if legs_data2[calc_rte_act2][31] == "TF" or legs_data2[calc_rte_act2][31] == "IF" then
						delta_crs = (nd_calc_brg(legs_data2[calc_rte_act2][7], legs_data2[calc_rte_act2][8], legs_data2[calc_rte_act2-1][7], legs_data2[calc_rte_act2-1][8]) + 180) % 360
						delta_crs = (delta_crs - math.deg(legs_data2[calc_rte_act2][2]) + 360) % 360
						if delta_crs > 180 then
							delta_crs = delta_crs - 360
						end
						legs_data2[calc_rte_act2][37] = delta_crs
					end
					--if legs_data2[calc_rte_act2][31] == "FM" or legs_data2[calc_rte_act2][31] == "TF" or legs_data2[calc_rte_act2][31] == "" then
					if legs_data2[calc_rte_act2][31] == "TF" or legs_data2[calc_rte_act2][31] == "" then
						legs_data2[calc_rte_act2][18] = legs_data2[calc_rte_act2][2] - mag_variation_rad(math.rad(legs_data2[calc_rte_act2][7]), math.rad(legs_data2[calc_rte_act2][8]))
					end
				end
				--B738DR_freeze = 8
				
				--end
			end
			B738DR_freeze = 8
		elseif calc_rte_enable2 == 3 then
				del_if(1)
				if del_execute == 1 then
					-- recalc
					calc_rte_enable2 = 1
				else
					calc_rte_enable2 = 4
				end
		elseif calc_rte_enable2 == 4 then
				find_sid_app_idx_mod()
				calc_rte_enable2 = 5
		elseif calc_rte_enable2 == 5 then
				create_fpln()
				calc_rte_enable2 = 6
		elseif calc_rte_enable2 == 6 then
				B738_find_rnav_mod()
				calc_rte_enable2 = 0
				
				--dataref_legs2_latlon()
				
		end
	end

end

-- function find_navaid(nav_id, nav_icao, nav_mode0, nav_reg_code)
-- end

--findnavaidsk
-- nav mode => distance from 0-PPOS, 1-REF ICAO, 2-DES ICAO, 3-By lat,lon (find_lat, find_lon)
function find_navaid(nav_id, nav_icao, nav_mode0, nav_reg_code)
	
	B738DR_freeze = 3

	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local nav_id_ok = 0
	local nd_lat = 0
	local nd_lon = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	
	local idx_rec = 0
	
	if string.len(nav_icao) > 0 then
		kk = 1
	end
	if string.len(nav_reg_code) > 0 then
		ll = 1
	end
	
	navaid_list = {}
	navaid_list_n = 0
	
	if earth_nav_num > 0 then
		nd_x = string.byte(string.sub(nav_id, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_earth_nav[nd_x][99999] > 0 then
				for ii = 1, idx_earth_nav[nd_x][99999] do
					idx_rec = idx_earth_nav[nd_x][ii]
					
					nav_id_ok = 0
					if kk == 0 then
						if ll == 0 then
							if nav_id == earth_nav[idx_rec][4] then
								nav_id_ok = 1
							end
						else
							if nav_id == earth_nav[idx_rec][4] and nav_reg_code == earth_nav[idx_rec][8] then
								nav_id_ok = 1
							end
						end
					else
						if ll == 0 then
							if nav_id == earth_nav[idx_rec][4] and nav_icao == earth_nav[idx_rec][5] then
								nav_id_ok = 1
							end
						else
							if nav_id == earth_nav[idx_rec][4] and nav_icao == earth_nav[idx_rec][5] and nav_reg_code == earth_nav[idx_rec][8] then
								nav_id_ok = 1
							end
						end
					end
					if nav_id_ok == 1 then
						navaid_list_n = navaid_list_n + 1
						navaid_list[navaid_list_n] = {}
						for jj = 1, 8 do
							navaid_list[navaid_list_n][jj] = earth_nav[idx_rec][jj]
						end
						navaid_list[navaid_list_n][20] = ">"
						navaid_list[navaid_list_n][21] = ""
						navaid_list[navaid_list_n][22] = ""
						navaid_list[navaid_list_n][23] = ""
						navaid_list[navaid_list_n][24] = 0
					end
				end
			end
		end
		
		-- for ii = 1, earth_nav_num do
			-- nav_id_ok = 0
			-- if kk == 0 then
				-- if ll == 0 then
					-- if nav_id == earth_nav[ii][4] then
						-- nav_id_ok = 1
					-- end
				-- else
					-- if nav_id == earth_nav[ii][4] and nav_reg_code == earth_nav[ii][8] then
						-- nav_id_ok = 1
					-- end
				-- end
			-- else
				-- if ll == 0 then
					-- if nav_id == earth_nav[ii][4] and nav_icao == earth_nav[ii][5] then
						-- nav_id_ok = 1
					-- end
				-- else
					-- if nav_id == earth_nav[ii][4] and nav_icao == earth_nav[ii][5] and nav_reg_code == earth_nav[ii][8] then
						-- nav_id_ok = 1
					-- end
				-- end
			-- end
			-- if nav_id_ok == 1 then
				-- navaid_list_n = navaid_list_n + 1
				-- navaid_list[navaid_list_n] = {}
				-- for jj = 1, 8 do
					-- navaid_list[navaid_list_n][jj] = earth_nav[ii][jj]
				-- end
				-- navaid_list[navaid_list_n][20] = ">"
				-- navaid_list[navaid_list_n][21] = ""
				-- navaid_list[navaid_list_n][22] = ""
				-- navaid_list[navaid_list_n][23] = ""
				-- navaid_list[navaid_list_n][24] = 0
			-- end
			
		-- end
	end
	if kk == 0 then 
		if apt_data_num > 0 then
			nd_x = string.byte(string.sub(nav_id, 1, 1))
			if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
				if idx_apt[nd_x][99999] > 0 then
					for ii = 1, idx_apt[nd_x][99999] do
						idx_rec = idx_apt[nd_x][ii]
						
						if nav_id == apt_data[idx_rec][1] then
							navaid_list_n = navaid_list_n + 1
							navaid_list[navaid_list_n] = {}
							navaid_list[navaid_list_n][1] = 9	-- APT
							navaid_list[navaid_list_n][2] = apt_data[idx_rec][2]
							navaid_list[navaid_list_n][3] = apt_data[idx_rec][3]
							navaid_list[navaid_list_n][4] = apt_data[idx_rec][1]
							navaid_list[navaid_list_n][5] = ""
							navaid_list[navaid_list_n][6] = ""
							navaid_list[navaid_list_n][7] = ""
							navaid_list[navaid_list_n][8] = ""
							navaid_list[navaid_list_n][20] = ">"
							navaid_list[navaid_list_n][21] = ""
							navaid_list[navaid_list_n][22] = ""
							navaid_list[navaid_list_n][23] = ""
							navaid_list[navaid_list_n][24] = 0
						end
					end
				end
			end
			
			-- for ii = 1, apt_data_num do
				-- if nav_id == apt_data[ii][1] then
					-- navaid_list_n = navaid_list_n + 1
					-- navaid_list[navaid_list_n] = {}
					-- navaid_list[navaid_list_n][1] = 9	-- APT
					-- navaid_list[navaid_list_n][2] = apt_data[ii][2]
					-- navaid_list[navaid_list_n][3] = apt_data[ii][3]
					-- navaid_list[navaid_list_n][4] = apt_data[ii][1]
					-- navaid_list[navaid_list_n][5] = ""
					-- navaid_list[navaid_list_n][6] = ""
					-- navaid_list[navaid_list_n][7] = ""
					-- navaid_list[navaid_list_n][8] = ""
					-- navaid_list[navaid_list_n][20] = ">"
					-- navaid_list[navaid_list_n][21] = ""
					-- navaid_list[navaid_list_n][22] = ""
					-- navaid_list[navaid_list_n][23] = ""
					-- navaid_list[navaid_list_n][24] = 0
				-- end
			-- end
		end
	end
	
	-- custom wpt
	if wptx_n > 0 then
		for ii = 1, wptx_n do
			if nav_id == wptx[ii][1] then
				navaid_list_n = navaid_list_n + 1
				navaid_list[navaid_list_n] = {}
				navaid_list[navaid_list_n][1] = 4	-- WPT
				navaid_list[navaid_list_n][2] = wptx[ii][2]
				navaid_list[navaid_list_n][3] = wptx[ii][3]
				navaid_list[navaid_list_n][4] = wptx[ii][1]
				navaid_list[navaid_list_n][5] = ""
				navaid_list[navaid_list_n][6] = ""
				navaid_list[navaid_list_n][7] = ""
				navaid_list[navaid_list_n][8] = ""
				navaid_list[navaid_list_n][20] = wptx[ii][8]
				navaid_list[navaid_list_n][21] = wptx[ii][4]
				navaid_list[navaid_list_n][22] = wptx[ii][6]
				navaid_list[navaid_list_n][23] = wptx[ii][7]
				navaid_list[navaid_list_n][24] = ii
			end
		end
	end
	
	-- calc distance
	if navaid_list_n > 1 then
		
		if nav_mode0 == 0 then
			nd_lat = simDR_latitude
			nd_lon = simDR_longitude
		elseif nav_mode0 == 1 then
			nd_lat = ref_icao_lat
			nd_lon = ref_icao_lon
		elseif nav_mode0 == 2 then
			nd_lat = des_icao_lat
			nd_lon = des_icao_lon
		elseif nav_mode0 == 3 then
			nd_lat = find_lat
			nd_lon = find_lon
		end
		
		for ii = 1, navaid_list_n do
			nd_dis = nd_calc_dist2(nd_lat, nd_lon,  navaid_list[ii][2], navaid_list[ii][3])
			navaid_list[ii][9] = nd_dis
		end
	end
	
	-- sort by nearest
	if navaid_list_n > 1 then
		for ii = 1, navaid_list_n - 1 do
			nd_x = ii + 1
			for jj = nd_x, navaid_list_n do
				if navaid_list[ii][9] > navaid_list[jj][9] then
					temp_nav_sort = {}
					for kk = 1, 9 do
						temp_nav_sort[kk] = navaid_list[ii][kk]
						navaid_list[ii][kk] = navaid_list[jj][kk]
						navaid_list[jj][kk] = temp_nav_sort[kk]
					end
					temp_nav_sort[20] = navaid_list[ii][20]
					temp_nav_sort[21] = navaid_list[ii][21]
					temp_nav_sort[22] = navaid_list[ii][22]
					temp_nav_sort[23] = navaid_list[ii][23]
					temp_nav_sort[24] = navaid_list[ii][24]
					navaid_list[ii][20] = navaid_list[jj][20]
					navaid_list[ii][21] = navaid_list[jj][21]
					navaid_list[ii][22] = navaid_list[jj][22]
					navaid_list[ii][23] = navaid_list[jj][23]
					navaid_list[ii][24] = navaid_list[jj][24]
					navaid_list[jj][20] = temp_nav_sort[20]
					navaid_list[jj][21] = temp_nav_sort[21]
					navaid_list[jj][22] = temp_nav_sort[22]
					navaid_list[jj][23] = temp_nav_sort[23]
					navaid_list[jj][24] = temp_nav_sort[24]
				end
			end
		end
	end
	
	if navaid_list_n == 0 then
		if ils_nav_num > 0 then
			nd_x = string.byte(string.sub(nav_id, 1, 1))
			if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
				if idx_ils[nd_x][99999] > 0 then
					for ii = 1, idx_ils[nd_x][99999] do
						idx_rec = idx_ils[nd_x][ii]
			--for ii = 1, ils_nav_num do
						if ll == 0 then
							if nav_id == ils_nav[idx_rec][1] then
								navaid_list_n = navaid_list_n + 1
								navaid_list[navaid_list_n] = {}
								navaid_list[navaid_list_n][1] = 8	-- ILS
								navaid_list[navaid_list_n][2] = ils_nav[idx_rec][2]
								navaid_list[navaid_list_n][3] = ils_nav[idx_rec][3]
								navaid_list[navaid_list_n][4] = ils_nav[idx_rec][1]
								navaid_list[navaid_list_n][5] = ""
								navaid_list[navaid_list_n][6] = ""
								navaid_list[navaid_list_n][7] = ""
								navaid_list[navaid_list_n][8] = ils_nav[idx_rec][8]
								navaid_list[navaid_list_n][20] = ">"
								navaid_list[navaid_list_n][21] = ""
								navaid_list[navaid_list_n][22] = ""
								navaid_list[navaid_list_n][23] = ""
								navaid_list[navaid_list_n][24] = 0
								break
							end
						else
							if nav_id == ils_nav[idx_rec][1] and nav_reg_code == ils_nav[idx_rec][8] then
								navaid_list_n = navaid_list_n + 1
								navaid_list[navaid_list_n] = {}
								navaid_list[navaid_list_n][1] = 8	-- ILS
								navaid_list[navaid_list_n][2] = ils_nav[idx_rec][2]
								navaid_list[navaid_list_n][3] = ils_nav[idx_rec][3]
								navaid_list[navaid_list_n][4] = ils_nav[idx_rec][1]
								navaid_list[navaid_list_n][5] = ""
								navaid_list[navaid_list_n][6] = ""
								navaid_list[navaid_list_n][7] = ""
								navaid_list[navaid_list_n][8] = ils_nav[idx_rec][8]
								navaid_list[navaid_list_n][20] = ">"
								navaid_list[navaid_list_n][21] = ""
								navaid_list[navaid_list_n][22] = ""
								navaid_list[navaid_list_n][23] = ""
								navaid_list[navaid_list_n][24] = 0
								break
							end
						end
					end
				end
			end
		end
	end
	B738DR_freeze = 4

end

-- function find_navaid2(nav_id, nav_icao, nav_mode0, nav_reg_code, nav_ndb)
-- end

-- nav mode => distance from 0-PPOS, 1-REF ICAO, 2-DES ICAO, 3-By lat,lon (find_lat, find_lon)
-- nav_ndb = 0 - no, 1 - yes
function find_navaid2(nav_id, nav_icao, nav_mode0, nav_reg_code, nav_ndb)
	
	B738DR_freeze = 1
	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local nav_id_ok = 0
	local nd_lat = 0
	local nd_lon = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	
	local idx_rec = 0
	
	if string.len(nav_icao) > 0 then
		kk = 1
	end
	if string.len(nav_reg_code) > 0 then
		ll = 1
	end
	
	navaid_list = {}
	navaid_list_n = 0
	
	if earth_nav_num > 0 then
		-- for ii = 1, earth_nav_num do
			-- nav_id_ok = 0
			-- if kk == 0 then
				-- if ll == 0 then
					-- if nav_id == earth_nav[ii][4] then
						-- nav_id_ok = 1
					-- end
				-- else
					-- if nav_id == earth_nav[ii][4] and nav_reg_code == earth_nav[ii][8] then
						-- nav_id_ok = 1
					-- end
				-- end
			-- else
				-- if ll == 0 then
					-- if nav_id == earth_nav[ii][4] and nav_icao == earth_nav[ii][5] then
						-- nav_id_ok = 1
					-- end
				-- else
					-- if nav_id == earth_nav[ii][4] and nav_icao == earth_nav[ii][5] and nav_reg_code == earth_nav[ii][8] then
						-- nav_id_ok = 1
					-- end
				-- end
			-- end
			-- if nav_id_ok == 1 and nav_ndb > 0 then
				-- if nav_ndb == 1 then
					-- if earth_nav[ii][1] ~= 3 then
						-- nav_id_ok = 0
					-- end
				-- else
					-- if earth_nav[ii][1] == 3 then
						-- nav_id_ok = 0
					-- end
				-- end
			-- end
			-- if nav_id_ok == 1 then
				-- navaid_list_n = navaid_list_n + 1
				-- navaid_list[navaid_list_n] = {}
				-- for jj = 1, 8 do
					-- navaid_list[navaid_list_n][jj] = earth_nav[ii][jj]
				-- end
				-- navaid_list[navaid_list_n][20] = ">"
				-- navaid_list[navaid_list_n][21] = ""
				-- navaid_list[navaid_list_n][22] = ""
				-- navaid_list[navaid_list_n][23] = ""
				-- navaid_list[navaid_list_n][24] = 0
			-- end
			
		-- end
		nd_x = string.byte(string.sub(nav_id, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_earth_nav[nd_x][99999] > 0 then
				for ii = 1, idx_earth_nav[nd_x][99999] do
					idx_rec = idx_earth_nav[nd_x][ii]
					
					nav_id_ok = 0
					if kk == 0 then
						if ll == 0 then
							if nav_id == earth_nav[idx_rec][4] then
								nav_id_ok = 1
							end
						else
							if nav_id == earth_nav[idx_rec][4] and nav_reg_code == earth_nav[idx_rec][8] then
								nav_id_ok = 1
							end
						end
					else
						if ll == 0 then
							if nav_id == earth_nav[idx_rec][4] and nav_icao == earth_nav[idx_rec][5] then
								nav_id_ok = 1
							end
						else
							if nav_id == earth_nav[idx_rec][4] and nav_icao == earth_nav[idx_rec][5] and nav_reg_code == earth_nav[idx_rec][8] then
								nav_id_ok = 1
							end
						end
					end
					if nav_id_ok == 1 and nav_ndb > 0 then
						if nav_ndb == 1 then
							if earth_nav[idx_rec][1] ~= 3 then
								nav_id_ok = 0
							end
						else
							if earth_nav[idx_rec][1] == 3 then
								nav_id_ok = 0
							end
						end
					end
					if nav_id_ok == 1 then
						navaid_list_n = navaid_list_n + 1
						navaid_list[navaid_list_n] = {}
						for jj = 1, 8 do
							navaid_list[navaid_list_n][jj] = earth_nav[idx_rec][jj]
						end
						navaid_list[navaid_list_n][20] = ">"
						navaid_list[navaid_list_n][21] = ""
						navaid_list[navaid_list_n][22] = ""
						navaid_list[navaid_list_n][23] = ""
						navaid_list[navaid_list_n][24] = 0
					end
					
				end
			end
			
		end
		
	end
	
	
	if kk == 0 then 
		if apt_data_num > 0 then
			-- for ii = 1, apt_data_num do
				-- if nav_id == apt_data[ii][1] then
					-- navaid_list_n = navaid_list_n + 1
					-- navaid_list[navaid_list_n] = {}
					-- navaid_list[navaid_list_n][1] = 9	-- APT
					-- navaid_list[navaid_list_n][2] = apt_data[ii][2]
					-- navaid_list[navaid_list_n][3] = apt_data[ii][3]
					-- navaid_list[navaid_list_n][4] = apt_data[ii][1]
					-- navaid_list[navaid_list_n][5] = ""
					-- navaid_list[navaid_list_n][6] = ""
					-- navaid_list[navaid_list_n][7] = ""
					-- navaid_list[navaid_list_n][8] = ""
					-- navaid_list[navaid_list_n][20] = ">"
					-- navaid_list[navaid_list_n][21] = ""
					-- navaid_list[navaid_list_n][22] = ""
					-- navaid_list[navaid_list_n][23] = ""
					-- navaid_list[navaid_list_n][24] = 0
				-- end
			-- end
			nd_x = string.byte(string.sub(nav_id, 1, 1))
			if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
				if idx_apt[nd_x][99999] > 0 then
					for ii = 1, idx_apt[nd_x][99999] do
						idx_rec = idx_apt[nd_x][ii]
					
						if nav_id == apt_data[idx_rec][1] then
							navaid_list_n = navaid_list_n + 1
							navaid_list[navaid_list_n] = {}
							navaid_list[navaid_list_n][1] = 9	-- APT
							navaid_list[navaid_list_n][2] = apt_data[idx_rec][2]
							navaid_list[navaid_list_n][3] = apt_data[idx_rec][3]
							navaid_list[navaid_list_n][4] = apt_data[idx_rec][1]
							navaid_list[navaid_list_n][5] = ""
							navaid_list[navaid_list_n][6] = ""
							navaid_list[navaid_list_n][7] = ""
							navaid_list[navaid_list_n][8] = ""
							navaid_list[navaid_list_n][20] = ">"
							navaid_list[navaid_list_n][21] = ""
							navaid_list[navaid_list_n][22] = ""
							navaid_list[navaid_list_n][23] = ""
							navaid_list[navaid_list_n][24] = 0
						end
					end
				end
			end
		end
	end
	
	-- custom wpt
	if wptx_n > 0 then
		for ii = 1, wptx_n do
			if nav_id == wptx[ii][1] then
				navaid_list_n = navaid_list_n + 1
				navaid_list[navaid_list_n] = {}
				navaid_list[navaid_list_n][1] = 4	-- WPT
				navaid_list[navaid_list_n][2] = wptx[ii][2]
				navaid_list[navaid_list_n][3] = wptx[ii][3]
				navaid_list[navaid_list_n][4] = wptx[ii][1]
				navaid_list[navaid_list_n][5] = ""
				navaid_list[navaid_list_n][6] = ""
				navaid_list[navaid_list_n][7] = ""
				navaid_list[navaid_list_n][8] = ""
				navaid_list[navaid_list_n][20] = wptx[ii][8]
				navaid_list[navaid_list_n][21] = wptx[ii][4]
				navaid_list[navaid_list_n][22] = wptx[ii][6]
				navaid_list[navaid_list_n][23] = wptx[ii][7]
				navaid_list[navaid_list_n][24] = ii
			end
		end
	end
	
	-- calc distance
	if navaid_list_n > 1 then
		
		if nav_mode0 == 0 then
			nd_lat = simDR_latitude
			nd_lon = simDR_longitude
		elseif nav_mode0 == 1 then
			nd_lat = ref_icao_lat
			nd_lon = ref_icao_lon
		elseif nav_mode0 == 2 then
			nd_lat = des_icao_lat
			nd_lon = des_icao_lon
		elseif nav_mode0 == 3 then
			nd_lat = find_lat
			nd_lon = find_lon
		end
		
		for ii = 1, navaid_list_n do
			nd_dis = nd_calc_dist2(nd_lat, nd_lon,  navaid_list[ii][2], navaid_list[ii][3])
			navaid_list[ii][9] = nd_dis
		end
	end
	
	-- sort by nearest
	if navaid_list_n > 1 then
		for ii = 1, navaid_list_n - 1 do
			nd_x = ii + 1
			for jj = nd_x, navaid_list_n do
				if navaid_list[ii][9] > navaid_list[jj][9] then
					temp_nav_sort = {}
					for kk = 1, 9 do
						temp_nav_sort[kk] = navaid_list[ii][kk]
						navaid_list[ii][kk] = navaid_list[jj][kk]
						navaid_list[jj][kk] = temp_nav_sort[kk]
					end
					temp_nav_sort[20] = navaid_list[ii][20]
					temp_nav_sort[21] = navaid_list[ii][21]
					temp_nav_sort[22] = navaid_list[ii][22]
					temp_nav_sort[23] = navaid_list[ii][23]
					temp_nav_sort[24] = navaid_list[ii][24]
					navaid_list[ii][20] = navaid_list[jj][20]
					navaid_list[ii][21] = navaid_list[jj][21]
					navaid_list[ii][22] = navaid_list[jj][22]
					navaid_list[ii][23] = navaid_list[jj][23]
					navaid_list[ii][24] = navaid_list[jj][24]
					navaid_list[jj][20] = temp_nav_sort[20]
					navaid_list[jj][21] = temp_nav_sort[21]
					navaid_list[jj][22] = temp_nav_sort[22]
					navaid_list[jj][23] = temp_nav_sort[23]
					navaid_list[jj][24] = temp_nav_sort[24]
				end
			end
		end
	end
	
	if navaid_list_n == 0 then
		if ils_nav_num > 0 then
			nd_x = string.byte(string.sub(nav_id, 1, 1))
			if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
				if idx_ils[nd_x][99999] > 0 then
					for ii = 1, idx_ils[nd_x][99999] do
						idx_rec = idx_ils[nd_x][ii]
			--for ii = 1, ils_nav_num do
						if ll == 0 then
							if nav_id == ils_nav[idx_rec][1] then
								navaid_list_n = navaid_list_n + 1
								navaid_list[navaid_list_n] = {}
								navaid_list[navaid_list_n][1] = 8	-- ILS
								navaid_list[navaid_list_n][2] = ils_nav[idx_rec][2]
								navaid_list[navaid_list_n][3] = ils_nav[idx_rec][3]
								navaid_list[navaid_list_n][4] = ils_nav[idx_rec][1]
								navaid_list[navaid_list_n][5] = ""
								navaid_list[navaid_list_n][6] = ""
								navaid_list[navaid_list_n][7] = ""
								navaid_list[navaid_list_n][8] = ils_nav[idx_rec][8]
								navaid_list[navaid_list_n][20] = ">"
								navaid_list[navaid_list_n][21] = ""
								navaid_list[navaid_list_n][22] = ""
								navaid_list[navaid_list_n][23] = ""
								navaid_list[navaid_list_n][24] = 0
								break
							end
						else
							if nav_id == ils_nav[idx_rec][1] and nav_reg_code == ils_nav[idx_rec][8] then
								navaid_list_n = navaid_list_n + 1
								navaid_list[navaid_list_n] = {}
								navaid_list[navaid_list_n][1] = 8	-- ILS
								navaid_list[navaid_list_n][2] = ils_nav[idx_rec][2]
								navaid_list[navaid_list_n][3] = ils_nav[idx_rec][3]
								navaid_list[navaid_list_n][4] = ils_nav[idx_rec][1]
								navaid_list[navaid_list_n][5] = ""
								navaid_list[navaid_list_n][6] = ""
								navaid_list[navaid_list_n][7] = ""
								navaid_list[navaid_list_n][8] = ils_nav[idx_rec][8]
								navaid_list[navaid_list_n][20] = ">"
								navaid_list[navaid_list_n][21] = ""
								navaid_list[navaid_list_n][22] = ""
								navaid_list[navaid_list_n][23] = ""
								navaid_list[navaid_list_n][24] = 0
								break
							end
						end
					end
				end
			end
		end
	end
	B738DR_freeze = 2

end


function rte_del_spec(bbb)
	
	local ii = 0
	local jj = 0
	local kk = 0
	local sid_leg_idx = 0
	
	rte_copy_idx = 0
	
	if legs_num2 > 0 then
		if bbb == 1 then	-- SID
			-- if in_flight_mode == 0 then
				-- kk = 1
			-- else
				-- kk = offset + 1
				-- if kk > legs_num2 then
					-- kk = legs_num2
				-- end
			-- end
			kk = 1
			for ii = legs_num2, kk, -1 do
				if legs_data2[ii][19] ~= nil then
					if ref_sid == "------" and legs_data2[ii][19] == 3 then
						legs_data2[ii][19] = 0 -- route
						legs_data2[ii][9] = "DIRECT"
					end
					if legs_data2[ii][19] == bbb then
						sid_leg_idx = ii
						break
					end
				end
			end
			if sid_leg_idx ~= 0 then
				sid_leg_idx = sid_leg_idx + 1
				if legs_data2[sid_leg_idx][1] == "DISCONTINUITY" then
					sid_leg_idx = sid_leg_idx + 1
				end
				rte_copy(sid_leg_idx)
				rte_paste(2)
			end
		elseif bbb == 2 then	-- STAR
			-- if in_flight_mode == 0 then
				-- kk = 1
			-- else
				-- kk = offset + 1
				-- if kk > legs_num2 then
					-- kk = legs_num2
				-- end
			-- end
			
			kk = 1
			for ii = kk, legs_num2 do
				if legs_data2[ii][19] ~= nil then
					-- if des_app == "------" then
						-- if legs_data2[ii][19] == bbb or legs_data2[ii][19] == 8 then
							-- if sid_leg_idx == 0 then
								-- sid_leg_idx = ii
							-- end
							-- rte_copy_idx = ii
						-- end
					-- else
						-- if legs_data2[ii][19] == bbb then
							-- if sid_leg_idx == 0 then
								-- sid_leg_idx = ii
							-- end
							-- rte_copy_idx = ii
						-- end
					-- end
					
					if des_star == "------" and legs_data2[ii][19] == 4 then
						legs_data2[ii][19] = 0 -- route
					end
					if des_app == "------" and legs_data2[ii][19] == 8 then
						legs_data2[ii][19] = 2 -- STAR
					end
					if legs_data2[ii][19] == bbb then
						if sid_leg_idx == 0 then
							sid_leg_idx = ii
						end
						rte_copy_idx = ii
					end
				end
			end
			if sid_leg_idx ~= 0 then
				rte_copy(rte_copy_idx + 1)
				-- find DISCONTINUITY
				jj = sid_leg_idx - 1
				if legs_data2[jj][1] == "DISCONTINUITY" then
					sid_leg_idx = jj
				end
				rte_paste(sid_leg_idx)
			end
		elseif bbb == 7 then	-- APP
			-- if in_flight_mode == 0 then
				-- kk = 1
			-- else
				-- kk = offset + 1
				-- if kk > legs_num2 then
					-- kk = legs_num2
				-- end
			-- end
			
			kk = 1
			for ii = kk, legs_num2 do
				if legs_data2[ii][19] ~= nil then
					-- if des_star == "------" and des_app == "------" then
						-- if legs_data2[ii][19] == bbb or legs_data2[ii][19] == 8 then
							-- if sid_leg_idx == 0 then
								-- sid_leg_idx = ii
							-- end
							-- rte_copy_idx = ii
						-- end
					-- else
						-- if legs_data2[ii][19] == bbb then
							-- if sid_leg_idx == 0 then
								-- sid_leg_idx = ii
							-- end
							-- rte_copy_idx = ii
						-- end
					-- end
					
					--if des_star == "------" and des_app == "------" and legs_data2[ii][19] == 8 then
					if des_star == "------" and legs_data2[ii][19] == 8 then
						legs_data2[ii][19] = 7 -- APP
					end
					if legs_data2[ii][19] == bbb then
						if sid_leg_idx == 0 then
							sid_leg_idx = ii
						end
						rte_copy_idx = ii
					end
				end
			end
			if sid_leg_idx ~= 0 then
				rte_copy(rte_copy_idx + 1)
				-- find DISCONTINUITY
				jj = sid_leg_idx - 1
				if legs_data2[jj][1] == "DISCONTINUITY" then
					sid_leg_idx = jj
				end
				rte_paste(sid_leg_idx)
			end
		elseif bbb == 99 then	-- STAR, APP
			-- if in_flight_mode == 0 then
				-- kk = 1
			-- else
				-- kk = offset + 1
				-- if kk > legs_num2 then
					-- kk = legs_num2
				-- end
			-- end
			
			kk = 1
			for ii = kk, legs_num2 do
				if legs_data2[ii][19] ~= nil then
					
					if legs_data2[ii][19] == 4 then	-- before RTE
						legs_data2[ii][19] = 0 -- route
					end
					if legs_data2[ii][19] == 9 then	-- before RTE
						legs_data2[ii][19] = 0 -- route
					end
					
					if legs_data2[ii][19] == 2 or legs_data2[ii][19] == 7 or legs_data2[ii][19] == 8 then
						if sid_leg_idx == 0 then
							sid_leg_idx = ii
						end
						rte_copy_idx = ii
					end
				end
			end
			if sid_leg_idx ~= 0 then
				rte_copy(rte_copy_idx + 1)
				-- find DISCONTINUITY
				jj = sid_leg_idx - 1
				if legs_data2[jj][1] == "DISCONTINUITY" then
					sid_leg_idx = jj
				end
				rte_paste(sid_leg_idx)
			end
		end
	end

end

function rte_copyb(aaa)

	local tt1 = 0
	local tt2 = 0
	local tt3 = 0
	
	legs_data2_tmp_nb = 0
	legs_data2_tmpb = {}
	
	tt3 = legs_num2b + 1
	if aaa <= tt3 and aaa > 0 then
		for tt1 = aaa, tt3 do
			legs_data2_tmp_nb = legs_data2_tmp_nb + 1
			legs_data2_tmpb[legs_data2_tmp_nb] = {}
			for tt2 = 1, MAX_LEGS_DATA do
				legs_data2_tmpb[legs_data2_tmp_nb][tt2] = legs_data2b[tt1][tt2]
			end
		end
	end
	
	
end

function rte_pasteb(aaa)

	local tt1 = 0
	local tt2 = 0
	local cnt_leg = aaa - 1
	
	if legs_data2_tmp_nb > 0 then
	
		for tt1 = 1, legs_data2_tmp_nb do
			cnt_leg = cnt_leg + 1
			legs_data2b[cnt_leg] = {}
			for tt2 = 1, MAX_LEGS_DATA do
				legs_data2b[cnt_leg][tt2] = legs_data2_tmpb[tt1][tt2]
			end
		end
		legs_num2b = cnt_leg - 1
	end
	
end


function rte_del_specb(bbb)
	
	local ii = 0
	local jj = 0
	local kk = 0
	local sid_leg_idx = 0
	
	rte_copy_idxb = 0
	
	if legs_num2b > 0 then
		if bbb == 1 then	-- SID
			kk = 1
			for ii = legs_num2b, kk, -1 do
				if legs_data2b[ii][19] ~= nil then
					if ref_sid2 == "------" and legs_data2b[ii][19] == 3 then
						legs_data2b[ii][19] = 0 -- route
						legs_data2b[ii][9] = "DIRECT"
					end
					if legs_data2b[ii][19] == bbb then
						sid_leg_idx = ii
						break
					end
				end
			end
			if sid_leg_idx ~= 0 then
				sid_leg_idx = sid_leg_idx + 1
				if legs_data2b[sid_leg_idx][1] == "DISCONTINUITY" then
					sid_leg_idx = sid_leg_idx + 1
				end
				rte_copyb(sid_leg_idx)
				rte_pasteb(2)
			end
		elseif bbb == 2 then	-- STAR
			kk = 1
			for ii = kk, legs_num2b do
				if legs_data2b[ii][19] ~= nil then
					if des_star2 == "------" and legs_data2b[ii][19] == 4 then
						legs_data2b[ii][19] = 0 -- route
					end
					if des_app2 == "------" and legs_data2b[ii][19] == 8 then
						legs_data2b[ii][19] = 2 -- STAR
					end
					if legs_data2b[ii][19] == bbb then
						if sid_leg_idx == 0 then
							sid_leg_idx = ii
						end
						rte_copy_idxb = ii
					end
				end
			end
			if sid_leg_idx ~= 0 then
				rte_copyb(rte_copy_idxb + 1)
				-- find DISCONTINUITY
				jj = sid_leg_idx - 1
				if legs_data2b[jj][1] == "DISCONTINUITY" then
					sid_leg_idx = jj
				end
				rte_pasteb(sid_leg_idx)
			end
		elseif bbb == 7 then	-- APP
			kk = 1
			for ii = kk, legs_num2b do
				if legs_data2b[ii][19] ~= nil then
					if des_star2 == "------" and legs_data2b[ii][19] == 8 then
						legs_data2b[ii][19] = 7 -- APP
					end
					if legs_data2b[ii][19] == bbb then
						if sid_leg_idx == 0 then
							sid_leg_idx = ii
						end
						rte_copy_idxb = ii
					end
				end
			end
			if sid_leg_idx ~= 0 then
				rte_copyb(rte_copy_idxb + 1)
				-- find DISCONTINUITY
				jj = sid_leg_idx - 1
				if legs_data2b[jj][1] == "DISCONTINUITY" then
					sid_leg_idx = jj
				end
				rte_pasteb(sid_leg_idx)
			end
		elseif bbb == 99 then	-- STAR, APP
			kk = 1
			for ii = kk, legs_num2b do
				if legs_data2b[ii][19] ~= nil then
					
					if legs_data2b[ii][19] == 4 then	-- before RTE
						legs_data2b[ii][19] = 0 -- route
					end
					if legs_data2b[ii][19] == 9 then	-- before RTE
						legs_data2b[ii][19] = 0 -- route
					end
					
					if legs_data2b[ii][19] == 2 or legs_data2b[ii][19] == 7 or legs_data2b[ii][19] == 8 then
						if sid_leg_idx == 0 then
							sid_leg_idx = ii
						end
						rte_copy_idxb = ii
					end
				end
			end
			if sid_leg_idx ~= 0 then
				rte_copyb(rte_copy_idxb + 1)
				-- find DISCONTINUITY
				jj = sid_leg_idx - 1
				if legs_data2b[jj][1] == "DISCONTINUITY" then
					sid_leg_idx = jj
				end
				rte_pasteb(sid_leg_idx)
			end
		end
	end

end


function copy_to_legsdata()

	local ii = 0
	local jj = 0
	local kk = 0
	
	legs_num = 0
	legs_data = {}
	
	if legs_num2 > 0 then
		for ii = 1, legs_num2 + 1 do
			legs_data[ii] = {}
			while legs_data2[ii][17] > 99 do
				legs_data2[ii][17] = legs_data2[ii][17] - 100
			end
			for jj = 1, MAX_LEGS_DATA do
				legs_data[ii][jj] = legs_data2[ii][jj]
			end
		end
		legs_num = legs_num2
	end
	calc_rte_enable = 1

end

function copy_to_legsdata2()

	local ii = 0
	local jj = 0
	local fms_line = ""
	
	legs_num2 = 0
	legs_data2 = {}
	
	if legs_num > 0 then
		for ii = 1, legs_num + 1 do
			legs_data2[ii] = {}
			for jj = 1, MAX_LEGS_DATA do
				legs_data2[ii][jj] = legs_data[ii][jj]
			end
			
			-- legs data2 + lat,lon
			
			if ii == 1 then
				fms_line = legs_data2[1][1]
			else
				fms_line = fms_line .. " " .. legs_data2[ii][1]
			end
			B738DR_fms_legs_lat2[ii] = legs_data2[ii][7]
			B738DR_fms_legs_lon2[ii] = legs_data2[ii][8]
			if legs_data2[ii][32] ~= 0 then
				B738DR_fms_legs_type2[ii] = 5
			else
				B738DR_fms_legs_type2[ii] = 0
			end
			if legs_data2[ii][17] > 199 then
				B738DR_fms_legs_connect2[ii] = 2
			elseif legs_data2[ii][17] > 99 then
				B738DR_fms_legs_connect2[ii] = 1
			else
				B738DR_fms_legs_connect2[ii] = 0
			end
		end
		legs_num2 = legs_num
	end

end

function copy_to_legsdata_3()

	local ii = 0
	local jj = 0
	
	legs_num = 0
	legs_data = {}
	
	if legs_num3 > 0 then
		for ii = 1, legs_num3 + 1 do
			legs_data[ii] = {}
			for jj = 1, MAX_LEGS_DATA do
				legs_data[ii][jj] = legs_data3[ii][jj]
			end
		end
		legs_num = legs_num3
	end
	calc_rte_enable = 1

end


-- function copy_to_legsdata()

	-- local ii = 0
	-- local jj = 0
	-- local kk = 0
	
	-- legs_num = 0
	-- --legs_data = {}
	
	-- if legs_num2 > 0 then
		-- for ii = 1, legs_num2 + 1 do
			-- --if legs_data[ii] == nil then
				-- legs_data[ii] = {}
			-- --end
			-- while legs_data2[ii][17] > 99 do
				-- legs_data2[ii][17] = legs_data2[ii][17] - 100
			-- end
			-- for jj = 1, MAX_LEGS_DATA do
				-- legs_data[ii][jj] = legs_data2[ii][jj]
			-- end
		-- end
		-- legs_num = legs_num2
	-- end
	-- calc_rte_enable = 1

-- end

-- function copy_to_legsdata2()

	-- local ii = 0
	-- local jj = 0
	
	-- legs_num2 = 0
	-- --legs_data2 = {}
	
	-- if legs_num > 0 then
		-- for ii = 1, legs_num + 1 do
			-- legs_data2[ii] = {}
			-- -- if legs_data2[ii] == nil then
				-- -- legs_data2[ii] = {}
			-- -- end
			-- for jj = 1, MAX_LEGS_DATA do
				-- legs_data2[ii][jj] = legs_data[ii][jj]
			-- end
		-- end
		-- legs_num2 = legs_num
	-- end

-- end

-- function copy_to_legsdata_3()

	-- local ii = 0
	-- local jj = 0
	
	-- legs_num = 0
	-- --legs_data = {}
	
	-- if legs_num3 > 0 then
		-- for ii = 1, legs_num3 + 1 do
			-- legs_data[ii] = {}
			-- -- if legs_data[ii] == nil then
				-- -- legs_data[ii] = {}
			-- -- end
			-- for jj = 1, MAX_LEGS_DATA do
				-- legs_data[ii][jj] = legs_data3[ii][jj]
			-- end
		-- end
		-- legs_num = legs_num3
	-- end
	-- calc_rte_enable = 1

-- end

----

function rte_copy(aaa)

	local tt1 = 0
	local tt2 = 0
	local tt3 = 0
	
	legs_data2_tmp_n = 0
	legs_data2_tmp = {}
	
	tt3 = legs_num2 + 1
	if aaa <= tt3 and aaa > 0 then
		for tt1 = aaa, tt3 do
			legs_data2_tmp_n = legs_data2_tmp_n + 1
			legs_data2_tmp[legs_data2_tmp_n] = {}
			for tt2 = 1, MAX_LEGS_DATA do
				legs_data2_tmp[legs_data2_tmp_n][tt2] = legs_data2[tt1][tt2]
			end
		end
	end
	
	
end

function rte_paste(aaa)

	local tt1 = 0
	local tt2 = 0
	local cnt_leg = aaa - 1
	
	if legs_data2_tmp_n > 0 then
	
		for tt1 = 1, legs_data2_tmp_n do
			cnt_leg = cnt_leg + 1
			legs_data2[cnt_leg] = {}
			for tt2 = 1, MAX_LEGS_DATA do
				legs_data2[cnt_leg][tt2] = legs_data2_tmp[tt1][tt2]
			end
		end
		legs_num2 = cnt_leg - 1
	end
	
end

-- function rte_copy(aaa)

	-- local tt1 = 0
	-- local tt2 = 0
	-- local tt3 = 0
	
	-- legs_data2_tmp_n = 0
	-- --legs_data2_tmp = {}
	
	-- tt3 = legs_num2 + 1
	-- if aaa <= tt3 and aaa > 0 then
		-- for tt1 = aaa, tt3 do
			-- legs_data2_tmp_n = legs_data2_tmp_n + 1
			-- legs_data2_tmp[legs_data2_tmp_n] = {}
			-- -- if legs_data2_tmp[legs_data2_tmp_n] == nil then
				-- -- legs_data2_tmp[legs_data2_tmp_n] = {}
			-- -- end
			-- for tt2 = 1, MAX_LEGS_DATA do
				-- legs_data2_tmp[legs_data2_tmp_n][tt2] = legs_data2[tt1][tt2]
			-- end
		-- end
	-- end
	
	
-- end

-- function rte_paste(aaa)

	-- local tt1 = 0
	-- local tt2 = 0
	-- local cnt_leg = aaa - 1
	
	-- if legs_data2_tmp_n > 0 then
	
		-- for tt1 = 1, legs_data2_tmp_n do
			-- cnt_leg = cnt_leg + 1
			-- legs_data2[cnt_leg] = {}
			-- -- if legs_data2[cnt_leg] == nil then
				-- -- legs_data2[cnt_leg] = {}
			-- -- end
			-- for tt2 = 1, MAX_LEGS_DATA do
				-- legs_data2[cnt_leg][tt2] = legs_data2_tmp[tt1][tt2]
			-- end
		-- end
		-- legs_num2 = cnt_leg - 1
	-- end
	
-- end



function rte_add_wpt2(wpt_idx)
	
	if wpt_idx <= navaid_list_n and wpt_idx ~= 0 then
			legs_num2 = wpt_id_paste
			legs_data2[legs_num2] = {}
			legs_data2[legs_num2][1] = navaid_list[wpt_idx][4]	--entry
			legs_data2[legs_num2][2] = 0		-- brg
			legs_data2[legs_num2][3] = 0		-- distance
			legs_data2[legs_num2][4] = 0		-- speed
			legs_data2[legs_num2][5] = 0		-- altitude
			legs_data2[legs_num2][6] = 0	-- altitude type
			legs_data2[legs_num2][7] = navaid_list[wpt_idx][2]		-- latitude
			legs_data2[legs_num2][8] = navaid_list[wpt_idx][3]		-- longitude
			legs_data2[legs_num2][9] = "DIRECT"			-- via id
			legs_data2[legs_num2][10] = 0		-- calc speed
			legs_data2[legs_num2][11] = 0		-- calc altitude
			legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
			legs_data2[legs_num2][13] = 0
			legs_data2[legs_num2][14] = 0		-- rest alt
			legs_data2[legs_num2][15] = 0		-- last fuel
			legs_data2[legs_num2][16] = navaid_list[wpt_idx][8]		-- reg code
			legs_data2[legs_num2][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
			legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
			legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
			legs_data2[legs_num2][20] = 0
			legs_data2[legs_num2][21] = -1
			legs_data2[legs_num2][22] = ""
			legs_data2[legs_num2][23] = 0
			legs_data2[legs_num2][24] = 0
			legs_data2[legs_num2][25] = 0
			legs_data2[legs_num2][26] = 0
			legs_data2[legs_num2][27] = ""
			legs_data2[legs_num2][28] = ""
			legs_data2[legs_num2][29] = ""
			legs_data2[legs_num2][30] = ""
			legs_data2[legs_num2][31] = ""
			legs_data2[legs_num2][32] = 0
			legs_data2[legs_num2][33] = ""
			legs_data2[legs_num2][34] = ""
			legs_data2[legs_num2][35] = ""
			legs_data2[legs_num2][36] = navaid_list[wpt_idx][1]
			legs_data2[legs_num2][37] = 0
			legs_data2[legs_num2][38] = ""
			legs_data2[legs_num2][39] = ""
			legs_data2[legs_num2][40] = 0
			rte_lat = legs_data2[legs_num2][7]
			rte_lon = legs_data2[legs_num2][8]
			
			legs_data2[legs_num2-1][17] = legs_data2[legs_num2-1][17] + 100
			
			if add_disco == 1 then
				-- create discontinuity
				legs_num2 = legs_num2 + 1
				rte_add_disco(legs_num2)
			end
			
			rte_paste(legs_num2 + 1)
			calc_rte_enable2 = 1
	end
	page_sel_wpt = 0
	page_legs = 1
	act_page = act_page_old
	
end

function rte_add_wpt(aaa)

	local ii = aaa + 1
	local jj = legs_num2 + 1
	
	-- add WPT
	if legs_data2[aaa][1] ~= entry and legs_data2[aaa-1][1] ~= entry then
	
		find_navaid(entry, "", 0, "")
		if navaid_list_n > 0 then
		
			
			if legs_data2[aaa][1] == "DISCONTINUITY" then
				rte_copy(ii)
				add_disco = 0
			else
				legs_data2[aaa][31] = "TF"
				rte_copy(aaa)
				if aaa == jj then
					add_disco = 0
				else
					add_disco = 1
				end
			end
			
			if navaid_list_n == 1 then
			
				legs_num2 = aaa
				legs_data2[legs_num2] = {}
				legs_data2[legs_num2][1] = navaid_list[1][4]	--entry
				legs_data2[legs_num2][2] = 0		-- brg
				legs_data2[legs_num2][3] = 0		-- distance
				legs_data2[legs_num2][4] = 0		-- speed
				legs_data2[legs_num2][5] = 0		-- altitude
				legs_data2[legs_num2][6] = 0	-- altitude type
				legs_data2[legs_num2][7] = navaid_list[1][2]		-- latitude
				legs_data2[legs_num2][8] = navaid_list[1][3]		-- longitude
				legs_data2[legs_num2][9] = "DIRECT"			-- via id
				legs_data2[legs_num2][10] = 0		-- calc speed
				legs_data2[legs_num2][11] = 0		-- calc altitude
				legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
				legs_data2[legs_num2][13] = 0
				legs_data2[legs_num2][14] = 0		-- rest alt
				legs_data2[legs_num2][15] = 0		-- last fuel
				legs_data2[legs_num2][16] = navaid_list[1][8]		-- reg code
				legs_data2[legs_num2][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
				legs_data2[legs_num2][20] = 0
				legs_data2[legs_num2][21] = -1
				legs_data2[legs_num2][22] = ""
				legs_data2[legs_num2][23] = 0
				legs_data2[legs_num2][24] = 0
				legs_data2[legs_num2][25] = 0
				legs_data2[legs_num2][26] = 0
				legs_data2[legs_num2][27] = ""
				legs_data2[legs_num2][28] = ""
				legs_data2[legs_num2][29] = ""
				legs_data2[legs_num2][30] = ""
				legs_data2[legs_num2][31] = ""
				legs_data2[legs_num2][32] = 0
				legs_data2[legs_num2][33] = ""
				legs_data2[legs_num2][34] = ""
				legs_data2[legs_num2][35] = ""
				legs_data2[legs_num2][36] = navaid_list[1][1]
				legs_data2[legs_num2][37] = 0
				legs_data2[legs_num2][38] = ""
				legs_data2[legs_num2][39] = ""
				legs_data2[legs_num2][40] = 0
				rte_lat = legs_data2[legs_num2][7]
				rte_lon = legs_data2[legs_num2][8]
				
				legs_data2[legs_num2-1][17] = legs_data2[legs_num2-1][17] + 100
				
				if add_disco == 1 then
					-- create discontinuity
					legs_num2 = legs_num2 + 1
					rte_add_disco(legs_num2)
				end
				
				ii = legs_num2 + 1
				rte_paste(ii)
				--if legs_num > 1 then
					legs_delete = 1
				--end
				calc_rte_enable2 = 1
			
			else
				page_sel_wpt = 1
				page_legs = 0
				act_page_old = act_page
				act_page = 1
				wpt_id_paste = aaa
			end
			
		else
			-- fmc_message_num = fmc_message_num + 1
			-- fmc_message[fmc_message_num] = NOT_IN_DATABASE
			add_fmc_msg(NOT_IN_DATABASE, 1)
		end
	end
	entry = ""
	

end


-- add SEA330/10
function rte_add_wpt3(aaa, id_nav, id_brg, id_dist)

	local ii = aaa + 1
	local jj = legs_num2 + 1
	local kk = 0
	local ll = 0
	local mm = 0
	local nd_lat = 0
	local nd_lon = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local temp_brg = 0
	local nd_dis = 0
	local id_nav_txt = ""
	
	local along_wpt = 0
	local aa = 0
	local bb = 0
	local cc = 0
	local dd = 0
	local aa_str = ""
	local bb_str = ""
	local along_dist = 0
	local wpt_ok = 0
	
	if item_sel == 0 then
			kk = tonumber(id_brg)
			if kk == nil then
				ll = 1
			end
			
			kk = tonumber(id_dist)
			if kk == nil then
				ll = 1
			end
	else
		aa,bb = string.find(entry, "/")
		aa_str = string.sub(entry, 1, aa-1)
		if aa_str == legs_data2[item_sel][1] then
			id_nav = "WPT" --aa_str
			along_dist = tonumber(string.sub(entry, aa+1, -1))	-- distance
			if along_dist == nil then
				ll = 1
			else
				along_wpt = 1
			end
		else
			kk = tonumber(id_brg)
			if kk == nil then
				ll = 1
			end
			
			kk = tonumber(id_dist)
			if kk == nil then
				ll = 1
			end
		end
	end
	
	if ll == 0 then
		-- add WPT
		if item_sel == 0 then --or item_sel > legs_num2 then
			find_navaid(id_nav, "", 0, "")
		else
			navaid_list_n = 1
		end
		if navaid_list_n > 0 then
		
			if legs_data2[aaa][1] == "DISCONTINUITY" then
				rte_copy(ii)
				add_disco = 0
			else
				legs_data2[aaa][31] = "TF"
				rte_copy(aaa)
				if aaa == jj then
					add_disco = 0
				else
					add_disco = 1
				end
			end
			
			
			if navaid_list_n == 1 then
			
				legs_num2 = aaa
				
				if item_sel == 0 then --or item_sel > legs_num2 then
					nd_lat = math.rad(navaid_list[1][2])
					nd_lon = math.rad(navaid_list[1][3])
					wpt_ok = 1
				else
					if along_wpt == 0 then
						nd_lat = math.rad(legs_data2[item_sel][7])
						nd_lon = math.rad(legs_data2[item_sel][8])
						wpt_ok = 1
					end
				end
				
				if along_wpt == 1 then
					if along_dist > 0 then
						for aa = item_sel + 1, legs_num + 1 do
							cc = cc + legs_data2[aa][3]
							if cc >= along_dist then
								wpt_ok = 1
								nd_lat = math.rad(legs_data2[aa][7])
								nd_lon = math.rad(legs_data2[aa][8])
								id_brg = (math.deg(legs_data2[aa][2]) + 180) % 360
								id_dist = legs_data2[aa][3] - (along_dist - dd)
								break
							end
							dd = dd + legs_data2[aa][3]
						end
					elseif along_dist < 0 then
						along_dist = -along_dist
						for aa = item_sel, offset, -1 do
							cc = cc + legs_data2[aa][3]
							if cc >= along_dist then
								wpt_ok = 1
								nd_lat = math.rad(legs_data2[aa][7])
								nd_lon = math.rad(legs_data2[aa][8])
								id_brg = (math.deg(legs_data2[aa][2]) + 180) % 360
								id_dist = along_dist - dd
								break
							end
							dd = dd + legs_data2[aa][3]
						end
					end
				end
				
				if wpt_ok == 1 then
					if along_wpt == 0 then
						temp_brg = math.rad(tonumber(id_brg)) + mag_variation_rad(nd_lat, nd_lon)
					else
						temp_brg = math.rad(tonumber(id_brg))
					end
					nd_dis = tonumber(id_dist) / 3440.064795					-- distance NM
					nd_lat2 = math.asin(math.sin(nd_lat)*math.cos(nd_dis) + math.cos(nd_lat)*math.sin(nd_dis)*math.cos(temp_brg))
					nd_lon2 = nd_lon + math.atan2(math.sin(temp_brg)*math.sin(nd_dis)*math.cos(nd_lat), math.cos(nd_dis)-math.sin(nd_lat)*math.sin(nd_lat2))
					
					for mm = 1, 99 do
						if string.len(id_nav) > 3 then
							id_nav = string.sub(id_nav, 1, 3)
						end
						id_nav_txt = id_nav .. string.format("%02d", mm)
						nd_lat = 1
						for kk = 1, legs_num2 do
							if legs_data2[kk][1] == id_nav_txt then
								nd_lat = 0
							end
						end
						for kk = 1, legs_data2_tmp_n do
							if legs_data2_tmp[kk][1] == id_nav_txt then
								nd_lat = 0
							end
						end
						if nd_lat == 1 then
							break
						end
					end
					
					legs_data2[legs_num2] = {}
					legs_data2[legs_num2][1] = id_nav_txt	--entry
					legs_data2[legs_num2][2] = 0		-- brg
					legs_data2[legs_num2][3] = 0		-- distance
					legs_data2[legs_num2][4] = 0		-- speed
					legs_data2[legs_num2][5] = 0		-- altitude
					legs_data2[legs_num2][6] = 0	-- altitude type
					legs_data2[legs_num2][7] = math.deg(nd_lat2)		-- latitude
					legs_data2[legs_num2][8] = math.deg(nd_lon2)		-- longitude
					legs_data2[legs_num2][9] = "DIRECT"			-- via id
					legs_data2[legs_num2][10] = 0		-- calc speed
					legs_data2[legs_num2][11] = 0		-- calc altitude
					legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
					legs_data2[legs_num2][13] = 0
					legs_data2[legs_num2][14] = 0		-- rest alt
					legs_data2[legs_num2][15] = 0		-- last fuel
					legs_data2[legs_num2][16] = "" --navaid_list[1][8]		-- reg code
					legs_data2[legs_num2][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
					legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
					legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
					legs_data2[legs_num2][20] = 0
					legs_data2[legs_num2][21] = -1
					legs_data2[legs_num2][22] = ""
					legs_data2[legs_num2][23] = 0
					legs_data2[legs_num2][24] = 0
					legs_data2[legs_num2][25] = 0
					legs_data2[legs_num2][26] = 0
					legs_data2[legs_num2][27] = ""
					legs_data2[legs_num2][28] = ""
					legs_data2[legs_num2][29] = ""
					legs_data2[legs_num2][30] = ""
					legs_data2[legs_num2][31] = ""
					legs_data2[legs_num2][32] = 0
					legs_data2[legs_num2][33] = ""
					legs_data2[legs_num2][34] = ""
					legs_data2[legs_num2][35] = ""
					legs_data2[legs_num2][36] = 4
					legs_data2[legs_num2][37] = 0
					legs_data2[legs_num2][38] = ""
					legs_data2[legs_num2][39] = ""
					legs_data2[legs_num2][40] = 0
					rte_lat = legs_data2[legs_num2][7]
					rte_lon = legs_data2[legs_num2][8]
					
					legs_data2[legs_num2-1][17] = legs_data2[legs_num2-1][17] + 100
					
					if add_disco == 1 then
						-- create discontinuity
						legs_num2 = legs_num2 + 1
						rte_add_disco(legs_num2)
					end
					
					ii = legs_num2 + 1
					rte_paste(ii)
					--if legs_num > 1 then
						legs_delete = 1
					--end
					calc_rte_enable2 = 1
				else
					--add_fmc_msg(INVALID_INPUT, 1)
					add_fmc_msg(INVALID_INPUT, 1)
				end
			else
				page_sel_wpt3 = 1
				page_legs = 0
				act_page_old = act_page
				act_page = 1
				wpt_id_paste = aaa
				wpt_id_nav_tmp = id_nav
				wpt_id_brg_tmp = id_brg
				wpt_id_dist_tmp = id_dist
			end
			
		else
			-- fmc_message_num = fmc_message_num + 1
			-- fmc_message[fmc_message_num] = NOT_IN_DATABASE
			add_fmc_msg(NOT_IN_DATABASE, 1)
		end
		entry = ""
	else
		--add_fmc_msg(INVALID_INPUT, 1)
		add_fmc_msg(INVALID_INPUT, 1)
	end
	

end

function rte_add_wpt4(wpt_idx)
	
	local kk = 0
	local mm = 0
	local nd_lat = 0
	local nd_lon = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local temp_brg = 0
	local nd_dis = 0
	local id_nav_txt = ""
	
	if wpt_idx <= navaid_list_n and wpt_idx ~= 0 then
			
			nd_lat = math.rad(navaid_list[wpt_idx][2])
			nd_lon = math.rad(navaid_list[wpt_idx][3])
			temp_brg = math.rad(tonumber(wpt_id_brg_tmp)) + mag_variation_rad(nd_lat, nd_lon)
			nd_dis = tonumber(wpt_id_dist_tmp) / 3440.064795					-- distance NM
			nd_lat2 = math.asin(math.sin(nd_lat)*math.cos(nd_dis) + math.cos(nd_lat)*math.sin(nd_dis)*math.cos(temp_brg))
			nd_lon2 = nd_lon + math.atan2(math.sin(temp_brg)*math.sin(nd_dis)*math.cos(nd_lat), math.cos(nd_dis)-math.sin(nd_lat)*math.sin(nd_lat2))
			
			for mm = 1, 99 do
				if string.len(wpt_id_nav_tmp) > 3 then
					wpt_id_nav_tmp = string.sub(wpt_id_nav_tmp, 1, 3)
				end
				id_nav_txt = wpt_id_nav_tmp .. string.format("%02d", mm)
				nd_lat = 1
				for kk = 1, legs_num2 do
					if legs_data2[kk][1] == id_nav_txt then
						nd_lat = 0
					end
				end
				for kk = 1, legs_data2_tmp_n do
					if legs_data2_tmp[kk][1] == id_nav_txt then
						nd_lat = 0
					end
				end
				if nd_lat == 1 then
					break
				end
			end
			
			legs_num2 = wpt_id_paste
			
			legs_data2[legs_num2] = {}
			legs_data2[legs_num2][1] = id_nav_txt	--entry
			legs_data2[legs_num2][2] = 0		-- brg
			legs_data2[legs_num2][3] = 0		-- distance
			legs_data2[legs_num2][4] = 0		-- speed
			legs_data2[legs_num2][5] = 0		-- altitude
			legs_data2[legs_num2][6] = 0	-- altitude type
			legs_data2[legs_num2][7] = math.deg(nd_lat2)		-- latitude
			legs_data2[legs_num2][8] = math.deg(nd_lon2)		-- longitude
			legs_data2[legs_num2][9] = "DIRECT"			-- via id
			legs_data2[legs_num2][10] = 0		-- calc speed
			legs_data2[legs_num2][11] = 0		-- calc altitude
			legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
			legs_data2[legs_num2][13] = 0
			legs_data2[legs_num2][14] = 0		-- rest alt
			legs_data2[legs_num2][15] = 0		-- last fuel
			legs_data2[legs_num2][16] = navaid_list[wpt_idx][8]		-- reg code
			legs_data2[legs_num2][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
			legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
			legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
			legs_data2[legs_num2][20] = 0
			legs_data2[legs_num2][21] = -1
			legs_data2[legs_num2][22] = ""
			legs_data2[legs_num2][23] = 0
			legs_data2[legs_num2][24] = 0
			legs_data2[legs_num2][25] = 0
			legs_data2[legs_num2][26] = 0
			legs_data2[legs_num2][27] = ""
			legs_data2[legs_num2][28] = ""
			legs_data2[legs_num2][29] = ""
			legs_data2[legs_num2][30] = ""
			legs_data2[legs_num2][31] = ""
			legs_data2[legs_num2][32] = 0
			legs_data2[legs_num2][33] = ""
			legs_data2[legs_num2][34] = ""
			legs_data2[legs_num2][35] = ""
			legs_data2[legs_num2][36] = navaid_list[wpt_idx][1]
			legs_data2[legs_num2][37] = 0
			legs_data2[legs_num2][38] = ""
			legs_data2[legs_num2][39] = ""
			legs_data2[legs_num2][40] = 0
			rte_lat = legs_data2[legs_num2][7]
			rte_lon = legs_data2[legs_num2][8]
			
			legs_data2[legs_num2-1][17] = legs_data2[legs_num2-1][17] + 100
			
			if add_disco == 1 then
				-- create discontinuity
				legs_num2 = legs_num2 + 1
				rte_add_disco(legs_num2)
			end
			
			rte_paste(legs_num2 + 1)
			calc_rte_enable2 = 1
	end
	page_sel_wpt3 = 0
	page_legs = 1
	act_page = act_page_old
	
end

function rte_add_wpt_cust(aaa, id_cust, lat_cust, lon_cust)

	local ii = aaa + 1
	local jj = legs_num2 + 1
	local kk = 0
	local ll = 0
	local mm = 0
	local nd_lat = 0
	local nd_lon = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local temp_brg = 0
	local nd_dis = 0
	local id_nav_txt = ""
	
	-- kk = tonumber(id_brg)
	-- if kk == nil then
		-- ll = 1
	-- end
	
	-- kk = tonumber(id_dist)
	-- if kk == nil then
		-- ll = 1
	-- end
	
	-- if ll == 0 then
		-- -- add WPT
		-- find_navaid(id_nav, "", 0, "")
		-- if navaid_list_n > 0 then
		
			if legs_data2[aaa][1] == "DISCONTINUITY" then
				rte_copy(ii)
				add_disco = 0
			else
				legs_data2[aaa][31] = "TF"
				rte_copy(aaa)
				if aaa == jj then
					add_disco = 0
				else
					add_disco = 1
				end
			end
			
			legs_num2 = aaa
			
			-- if navaid_list_n == 1 then
			
				
				-- nd_lat = math.rad(navaid_list[1][2])
				-- nd_lon = math.rad(navaid_list[1][3])
				-- temp_brg = math.rad(tonumber(id_brg)) + mag_variation_rad(nd_lat, nd_lon)
				-- nd_dis = tonumber(id_dist) / 3440.064795					-- distance NM
				-- nd_lat2 = math.asin(math.sin(nd_lat)*math.cos(nd_dis) + math.cos(nd_lat)*math.sin(nd_dis)*math.cos(temp_brg))
				-- nd_lon2 = nd_lon + math.atan2(math.sin(temp_brg)*math.sin(nd_dis)*math.cos(nd_lat), math.cos(nd_dis)-math.sin(nd_lat)*math.sin(nd_lat2))
				
				for mm = 1, 99 do
					if string.len(id_cust) > 3 then
						id_cust = string.sub(id_cust, 1, 3)
					end
					id_nav_txt = id_cust .. string.format("%02d", mm)
					nd_lat = 1
					for kk = 1, legs_num2 do
						if legs_data2[kk][1] == id_nav_txt then
							nd_lat = 0
						end
					end
					for kk = 1, legs_data2_tmp_n do
						if legs_data2_tmp[kk][1] == id_nav_txt then
							nd_lat = 0
						end
					end
					if nd_lat == 1 then
						break
					end
				end
				
				legs_data2[legs_num2] = {}
				legs_data2[legs_num2][1] = id_nav_txt	--entry
				legs_data2[legs_num2][2] = 0		-- brg
				legs_data2[legs_num2][3] = 0		-- distance
				legs_data2[legs_num2][4] = 0		-- speed
				legs_data2[legs_num2][5] = 0		-- altitude
				legs_data2[legs_num2][6] = 0	-- altitude type
				legs_data2[legs_num2][7] = lat_cust		-- latitude
				legs_data2[legs_num2][8] = lon_cust		-- longitude
				legs_data2[legs_num2][9] = "DIRECT"			-- via id
				legs_data2[legs_num2][10] = 0		-- calc speed
				legs_data2[legs_num2][11] = 0		-- calc altitude
				legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
				legs_data2[legs_num2][13] = 0
				legs_data2[legs_num2][14] = 0		-- rest alt
				legs_data2[legs_num2][15] = 0		-- last fuel
				legs_data2[legs_num2][16] = ""		-- reg code
				legs_data2[legs_num2][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
				legs_data2[legs_num2][20] = 0
				legs_data2[legs_num2][21] = -1
				legs_data2[legs_num2][22] = ""
				legs_data2[legs_num2][23] = 0
				legs_data2[legs_num2][24] = 0
				legs_data2[legs_num2][25] = 0
				legs_data2[legs_num2][26] = 0
				legs_data2[legs_num2][27] = ""
				legs_data2[legs_num2][28] = ""
				legs_data2[legs_num2][29] = ""
				legs_data2[legs_num2][30] = ""
				legs_data2[legs_num2][31] = ""
				legs_data2[legs_num2][32] = 0
				legs_data2[legs_num2][33] = ""
				legs_data2[legs_num2][34] = ""
				legs_data2[legs_num2][35] = ""
				legs_data2[legs_num2][36] = 4
				legs_data2[legs_num2][37] = 0
				legs_data2[legs_num2][38] = ""
				legs_data2[legs_num2][39] = ""
				legs_data2[legs_num2][40] = 0
				rte_lat = legs_data2[legs_num2][7]
				rte_lon = legs_data2[legs_num2][8]
				
				legs_data2[legs_num2-1][17] = legs_data2[legs_num2-1][17] + 100
				
				if add_disco == 1 then
					-- create discontinuity
					legs_num2 = legs_num2 + 1
					rte_add_disco(legs_num2)
				end
				
				ii = legs_num2 + 1
				rte_paste(ii)
				legs_delete = 1
				calc_rte_enable2 = 1
			
			-- else
				-- page_sel_wpt3 = 1
				-- page_legs = 0
				-- act_page_old = act_page
				-- act_page = 1
				-- wpt_id_nav_tmp = id_nav
				-- wpt_id_brg_tmp = id_brg
				-- wpt_id_dist_tmp = id_dist
			-- end
			
		-- else
			-- -- fmc_message_num = fmc_message_num + 1
			-- -- fmc_message[fmc_message_num] = NOT_IN_DATABASE
			-- add_fmc_msg(NOT_IN_DATABASE)
		-- end
		entry = ""
	-- else
		-- add_fmc_msg(INVALID_INPUT, 1)
	-- end
	
end


function rte_edit_hold(aaa)
	
	local kk = 0
	
	legs_data2[aaa][4] = new_hold_spd		-- speed
	legs_data2[aaa][5] = new_hold_alt		-- altitude
	if new_hold_turn == -1 then
		legs_data2[aaa][21] = 1
	else
		legs_data2[aaa][21] = new_hold_turn
	end
	
	kk = tonumber(new_hold_time)
	if kk == nil then
		kk = 0
	end
	legs_data2[aaa][25] = kk		-- hold lenght mins
	
	kk = tonumber(new_hold_dist)
	if kk == nil then
		kk = 0
	end
	legs_data2[aaa][26] = kk		-- hold lenght NM
	
	legs_data2[aaa][27] = ""
	legs_data2[aaa][28] = ""
	
	if new_hold_inbd == "---" then
		legs_data2[aaa][29] = "000"
	else
		legs_data2[aaa][29] = tostring(tonumber(new_hold_inbd) * 10)
	end
	
	if new_hold_time == "-.-" then
		if new_hold_dist == "--.-" then
			-- default 1.5 min
			legs_data2[aaa][30] = ""
		else
			kk = tonumber(new_hold_dist) * 10
			legs_data2[aaa][30] = string.format("%04d", kk)
		end
	else
		kk = tonumber(new_hold_time) * 10
		legs_data2[aaa][30] = "T" .. string.format("%03d", kk)
	end
	legs_data2[aaa][31] = "HM"	-- HOLD manual termination
	
	legs_delete = 1
	calc_rte_enable2 = 1
	
end

function rte_add_hold_old(aaa)

	local ii = aaa + 1
	local kk = 0
	
	-- new_hold_wpt = legs_data[item_sel][1]
	-- new_hold_spd = legs_data[item_sel][4]
	-- new_hold_alt = legs_data[item_sel][5]
	-- new_hold_inbd = "---"
	-- new_hold_turn = -1
	-- new_hold_time = "-.-"
	-- new_hold_dist = "--.-"
	-- new_hold_rc = legs_data[item_sel][16]
	-- new_hold_via = legs_data[item_sel][9]
	-- new_hold_lat = legs_data[item_sel][7]
	-- new_hold_lon = legs_data[item_sel][8]
	
	-- add WPT
	
	if new_hold_wpt == "PPOS" then
		rte_copy(offset)
		legs_num2 = offset
		new_hold_lat = simDR_latitude
		new_hold_lon = simDR_longitude
		new_hold_spd = simDR_airspeed_pilot
		new_hold_alt = simDR_altitude_pilot
	else
		rte_copy(aaa + 1)
		legs_num2 = aaa + 1
	end
	
	legs_data2[legs_num2] = {}
	legs_data2[legs_num2][1] = new_hold_wpt	--entry
	legs_data2[legs_num2][2] = 0		-- brg
	legs_data2[legs_num2][3] = 0		-- distance
	legs_data2[legs_num2][4] = new_hold_spd		-- speed
	legs_data2[legs_num2][5] = new_hold_alt		-- altitude
	legs_data2[legs_num2][6] = 0	-- altitude type
	legs_data2[legs_num2][7] = new_hold_lat		-- latitude
	legs_data2[legs_num2][8] = new_hold_lon		-- longitude
	legs_data2[legs_num2][9] = new_hold_via			-- via id
	legs_data2[legs_num2][10] = 0		-- calc speed
	legs_data2[legs_num2][11] = 0		-- calc altitude
	legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
	legs_data2[legs_num2][13] = 0
	legs_data2[legs_num2][14] = 0		-- rest alt
	legs_data2[legs_num2][15] = 0		-- last fuel
	legs_data2[legs_num2][16] = new_hold_rc		-- reg code
	legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
	legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
	legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
	legs_data2[legs_num2][20] = 0
	if new_hold_turn == -1 then
		legs_data2[legs_num2][21] = 1
	else
		legs_data2[legs_num2][21] = new_hold_turn
	end
	legs_data2[legs_num2][22] = ""
	legs_data2[legs_num2][23] = 0
	legs_data2[legs_num2][24] = 0
	
	kk = tonumber(new_hold_time)
	if kk == nil then
		kk = 0
	end
	legs_data2[legs_num2][25] = kk		-- hold lenght mins
	
	kk = tonumber(new_hold_dist)
	if kk == nil then
		kk = 0
	end
	legs_data2[legs_num2][26] = kk		-- hold lenght NM
	
	legs_data2[legs_num2][27] = ""
	legs_data2[legs_num2][28] = ""
	
	if new_hold_inbd == "---" then
		legs_data2[legs_num2][29] = "0000"
	else
		legs_data2[legs_num2][29] = tostring(tonumber(new_hold_inbd) * 10)
	end
	
	if new_hold_time == "-.-" then
		if new_hold_dist == "--.-" then
			-- default 1.5 min
			legs_data2[legs_num2][30] = ""
		else
			kk = tonumber(new_hold_dist) * 10
			legs_data2[legs_num2][30] = string.format("%04d", kk)
		end
	else
		kk = tonumber(new_hold_time) * 10
		legs_data2[legs_num2][30] = "T" .. string.format("%03d", kk)
	end
	--legs_data2[legs_num2][30] = ""
	legs_data2[legs_num2][31] = "HM"	-- HOLD manual termination
	legs_data2[legs_num2][32] = 0
	legs_data2[legs_num2][33] = ""
	legs_data2[legs_num2][34] = ""
	legs_data2[legs_num2][35] = ""
	legs_data2[legs_num2][36] = 0
	legs_data2[legs_num2][37] = 0
	legs_data2[legs_num2][38] = ""
	legs_data2[legs_num2][39] = ""
	legs_data2[legs_num2][40] = 0
	rte_lat = legs_data2[legs_num2][7]
	rte_lon = legs_data2[legs_num2][8]
	
	ii = legs_num2 + 1
	rte_paste(ii)
	--legs_delete = 1
	calc_rte_enable2 = 1

end

function rte_add_hold(aaa)

	local ii = aaa + 1
	local kk = 0
	
	-- new_hold_wpt = legs_data[item_sel][1]
	-- new_hold_spd = legs_data[item_sel][4]
	-- new_hold_alt = legs_data[item_sel][5]
	-- new_hold_inbd = "---"
	-- new_hold_turn = -1
	-- new_hold_time = "-.-"
	-- new_hold_dist = "--.-"
	-- new_hold_rc = legs_data[item_sel][16]
	-- new_hold_via = legs_data[item_sel][9]
	-- new_hold_lat = legs_data[item_sel][7]
	-- new_hold_lon = legs_data[item_sel][8]
	
	-- add WPT
	
	-- if new_hold_wpt == "PPOS" then
		-- rte_copy(offset)
		-- legs_num2 = offset
		-- new_hold_lat = simDR_latitude
		-- new_hold_lon = simDR_longitude
		-- new_hold_spd = simDR_airspeed_pilot
		-- new_hold_alt = simDR_altitude_pilot
	-- else
		rte_copy(ii)
		legs_num2 = ii
	-- end
	
	legs_data2[legs_num2] = {}
	legs_data2[legs_num2][1] = legs_data2[aaa][1]	--entry
	legs_data2[legs_num2][2] = 0		-- brg
	legs_data2[legs_num2][3] = 0		-- distance
	legs_data2[legs_num2][4] = legs_data2[aaa][10]		-- calc speed
	if legs_data2[aaa][4] > 0 then
		legs_data2[legs_num2][4] = legs_data2[aaa][4]		-- speed
	end
	legs_data2[legs_num2][5] = legs_data2[aaa][11]		-- altitude
	legs_data2[legs_num2][6] = 0						-- altitude type
	if legs_data2[aaa][5] > 0 then
		legs_data2[legs_num2][5] = legs_data2[aaa][5]		-- altitude
		legs_data2[legs_num2][6] = legs_data2[aaa][6]	-- altitude type
	end
	legs_data2[legs_num2][7] = legs_data2[aaa][7]		-- latitude
	legs_data2[legs_num2][8] = legs_data2[aaa][8]		-- longitude
	legs_data2[legs_num2][9] = legs_data2[aaa][9]			-- via id
	legs_data2[legs_num2][10] = 0		-- calc speed
	legs_data2[legs_num2][11] = 0		-- calc altitude
	legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
	legs_data2[legs_num2][13] = 0
	legs_data2[legs_num2][14] = 0		-- rest alt
	legs_data2[legs_num2][15] = 0		-- last fuel
	legs_data2[legs_num2][16] = legs_data2[aaa][16]		-- reg code
	legs_data2[legs_num2][17] = 100		-- spd flag 0-default restrict, 1-custom restrict
	legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
	legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
	legs_data2[legs_num2][20] = 0
	legs_data2[legs_num2][21] = 1		-- 0-L, 1-R, default turn R
	legs_data2[legs_num2][22] = ""
	legs_data2[legs_num2][23] = 0
	legs_data2[legs_num2][24] = 0
	legs_data2[legs_num2][25] = 0		-- hold lenght mins
	legs_data2[legs_num2][26] = 0		-- hold lenght NM
	
	legs_data2[legs_num2][27] = ""
	legs_data2[legs_num2][28] = ""
	
	legs_data2[legs_num2][29] = string.format("%04d", (math.deg(legs_data2[aaa][2]) * 10)) 	-- inbound crs
	legs_data2[legs_num2][30] = ""
	
	legs_data2[legs_num2][31] = "HM"	-- HOLD manual termination
	legs_data2[legs_num2][32] = 0
	legs_data2[legs_num2][33] = ""
	legs_data2[legs_num2][34] = ""
	legs_data2[legs_num2][35] = ""
	legs_data2[legs_num2][36] = 0
	legs_data2[legs_num2][37] = 0
	legs_data2[legs_num2][38] = ""
	legs_data2[legs_num2][39] = ""
	legs_data2[legs_num2][40] = 0
	rte_lat = legs_data2[legs_num2][7]
	rte_lon = legs_data2[legs_num2][8]
	
	
	ii = legs_num2 + 1
	rte_paste(ii)
	--legs_delete = 1
	hold_exec = 1
	--calc_rte_enable2 = 1
	--dump_fpln2()
	
	-- create hold data
	new_hold_idx = 0
	hold_data_num2 = 0
	hold_data2 = {}
	for ii = 1, legs_num2 do
		if legs_data2[ii][31] == "HA" or legs_data2[ii][31] == "HF" or legs_data2[ii][31] == "HM" then
			hold_data_num2 = hold_data_num2 + 1
			hold_data2[hold_data_num2] = ii
			if legs_data2[ii][17] == 100 then
				new_hold_idx = hold_data_num2
			end
		end
	end
	
	-- act_page = new_hold_idx
	-- if act_page == 0 then
		-- act_page = 1
	-- end
	-- if act_page > max_page then
		-- act_page = max_page
	-- end
	--dump_fpln2()

end

function rte_add_disco(aaa)
	
	-- create DISCONTINUITY
	legs_num2 = aaa
	legs_data2[aaa] = {}
	legs_data2[aaa][1] = "DISCONTINUITY"
	legs_data2[aaa][2] = 0		-- brg
	legs_data2[aaa][3] = 0		-- distance
	legs_data2[aaa][4] = 0		-- speed
	legs_data2[aaa][5] = 0		-- altitude
	legs_data2[aaa][6] = 0	-- altitude type
	legs_data2[aaa][7] = rte_lat		-- latitude
	legs_data2[aaa][8] = rte_lon		-- longitude
	legs_data2[aaa][9] = ""			-- via id
	legs_data2[aaa][10] = 0		-- calc speed
	legs_data2[aaa][11] = 0		-- calc altitude
	legs_data2[aaa][12] = 0		-- calc altitude vnav pth
	legs_data2[aaa][13] = 0
	legs_data2[aaa][14] = 0		-- rest alt
	legs_data2[aaa][15] = 0		-- last fuel
	legs_data2[aaa][16] = ""
	legs_data2[aaa][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
	legs_data2[aaa][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
	legs_data2[aaa][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
	legs_data2[aaa][20] = 0
	legs_data2[aaa][21] = -1
	legs_data2[aaa][22] = ""
	legs_data2[aaa][23] = 0
	legs_data2[aaa][24] = 0
	legs_data2[aaa][25] = 0
	legs_data2[aaa][26] = 0
	legs_data2[aaa][27] = ""
	legs_data2[aaa][28] = ""
	legs_data2[aaa][29] = ""
	legs_data2[aaa][30] = ""
	legs_data2[aaa][31] = ""
	legs_data2[aaa][32] = 0
	legs_data2[aaa][33] = ""
	legs_data2[aaa][34] = ""
	legs_data2[aaa][35] = ""
	legs_data2[aaa][36] = 0
	legs_data2[aaa][37] = 0
	legs_data2[aaa][38] = ""
	legs_data2[aaa][39] = ""
	legs_data2[aaa][40] = 0
	
end


-- function rte_add_sid()
	
	-- local ii = 0
	-- local gg = 0
	-- local gg2 = 0
	-- local xx_temp = 0
	-- local rnw_ok  = 0
	-- local rnw_added = 0
	-- local rnw_txt = ""
	-- local rnw_txt2 = ""
	-- local add_ok = 0
	-- local tns_ok = 0
	-- local disco_status = 0
	
	-- local temp_str = ""
	-- local jj = 0
	-- local add_wpt = 0
	
	-- --delete previous SID
	-- rte_del_spec(1)
	
	-- rte_lat = 0
	-- rte_lon = 0
	
	-- --add RWxx
	-- if rnw_data_num > 0 then
		-- for ii = 1, rnw_data_num do
			-- if ref_icao_x == rnw_data[ii][1] and ref_rwy2 == rnw_data[ii][2] then
	-- -- if rwy_num > 0 then
		-- -- for ii = 1, rwy_num do
			-- -- temp_str = ref_data[ii][1]
			-- -- if string.sub(temp_str, -1, -1) == " " then
				-- -- temp_str = string.sub(temp_str, 1, -2)
			-- -- end
			-- -- if ref_rwy2 == temp_str then
				-- if add_ok == 0 and rnw_added == 0 then
					-- if legs_data2[2][1] == "DISCONTINUITY" then
						-- rte_copy(3)
					-- else
						-- rte_copy(2)
					-- end
					-- rnw_added = 1
					-- legs_num2 = 2
					-- legs_data2[legs_num2] = {}
					-- legs_data2[legs_num2][1] = "RW" .. ref_rwy2
					-- legs_data2[legs_num2][2] = math.rad((rnw_data[ii][8]+ mag_variation_deg(rnw_data[ii][3], rnw_data[ii][4])) % 360)		-- brg
					-- -- legs_data2[legs_num2][2] = math.rad((ref_data[ii][6]+ mag_variation_deg(ref_data[ii][4], ref_data[ii][5])) % 360)		-- brg
					-- legs_data2[legs_num2][3] = 0		-- distance
					-- legs_data2[legs_num2][4] = 0		-- speed
					-- legs_data2[legs_num2][5] = 0		-- altitude
					-- legs_data2[legs_num2][6] = 0	-- altitude type
					-- legs_data2[legs_num2][7] = rnw_data[ii][3]		-- latitude
					-- legs_data2[legs_num2][8] = rnw_data[ii][4]		-- longitude
					-- -- legs_data2[legs_num2][7] = ref_data[ii][4]		-- latitude
					-- -- legs_data2[legs_num2][8] = ref_data[ii][5]		-- longitude
					-- legs_data2[legs_num2][9] = ref_icao_x			-- via id
					-- legs_data2[legs_num2][10] = 0		-- calc speed
					-- legs_data2[legs_num2][11] = ref_icao_alt		-- calc altitude
					-- legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
					-- legs_data2[legs_num2][13] = 0
					-- legs_data2[legs_num2][14] = 0		-- rest alt
					-- legs_data2[legs_num2][15] = 0		-- last fuel
					-- legs_data2[legs_num2][16] = ""
					-- legs_data2[legs_num2][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
					-- legs_data2[legs_num2][18] = math.rad(rnw_data[ii][8])
					-- -- legs_data2[legs_num2][18] = math.rad(ref_data[ii][6])
					-- legs_data2[legs_num2][19] = 1		-- 0-none, 1-SID, 2-STAR, 3-APP
					-- legs_data2[legs_num2][20] = 0
					-- legs_data2[legs_num2][21] = -1
					-- legs_data2[legs_num2][22] = ""
					-- legs_data2[legs_num2][23] = 0
					-- legs_data2[legs_num2][24] = 0
					-- legs_data2[legs_num2][25] = 0
					-- legs_data2[legs_num2][26] = 0
					-- legs_data2[legs_num2][27] = ""
					-- legs_data2[legs_num2][28] = ""
					-- legs_data2[legs_num2][29] = ""
					-- legs_data2[legs_num2][30] = ""
					-- legs_data2[legs_num2][31] = ""
					-- legs_data2[legs_num2][32] = 0
					-- legs_data2[legs_num2][33] = ""
					-- legs_data2[legs_num2][34] = ""
					-- legs_data2[legs_num2][35] = ""
					-- legs_data2[legs_num2][36] = 4
					-- legs_data2[legs_num2][37] = 0
					-- break
				-- end
			-- end
		-- end
	-- end
	-- --dump_leg()
	
	-- -- add SID
	-- if rte_sid_num > 0 then
		
		-- rte_lat = 0
		-- rte_lon = 0
		-- if ref_sid2 ~= "------" then
			-- for gg = 1, rte_sid_num do
				-- rnw_ok = 0
				-- rnw_txt = "RW" .. ref_rwy2
				-- rnw_txt2 = "RW"
				-- if rte_sid[gg][2] == "ALL" or rte_sid[gg][2] == "" then
					-- rnw_ok = 1
				-- end
				-- if rte_sid[gg][2] == rnw_txt then
					-- rnw_ok = 1
				-- end
				
				-- -- RWxxB -> L, R, C
				-- if string.sub(rte_sid[gg][2], -1, -1) == "B" then
					-- if string.len(rnw_txt) > 4 then
						-- rnw_txt2 = string.sub(rnw_txt, 1, -2)
					-- end
					-- if string.sub(rte_sid[gg][2], 1, -2) == rnw_txt2 then
						-- rnw_ok = 1
					-- end
				-- end
				
				-- tns_ok = 0
				-- if rte_sid[gg][2] == ref_sid_tns2 then
					-- tns_ok = 1
				-- end
				
				
				-- if rte_sid[gg][1] == ref_sid2 then --and string.sub(rte_sid[gg][3], 1, 2) ~= "RW" then
					-- if rnw_ok == 1 or tns_ok == 1 then
						
						-- add_wpt = 0
						
						-- ii = 0
						-- if gg > 1 then
							-- if rte_sid[gg-1][15] == "CI" or rte_sid[gg-1][15] == "VI" then
								-- ii = 1
							-- end
						-- end
						
						-- if rte_sid[gg][15] == "IF" and ii == 0 then
							-- disco_status = 1
							-- if legs_data2[legs_num2][19] == 1 or legs_data2[legs_num2][19] == 3 then
								-- disco_status = 0
							-- end
							-- if disco_status == 0 then
								-- -- if legs_data2[legs_num2-1][19] == 1 then
									-- -- legs_data2[legs_num2][19] = 1	-- SID before STAR
								-- -- else
									-- -- legs_data2[legs_num2][19] = 3	-- SID before RTE
								-- -- end
								-- if rte_sid[gg][3] == legs_data2[legs_num2][1] and rte_sid[gg][3] ~= "" then
									-- if legs_data2[legs_num2][1] == "VECTOR" and rte_sid[gg][3] == legs_data2[legs_num2-1][1] then
										-- -- skip VECTOR
										-- legs_num2 = legs_num2 - 1
									-- end
									-- -- if legs_data2[legs_num2][19] ~= 1 then
										-- -- legs_data2[legs_num2][19] = 3	-- SID before RTE
									-- -- end
									-- -- change ALT, SPD restrict,..
									-- xx_temp = tonumber(rte_sid[gg][4])
									-- if xx_temp == nil then
										-- xx_temp = 0
									-- end
									-- legs_data2[legs_num2][4] = xx_temp		-- speed
									-- if string.sub(rte_sid[gg][5], 1, 2) == "FL" then
										-- xx_temp = tonumber(string.sub(rte_sid[gg][5], 3, -1)) * 100
									-- else
										-- xx_temp = tonumber(rte_sid[gg][5])
									-- end
									-- if xx_temp == nil then
										-- xx_temp = 0
									-- end
									-- legs_data2[legs_num2][5] = xx_temp		-- altitude
									-- xx_temp = 0
									-- if rte_sid[gg][6] == "+" then
										-- xx_temp = 43
									-- elseif rte_sid[gg][6] == "-" then
										-- xx_temp = 45
									-- end
									-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
								-- else
									-- add_wpt = 1
								-- end
							-- else
								-- if add_ok == 0 and rnw_added == 0 then
									-- if legs_data2[2][1] == "DISCONTINUITY" then
										-- rte_copy(3)
									-- else
										-- rte_copy(2)
									-- end
									-- legs_num2 = 1
								-- end
								-- if legs_data2[legs_num2][1] ~= "DISCONTINUITY" then
									-- -- if add_ok == 0 then
										-- -- rte_copy(legs_num2 + 1)
										-- -- add_ok = 1
									-- -- end
									-- -- create DISCONTINUITY
									-- legs_num2 = legs_num2 + 1
									-- rte_add_disco(legs_num2)
									-- -- add waypoint
									-- add_wpt = 1
								-- end
							-- end
						-- else
							-- if add_ok == 0 and rnw_added == 0 then
								-- if legs_data2[2][1] == "DISCONTINUITY" then
									-- rte_copy(3)
								-- else
									-- rte_copy(2)
								-- end
								-- legs_num2 = 1
								-- --add_ok = 1
							-- end
							-- -- if add_ok == 0 then
								-- -- rte_copy(legs_num2 + 1)
								-- -- add_ok = 1
							-- -- end
							-- -- add waypoint
							-- add_wpt = 1
						-- end
						
						-- if add_wpt == 1 then
							-- add_ok = 1
							-- legs_num2 = legs_num2 + 1
							-- legs_data2[legs_num2] = {}
							-- if rte_sid[gg][3] == legs_data2[legs_num2-1][1] then
								-- if rte_sid[gg][15] == "VM" or rte_sid[gg][15] == "FM" then		-- VECTOR
									-- -- VECTOR
									-- legs_data2[legs_num2][1] = "VECTOR"	-- id WPT
								-- elseif rte_sid[gg][15] == "HA" or rte_sid[gg][15] == "HF" or rte_sid[gg][15] == "HM" then
									-- -- HOLD
									-- legs_data2[legs_num2][1] = rte_sid[gg][3]
								-- elseif string.sub(rte_sid[gg][15], 2, 2) == "A" then
									-- -- (1000)
									-- jj = tonumber(rte_sid[gg][5])
									-- if jj == nil then
										-- legs_data2[legs_num2][1] = "(----)"	-- id WPT
									-- else
										-- legs_data2[legs_num2][1] = "(" .. tostring(jj) .. ")"
									-- end
								-- elseif rte_sid[gg][15] == "PI" then
									-- -- Proc Turn
									-- legs_data2[legs_num2][1] = rte_sid[gg][3]	-- id WPT
								-- elseif string.sub(rte_sid[gg][15], 2, 2) == "I" then
									-- -- (INTC)
									-- legs_data2[legs_num2][1] = "(INTC)"	-- id WPT
								-- elseif rte_sid[gg][15] == "CF" then
									-- -- (INTC)
									-- legs_data2[legs_num2][1] = "(INTC)"	-- id WPT
								-- elseif string.sub(rte_sid[gg][15], 2, 2) == "R" then
									-- --(ABC180)
									-- jj = tonumber(rte_sid[gg][11])
									-- temp_str = ""
									-- if jj ~= nil then
										-- jj = jj / 10
										-- temp_str = string.format("%03d", jj)
									-- else
										-- temp_str = "000"
									-- end
									-- legs_data2[legs_num2][1] = "(" .. rte_sid[gg][13] .. temp_str .. ")"
								-- elseif string.sub(rte_sid[gg][15], 2, 2) == "D" then
									-- --(ABC-10)
									-- jj = tonumber(rte_sid[gg][10])
									-- temp_str = ""
									-- if jj ~= nil then
										-- jj = jj / 10
										-- temp_str = string.format("%02d", jj)
									-- else
										-- temp_str = "00"
									-- end
									-- legs_data2[legs_num2][1] = "(" .. rte_sid[gg][13] .. "-" .. temp_str .. ")"
								-- elseif rte_sid[gg][15] == "FC" then
									-- --(ABC)
									-- legs_data2[legs_num2][1] = "(" .. rte_sid[gg][3]  .. ")"
								-- else
									-- if (rte_sid[gg][22] == 0 and legs_data2[legs_num2-1][32] < 10) 
									-- or (rte_sid[gg][22] == 1 and legs_data2[legs_num2-1][32] > 9 and legs_data2[legs_num2-1][32] < 20) 
									-- or (rte_sid[gg][22] == 2 and legs_data2[legs_num2-1][32] > 19) then
										-- legs_data2[legs_num2][1] = "(----)"	-- id WPT
									-- else
										-- legs_data2[legs_num2][1] = rte_sid[gg][3]
									-- end
									-- --legs_data2[legs_num2][1] = "(----)"	-- id WPT
								-- end
							-- else
								-- legs_data2[legs_num2][1] = rte_sid[gg][3]	-- id WPT
							-- end
							-- xx_temp = tonumber(rte_sid[gg][7])
							-- if xx_temp == nil then
								-- xx_temp = 0
							-- end
							-- xx_temp = xx_temp / 10
							-- legs_data2[legs_num2][2] = math.rad(xx_temp)		-- brg
							-- legs_data2[legs_num2][3] = 0		-- distance
							
							-- if rte_sid[gg][15] == "HA" or rte_sid[gg][15] == "HF" or rte_sid[gg][15] == "HM" then
								-- -- HOLD
								-- xx_temp = tonumber(rte_sid[gg][4])
								-- if xx_temp == nil then
									-- xx_temp = legs_data2[legs_num2-1][4]
								-- end
								-- legs_data2[legs_num2][4] = xx_temp		-- speed
								
								-- if string.sub(rte_sid[gg][5], 1, 2) == "FL" then
									-- xx_temp = tonumber(string.sub(rte_sid[gg][5], 3, -1)) * 100
								-- else
									-- xx_temp = tonumber(rte_sid[gg][5])
								-- end
								-- if xx_temp == nil then
									-- legs_data2[legs_num2][5] = legs_data2[legs_num2-1][5]
									-- legs_data2[legs_num2][6] = legs_data2[legs_num2-1][6]
								-- else
									-- legs_data2[legs_num2][5] = xx_temp		-- altitude
									-- xx_temp = 0
									-- if rte_sid[gg][6] == "+" then
										-- xx_temp = 43
									-- elseif rte_sid[gg][6] == "-" then
										-- xx_temp = 45
									-- end
									-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
								-- end
							-- else
								-- xx_temp = tonumber(rte_sid[gg][4])
								-- if xx_temp == nil then
									-- xx_temp = 0
								-- end
								-- legs_data2[legs_num2][4] = xx_temp		-- speed
								-- xx_temp = tonumber(rte_sid[gg][5])
								-- if xx_temp == nil then
									-- xx_temp = 0
								-- end
								-- if string.sub(rte_sid[gg][5], 1, 2) == "FL" then
									-- xx_temp = tonumber(string.sub(rte_sid[gg][5], 3, -1)) * 100
								-- else
									-- xx_temp = tonumber(rte_sid[gg][5])
								-- end
								-- if xx_temp == nil then
									-- xx_temp = 0
								-- end
								-- legs_data2[legs_num2][5] = xx_temp		-- altitude
								-- xx_temp = 0
								-- if rte_sid[gg][6] == "+" then
									-- xx_temp = 43
								-- elseif rte_sid[gg][6] == "-" then
									-- xx_temp = 45
								-- end
								-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
							-- end
							-- legs_data2[legs_num2][7] = 0		-- latitude
							-- legs_data2[legs_num2][8] = 0		-- longitude
							-- legs_data2[legs_num2][9] = ref_sid2			-- via id
							-- legs_data2[legs_num2][10] = 0		-- calc speed
							-- legs_data2[legs_num2][11] = 0		-- calc altitude
							-- legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
							-- legs_data2[legs_num2][13] = 0
							-- legs_data2[legs_num2][14] = 0		-- rest alt
							-- legs_data2[legs_num2][15] = 0		-- last fuel
							-- legs_data2[legs_num2][16] = rte_sid[gg][12]
							-- legs_data2[legs_num2][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
							-- legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
							-- legs_data2[legs_num2][19] = 1		-- 0-none, 1-SID, 2-STAR, 3-APP
							-- xx_temp = tonumber(rte_sid[gg][8])
							-- if xx_temp == nil then
								-- legs_data2[legs_num2][20] = 0	-- vpa
							-- else
								-- legs_data2[legs_num2][20] = xx_temp / 100	-- vpa
							-- end
							-- legs_data2[legs_num2][21] = rte_sid[gg][9]
							-- legs_data2[legs_num2][22] = rte_sid[gg][18]
							-- legs_data2[legs_num2][23] = 0
							-- legs_data2[legs_num2][24] = 0
							-- legs_data2[legs_num2][25] = 0
							-- legs_data2[legs_num2][26] = 0
							-- legs_data2[legs_num2][27] = rte_sid[gg][13]
							-- legs_data2[legs_num2][28] = rte_sid[gg][14]
							-- legs_data2[legs_num2][29] = rte_sid[gg][11]
							-- legs_data2[legs_num2][30] = rte_sid[gg][10]
							-- legs_data2[legs_num2][31] = rte_sid[gg][15]
							-- legs_data2[legs_num2][32] = rte_sid[gg][16]
							-- if rte_sid[gg][22] == 1 then
								-- legs_data2[legs_num2][32] = legs_data2[legs_num2][32] + 10
							-- elseif rte_sid[gg][22] == 2 then
								-- legs_data2[legs_num2][32] = legs_data2[legs_num2][32] + 20
							-- end
							-- legs_data2[legs_num2][33] = rte_sid[gg][19]
							-- legs_data2[legs_num2][34] = rte_sid[gg][20]
							-- legs_data2[legs_num2][35] = rte_sid[gg][21]
							-- legs_data2[legs_num2][36] = 0
							-- legs_data2[legs_num2][37] = 0
						-- end
					-- end
				-- end
			-- end
		-- end
	-- end
	-- if add_ok == 1 or rnw_added == 1 then
		-- if legs_data2_tmp[1][1] ~= legs_data2[legs_num2][1] and legs_data2_tmp_n > 1 
		-- and legs_data2_tmp[1][1] ~= "DISCONTINUITY" then
			-- if legs_data2_tmp[1][9] ~= "DIRECT" then
				-- -- create DISCONTINUITY
				-- legs_num2 = legs_num2 + 1
				-- rte_add_disco(legs_num2)
				-- rte_paste(legs_num2 + 1)
			-- else
				-- rte_paste(legs_num2 + 1)
			-- end
		-- else
			-- if legs_data2_tmp[1][1] == legs_data2[legs_num2][1] then
				-- -- change to SID
				-- legs_data2_tmp[1][9] = ref_sid2
				-- legs_data2_tmp[1][19] = 3
				-- ---
				-- rte_paste(legs_num2)
			-- else
				-- rte_paste(legs_num2 + 1)
			-- end
		-- end
	-- end
	
	-- --B738_legs_num2 = legs_num2
	-- --offset = 1
	
	-- --dump_leg()
	-- --dump_sid()
-- end

-- --function rte_add_star_app()

-- function rte_add_star()
	
	-- local ii = 0
	-- local jj = 0
	-- local kk = 0
	-- local gg = 0
	-- local gg2 = 0
	-- local xx_temp = 0
	-- local rnw_ok  = 0
	-- local rnw_txt = ""
	-- local rnw_txt2 = ""
	-- local add_ok = 0
	-- local tns_ok = 0
	-- local disco_status = 0
	-- local only_one_star = 0
	-- --local app_idx = 0
	-- local add_wpt = 0
	
	-- local temp_str = ""
	-- ---
	-- -- local vvv = 0
	-- -- local fms_line = ""
	
	-- -- local file_name2 = "legs.txt"
	-- -- local file_navdata2 = io.open(file_name2, "w")
	-- ----
	
	-- --delete previous STAR
	-- --rte_del_spec(2)
	
	-- --delete previous STAR, APP
	-- rte_del_spec(99)
	
	-- add_star = 1	-- info for APP
	
	-- --dump_leg()
	-- rte_lat = 0
	-- rte_lon = 0
	
	
	-- -- add STAR and TRANS STAR
	-- if rte_star_num > 0 then
		
		-- if des_star2 ~= "------" then
			
			-- -- for gg = 1, legs_num2 do
				-- -- if legs_data2[gg][19] == 7 or legs_data2[gg][19] == 8 then
					-- -- app_idx = gg
					-- -- break
				-- -- end
			-- -- end
			-- -- if app_idx == 0 then
				-- -- app_idx = legs_num2
				-- -- rte_copy(legs_num2 + 1)
			-- -- else
				-- -- rte_copy(app_idx)
			-- -- end
			
			-- --app_idx = legs_num2
			
			-- if rte_star_num > 1 then
				-- for gg = 1, rte_star_num do
					-- if rte_star[gg][1] == des_star2 then
						-- if rnw_ok == 0 then
							-- rnw_txt = rte_star[gg][2]
							-- rnw_ok = 1
							-- only_one_star = 1
						-- else
							-- if rte_star[gg][2] ~= " " then
								-- if rte_star[gg][2] ~= rnw_txt then
									-- only_one_star = 0
								-- end
							-- end
						-- end
					-- end
				-- end
			-- end
			
			-- rnw_ok = 0
			-- for gg = 1, rte_star_num do
				-- rnw_ok = 0
				-- rnw_txt = "RW"
				-- rnw_txt2 = "RW"
				-- if des_app2 ~= "------" then
					-- if string.len(des_app2) > 4 then
						-- jj, kk = string.find(des_app2, "-")
						-- if jj == nil then
							-- rnw_txt = rnw_txt .. string.sub(des_app2, 2, -2)
						-- else
							-- rnw_txt = rnw_txt .. string.sub(des_app2, 2, jj-1)
						-- end
					-- else
						-- rnw_txt = rnw_txt .. string.sub(des_app2, 2, -1)
					-- end
				-- end
				-- -- RWxx
				-- if rte_star[gg][2] == rnw_txt then
					-- rnw_ok = 1
				-- end
				
				-- -- RWxxB -> L, R, C
				-- if string.sub(rte_star[gg][2], -1, -1) == "B" then
					-- if string.len(rnw_txt) > 4 then
						-- rnw_txt2 = string.sub(rnw_txt, 1, -2)
					-- end
					-- if string.sub(rte_star[gg][2], 1, -2) == rnw_txt2 then
						-- rnw_ok = 1
					-- end
				-- end
				
				-- -- ALL
				-- if rte_star[gg][2] == "ALL" or rte_star[gg][2] == " " then
					-- rnw_ok = 1
				-- end
				
				-- tns_ok = 0
				-- if rte_star[gg][2] == des_star_trans2 then
					-- tns_ok = 1
				-- end
				
				-- if rte_star[gg][1] == des_star2 then
					-- if rnw_ok == 1 or tns_ok == 1 or only_one_star == 1 then
						
						-- add_wpt = 0
						
						-- ii = 0
						-- if gg > 1 then
							-- if rte_star[gg-1][15] == "CI" or rte_star[gg-1][15] == "VI" then
								-- ii = 1
							-- end
						-- end
						
						-- if rte_star[gg][15] == "IF" and ii == 0 then
							-- disco_status = 1
							-- if legs_data2[legs_num2][19] == 2 or legs_data2[legs_num2][19] == 4 then
								-- disco_status = 0
							-- elseif legs_data2[legs_num2][19] == 10 then
								-- disco_status = 0
							-- else
								-- if legs_data2[legs_num2][1] == rte_star[gg][3] then
									-- disco_status = 0
								-- end
							-- end
							
							-- if disco_status == 0 then
								-- -- if legs_data2[legs_num2][19] == 2 then
									-- -- legs_data2[legs_num2][19] = 2	-- STAR APP before STAR
								-- -- else
									-- -- legs_data2[legs_num2][19] = 4	-- STAR APP before RTE
								-- -- end
								-- if rte_star[gg][3] == legs_data2[legs_num2][1] and rte_star[gg][3] ~= "" then
									-- if legs_data2[legs_num2][1] == "VECTOR" and rte_star[gg][3] == legs_data2[legs_num2-1][1] then
										-- -- skip VECTOR
										-- legs_num2 = legs_num2 - 1
									-- end
									-- if legs_data2[legs_num2][19] ~= 2 and legs_data2[legs_num2][19] ~= 10 then
										-- legs_data2[legs_num2][19] = 4	-- STAR APP before RTE
									-- end
									-- -- change ALT, SPD restrict,..
									-- xx_temp = tonumber(rte_star[gg][4])
									-- if xx_temp == nil then
										-- xx_temp = 0
									-- end
									-- legs_data2[legs_num2][4] = xx_temp		-- speed
									-- if string.sub(rte_star[gg][5], 1, 2) == "FL" then
										-- xx_temp = tonumber(string.sub(rte_star[gg][5], 3, -1)) * 100
									-- else
										-- xx_temp = tonumber(rte_star[gg][5])
									-- end
									-- if xx_temp == nil then
										-- xx_temp = 0
									-- end
									-- legs_data2[legs_num2][5] = xx_temp		-- altitude
									-- xx_temp = 0
									-- if rte_star[gg][6] == "+" then
										-- xx_temp = 43
									-- elseif rte_star[gg][6] == "-" then
										-- xx_temp = 45
									-- end
									-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
								-- else
									-- if legs_data2[legs_num2][1] == "VECTOR" and rte_star[gg][3] == legs_data2[legs_num2-1][1] then
										-- -- skip VECTOR
										-- legs_num2 = legs_num2 - 1
										-- if legs_data2[legs_num2][19] ~= 2 and legs_data2[legs_num2][19] ~= 10 then
											-- legs_data2[legs_num2][19] = 4	-- STAR APP before RTE
										-- end
										-- -- change ALT, SPD restrict,..
										-- xx_temp = tonumber(rte_star[gg][4])
										-- if xx_temp == nil then
											-- xx_temp = 0
										-- end
										-- legs_data2[legs_num2][4] = xx_temp		-- speed
										-- if string.sub(rte_star[gg][5], 1, 2) == "FL" then
											-- xx_temp = tonumber(string.sub(rte_star[gg][5], 3, -1)) * 100
										-- else
											-- xx_temp = tonumber(rte_star[gg][5])
										-- end
										-- if xx_temp == nil then
											-- xx_temp = 0
										-- end
										-- legs_data2[legs_num2][5] = xx_temp		-- altitude
										-- xx_temp = 0
										-- if rte_star[gg][6] == "+" then
											-- xx_temp = 43
										-- elseif rte_star[gg][6] == "-" then
											-- xx_temp = 45
										-- end
										-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
									-- else
										-- add_wpt = 1
									-- end
								-- end
							-- else
								-- if legs_data2[legs_num2][1] ~= "DISCONTINUITY" then
									-- if add_ok == 0 then
										-- rte_copy(legs_num2 + 1)
										-- --add_ok = 1
									-- end
									-- -- create DISCONTINUITY
									-- legs_num2 = legs_num2 + 1
									-- rte_add_disco(legs_num2)
									-- -- add waypoint
									-- add_wpt = 1
								-- end
							-- end
						-- else
							-- if add_ok == 0 then
								-- rte_copy(legs_num2 + 1)
								-- --add_ok = 1
							-- end
							-- -- add waypoint
							-- add_wpt = 1
						-- end
						
						-- if add_wpt == 1 then
							-- add_ok = 1
							-- legs_num2 = legs_num2 + 1
							-- legs_data2[legs_num2] = {}
							-- if rte_star[gg][3] == legs_data2[legs_num2-1][1] then
								-- if rte_star[gg][15] == "VM" or rte_star[gg][15] == "FM" then		-- VECTOR
									-- -- VECTOR
									-- legs_data2[legs_num2][1] = "VECTOR"	-- id WPT
								-- elseif rte_star[gg][15] == "HA" or rte_star[gg][15] == "HF" or rte_star[gg][15] == "HM" then
									-- -- HOLD
									-- legs_data2[legs_num2][1] = rte_star[gg][3]
								-- elseif string.sub(rte_star[gg][15], 2, 2) == "A" then
									-- -- (1000)
									-- jj = tonumber(rte_star[gg][5])
									-- if jj == nil then
										-- legs_data2[legs_num2][1] = "(----)"	-- id WPT
									-- else
										-- legs_data2[legs_num2][1] = "(" .. tostring(jj) .. ")"
									-- end
								-- elseif rte_star[gg][15] == "PI" then
									-- -- Proc Turn
									-- legs_data2[legs_num2][1] = rte_star[gg][3]	-- id WPT
								-- elseif string.sub(rte_star[gg][15], 2, 2) == "I" then
									-- -- (INTC)
									-- legs_data2[legs_num2][1] = "(INTC)"	-- id WPT
								-- elseif rte_star[gg][15] == "CF" then
									-- -- (INTC)
									-- legs_data2[legs_num2][1] = "(INTC)"	-- id WPT
								-- elseif string.sub(rte_star[gg][15], 2, 2) == "R" then
									-- --(ABC180)
									-- jj = tonumber(rte_star[gg][11])
									-- temp_str = ""
									-- if jj ~= nil then
										-- jj = jj / 10
										-- temp_str = string.format("%03d", jj)
									-- else
										-- temp_str = "000"
									-- end
									-- legs_data2[legs_num2][1] = "(" .. rte_star[gg][13] .. temp_str .. ")"
								-- elseif string.sub(rte_star[gg][15], 2, 2) == "D" then
									-- --(ABC-10)
									-- jj = tonumber(rte_star[gg][10])
									-- temp_str = ""
									-- if jj ~= nil then
										-- jj = jj / 10
										-- temp_str = string.format("%02d", jj)
									-- else
										-- temp_str = "00"
									-- end
									-- legs_data2[legs_num2][1] = "(" .. rte_star[gg][13] .. "-" .. temp_str .. ")"
								-- elseif rte_star[gg][15] == "FC" then
									-- --(ABC)
									-- legs_data2[legs_num2][1] = "(" .. rte_star[gg][3]  .. ")"
								-- else
									-- if (rte_star[gg][22] == 0 and legs_data2[legs_num2-1][32] < 10) 
									-- or (rte_star[gg][22] == 1 and legs_data2[legs_num2-1][32] > 9 and legs_data2[legs_num2-1][32] < 20) 
									-- or (rte_star[gg][22] == 2 and legs_data2[legs_num2-1][32] > 19) then
										-- legs_data2[legs_num2][1] = "(----)"	-- id WPT
									-- else
										-- legs_data2[legs_num2][1] = rte_star[gg][3]
									-- end
									-- --legs_data2[legs_num2][1] = "(----)"	-- id WPT
								-- end
							-- else
								-- legs_data2[legs_num2][1] = rte_star[gg][3]	-- id WPT
							-- end
							-- xx_temp = tonumber(rte_star[gg][7])
							-- if xx_temp == nil then
								-- xx_temp = 0
							-- end
							-- xx_temp = xx_temp / 10
							-- legs_data2[legs_num2][2] = math.rad(xx_temp)		-- brg
							-- legs_data2[legs_num2][3] = 0		-- distance
							
							-- if rte_star[gg][15] == "HA" or rte_star[gg][15] == "HF" or rte_star[gg][15] == "HM" then
								-- -- HOLD
								-- xx_temp = tonumber(rte_star[gg][4])
								-- if xx_temp == nil then
									-- xx_temp = legs_data2[legs_num2-1][4]
								-- end
								-- legs_data2[legs_num2][4] = xx_temp		-- speed
								
								-- if string.sub(rte_star[gg][5], 1, 2) == "FL" then
									-- xx_temp = tonumber(string.sub(rte_star[gg][5], 3, -1)) * 100
								-- else
									-- xx_temp = tonumber(rte_star[gg][5])
								-- end
								-- if xx_temp == nil then
									-- legs_data2[legs_num2][5] = legs_data2[legs_num2-1][5]
									-- legs_data2[legs_num2][6] = legs_data2[legs_num2-1][6]
								-- else
									-- legs_data2[legs_num2][5] = xx_temp		-- altitude
									-- xx_temp = 0
									-- if rte_star[gg][6] == "+" then
										-- xx_temp = 43
									-- elseif rte_star[gg][6] == "-" then
										-- xx_temp = 45
									-- end
									-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
								-- end
							-- else
								-- xx_temp = tonumber(rte_star[gg][4])
								-- if xx_temp == nil then
									-- xx_temp = 0
								-- end
								-- legs_data2[legs_num2][4] = xx_temp		-- speed
								-- xx_temp = tonumber(rte_star[gg][5])
								-- if xx_temp == nil then
									-- xx_temp = 0
								-- end
								-- if string.sub(rte_star[gg][5], 1, 2) == "FL" then
									-- xx_temp = tonumber(string.sub(rte_star[gg][5], 3, -1)) * 100
								-- else
									-- xx_temp = tonumber(rte_star[gg][5])
								-- end
								-- if xx_temp == nil then
									-- xx_temp = 0
								-- end
								-- legs_data2[legs_num2][5] = xx_temp		-- altitude
								-- xx_temp = 0
								-- if rte_star[gg][6] == "+" then
									-- xx_temp = 43
								-- elseif rte_star[gg][6] == "-" then
									-- xx_temp = 45
								-- end
								-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
							-- end
							
							-- legs_data2[legs_num2][7] = 0		-- latitude
							-- legs_data2[legs_num2][8] = 0		-- longitude
							-- legs_data2[legs_num2][9] = des_star2			-- via id
							-- legs_data2[legs_num2][10] = 0		-- calc speed
							-- legs_data2[legs_num2][11] = 0		-- calc altitude
							-- legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
							-- legs_data2[legs_num2][13] = 0
							-- legs_data2[legs_num2][14] = 0		-- rest alt
							-- legs_data2[legs_num2][15] = 0		-- last fuel
							-- legs_data2[legs_num2][16] = rte_star[gg][12]
							-- legs_data2[legs_num2][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
							-- legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
							-- legs_data2[legs_num2][19] = 2		-- 0-none, 1-SID, 2-STAR, 3-APP
							-- xx_temp = tonumber(rte_star[gg][8])
							-- if xx_temp == nil then
								-- legs_data2[legs_num2][20] = 0	-- vpa
							-- else
								-- legs_data2[legs_num2][20] = xx_temp / 100	-- vpa
							-- end
							-- legs_data2[legs_num2][21] = rte_star[gg][9]
							-- legs_data2[legs_num2][22] = rte_star[gg][18]
							-- legs_data2[legs_num2][23] = 0
							-- legs_data2[legs_num2][24] = 0
							-- legs_data2[legs_num2][25] = 0
							-- legs_data2[legs_num2][26] = 0
							-- legs_data2[legs_num2][27] = rte_star[gg][13]
							-- legs_data2[legs_num2][28] = rte_star[gg][14]
							-- legs_data2[legs_num2][29] = rte_star[gg][11]
							-- legs_data2[legs_num2][30] = rte_star[gg][10]
							-- legs_data2[legs_num2][31] = rte_star[gg][15]
							-- legs_data2[legs_num2][32] = rte_star[gg][16]
							-- if rte_star[gg][22] == 1 then
								-- legs_data2[legs_num2][32] = legs_data2[legs_num2][32] + 10
							-- elseif rte_star[gg][22] == 2 then
								-- legs_data2[legs_num2][32] = legs_data2[legs_num2][32] + 20
							-- end
							-- legs_data2[legs_num2][33] = rte_star[gg][19]
							-- legs_data2[legs_num2][34] = rte_star[gg][20]
							-- legs_data2[legs_num2][35] = rte_star[gg][21]
							-- legs_data2[legs_num2][36] = 0
							-- legs_data2[legs_num2][37] = 0
						-- end
						
					-- end
				-- end
			-- end
		-- end
		
	-- end
	
	-- -- if add_ok == 1 then
		-- -- rte_paste(legs_num2 + 1)
	-- -- end
	-- if add_ok == 1 then
		-- add_star = 2
	-- end
	
	-- --rte_add_app()
	
-- end

-- function rte_add_app()
	
	-- local ii = 0
	-- local jj = 0
	-- local kk = 0
	-- local gg = 0
	-- local gg2 = 0
	-- local xx_temp = 0
	-- local rnw_ok  = 0
	-- local rnw_txt = ""
	-- local rnw_txt2 = ""
	-- local add_ok = 0
	-- local tns_ok = 0
	-- local disco_status = 0
	-- local only_one_star = 0
	-- local temp_str = ""
	-- local add_wpt = 0
	-- local app_str = ""
	-- ---
	-- -- local vvv = 0
	-- -- local fms_line = ""
	
	-- -- local file_name2 = "legs.txt"
	-- -- local file_navdata2 = io.open(file_name2, "w")
	-- ----
	
	-- if add_star == 0 then
		-- --delete previous APP
		-- rte_del_spec(7)
	-- else
		-- if add_star == 2 then
			-- add_ok = 1
		-- end
	-- end
	
	-- --dump_leg()
	-- rte_lat = 0
	-- rte_lon = 0
	-- -- add APP and TRANS APP
	-- disco_status = 0
	-- if rte_app_num > 0 then
		
		-- if des_app2 ~= "------" then
			
			
			-- -- approach name
			-- temp_str = string.sub(des_app2, 1, 1)
			-- if temp_str == "I" then
				-- app_str = "ILS "
			-- elseif temp_str == "R" then
				-- app_str = "RNAV "
			-- elseif temp_str == "D" then
				-- app_str = "VDM "
			-- elseif temp_str == "S" then
				-- app_str = "VDM "
			-- elseif temp_str == "L" then
				-- app_str = "LOC "
			-- elseif temp_str == "Q" then
				-- app_str = "NDB "
			-- elseif temp_str == "N" then
				-- app_str = "NDB "
			-- elseif temp_str == "J" then
				-- app_str = "GLS "
			-- elseif temp_str == "V" then
				-- app_str = "VOR "
			-- else
				-- app_str = temp_str
			-- end
			-- app_str = app_str .. string.sub(des_app2, 2, -1)
			
			
			-- for gg = 1, rte_app_num do
				
				-- tns_ok = 0
				-- if rte_app[gg][2] == des_app_tns2 then
					-- tns_ok = 1
				-- end
				-- if rte_app[gg][2] == " " then
					-- tns_ok = 1
				-- end
				
				-- -- if file_navdata2 ~= nil then
					-- -- fms_line = rte_app[gg][1] .. "->" .. des_app .. "," .. rte_app[gg][2] .. "->" .. rnw_txt .. "," .. des_app_tns .. "\n"
					-- -- file_navdata2:write(fms_line)
				-- -- end
				
				-- if rte_app[gg][1] == des_app2 then
					-- if tns_ok == 1 then
						
						-- add_wpt = 0
						
						-- ii = 0
						-- if gg > 1 then
							-- if rte_app[gg-1][15] == "CI" or rte_app[gg-1][15] == "VI" then
								-- ii = 1
							-- end
						-- end
						
						-- if rte_app[gg][15] == "IF" and ii == 0 then
							-- disco_status = 1
							-- -- if rte_app[gg][3] == legs_data2[legs_num2][1] then
								-- -- disco_status = 0
							-- -- elseif legs_data2[legs_num2][1] == "VECTOR" then --and rte_app[gg][3] == legs_data2[legs_num2-1][1] then
								-- -- disco_status = 0
							-- -- end
							-- if legs_data2[legs_num2][19] == 2 or legs_data2[legs_num2][19] == 4 then
								-- disco_status = 0
							-- elseif legs_data2[legs_num2][19] == 7 or legs_data2[legs_num2][19] == 8 or legs_data2[legs_num2][19] == 9 then
								-- disco_status = 0
							-- elseif legs_data2[legs_num2][19] == 10 then
								-- disco_status = 0
							-- else
								-- if legs_data2[legs_num2][1] == rte_app[gg][3] then
									-- disco_status = 0
								-- end
							-- end
							
							-- --entry = "IF " .. tostring(disco_status)
							-- if disco_status == 0 then
								-- -- if legs_data2[legs_num2][19] == 7 then
									-- -- legs_data2[legs_num2][19] = 7	-- APP before APP
								-- -- elseif legs_data2[legs_num2][19] == 2 then
									-- -- legs_data2[legs_num2][19] = 8	-- APP before STAR
								-- -- else
									-- -- legs_data2[legs_num2][19] = 9	-- APP before RTE
								-- -- end
								-- if rte_app[gg][3] == legs_data2[legs_num2][1] and rte_app[gg][3] ~= "" then
									-- if legs_data2[legs_num2][1] == "VECTOR" and rte_app[gg][3] == legs_data2[legs_num2-1][1] then
										-- -- skip VECTOR
										-- legs_num2 = legs_num2 - 1
									-- end
									-- if legs_data2[legs_num2][19] == 2 then
										-- legs_data2[legs_num2][19] = 8	-- APP before STAR
									-- elseif legs_data2[legs_num2][19] ~= 7 and legs_data2[legs_num2][19] ~= 10 then
										-- legs_data2[legs_num2][19] = 9	-- APP before RTE
									-- end
									-- legs_data2[legs_num2][17] = rte_app[gg][17] + 200		-- 0-none, 1-FAF
									-- -- change ALT, SPD restrict,.. if not HOLD
									-- if legs_data2[legs_num2][21] ~= 0 and legs_data2[legs_num2][21] ~= 1 then
										-- xx_temp = tonumber(rte_app[gg][4])
										-- if xx_temp == nil then
											-- xx_temp = 0
										-- end
										-- legs_data2[legs_num2][4] = xx_temp		-- speed
										-- if string.sub(rte_app[gg][5], 1, 2) == "FL" then
											-- xx_temp = tonumber(string.sub(rte_app[gg][5], 3, -1)) * 100
										-- else
											-- xx_temp = tonumber(rte_app[gg][5])
										-- end
										-- if xx_temp == nil then
											-- xx_temp = 0
										-- end
										-- legs_data2[legs_num2][5] = xx_temp		-- altitude
										-- xx_temp = 0
										-- if rte_app[gg][6] == "+" then
											-- xx_temp = 43
										-- elseif rte_app[gg][6] == "-" then
											-- xx_temp = 45
										-- end
										-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
									-- end
								-- else
									-- if legs_data2[legs_num2][1] == "VECTOR" and rte_app[gg][3] == legs_data2[legs_num2-1][1] then
										-- -- skip VECTOR
										-- legs_num2 = legs_num2 - 1
										-- -- change ALT, SPD restrict,..
										-- if legs_data2[legs_num2][19] == 2 then
											-- legs_data2[legs_num2][19] = 8	-- APP before STAR
										-- elseif legs_data2[legs_num2][19] ~= 7 and legs_data2[legs_num2][19] ~= 10 then
											-- legs_data2[legs_num2][19] = 9	-- APP before RTE
										-- end
										-- legs_data2[legs_num2][17] = rte_app[gg][17] + 200		-- 0-none, 1-FAF
										-- xx_temp = tonumber(rte_app[gg][4])
										-- if xx_temp == nil then
											-- xx_temp = 0
										-- end
										-- legs_data2[legs_num2][4] = xx_temp		-- speed
										-- if string.sub(rte_app[gg][5], 1, 2) == "FL" then
											-- xx_temp = tonumber(string.sub(rte_app[gg][5], 3, -1)) * 100
										-- else
											-- xx_temp = tonumber(rte_app[gg][5])
										-- end
										-- if xx_temp == nil then
											-- xx_temp = 0
										-- end
										-- legs_data2[legs_num2][5] = xx_temp		-- altitude
										-- xx_temp = 0
										-- if rte_app[gg][6] == "+" then
											-- xx_temp = 43
										-- elseif rte_app[gg][6] == "-" then
											-- xx_temp = 45
										-- end
										-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
									-- else
										-- add_wpt = 1
									-- end
								-- end
							-- else
								-- if legs_data2[legs_num2][1] ~= "DISCONTINUITY" then
									-- if add_ok == 0 then
										-- rte_copy(legs_num2 + 1)
										-- --add_ok = 1
									-- end
									-- -- create DISCONTINUITY
									-- legs_num2 = legs_num2 + 1
									-- rte_add_disco(legs_num2)
									-- -- add waypoint
									-- add_wpt = 1
								-- end
							-- end
						-- else
							-- if add_ok == 0 then
								-- rte_copy(legs_num2 + 1)
								-- --add_ok = 1
							-- end
							-- -- add waypoint
							-- add_wpt = 1
						-- end
						
						-- if add_wpt == 1 then
							-- add_ok = 1
							
							-- if rte_app[gg][17] == 2 then
								-- app_str = "MISSED APPRCH"
							-- end
							
							-- --if rte_app[gg][15] == "PI" then
								-- --rte_add_pi(rte_app[gg][3], rte_app[gg][12], des_app, rte_app[gg][7], rte_app[gg][11], rte_app[gg][9], 0, "", 205, 7)
							-- --else
							
							-- legs_num2 = legs_num2 + 1
							-- legs_data2[legs_num2] = {}
							-- if rte_app[gg][3] == legs_data2[legs_num2-1][1] then
								-- if rte_app[gg][15] == "VM" or rte_app[gg][15] == "FM" then		-- VECTOR
									-- -- VECTOR
									-- legs_data2[legs_num2][1] = "VECTOR"	-- id WPT
								-- elseif rte_app[gg][15] == "HA" or rte_app[gg][15] == "HF" or rte_app[gg][15] == "HM" then
									-- -- HOLD
									-- legs_data2[legs_num2][1] = rte_app[gg][3]
								-- elseif string.sub(rte_app[gg][15], 2, 2) == "A" then
									-- -- (1000)
									-- jj = tonumber(rte_app[gg][5])
									-- if jj == nil then
										-- legs_data2[legs_num2][1] = "(----)"	-- id WPT
									-- else
										-- legs_data2[legs_num2][1] = "(" .. tostring(jj) .. ")"
									-- end
								-- elseif rte_app[gg][15] == "PI" then
									-- -- Proc Turn
									-- legs_data2[legs_num2][1] = rte_app[gg][3]	-- id WPT
								-- elseif string.sub(rte_app[gg][15], 2, 2) == "I" then
									-- -- (INTC)
									-- legs_data2[legs_num2][1] = "(INTC)"	-- id WPT
								-- elseif rte_app[gg][15] == "CF" then
									-- -- (INTC)
									-- legs_data2[legs_num2][1] = "(INTC)"	-- id WPT
								-- elseif string.sub(rte_app[gg][15], 2, 2) == "R" then
									-- --(ABC180)
									-- jj = tonumber(rte_app[gg][11])
									-- temp_str = ""
									-- if jj ~= nil then
										-- jj = jj / 10
										-- temp_str = string.format("%03d", jj)
									-- else
										-- temp_str = "000"
									-- end
									-- legs_data2[legs_num2][1] = "(" .. rte_app[gg][13] .. temp_str .. ")"
								-- elseif string.sub(rte_app[gg][15], 2, 2) == "D" then
									-- --(ABC-10)
									-- jj = tonumber(rte_app[gg][10])
									-- temp_str = ""
									-- if jj ~= nil then
										-- jj = jj / 10
										-- temp_str = string.format("%02d", jj)
									-- else
										-- temp_str = "00"
									-- end
									-- legs_data2[legs_num2][1] = "(" .. rte_app[gg][13] .. "-" .. temp_str .. ")"
								-- elseif rte_app[gg][15] == "FC" then
									-- --(ABC)
									-- legs_data2[legs_num2][1] = "(" .. rte_app[gg][3]  .. ")"
								-- else
									-- if (rte_app[gg][22] == 0 and legs_data2[legs_num2-1][32] < 10) 
									-- or (rte_app[gg][22] == 1 and legs_data2[legs_num2-1][32] > 9 and legs_data2[legs_num2-1][32] < 20) 
									-- or (rte_app[gg][22] == 2 and legs_data2[legs_num2-1][32] > 19) then
										-- legs_data2[legs_num2][1] = "(----)"	-- id WPT
									-- else
										-- legs_data2[legs_num2][1] = rte_app[gg][3]
									-- end
									-- --legs_data2[legs_num2][1] = "(----)"	-- id WPT
								-- end
							-- else
								-- legs_data2[legs_num2][1] = rte_app[gg][3]
							-- end
							
							-- xx_temp = tonumber(rte_app[gg][7])
							-- if xx_temp == nil then
								-- xx_temp = 0
							-- end
							-- xx_temp = xx_temp / 10
							-- legs_data2[legs_num2][2] = math.rad(xx_temp)		-- brg
							-- legs_data2[legs_num2][3] = 0		-- distance
							
							-- if rte_app[gg][15] == "HA" or rte_app[gg][15] == "HF" or rte_app[gg][15] == "HM" then
								-- -- HOLD
								-- xx_temp = tonumber(rte_app[gg][4])
								-- if xx_temp == nil then
									-- xx_temp = legs_data2[legs_num2-1][4]
								-- end
								-- legs_data2[legs_num2][4] = xx_temp		-- speed
								
								-- if string.sub(rte_app[gg][5], 1, 2) == "FL" then
									-- xx_temp = tonumber(string.sub(rte_app[gg][5], 3, -1)) * 100
								-- else
									-- xx_temp = tonumber(rte_app[gg][5])
								-- end
								-- if xx_temp == nil then
									-- legs_data2[legs_num2][5] = legs_data2[legs_num2-1][5]
									-- legs_data2[legs_num2][6] = legs_data2[legs_num2-1][6]
								-- else
									-- legs_data2[legs_num2][5] = xx_temp		-- altitude
									-- xx_temp = 0
									-- if rte_app[gg][6] == "+" then
										-- xx_temp = 43
									-- elseif rte_app[gg][6] == "-" then
										-- xx_temp = 45
									-- end
									-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
								-- end
							-- else
								-- xx_temp = tonumber(rte_app[gg][4])
								-- if xx_temp == nil then
									-- xx_temp = 0
								-- end
								-- legs_data2[legs_num2][4] = xx_temp		-- speed
								-- xx_temp = tonumber(rte_app[gg][5])
								-- if xx_temp == nil then
									-- xx_temp = 0
								-- end
								-- if string.sub(rte_app[gg][5], 1, 2) == "FL" then
									-- xx_temp = tonumber(string.sub(rte_app[gg][5], 3, -1)) * 100
								-- else
									-- xx_temp = tonumber(rte_app[gg][5])
								-- end
								-- if xx_temp == nil then
									-- xx_temp = 0
								-- end
								-- legs_data2[legs_num2][5] = xx_temp		-- altitude
								-- xx_temp = 0
								-- if rte_app[gg][6] == "+" then
									-- xx_temp = 43
								-- elseif rte_app[gg][6] == "-" then
									-- xx_temp = 45
								-- end
								-- legs_data2[legs_num2][6] = xx_temp	-- altitude type
							-- end
							-- legs_data2[legs_num2][7] = 0		-- latitude
							-- legs_data2[legs_num2][8] = 0		-- longitude
							-- legs_data2[legs_num2][9] = app_str	-- via
							-- legs_data2[legs_num2][10] = 0		-- calc speed
							-- legs_data2[legs_num2][11] = 0		-- calc altitude
							-- legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
							-- legs_data2[legs_num2][13] = 0
							-- legs_data2[legs_num2][14] = 0		-- rest alt
							-- legs_data2[legs_num2][15] = 0		-- last fuel
							-- legs_data2[legs_num2][16] = rte_app[gg][12]
							-- legs_data2[legs_num2][17] = rte_app[gg][17] + 200 		-- 0 - none, 1 - FAF, 2 - Missed wpt
							-- legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
							-- legs_data2[legs_num2][19] = 7		-- 0-none, 1-SID, 2-STAR, 3-APP
							-- xx_temp = tonumber(rte_app[gg][8])
							-- if xx_temp == nil then
								-- legs_data2[legs_num2][20] = 0	-- vpa
							-- else
								-- legs_data2[legs_num2][20] = xx_temp / 100	-- vpa
							-- end
							-- legs_data2[legs_num2][21] = rte_app[gg][9]
							-- legs_data2[legs_num2][22] = rte_app[gg][18]
							-- legs_data2[legs_num2][23] = 0
							-- legs_data2[legs_num2][24] = 0
							-- legs_data2[legs_num2][25] = 0
							-- legs_data2[legs_num2][26] = 0
							-- legs_data2[legs_num2][27] = rte_app[gg][13]
							-- legs_data2[legs_num2][28] = rte_app[gg][14]
							-- legs_data2[legs_num2][29] = rte_app[gg][11]
							-- legs_data2[legs_num2][30] = rte_app[gg][10]
							-- legs_data2[legs_num2][31] = rte_app[gg][15]
							-- legs_data2[legs_num2][32] = rte_app[gg][16]
							-- if rte_app[gg][22] == 1 then
								-- legs_data2[legs_num2][32] = legs_data2[legs_num2][32] + 10
							-- elseif rte_app[gg][22] == 2 then
								-- legs_data2[legs_num2][32] = legs_data2[legs_num2][32] + 20
							-- end
							-- legs_data2[legs_num2][33] = rte_app[gg][19]
							-- legs_data2[legs_num2][34] = rte_app[gg][20]
							-- legs_data2[legs_num2][35] = rte_app[gg][21]
							-- legs_data2[legs_num2][36] = 0
							-- legs_data2[legs_num2][37] = 0
							
							-- --end
							
						-- end
						
					-- end
				-- end
			
			-- end
		-- end
	-- end
	
	
	-- if add_ok == 1 then
		-- rte_paste(legs_num2 + 1)
	-- end
	
	-- add_star = 0
	
	-- -- if file_navdata2 ~= nil then
		-- -- file_navdata2:close()
	-- -- end
	
	-- --B738_legs_num2 = legs_num2
	-- --offset = 1
	-- --entry = "." .. rte_star[1][2] .. "." .. rnw_txt .. "."
	
	-- --dump_leg2()
	-- --dump_leg()
	-- --dump_leg6()
-- end

function rte_add_discob(aaa)
	
	-- create DISCONTINUITY
	legs_num2b = aaa
	legs_data2b[aaa] = {}
	legs_data2b[aaa][1] = "DISCONTINUITY"
	legs_data2b[aaa][2] = 0		-- brg
	legs_data2b[aaa][3] = 0		-- distance
	legs_data2b[aaa][4] = 0		-- speed
	legs_data2b[aaa][5] = 0		-- altitude
	legs_data2b[aaa][6] = 0	-- altitude type
	legs_data2b[aaa][7] = rte_lat		-- latitude
	legs_data2b[aaa][8] = rte_lon		-- longitude
	legs_data2b[aaa][9] = ""			-- via id
	legs_data2b[aaa][10] = 0		-- calc speed
	legs_data2b[aaa][11] = 0		-- calc altitude
	legs_data2b[aaa][12] = 0		-- calc altitude vnav pth
	legs_data2b[aaa][13] = 0
	legs_data2b[aaa][14] = 0		-- rest alt
	legs_data2b[aaa][15] = 0		-- last fuel
	legs_data2b[aaa][16] = ""
	legs_data2b[aaa][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
	legs_data2b[aaa][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
	legs_data2b[aaa][19] = 0		-- 0-none, 1-SID, 2-STAR/APP, 3-DISCONTINUITY
	legs_data2b[aaa][20] = 0
	legs_data2b[aaa][21] = -1
	legs_data2b[aaa][22] = ""
	legs_data2b[aaa][23] = 0
	legs_data2b[aaa][24] = 0
	legs_data2b[aaa][25] = 0
	legs_data2b[aaa][26] = 0
	legs_data2b[aaa][27] = ""
	legs_data2b[aaa][28] = ""
	legs_data2b[aaa][29] = ""
	legs_data2b[aaa][30] = ""
	legs_data2b[aaa][31] = ""
	legs_data2b[aaa][32] = 0
	legs_data2b[aaa][33] = ""
	legs_data2b[aaa][34] = ""
	legs_data2b[aaa][35] = ""
	legs_data2b[aaa][36] = 0
	legs_data2b[aaa][37] = 0
	legs_data2b[aaa][38] = ""
	legs_data2b[aaa][39] = ""
	legs_data2b[aaa][40] = 0
	
end

function rte_add_sid()
	
	local ii = 0
	local jj = 0
	
	if rte_add_sid_act == 1  then
		-- copy to legs_data2b
		legs_data2b = {}
		for ii = 1, legs_num2 + 1 do
			legs_data2b[ii] = {}
			for jj = 1, MAX_LEGS_DATA do
				legs_data2b[ii][jj] = legs_data2[ii][jj]
			end
		end
		legs_num2b = legs_num2
		sid_cnt = 0
		rte_add_sid_act = 2
		rnw_added = 0
		add_ok = 0
		--delete previous SID
		rte_del_specb(1)
	elseif rte_add_sid_act == 2 then
		rte_add_sid2()
	elseif rte_add_sid_act == 3 then
		for ii = 1, 20 do
			sid_cnt = sid_cnt + 1
			if sid_cnt > rte_sid_num then
				rte_add_sid_act = 4
				rte_add_sid2()
				break
			end
			rte_add_sid2()
			-- if rte_add_sid_act ~= 3 then
				-- break
			-- end
		end
	elseif rte_add_sid_act == 5 then
		-- copy to legs_data2
		legs_data2 = {}
		for ii = 1, legs_num2b + 1 do
			legs_data2[ii] = {}
			for jj = 1, MAX_LEGS_DATA do
				legs_data2[ii][jj] = legs_data2b[ii][jj]
			end
		end
		legs_num2 = legs_num2b
		rte_add_sid_act = 0
		--dump_leg()
	end
end


function rte_add_star()
	
	local ii = 0
	local jj = 0
	
	if rte_add_sid_act == 0 then
		if rte_add_star_act == 1 then
			-- copy to legs_data2b
			legs_data2b = {}
			for ii = 1, legs_num2 + 1 do
				legs_data2b[ii] = {}
				for jj = 1, MAX_LEGS_DATA do
					legs_data2b[ii][jj] = legs_data2[ii][jj]
				end
			end
			legs_num2b = legs_num2
			sid_cnt = 0
			rte_add_star_act = 2
			add_ok = 0
			--delete previous STAR, APP
			rte_del_specb(99)
			add_star = 1	-- info for APP
		elseif rte_add_star_act > 1 then
			for ii = 1, 20 do
				sid_cnt = sid_cnt + 1
				if sid_cnt > rte_star_num then
					rte_add_star_act = 0
					break
				end
				rte_add_star2()
				-- if rte_add_star_act ~= 2 then
					-- break
				-- end
			end
		end
	end
end


function rte_add_app()
	
	local ii = 0
	local jj = 0
	local temp_str = ""
	
	if rte_add_sid_act == 0 and rte_add_star_act == 0 then
		if rte_add_app_act == 1 then
			sid_cnt = 0
			rte_add_app_act = 2
			add_ok = 0
			if add_star == 0 then
				--delete previous APP
				rte_del_specb(7)
			else
				if add_star == 2 then
					add_ok = 1
				end
			end
			add_star = 0
			-- approach name
			temp_str = string.sub(des_app2, 1, 1)
			if temp_str == "I" then
				app_str = "ILS "
			elseif temp_str == "R" then
				app_str = "RNAV "
			elseif temp_str == "D" then
				app_str = "VDM "
			elseif temp_str == "S" then
				app_str = "VDM "
			elseif temp_str == "L" then
				app_str = "LOC "
			elseif temp_str == "Q" then
				app_str = "NDB "
			elseif temp_str == "N" then
				app_str = "NDB "
			elseif temp_str == "J" then
				app_str = "GLS "
			elseif temp_str == "V" then
				app_str = "VOR "
			else
				app_str = temp_str
			end
			app_str = app_str .. string.sub(des_app2, 2, -1)
		elseif rte_add_app_act == 2 then
			for ii = 1, 20 do
				sid_cnt = sid_cnt + 1
				if sid_cnt > rte_app_num then
					rte_add_app_act = 3
					rte_add_app2()
					break
				end
				rte_add_app2()
				-- if rte_add_app_act ~= 2 then
					-- break
				-- end
			end
		elseif rte_add_app_act == 4 then
			-- copy to legs_data2
			legs_data2 = {}
			for ii = 1, legs_num2b + 1 do
				legs_data2[ii] = {}
				for jj = 1, MAX_LEGS_DATA do
					legs_data2[ii][jj] = legs_data2b[ii][jj]
				end
			end
			legs_num2 = legs_num2b
			rte_add_app_act = 0
		end
	end
end



function rte_add_sid2()
	
	local ii = 0
	local gg = 0
	local gg2 = 0
	local xx_temp = 0
	local rnw_ok  = 0
	--local rnw_added = 0
	local rnw_txt = ""
	local rnw_txt2 = ""
	--local add_ok = 0
	local tns_ok = 0
	local disco_status = 0
	
	local temp_str = ""
	local jj = 0
	local add_wpt = 0
	
	local nd_x = 0
	local idx_rec = 0
	
	--delete previous SID
	--rte_del_specb(1)
	
	rte_lat = 0
	rte_lon = 0
	
	--add RWxx
	if rnw_data_num > 0 and rte_add_sid_act == 2 then
		nd_x = string.byte(string.sub(ref_icao_x, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_rnw[nd_x][99999] > 0 then
				for ii = 1, idx_rnw[nd_x][99999] do
					idx_rec = idx_rnw[nd_x][ii]
					--if ref_icao == rnw_data[idx_rec][1] then
					--if rnw_data[idx_rec][1] == ref_icao_x then
		-- for ii = 1, rnw_data_num do
					if ref_icao_x == rnw_data[idx_rec][1] and ref_rwy2 == rnw_data[idx_rec][2] then
						if add_ok == 0 and rnw_added == 0 then
							if legs_data2b[2][1] == "DISCONTINUITY" then
								rte_copyb(3)
							else
								rte_copyb(2)
							end
							rnw_added = 1
							legs_num2b = 2
							legs_data2b[legs_num2b] = {}
							legs_data2b[legs_num2b][1] = "RW" .. ref_rwy2
							legs_data2b[legs_num2b][2] = math.rad((rnw_data[idx_rec][8]+ mag_variation_deg(rnw_data[idx_rec][3], rnw_data[idx_rec][4])) % 360)		-- brg
							legs_data2b[legs_num2b][3] = 0		-- distance
							legs_data2b[legs_num2b][4] = 0		-- speed
							legs_data2b[legs_num2b][5] = 0		-- altitude
							legs_data2b[legs_num2b][6] = 0	-- altitude type
							legs_data2b[legs_num2b][7] = rnw_data[idx_rec][3]		-- latitude
							legs_data2b[legs_num2b][8] = rnw_data[idx_rec][4]		-- longitude
							legs_data2b[legs_num2b][9] = ref_icao_x			-- via id
							legs_data2b[legs_num2b][10] = 0		-- calc speed
							legs_data2b[legs_num2b][11] = ref_icao_alt		-- calc altitude
							legs_data2b[legs_num2b][12] = 0		-- calc altitude vnav pth
							legs_data2b[legs_num2b][13] = 0
							legs_data2b[legs_num2b][14] = 0		-- rest alt
							legs_data2b[legs_num2b][15] = 0		-- last fuel
							legs_data2b[legs_num2b][16] = ""
							legs_data2b[legs_num2b][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
							legs_data2b[legs_num2b][18] = math.rad(rnw_data[idx_rec][8])
							legs_data2b[legs_num2b][19] = 1		-- 0-none, 1-SID, 2-STAR, 3-APP
							legs_data2b[legs_num2b][20] = 0
							legs_data2b[legs_num2b][21] = -1
							legs_data2b[legs_num2b][22] = ""
							legs_data2b[legs_num2b][23] = 0
							legs_data2b[legs_num2b][24] = 0
							legs_data2b[legs_num2b][25] = 0
							legs_data2b[legs_num2b][26] = 0
							legs_data2b[legs_num2b][27] = ""
							legs_data2b[legs_num2b][28] = ""
							legs_data2b[legs_num2b][29] = ""
							legs_data2b[legs_num2b][30] = ""
							legs_data2b[legs_num2b][31] = ""
							legs_data2b[legs_num2b][32] = 0
							legs_data2b[legs_num2b][33] = ""
							legs_data2b[legs_num2b][34] = ""
							legs_data2b[legs_num2b][35] = ""
							legs_data2b[legs_num2b][36] = 4
							legs_data2b[legs_num2b][37] = 0
							legs_data2b[legs_num2b][38] = ""
							legs_data2b[legs_num2b][39] = ""
							legs_data2b[legs_num2b][40] = 0
							break
						end
					end
				end
			end
		end
	end
	
	-- add SID
	if rte_add_sid_act == 3 then
		if rte_sid_num > 0 then
			
			rte_lat = 0
			rte_lon = 0
			if ref_sid2 ~= "------" then
				--for gg = 1, rte_sid_num do
				gg = sid_cnt
				if gg <= rte_sid_num then
					rnw_ok = 0
					rnw_txt = "RW" .. ref_rwy2
					rnw_txt2 = "RW"
					if rte_sid[gg][2] == "ALL" or rte_sid[gg][2] == "" then
						rnw_ok = 1
					end
					if rte_sid[gg][2] == rnw_txt then
						rnw_ok = 1
					end
					
					-- RWxxB -> L, R, C
					if string.sub(rte_sid[gg][2], -1, -1) == "B" then
						if string.len(rnw_txt) > 4 then
							rnw_txt2 = string.sub(rnw_txt, 1, -2)
						end
						if string.sub(rte_sid[gg][2], 1, -2) == rnw_txt2 then
							rnw_ok = 1
						end
					end
					
					tns_ok = 0
					if rte_sid[gg][2] == ref_sid_tns2 then
						tns_ok = 1
					end
					
					
					if rte_sid[gg][1] == ref_sid2 then --and string.sub(rte_sid[gg][3], 1, 2) ~= "RW" then
						if rnw_ok == 1 or tns_ok == 1 then
							
							add_wpt = 0
							
							ii = 0
							if gg > 1 then
								if rte_sid[gg-1][15] == "CI" or rte_sid[gg-1][15] == "VI" then
									ii = 1
								end
							end
							
							if rte_sid[gg][15] == "IF" and ii == 0 then
								disco_status = 1
								if legs_data2b[legs_num2b][19] == 1 or legs_data2b[legs_num2b][19] == 3 then
									disco_status = 0
								end
								if disco_status == 0 then
									-- if legs_data2b[legs_num2b-1][19] == 1 then
										-- legs_data2b[legs_num2b][19] = 1	-- SID before STAR
									-- else
										-- legs_data2b[legs_num2b][19] = 3	-- SID before RTE
									-- end
									if rte_sid[gg][3] == legs_data2b[legs_num2b][1] and rte_sid[gg][3] ~= "" then
										if legs_data2b[legs_num2b][1] == "VECTOR" and rte_sid[gg][3] == legs_data2b[legs_num2b-1][1] then
											-- skip VECTOR
											legs_num2b = legs_num2b - 1
										end
										-- if legs_data2b[legs_num2b][19] ~= 1 then
											-- legs_data2b[legs_num2b][19] = 3	-- SID before RTE
										-- end
										-- change ALT, SPD restrict,..
										xx_temp = tonumber(rte_sid[gg][4])
										if xx_temp == nil then
											xx_temp = 0
										end
										legs_data2b[legs_num2b][4] = xx_temp		-- speed
										if string.sub(rte_sid[gg][5], 1, 2) == "FL" then
											xx_temp = tonumber(string.sub(rte_sid[gg][5], 3, -1)) * 100
										else
											xx_temp = tonumber(rte_sid[gg][5])
										end
										if xx_temp == nil then
											xx_temp = 0
										end
										legs_data2b[legs_num2b][5] = xx_temp		-- altitude
										xx_temp = 0
										if rte_sid[gg][6] == "+" then
											xx_temp = 43
										elseif rte_sid[gg][6] == "-" then
											xx_temp = 45
										end
										legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
									else
										add_wpt = 1
									end
								else
									if add_ok == 0 and rnw_added == 0 then
										if legs_data2b[2][1] == "DISCONTINUITY" then
											rte_copyb(3)
										else
											rte_copyb(2)
										end
										legs_num2b = 1
									end
									if legs_data2b[legs_num2b][1] ~= "DISCONTINUITY" then
										legs_num2b = legs_num2b + 1
										rte_add_discob(legs_num2b)
										-- add waypoint
										add_wpt = 1
									end
								end
							else
								if add_ok == 0 and rnw_added == 0 then
									if legs_data2b[2][1] == "DISCONTINUITY" then
										rte_copyb(3)
									else
										rte_copyb(2)
									end
									legs_num2b = 1
								end
								add_wpt = 1
							end
							
							if add_wpt == 1 then
								add_ok = 1
								legs_num2b = legs_num2b + 1
								legs_data2b[legs_num2b] = {}
								if rte_sid[gg][3] == legs_data2b[legs_num2b-1][1] then
									if rte_sid[gg][15] == "VM" or rte_sid[gg][15] == "FM" then		-- VECTOR
										-- VECTOR
										legs_data2b[legs_num2b][1] = "VECTOR"	-- id WPT
									elseif rte_sid[gg][15] == "HA" or rte_sid[gg][15] == "HF" or rte_sid[gg][15] == "HM" then
										-- HOLD
										legs_data2b[legs_num2b][1] = rte_sid[gg][3]
									elseif string.sub(rte_sid[gg][15], 2, 2) == "A" then
										-- (1000)
										jj = tonumber(rte_sid[gg][5])
										if jj == nil then
											legs_data2b[legs_num2b][1] = "(----)"	-- id WPT
										else
											legs_data2b[legs_num2b][1] = "(" .. tostring(jj) .. ")"
										end
									elseif rte_sid[gg][15] == "PI" then
										-- Proc Turn
										legs_data2b[legs_num2b][1] = rte_sid[gg][3]	-- id WPT
									elseif string.sub(rte_sid[gg][15], 2, 2) == "I" then
										-- (INTC)
										legs_data2b[legs_num2b][1] = "(INTC)"	-- id WPT
									elseif rte_sid[gg][15] == "CF" then
										-- (INTC)
										legs_data2b[legs_num2b][1] = "(INTC)"	-- id WPT
									elseif string.sub(rte_sid[gg][15], 2, 2) == "R" then
										--(ABC180)
										jj = tonumber(rte_sid[gg][11])
										temp_str = ""
										if jj ~= nil then
											jj = jj / 10
											temp_str = string.format("%03d", jj)
										else
											temp_str = "000"
										end
										legs_data2b[legs_num2b][1] = "(" .. rte_sid[gg][13] .. temp_str .. ")"
									elseif string.sub(rte_sid[gg][15], 2, 2) == "D" then
										--(ABC-10)
										jj = tonumber(rte_sid[gg][10])
										temp_str = ""
										if jj ~= nil then
											jj = jj / 10
											temp_str = string.format("%02d", jj)
										else
											temp_str = "00"
										end
										legs_data2b[legs_num2b][1] = "(" .. rte_sid[gg][13] .. "-" .. temp_str .. ")"
									elseif rte_sid[gg][15] == "FC" then
										--(ABC)
										legs_data2b[legs_num2b][1] = "(" .. rte_sid[gg][3]  .. ")"
									else
										if (rte_sid[gg][22] == 0 and legs_data2b[legs_num2b-1][32] < 10) 
										or (rte_sid[gg][22] == 1 and legs_data2b[legs_num2b-1][32] > 9 and legs_data2b[legs_num2b-1][32] < 20) 
										or (rte_sid[gg][22] == 2 and legs_data2b[legs_num2b-1][32] > 19) then
											legs_data2b[legs_num2b][1] = "(----)"	-- id WPT
										else
											legs_data2b[legs_num2b][1] = rte_sid[gg][3]
										end
										--legs_data2b[legs_num2b][1] = "(----)"	-- id WPT
									end
								else
									legs_data2b[legs_num2b][1] = rte_sid[gg][3]	-- id WPT
								end
								xx_temp = tonumber(rte_sid[gg][7])
								if xx_temp == nil then
									xx_temp = 0
								end
								xx_temp = xx_temp / 10
								legs_data2b[legs_num2b][2] = math.rad(xx_temp)		-- brg
								legs_data2b[legs_num2b][3] = 0		-- distance
								
								if rte_sid[gg][15] == "HA" or rte_sid[gg][15] == "HF" or rte_sid[gg][15] == "HM" then
									-- HOLD
									xx_temp = tonumber(rte_sid[gg][4])
									if xx_temp == nil then
										xx_temp = legs_data2b[legs_num2b-1][4]
									end
									legs_data2b[legs_num2b][4] = xx_temp		-- speed
									
									if string.sub(rte_sid[gg][5], 1, 2) == "FL" then
										xx_temp = tonumber(string.sub(rte_sid[gg][5], 3, -1)) * 100
									else
										xx_temp = tonumber(rte_sid[gg][5])
									end
									if xx_temp == nil then
										legs_data2b[legs_num2b][5] = legs_data2b[legs_num2b-1][5]
										legs_data2b[legs_num2b][6] = legs_data2b[legs_num2b-1][6]
									else
										legs_data2b[legs_num2b][5] = xx_temp		-- altitude
										xx_temp = 0
										if rte_sid[gg][6] == "+" then
											xx_temp = 43
										elseif rte_sid[gg][6] == "-" then
											xx_temp = 45
										end
										legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
									end
								else
									xx_temp = tonumber(rte_sid[gg][4])
									if xx_temp == nil then
										xx_temp = 0
									end
									legs_data2b[legs_num2b][4] = xx_temp		-- speed
									xx_temp = tonumber(rte_sid[gg][5])
									if xx_temp == nil then
										xx_temp = 0
									end
									if string.sub(rte_sid[gg][5], 1, 2) == "FL" then
										xx_temp = tonumber(string.sub(rte_sid[gg][5], 3, -1)) * 100
									else
										xx_temp = tonumber(rte_sid[gg][5])
									end
									if xx_temp == nil then
										xx_temp = 0
									end
									legs_data2b[legs_num2b][5] = xx_temp		-- altitude
									xx_temp = 0
									if rte_sid[gg][6] == "+" then
										xx_temp = 43
									elseif rte_sid[gg][6] == "-" then
										xx_temp = 45
									end
									legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
								end
								legs_data2b[legs_num2b][7] = 0		-- latitude
								legs_data2b[legs_num2b][8] = 0		-- longitude
								legs_data2b[legs_num2b][9] = ref_sid2			-- via id
								legs_data2b[legs_num2b][10] = 0		-- calc speed
								legs_data2b[legs_num2b][11] = 0		-- calc altitude
								legs_data2b[legs_num2b][12] = 0		-- calc altitude vnav pth
								legs_data2b[legs_num2b][13] = 0
								legs_data2b[legs_num2b][14] = 0		-- rest alt
								legs_data2b[legs_num2b][15] = 0		-- last fuel
								legs_data2b[legs_num2b][16] = rte_sid[gg][12]
								legs_data2b[legs_num2b][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
								legs_data2b[legs_num2b][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
								legs_data2b[legs_num2b][19] = 1		-- 0-none, 1-SID, 2-STAR, 3-APP
								xx_temp = tonumber(rte_sid[gg][8])
								if xx_temp == nil then
									legs_data2b[legs_num2b][20] = 0	-- vpa
								else
									legs_data2b[legs_num2b][20] = xx_temp / 100	-- vpa
								end
								legs_data2b[legs_num2b][21] = rte_sid[gg][9]
								legs_data2b[legs_num2b][22] = rte_sid[gg][18]
								legs_data2b[legs_num2b][23] = 0
								legs_data2b[legs_num2b][24] = 0
								legs_data2b[legs_num2b][25] = 0
								legs_data2b[legs_num2b][26] = 0
								legs_data2b[legs_num2b][27] = rte_sid[gg][13]
								legs_data2b[legs_num2b][28] = rte_sid[gg][14]
								legs_data2b[legs_num2b][29] = rte_sid[gg][11]
								legs_data2b[legs_num2b][30] = rte_sid[gg][10]
								legs_data2b[legs_num2b][31] = rte_sid[gg][15]
								legs_data2b[legs_num2b][32] = rte_sid[gg][16]
								if rte_sid[gg][22] == 1 then
									legs_data2b[legs_num2b][32] = legs_data2b[legs_num2b][32] + 10
								elseif rte_sid[gg][22] == 2 then
									legs_data2b[legs_num2b][32] = legs_data2b[legs_num2b][32] + 20
								end
								legs_data2b[legs_num2b][33] = rte_sid[gg][19]
								legs_data2b[legs_num2b][34] = rte_sid[gg][20]
								legs_data2b[legs_num2b][35] = rte_sid[gg][21]
								legs_data2b[legs_num2b][36] = 0
								legs_data2b[legs_num2b][37] = 0
								legs_data2b[legs_num2b][38] = ""
								legs_data2b[legs_num2b][39] = ""
								legs_data2b[legs_num2b][40] = 0
							end
						end
					end
				else 
					rte_add_sid_act = 4
				end
			else
				rte_add_sid_act = 4
			end
		else
			rte_add_sid_act = 4
		end
	end
	
	if rte_add_sid_act == 4 then
		if add_ok == 1 or rnw_added == 1 then
			if legs_data2_tmpb[1][1] ~= legs_data2b[legs_num2b][1] and legs_data2_tmp_nb > 1 
			and legs_data2_tmpb[1][1] ~= "DISCONTINUITY" then
				if legs_data2_tmpb[1][9] ~= "DIRECT" then
					-- create DISCONTINUITY
					legs_num2b = legs_num2b + 1
					rte_add_discob(legs_num2b)
					rte_pasteb(legs_num2b + 1)
				else
					rte_pasteb(legs_num2b + 1)
				end
			else
				if legs_data2_tmpb[1][1] == legs_data2b[legs_num2b][1] then
					-- change to SID
					legs_data2_tmpb[1][9] = ref_sid2
					legs_data2_tmpb[1][19] = 3
					---
					rte_pasteb(legs_num2b)
				else
					rte_pasteb(legs_num2b + 1)
				end
			end
		end
	end
	if rte_add_sid_act == 2 then
		rte_add_sid_act = 3
	elseif rte_add_sid_act == 4 then
		rte_add_sid_act = 5
	end
	
	
end

--function rte_add_star_app()

function rte_add_star2()
	
	local ii = 0
	local jj = 0
	local kk = 0
	local gg = 0
	local gg2 = 0
	local xx_temp = 0
	local rnw_ok  = 0
	local rnw_txt = ""
	local rnw_txt2 = ""
	--local add_ok = 0
	local tns_ok = 0
	local disco_status = 0
	local only_one_star = 0
	--local app_idx = 0
	local add_wpt = 0
	
	local temp_str = ""
	---
	
	-- --delete previous STAR, APP
	-- rte_del_specb(99)
	
	-- add_star = 1	-- info for APP
	
	--dump_leg()
	rte_lat = 0
	rte_lon = 0
	
	
	-- add STAR and TRANS STAR
	if rte_star_num > 0 then
		
		if des_star2 ~= "------" then
			
			if rte_star_num > 1 then
				for gg = 1, rte_star_num do
					if rte_star[gg][1] == des_star2 then
						if rnw_ok == 0 then
							rnw_txt = rte_star[gg][2]
							rnw_ok = 1
							only_one_star = 1
						else
							if rte_star[gg][2] ~= " " then
								if rte_star[gg][2] ~= rnw_txt then
									only_one_star = 0
								end
							end
						end
					end
				end
			end
			
			rnw_ok = 0
			
			--for gg = 1, rte_star_num do
			gg = sid_cnt
			if gg <= rte_star_num then
				rnw_ok = 0
				rnw_txt = "RW"
				rnw_txt2 = "RW"
				if des_app2 ~= "------" then
					if string.len(des_app2) > 4 then
						jj, kk = string.find(des_app2, "-")
						if jj == nil then
							rnw_txt = rnw_txt .. string.sub(des_app2, 2, -2)
						else
							rnw_txt = rnw_txt .. string.sub(des_app2, 2, jj-1)
						end
					else
						rnw_txt = rnw_txt .. string.sub(des_app2, 2, -1)
					end
				end
				-- RWxx
				if rte_star[gg][2] == rnw_txt then
					rnw_ok = 1
				end
				
				-- RWxxB -> L, R, C
				if string.sub(rte_star[gg][2], -1, -1) == "B" then
					if string.len(rnw_txt) > 4 then
						rnw_txt2 = string.sub(rnw_txt, 1, -2)
					end
					if string.sub(rte_star[gg][2], 1, -2) == rnw_txt2 then
						rnw_ok = 1
					end
				end
				
				-- ALL
				if rte_star[gg][2] == "ALL" or rte_star[gg][2] == " " then
					rnw_ok = 1
				end
				
				tns_ok = 0
				if rte_star[gg][2] == des_star_trans2 then
					tns_ok = 1
				end
				
				if rte_star[gg][1] == des_star2 then
					if rnw_ok == 1 or tns_ok == 1 or only_one_star == 1 then
						
						add_wpt = 0
						
						ii = 0
						if gg > 1 then
							if rte_star[gg-1][15] == "CI" or rte_star[gg-1][15] == "VI" then
								ii = 1
							end
						end
						
						if rte_star[gg][15] == "IF" and ii == 0 then
							disco_status = 1
							if legs_data2b[legs_num2b][19] == 2 or legs_data2b[legs_num2b][19] == 4 then
								disco_status = 0
							elseif legs_data2b[legs_num2b][19] == 10 then
								disco_status = 0
							else
								if legs_data2b[legs_num2b][1] == rte_star[gg][3] then
									disco_status = 0
								end
							end
							
							if disco_status == 0 then
								if rte_star[gg][3] == legs_data2b[legs_num2b][1] and rte_star[gg][3] ~= "" then
									if legs_data2b[legs_num2b][1] == "VECTOR" and rte_star[gg][3] == legs_data2b[legs_num2b-1][1] then
										-- skip VECTOR
										legs_num2b = legs_num2b - 1
									end
									if legs_data2b[legs_num2b][19] ~= 2 and legs_data2b[legs_num2b][19] ~= 10 then
										legs_data2b[legs_num2b][19] = 4	-- STAR APP before RTE
									end
									-- change ALT, SPD restrict,..
									xx_temp = tonumber(rte_star[gg][4])
									if xx_temp == nil then
										xx_temp = 0
									end
									legs_data2b[legs_num2b][4] = xx_temp		-- speed
									if string.sub(rte_star[gg][5], 1, 2) == "FL" then
										xx_temp = tonumber(string.sub(rte_star[gg][5], 3, -1)) * 100
									else
										xx_temp = tonumber(rte_star[gg][5])
									end
									if xx_temp == nil then
										xx_temp = 0
									end
									legs_data2b[legs_num2b][5] = xx_temp		-- altitude
									xx_temp = 0
									if rte_star[gg][6] == "+" then
										xx_temp = 43
									elseif rte_star[gg][6] == "-" then
										xx_temp = 45
									end
									legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
								else
									if legs_data2b[legs_num2b][1] == "VECTOR" and rte_star[gg][3] == legs_data2b[legs_num2b-1][1] then
										-- skip VECTOR
										legs_num2b = legs_num2b - 1
										if legs_data2b[legs_num2b][19] ~= 2 and legs_data2b[legs_num2b][19] ~= 10 then
											legs_data2b[legs_num2b][19] = 4	-- STAR APP before RTE
										end
										-- change ALT, SPD restrict,..
										xx_temp = tonumber(rte_star[gg][4])
										if xx_temp == nil then
											xx_temp = 0
										end
										legs_data2b[legs_num2b][4] = xx_temp		-- speed
										if string.sub(rte_star[gg][5], 1, 2) == "FL" then
											xx_temp = tonumber(string.sub(rte_star[gg][5], 3, -1)) * 100
										else
											xx_temp = tonumber(rte_star[gg][5])
										end
										if xx_temp == nil then
											xx_temp = 0
										end
										legs_data2b[legs_num2b][5] = xx_temp		-- altitude
										xx_temp = 0
										if rte_star[gg][6] == "+" then
											xx_temp = 43
										elseif rte_star[gg][6] == "-" then
											xx_temp = 45
										end
										legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
									else
										add_wpt = 1
									end
								end
							else
								if legs_data2b[legs_num2b][1] ~= "DISCONTINUITY" then
									if add_ok == 0 then
										rte_copyb(legs_num2b + 1)
										--add_ok = 1
									end
									-- create DISCONTINUITY
									legs_num2b = legs_num2b + 1
									rte_add_discob(legs_num2b)
									-- add waypoint
									add_wpt = 1
								end
							end
						else
							if add_ok == 0 then
								rte_copyb(legs_num2b + 1)
								--add_ok = 1
							end
							-- add waypoint
							add_wpt = 1
						end
						
						if add_wpt == 1 then
							add_ok = 1
							legs_num2b = legs_num2b + 1
							legs_data2b[legs_num2b] = {}
							if rte_star[gg][3] == legs_data2b[legs_num2b-1][1] then
								if rte_star[gg][15] == "VM" or rte_star[gg][15] == "FM" then		-- VECTOR
									-- VECTOR
									legs_data2b[legs_num2b][1] = "VECTOR"	-- id WPT
								elseif rte_star[gg][15] == "HA" or rte_star[gg][15] == "HF" or rte_star[gg][15] == "HM" then
									-- HOLD
									legs_data2b[legs_num2b][1] = rte_star[gg][3]
								elseif string.sub(rte_star[gg][15], 2, 2) == "A" then
									-- (1000)
									jj = tonumber(rte_star[gg][5])
									if jj == nil then
										legs_data2b[legs_num2b][1] = "(----)"	-- id WPT
									else
										legs_data2b[legs_num2b][1] = "(" .. tostring(jj) .. ")"
									end
								elseif rte_star[gg][15] == "PI" then
									-- Proc Turn
									legs_data2b[legs_num2b][1] = rte_star[gg][3]	-- id WPT
								elseif string.sub(rte_star[gg][15], 2, 2) == "I" then
									-- (INTC)
									legs_data2b[legs_num2b][1] = "(INTC)"	-- id WPT
								elseif rte_star[gg][15] == "CF" then
									-- (INTC)
									legs_data2b[legs_num2b][1] = "(INTC)"	-- id WPT
								elseif string.sub(rte_star[gg][15], 2, 2) == "R" then
									--(ABC180)
									jj = tonumber(rte_star[gg][11])
									temp_str = ""
									if jj ~= nil then
										jj = jj / 10
										temp_str = string.format("%03d", jj)
									else
										temp_str = "000"
									end
									legs_data2b[legs_num2b][1] = "(" .. rte_star[gg][13] .. temp_str .. ")"
								elseif string.sub(rte_star[gg][15], 2, 2) == "D" then
									--(ABC-10)
									jj = tonumber(rte_star[gg][10])
									temp_str = ""
									if jj ~= nil then
										jj = jj / 10
										temp_str = string.format("%02d", jj)
									else
										temp_str = "00"
									end
									legs_data2b[legs_num2b][1] = "(" .. rte_star[gg][13] .. "-" .. temp_str .. ")"
								elseif rte_star[gg][15] == "FC" then
									--(ABC)
									legs_data2b[legs_num2b][1] = "(" .. rte_star[gg][3]  .. ")"
								else
									if (rte_star[gg][22] == 0 and legs_data2b[legs_num2b-1][32] < 10) 
									or (rte_star[gg][22] == 1 and legs_data2b[legs_num2b-1][32] > 9 and legs_data2b[legs_num2b-1][32] < 20) 
									or (rte_star[gg][22] == 2 and legs_data2b[legs_num2b-1][32] > 19) then
										legs_data2b[legs_num2b][1] = "(----)"	-- id WPT
									else
										legs_data2b[legs_num2b][1] = rte_star[gg][3]
									end
									--legs_data2b[legs_num2b][1] = "(----)"	-- id WPT
								end
							else
								legs_data2b[legs_num2b][1] = rte_star[gg][3]	-- id WPT
							end
							xx_temp = tonumber(rte_star[gg][7])
							if xx_temp == nil then
								xx_temp = 0
							end
							xx_temp = xx_temp / 10
							legs_data2b[legs_num2b][2] = math.rad(xx_temp)		-- brg
							legs_data2b[legs_num2b][3] = 0		-- distance
							
							if rte_star[gg][15] == "HA" or rte_star[gg][15] == "HF" or rte_star[gg][15] == "HM" then
								-- HOLD
								xx_temp = tonumber(rte_star[gg][4])
								if xx_temp == nil then
									xx_temp = legs_data2b[legs_num2b-1][4]
								end
								legs_data2b[legs_num2b][4] = xx_temp		-- speed
								
								if string.sub(rte_star[gg][5], 1, 2) == "FL" then
									xx_temp = tonumber(string.sub(rte_star[gg][5], 3, -1)) * 100
								else
									xx_temp = tonumber(rte_star[gg][5])
								end
								if xx_temp == nil then
									legs_data2b[legs_num2b][5] = legs_data2b[legs_num2b-1][5]
									legs_data2b[legs_num2b][6] = legs_data2b[legs_num2b-1][6]
								else
									legs_data2b[legs_num2b][5] = xx_temp		-- altitude
									xx_temp = 0
									if rte_star[gg][6] == "+" then
										xx_temp = 43
									elseif rte_star[gg][6] == "-" then
										xx_temp = 45
									end
									legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
								end
							else
								xx_temp = tonumber(rte_star[gg][4])
								if xx_temp == nil then
									xx_temp = 0
								end
								legs_data2b[legs_num2b][4] = xx_temp		-- speed
								xx_temp = tonumber(rte_star[gg][5])
								if xx_temp == nil then
									xx_temp = 0
								end
								if string.sub(rte_star[gg][5], 1, 2) == "FL" then
									xx_temp = tonumber(string.sub(rte_star[gg][5], 3, -1)) * 100
								else
									xx_temp = tonumber(rte_star[gg][5])
								end
								if xx_temp == nil then
									xx_temp = 0
								end
								legs_data2b[legs_num2b][5] = xx_temp		-- altitude
								xx_temp = 0
								if rte_star[gg][6] == "+" then
									xx_temp = 43
								elseif rte_star[gg][6] == "-" then
									xx_temp = 45
								end
								legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
							end
							
							legs_data2b[legs_num2b][7] = 0		-- latitude
							legs_data2b[legs_num2b][8] = 0		-- longitude
							legs_data2b[legs_num2b][9] = des_star2			-- via id
							legs_data2b[legs_num2b][10] = 0		-- calc speed
							legs_data2b[legs_num2b][11] = 0		-- calc altitude
							legs_data2b[legs_num2b][12] = 0		-- calc altitude vnav pth
							legs_data2b[legs_num2b][13] = 0
							legs_data2b[legs_num2b][14] = 0		-- rest alt
							legs_data2b[legs_num2b][15] = 0		-- last fuel
							legs_data2b[legs_num2b][16] = rte_star[gg][12]
							legs_data2b[legs_num2b][17] = 200		-- spd flag 0-default restrict, 1-custom restrict
							legs_data2b[legs_num2b][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
							legs_data2b[legs_num2b][19] = 2		-- 0-none, 1-SID, 2-STAR, 3-APP
							xx_temp = tonumber(rte_star[gg][8])
							if xx_temp == nil then
								legs_data2b[legs_num2b][20] = 0	-- vpa
							else
								legs_data2b[legs_num2b][20] = xx_temp / 100	-- vpa
							end
							legs_data2b[legs_num2b][21] = rte_star[gg][9]
							legs_data2b[legs_num2b][22] = rte_star[gg][18]
							legs_data2b[legs_num2b][23] = 0
							legs_data2b[legs_num2b][24] = 0
							legs_data2b[legs_num2b][25] = 0
							legs_data2b[legs_num2b][26] = 0
							legs_data2b[legs_num2b][27] = rte_star[gg][13]
							legs_data2b[legs_num2b][28] = rte_star[gg][14]
							legs_data2b[legs_num2b][29] = rte_star[gg][11]
							legs_data2b[legs_num2b][30] = rte_star[gg][10]
							legs_data2b[legs_num2b][31] = rte_star[gg][15]
							legs_data2b[legs_num2b][32] = rte_star[gg][16]
							if rte_star[gg][22] == 1 then
								legs_data2b[legs_num2b][32] = legs_data2b[legs_num2b][32] + 10
							elseif rte_star[gg][22] == 2 then
								legs_data2b[legs_num2b][32] = legs_data2b[legs_num2b][32] + 20
							end
							legs_data2b[legs_num2b][33] = rte_star[gg][19]
							legs_data2b[legs_num2b][34] = rte_star[gg][20]
							legs_data2b[legs_num2b][35] = rte_star[gg][21]
							legs_data2b[legs_num2b][36] = 0
							legs_data2b[legs_num2b][37] = 0
							legs_data2b[legs_num2b][38] = ""
							legs_data2b[legs_num2b][39] = ""
							legs_data2b[legs_num2b][40] = 0
						end
						
					end
				end
			else
				rte_add_star_act = 0
			end
		else
			rte_add_star_act = 0
		end
		
	else
		rte_add_star_act = 0
	end
	
	-- if add_ok == 1 then
		-- rte_pasteb(legs_num2b + 1)
	-- end
	if add_ok == 1 then
		add_star = 2
	end
	
	--rte_add_app()
	
end

function rte_add_app2()
	
	local ii = 0
	local jj = 0
	local kk = 0
	local gg = 0
	local gg2 = 0
	local xx_temp = 0
	local rnw_ok  = 0
	local rnw_txt = ""
	local rnw_txt2 = ""
	--local add_ok = 0
	local tns_ok = 0
	local disco_status = 0
	local only_one_star = 0
	local temp_str = ""
	local add_wpt = 0
	--local app_str = ""
	---
	-- local vvv = 0
	-- local fms_line = ""
	
	-- local file_name2 = "legs.txt"
	-- local file_navdata2 = io.open(file_name2, "w")
	----
	
	-- if add_star == 0 then
		-- --delete previous APP
		-- rte_del_specb(7)
	-- else
		-- if add_star == 2 then
			-- add_ok = 1
		-- end
	-- end
	
	--dump_leg()
	rte_lat = 0
	rte_lon = 0
	-- add APP and TRANS APP
	disco_status = 0
	if rte_add_app_act == 2 then
		if rte_app_num > 0 then
			
			if des_app2 ~= "------" then
				
				
				-- -- approach name
				-- temp_str = string.sub(des_app2, 1, 1)
				-- if temp_str == "I" then
					-- app_str = "ILS "
				-- elseif temp_str == "R" then
					-- app_str = "RNAV "
				-- elseif temp_str == "D" then
					-- app_str = "VDM "
				-- elseif temp_str == "S" then
					-- app_str = "VDM "
				-- elseif temp_str == "L" then
					-- app_str = "LOC "
				-- elseif temp_str == "Q" then
					-- app_str = "NDB "
				-- elseif temp_str == "N" then
					-- app_str = "NDB "
				-- elseif temp_str == "J" then
					-- app_str = "GLS "
				-- elseif temp_str == "V" then
					-- app_str = "VOR "
				-- else
					-- app_str = temp_str
				-- end
				-- app_str = app_str .. string.sub(des_app2, 2, -1)
				
				
				--for gg = 1, rte_app_num do
				gg = sid_cnt
				if gg <= rte_app_num then
					
					tns_ok = 0
					if rte_app[gg][2] == des_app_tns2 then
						tns_ok = 1
					end
					if rte_app[gg][2] == " " then
						tns_ok = 1
					end
					
					-- if file_navdata2 ~= nil then
						-- fms_line = rte_app[gg][1] .. "->" .. des_app .. "," .. rte_app[gg][2] .. "->" .. rnw_txt .. "," .. des_app_tns .. "\n"
						-- file_navdata2:write(fms_line)
					-- end
					
					if rte_app[gg][1] == des_app2 then
						if tns_ok == 1 then
							
							add_wpt = 0
							
							ii = 0
							if gg > 1 then
								if rte_app[gg-1][15] == "CI" or rte_app[gg-1][15] == "VI" then
									ii = 1
								end
							end
							
							if rte_app[gg][15] == "IF" and ii == 0 then
								disco_status = 1
								if legs_data2b[legs_num2b][19] == 2 or legs_data2b[legs_num2b][19] == 4 then
									disco_status = 0
								elseif legs_data2b[legs_num2b][19] == 7 or legs_data2b[legs_num2b][19] == 8 or legs_data2b[legs_num2b][19] == 9 then
									disco_status = 0
								elseif legs_data2b[legs_num2b][19] == 10 then
									disco_status = 0
								else
									if legs_data2b[legs_num2b][1] == rte_app[gg][3] then
										disco_status = 0
									end
								end
								
								--entry = "IF " .. tostring(disco_status)
								if disco_status == 0 then
									-- if legs_data2b[legs_num2b][19] == 7 then
										-- legs_data2b[legs_num2b][19] = 7	-- APP before APP
									-- elseif legs_data2b[legs_num2b][19] == 2 then
										-- legs_data2b[legs_num2b][19] = 8	-- APP before STAR
									-- else
										-- legs_data2b[legs_num2b][19] = 9	-- APP before RTE
									-- end
									if rte_app[gg][3] == legs_data2b[legs_num2b][1] and rte_app[gg][3] ~= "" then
										if legs_data2b[legs_num2b][1] == "VECTOR" and rte_app[gg][3] == legs_data2b[legs_num2b-1][1] then
											-- skip VECTOR
											legs_num2b = legs_num2b - 1
										end
										if legs_data2b[legs_num2b][19] == 2 then
											legs_data2b[legs_num2b][19] = 8	-- APP before STAR
										elseif legs_data2b[legs_num2b][19] ~= 7 and legs_data2b[legs_num2b][19] ~= 10 then
											legs_data2b[legs_num2b][19] = 9	-- APP before RTE
										end
										legs_data2b[legs_num2b][17] = rte_app[gg][17] + 200		-- 0-none, 1-FAF
										-- change ALT, SPD restrict,.. if not HOLD
										if legs_data2b[legs_num2b][21] ~= 0 and legs_data2b[legs_num2b][21] ~= 1 then
											xx_temp = tonumber(rte_app[gg][4])
											if xx_temp == nil then
												xx_temp = 0
											end
											legs_data2b[legs_num2b][4] = xx_temp		-- speed
											if string.sub(rte_app[gg][5], 1, 2) == "FL" then
												xx_temp = tonumber(string.sub(rte_app[gg][5], 3, -1)) * 100
											else
												xx_temp = tonumber(rte_app[gg][5])
											end
											if xx_temp == nil then
												xx_temp = 0
											end
											legs_data2b[legs_num2b][5] = xx_temp		-- altitude
											xx_temp = 0
											if rte_app[gg][6] == "+" then
												xx_temp = 43
											elseif rte_app[gg][6] == "-" then
												xx_temp = 45
											end
											legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
										end
									else
										if legs_data2b[legs_num2b][1] == "VECTOR" and rte_app[gg][3] == legs_data2b[legs_num2b-1][1] then
											-- skip VECTOR
											legs_num2b = legs_num2b - 1
											-- change ALT, SPD restrict,..
											if legs_data2b[legs_num2b][19] == 2 then
												legs_data2b[legs_num2b][19] = 8	-- APP before STAR
											elseif legs_data2b[legs_num2b][19] ~= 7 and legs_data2b[legs_num2b][19] ~= 10 then
												legs_data2b[legs_num2b][19] = 9	-- APP before RTE
											end
											legs_data2b[legs_num2b][17] = rte_app[gg][17] + 200		-- 0-none, 1-FAF
											xx_temp = tonumber(rte_app[gg][4])
											if xx_temp == nil then
												xx_temp = 0
											end
											legs_data2b[legs_num2b][4] = xx_temp		-- speed
											if string.sub(rte_app[gg][5], 1, 2) == "FL" then
												xx_temp = tonumber(string.sub(rte_app[gg][5], 3, -1)) * 100
											else
												xx_temp = tonumber(rte_app[gg][5])
											end
											if xx_temp == nil then
												xx_temp = 0
											end
											legs_data2b[legs_num2b][5] = xx_temp		-- altitude
											xx_temp = 0
											if rte_app[gg][6] == "+" then
												xx_temp = 43
											elseif rte_app[gg][6] == "-" then
												xx_temp = 45
											end
											legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
										else
											add_wpt = 1
										end
									end
								else
									if legs_data2b[legs_num2b][1] ~= "DISCONTINUITY" then
										if add_ok == 0 then
											rte_copyb(legs_num2b + 1)
											--add_ok = 1
										end
										-- create DISCONTINUITY
										legs_num2b = legs_num2b + 1
										rte_add_discob(legs_num2b)
										-- add waypoint
										add_wpt = 1
									end
								end
							else
								if add_ok == 0 then
									rte_copyb(legs_num2b + 1)
									--add_ok = 1
								end
								-- add waypoint
								add_wpt = 1
							end
							
							if add_wpt == 1 then
								add_ok = 1
								
								if rte_app[gg][17] == 2 then
									app_str = "MISSED APPRCH"
								end
								
								--if rte_app[gg][15] == "PI" then
									--rte_add_pi(rte_app[gg][3], rte_app[gg][12], des_app, rte_app[gg][7], rte_app[gg][11], rte_app[gg][9], 0, "", 205, 7)
								--else
								
								legs_num2b = legs_num2b + 1
								legs_data2b[legs_num2b] = {}
								if rte_app[gg][3] == legs_data2b[legs_num2b-1][1] then
									if rte_app[gg][15] == "VM" or rte_app[gg][15] == "FM" then		-- VECTOR
										-- VECTOR
										legs_data2b[legs_num2b][1] = "VECTOR"	-- id WPT
									elseif rte_app[gg][15] == "HA" or rte_app[gg][15] == "HF" or rte_app[gg][15] == "HM" then
										-- HOLD
										legs_data2b[legs_num2b][1] = rte_app[gg][3]
									elseif string.sub(rte_app[gg][15], 2, 2) == "A" then
										-- (1000)
										jj = tonumber(rte_app[gg][5])
										if jj == nil then
											legs_data2b[legs_num2b][1] = "(----)"	-- id WPT
										else
											legs_data2b[legs_num2b][1] = "(" .. tostring(jj) .. ")"
										end
									elseif rte_app[gg][15] == "PI" then
										-- Proc Turn
										legs_data2b[legs_num2b][1] = rte_app[gg][3]	-- id WPT
									elseif string.sub(rte_app[gg][15], 2, 2) == "I" then
										-- (INTC)
										legs_data2b[legs_num2b][1] = "(INTC)"	-- id WPT
									elseif rte_app[gg][15] == "CF" then
										-- (INTC)
										legs_data2b[legs_num2b][1] = "(INTC)"	-- id WPT
									elseif string.sub(rte_app[gg][15], 2, 2) == "R" then
										--(ABC180)
										jj = tonumber(rte_app[gg][11])
										temp_str = ""
										if jj ~= nil then
											jj = jj / 10
											temp_str = string.format("%03d", jj)
										else
											temp_str = "000"
										end
										legs_data2b[legs_num2b][1] = "(" .. rte_app[gg][13] .. temp_str .. ")"
									elseif string.sub(rte_app[gg][15], 2, 2) == "D" then
										--(ABC-10)
										jj = tonumber(rte_app[gg][10])
										temp_str = ""
										if jj ~= nil then
											jj = jj / 10
											temp_str = string.format("%02d", jj)
										else
											temp_str = "00"
										end
										legs_data2b[legs_num2b][1] = "(" .. rte_app[gg][13] .. "-" .. temp_str .. ")"
									elseif rte_app[gg][15] == "FC" then
										--(ABC)
										legs_data2b[legs_num2b][1] = "(" .. rte_app[gg][3]  .. ")"
									else
										if (rte_app[gg][22] == 0 and legs_data2b[legs_num2b-1][32] < 10) 
										or (rte_app[gg][22] == 1 and legs_data2b[legs_num2b-1][32] > 9 and legs_data2b[legs_num2b-1][32] < 20) 
										or (rte_app[gg][22] == 2 and legs_data2b[legs_num2b-1][32] > 19) then
											legs_data2b[legs_num2b][1] = "(----)"	-- id WPT
										else
											legs_data2b[legs_num2b][1] = rte_app[gg][3]
										end
										--legs_data2b[legs_num2b][1] = "(----)"	-- id WPT
									end
								else
									legs_data2b[legs_num2b][1] = rte_app[gg][3]
								end
								
								xx_temp = tonumber(rte_app[gg][7])
								if xx_temp == nil then
									xx_temp = 0
								end
								xx_temp = xx_temp / 10
								legs_data2b[legs_num2b][2] = math.rad(xx_temp)		-- brg
								legs_data2b[legs_num2b][3] = 0		-- distance
								
								if rte_app[gg][15] == "HA" or rte_app[gg][15] == "HF" or rte_app[gg][15] == "HM" then
									-- HOLD
									xx_temp = tonumber(rte_app[gg][4])
									if xx_temp == nil then
										xx_temp = legs_data2b[legs_num2b-1][4]
									end
									legs_data2b[legs_num2b][4] = xx_temp		-- speed
									
									if string.sub(rte_app[gg][5], 1, 2) == "FL" then
										xx_temp = tonumber(string.sub(rte_app[gg][5], 3, -1)) * 100
									else
										xx_temp = tonumber(rte_app[gg][5])
									end
									if xx_temp == nil then
										legs_data2b[legs_num2b][5] = legs_data2b[legs_num2b-1][5]
										legs_data2b[legs_num2b][6] = legs_data2b[legs_num2b-1][6]
									else
										legs_data2b[legs_num2b][5] = xx_temp		-- altitude
										xx_temp = 0
										if rte_app[gg][6] == "+" then
											xx_temp = 43
										elseif rte_app[gg][6] == "-" then
											xx_temp = 45
										end
										legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
									end
								else
									xx_temp = tonumber(rte_app[gg][4])
									if xx_temp == nil then
										xx_temp = 0
									end
									legs_data2b[legs_num2b][4] = xx_temp		-- speed
									xx_temp = tonumber(rte_app[gg][5])
									if xx_temp == nil then
										xx_temp = 0
									end
									if string.sub(rte_app[gg][5], 1, 2) == "FL" then
										xx_temp = tonumber(string.sub(rte_app[gg][5], 3, -1)) * 100
									else
										xx_temp = tonumber(rte_app[gg][5])
									end
									if xx_temp == nil then
										xx_temp = 0
									end
									legs_data2b[legs_num2b][5] = xx_temp		-- altitude
									xx_temp = 0
									if rte_app[gg][6] == "+" then
										xx_temp = 43
									elseif rte_app[gg][6] == "-" then
										xx_temp = 45
									end
									legs_data2b[legs_num2b][6] = xx_temp	-- altitude type
								end
								legs_data2b[legs_num2b][7] = 0		-- latitude
								legs_data2b[legs_num2b][8] = 0		-- longitude
								legs_data2b[legs_num2b][9] = app_str	-- via
								legs_data2b[legs_num2b][10] = 0		-- calc speed
								legs_data2b[legs_num2b][11] = 0		-- calc altitude
								legs_data2b[legs_num2b][12] = 0		-- calc altitude vnav pth
								legs_data2b[legs_num2b][13] = 0
								legs_data2b[legs_num2b][14] = 0		-- rest alt
								legs_data2b[legs_num2b][15] = 0		-- last fuel
								legs_data2b[legs_num2b][16] = rte_app[gg][12]
								legs_data2b[legs_num2b][17] = rte_app[gg][17] + 200 		-- 0 - none, 1 - FAF, 2 - Missed wpt
								legs_data2b[legs_num2b][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
								legs_data2b[legs_num2b][19] = 7		-- 0-none, 1-SID, 2-STAR, 3-APP
								xx_temp = tonumber(rte_app[gg][8])
								if xx_temp == nil then
									legs_data2b[legs_num2b][20] = 0	-- vpa
								else
									legs_data2b[legs_num2b][20] = xx_temp / 100	-- vpa
								end
								legs_data2b[legs_num2b][21] = rte_app[gg][9]
								legs_data2b[legs_num2b][22] = rte_app[gg][18]
								legs_data2b[legs_num2b][23] = 0
								legs_data2b[legs_num2b][24] = 0
								legs_data2b[legs_num2b][25] = 0
								legs_data2b[legs_num2b][26] = 0
								legs_data2b[legs_num2b][27] = rte_app[gg][13]
								legs_data2b[legs_num2b][28] = rte_app[gg][14]
								legs_data2b[legs_num2b][29] = rte_app[gg][11]
								legs_data2b[legs_num2b][30] = rte_app[gg][10]
								legs_data2b[legs_num2b][31] = rte_app[gg][15]
								legs_data2b[legs_num2b][32] = rte_app[gg][16]
								if rte_app[gg][22] == 1 then
									legs_data2b[legs_num2b][32] = legs_data2b[legs_num2b][32] + 10
								elseif rte_app[gg][22] == 2 then
									legs_data2b[legs_num2b][32] = legs_data2b[legs_num2b][32] + 20
								end
								legs_data2b[legs_num2b][33] = rte_app[gg][19]
								legs_data2b[legs_num2b][34] = rte_app[gg][20]
								legs_data2b[legs_num2b][35] = rte_app[gg][21]
								legs_data2b[legs_num2b][36] = 0
								legs_data2b[legs_num2b][37] = 0
								legs_data2b[legs_num2b][38] = ""
								legs_data2b[legs_num2b][39] = ""
								legs_data2b[legs_num2b][40] = 0
								
								--end
								
							end
							
						end
					end
				
				else
					rte_add_app_act = 3
				end
			else
				rte_add_app_act = 3
			end
		else
			rte_add_app_act = 3
		end
	end
	
	if add_ok == 1 and rte_add_app_act == 3 then
		rte_pasteb(legs_num2b + 1)
	end
	if rte_add_app_act == 3 then
		rte_add_app_act = 4
	end
	
	--add_star = 0
	
end


function dump_leg2()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if earth_nav_num > 0 then
			for vvv = 1, earth_nav_num  do
				fms_line = tostring(earth_nav[vvv][2]) .. "," .. tostring(earth_nav[vvv][3]) .. "," .. earth_nav[vvv][4] .. "," .. earth_nav[vvv][5] .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
end

-- 5, 12, 14, 19, 22, 24
function dec_name_cifs(dec_inp, dec_path, dec_navid, dec_brg, dec_dist, dec_alt)
	
	local dec_input = string.gsub(dec_inp, "%s+", "")
	local dec_output = dec_inp
  local jj = 0
  local temp_str = ""
	
	if dec_input == "" then
		if dec_path == "VM" or dec_path == "FM" then		-- VECTORS
			-- VECTORS
			dec_output = "VECTOR"	-- id WPT
		elseif string.sub(dec_path, 2, 2) == "A" then
			-- (1000)
			jj = tonumber(dec_alt)
			if jj == nil then
				dec_output = "(----)"	-- id WPT
			else
				dec_output = "(" .. tostring(jj) .. ")"
			end
		elseif dec_path == "PI" then
			-- Proc Turn
			dec_output = dec_inp	-- id WPT
		elseif string.sub(dec_path, 2, 2) == "I" then
			-- (INTC)
			dec_output = "(INTC)"	-- id WPT
		elseif dec_path == "CF" then
			-- (INTC)
			dec_output = "(INTC)"	-- id WPT
		elseif string.sub(dec_path, 2, 2) == "R" then
			--(ABC180)
			jj = tonumber(dec_brg)
			temp_str = ""
			if jj ~= nil then
				jj = jj / 10
				temp_str = string.format("%03d", jj)
			else
				temp_str = "000"
			end
			--rte_sid[rte_sid_num][3] = "R-" .. temp_str
			dec_output = "(" .. dec_navid .. temp_str .. ")"
		elseif string.sub(dec_path, 2, 2) == "D" then
			--(ABC-10)
			jj = tonumber(dec_dist)
			temp_str = ""
			if jj ~= nil then
				jj = jj / 10
				temp_str = string.format("%02d", jj)
			else
				temp_str = "00"
			end
			dec_output = "(" .. dec_navid .. "-" .. temp_str .. ")"
		else
			dec_output = "---"	-- id WPT
		end
	
	else
		if dec_path == "VM" or dec_path == "FM" then		-- VECTORS
			-- VECTORS -> VM/FM
			dec_output = "VECTOR"	-- id WPT
		elseif dec_path == "HM" or dec_path == "HA" or dec_path == "HF" then		-- HOLD
			-- HOLD -> HM/HF/HA
			dec_output = dec_inp	-- id WPT
		elseif string.sub(dec_path, 2, 2) == "A" then
			-- (1000) -> FA
			jj = tonumber(dec_alt)
			if jj == nil then
				dec_output = "(----)"	-- id WPT
			else
				dec_output = "(" .. tostring(jj) .. ")"
			end
		elseif string.sub(dec_path, 2, 2) == "D" then
			--(ABC-10) -> FD
			jj = tonumber(dec_dist)
			temp_str = ""
			if jj ~= nil then
				jj = jj / 10
				temp_str = string.format("%02d", jj)
			else
				temp_str = "00"
			end
			dec_output = "(" .. dec_navid .. "-" .. temp_str .. ")"
		elseif dec_path == "FC" then
			--(ABC-10) -> FC
			jj = tonumber(dec_dist)
			temp_str = ""
			if jj ~= nil then
				jj = jj / 10
				temp_str = string.format("%02d", jj)
			else
				temp_str = "00"
			end
			dec_output = "(" .. dec_inp .. "-" .. temp_str .. ")"
		elseif string.sub(dec_path, 2, 2) == "I" then
			-- (INTC) -> PI
			dec_output = "(INTC)"	-- id WPT
		else
			dec_output = dec_inp	-- id WPT
		end
	end
	
	return dec_output

end

function read_ref_data(ddd_ref_icao)
	
	local fms_line = ""
	local fms_word = {}
	local ii = 0
	local jj = 0
	local kk = 0
	local token = ""
	local old_sid = ""
	local temp_sid = ""
	local old_sid_tns = ""
	local old_star = ""
	local old_star_tns = ""
	local old_app = ""
	local old_app_tns = ""
	local temp_str = ""
	local temp_num = 0
	local hold_iaf_enable = 0
	
	local nd_x = 0
	local idx_rec = 0
	
	ref_data = {}
	rwy_num = 0
	ref_data_sid = {}
	sid_num = 0
	ref_data_star = {}
	star_num = 0
	ref_data_star_tns = {}
	ref_data_star_tns_n = 0
	ref_data_app = {}
	ref_data_app_n = 0
	ref_data_app_tns = {}
	ref_data_app_tns_n = 0
	ref_ed_app = {}
	ref_ed_app_n = 0
	
	local rte_temp = ""
	local rte_temp_old = ""
	rte_sid = {}
	rte_sid_num = 0
	
	local compare = 0
	
	fms_line = file_navdata:read()
	while fms_line do
		
		-- split DATA
		fms_word = {}
		ii = 0
		for token in string.gmatch(fms_line, "[^,]+") do	--(fms_line, "([^,]+),%s*") do
			ii = ii + 1
			fms_word[ii] = token
		end
		
		-- read RUNWAYs
		if string.sub(fms_line, 1, 4) == "RWY:" then
			rwy_num = rwy_num + 1
			ref_data[rwy_num] = {}
			ref_data[rwy_num][1] = string.sub(fms_line, 7, 9)		-- RWY
			ref_data[rwy_num][2] = fms_word[4]		-- altitude
			ref_data[rwy_num][3] = 0	-- used rwy
			ref_data[rwy_num][4] = 0	-- lat
			ref_data[rwy_num][5] = 0	-- lon
			ref_data[rwy_num][6] = 0	-- course
			--ref_data[rwy_num][2] = string.sub(fms_line, -26, -18)	-- lat
			--ref_data[rwy_num][3] = string.sub(fms_line, -16, -7)	-- lon
			-- if ii > 4 then
				-- jj = tonumber(fms_word[4])
				-- if jj == nil then
					-- ref_data[rwy_num][3] = 0
				-- else
					-- ref_data[rwy_num][3] = jj
				-- end
			-- end
		end
		
		-- read SIDs and TRANSs
		if string.sub(fms_word[1], 1, 4) == "SID:" then
			-- read SIDs
			if string.sub(fms_word[4], 1, 2) == "RW" or fms_word[4] == "ALL" then
				temp_sid = fms_word[3] .. fms_word[4]
				if old_sid ~= temp_sid then 
					sid_num = sid_num + 1
					ref_data_sid[sid_num] = {}
					ref_data_sid[sid_num][1] = fms_word[3]		-- id SID
					ref_data_sid[sid_num][2] = fms_word[4]		-- id runway
					old_sid = fms_word[3] .. fms_word[4]
				end
			else
				-- read TRANSs
				fms_word[4] = string.gsub(fms_word[4], "%s+", "")
				if fms_word[4] ~= "" then
					temp_sid = fms_word[3] .. fms_word[4]
					if old_sid_tns ~= temp_sid then
						tns_num = tns_num + 1
						ref_data_tns[tns_num] = {}
						ref_data_tns[tns_num][1] = fms_word[3]		-- id SID
						ref_data_tns[tns_num][2] = fms_word[4]		-- id trans
						old_sid_tns = fms_word[3] .. fms_word[4]
					end
				end
			end
			-- read Route SID
			rte_sid_num = rte_sid_num + 1
			rte_sid[rte_sid_num] = {}
			rte_sid[rte_sid_num][1] = fms_word[3]	-- id SID
			rte_sid[rte_sid_num][2] = fms_word[4]	-- id RW / trans
			if fms_word[10] == "L" then
				rte_sid[rte_sid_num][9] = 2	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
			elseif fms_word[10] == "R" or fms_word[10] == "E" then
				rte_sid[rte_sid_num][9] = 3	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
			else
				rte_sid[rte_sid_num][9] = -1	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
			end
			if string.sub(fms_word[12], 1, 1) == "H" then
				-- HOLD
				rte_sid[rte_sid_num][3] = fms_word[5]	-- id WPT
				if fms_word[10] == "L" then
					rte_sid[rte_sid_num][9] = 0		-- HOLD: -1 -> no hold, 0 -> L, 1 -> R
				else
					rte_sid[rte_sid_num][9] = 1		-- HOLD: -1 -> no hold, 0 -> L, 1 -> R
				end
			end
			
			-- 5, 12, 14, 19, 22, 24
			rte_sid[rte_sid_num][3] = dec_name_cifs(fms_word[5], fms_word[12], fms_word[14], fms_word[19], fms_word[22], fms_word[24])
			rte_sid[rte_sid_num][20] = fms_word[5]	-- navaid_id_cifs
			rte_sid[rte_sid_num][4] = fms_word[28]	-- restrict speed
			rte_sid[rte_sid_num][5] = fms_word[24]	-- restrict altitude
			if fms_word[23] == "B" then
				rte_sid[rte_sid_num][6] = "-"	-- restrict altitude +,-,B
			else
				rte_sid[rte_sid_num][6] = fms_word[23]	-- restrict altitude +,-,B
			end
			rte_sid[rte_sid_num][7] = fms_word[19]	-- course
			rte_sid[rte_sid_num][8] = fms_word[29]	-- vpa
			rte_sid[rte_sid_num][10] = fms_word[22]	-- distance
			rte_sid[rte_sid_num][11] = fms_word[21]	-- course mag
			rte_sid[rte_sid_num][12] = fms_word[6]	-- id wpt reg code
			rte_sid[rte_sid_num][13] = fms_word[14]	-- rec navaid
			rte_sid[rte_sid_num][14] = fms_word[15]	-- rec navaid reg code
			rte_sid[rte_sid_num][15] = fms_word[12]	-- path termination
			rte_sid[rte_sid_num][18] = fms_word[20]	-- distance frrom rec navaid
			rte_sid[rte_sid_num][19] = fms_word[18]	-- Radius for turn
			rte_sid[rte_sid_num][21] = fms_word[11]	-- RNP
			rte_sid[rte_sid_num][16] = 0	-- fly over wpt 0/1
			rte_sid[rte_sid_num][17] = 0
			rte_sid[rte_sid_num][22] = 0	-- NDB navaid 0/1
			if string.len(fms_word[9]) > 1 then
				if string.sub(fms_word[9], 2, 2) == "B" or string.sub(fms_word[9], 2, 2) == "Y" then
					rte_sid[rte_sid_num][16] = 1	-- fly over wpt 0/1
				end
				if string.sub(fms_word[9], 1, 1) == "N" then
					rte_sid[rte_sid_num][22] = 1	-- NDB navaid 0/1
				elseif string.sub(fms_word[9], 1, 1) == "V" then
					rte_sid[rte_sid_num][22] = 2	-- NDB navaid 0/1
				end
				hold_iaf_enable = 1
				if fms_word[12] == "IF" and fms_word[3] == rte_sid[rte_sid_num][1] then
					hold_iaf_enable = 0
				end
			end
		end
		
		-- read STARs
		if string.sub(fms_word[1], 1, 5) == "STAR:" then
			if string.sub(fms_word[4], 1, 2) == "RW" or fms_word[4] == "ALL" then
				temp_sid = fms_word[3] .. fms_word[4]
				if old_star ~= temp_sid then
					star_num = star_num + 1
					ref_data_star[star_num] = {}
					ref_data_star[star_num][1] = fms_word[3]		-- id STAR
					ref_data_star[star_num][2] = fms_word[4]		-- id runway
					old_star = fms_word[3] .. fms_word[4]
				end
			else
				temp_sid = fms_word[3] .. fms_word[4]
				if old_star_tns ~= temp_sid then
					ref_data_star_tns_n = ref_data_star_tns_n + 1
					ref_data_star_tns[ref_data_star_tns_n] = {}
					ref_data_star_tns[ref_data_star_tns_n][1] = fms_word[3]		-- id STAR
					ref_data_star_tns[ref_data_star_tns_n][2] = fms_word[4]		-- id trans
					old_star_tns = fms_word[3] .. fms_word[4]
				end
			end
		end
		
		-- read APPROACHs
		if string.sub(fms_word[1], 1, 6) == "APPCH:" then
			if fms_word[2] == "A" then
				temp_sid = fms_word[3] .. fms_word[4]
				if old_app_tns ~= temp_sid then
					ref_data_app_tns_n = ref_data_app_tns_n + 1
					ref_data_app_tns[ref_data_app_tns_n] = {}
					ref_data_app_tns[ref_data_app_tns_n][1] = fms_word[3]		-- id APP
					ref_data_app_tns[ref_data_app_tns_n][2] = fms_word[4]		-- id trans
					ref_data_app_tns[ref_data_app_tns_n][3] = fms_word[5]		-- id E/D
					old_app_tns = fms_word[3] .. fms_word[4]
				end
			else
				if old_app ~= fms_word[3] then
					ref_data_app_n = ref_data_app_n + 1
					ref_data_app[ref_data_app_n] = fms_word[3]		-- id APP
					old_app = fms_word[3]
				end
				if fms_word[9] == "E  F" then	-- E/D
					ref_ed_app_n = ref_ed_app_n + 1
					ref_ed_app[ref_ed_app_n] = {}
					ref_ed_app[ref_ed_app_n][1] = fms_word[3]	-- id APP
					ref_ed_app[ref_ed_app_n][2] = fms_word[5]	-- id E/D
				end
			end
		end
		
		fms_line = file_navdata:read()
	end
	
	if rwy_num > 0 and rnw_data_num > 0 then
		-- find unknown runways
		nd_x = string.byte(string.sub(ddd_ref_icao, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_rnw[nd_x][99999] > 0 then
				for jj = 1, idx_rnw[nd_x][99999] do
					idx_rec = idx_rnw[nd_x][jj]
					--if ref_icao == rnw_data[idx_rec][1] then
		--for jj = 1, rnw_data_num do
					if rnw_data[idx_rec][1] == ddd_ref_icao then
						rnw_data[idx_rec][9] = 0
								
						if string.sub(rnw_data[idx_rec][2], -1, -1) == "L" or string.sub(rnw_data[idx_rec][2], -1, -1) == "R"
						or string.sub(rnw_data[idx_rec][2], -1, -1) == "C" then
							temp_num = tonumber(string.sub(rnw_data[idx_rec][2], 1, -2))
							if temp_num == nil then
								temp_str = ""
							else
								temp_str = string.format("%02d", temp_num) .. string.sub(rnw_data[idx_rec][2], -1, -1)
							end
						else
							temp_num = tonumber(rnw_data[idx_rec][2])
							if temp_num == nil then
								temp_str = ""
							else
								temp_str = string.format("%02d", temp_num) .. " "
							end
						end
						
						for ii = 1, rwy_num do
							if ref_data[ii][1] == temp_str then
								rnw_data[idx_rec][9] = 1
								ref_data[ii][3] = 1
								ref_data[ii][4] = rnw_data[idx_rec][3]
								ref_data[ii][5] = rnw_data[idx_rec][4]
								ref_data[ii][6] = rnw_data[idx_rec][8]
							end
						end
					end
				end
			end
		end
		
		-- compare runways and change to CIFP data
		for ii = 1, rwy_num do
			if ref_data[ii][3] == 0 then
				nd_x = string.byte(string.sub(ddd_ref_icao, 1, 1))
				if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
					if idx_rnw[nd_x][99999] > 0 then
						for jj = 1, idx_rnw[nd_x][99999] do
							idx_rec = idx_rnw[nd_x][jj]
							--if ref_icao == rnw_data[idx_rec][1] then
				
				--for jj = 1, rnw_data_num do
							if rnw_data[idx_rec][1] == ddd_ref_icao and rnw_data[idx_rec][9] == 0 then
								compare = 0
								
								if string.sub(rnw_data[idx_rec][2], -1, -1) == "L" or string.sub(rnw_data[idx_rec][2], -1, -1) == "R"
								or string.sub(rnw_data[idx_rec][2], -1, -1) == "C" then
									temp_num = tonumber(string.sub(rnw_data[idx_rec][2], 1, -2))
									if temp_num == nil then
										temp_str = ""
									else
										temp_str = string.format("%02d", temp_num) .. string.sub(rnw_data[idx_rec][2], -1, -1)
									end
								else
									temp_num = tonumber(rnw_data[idx_rec][2])
									if temp_num == nil then
										temp_str = ""
									else
										temp_str = string.format("%02d", temp_num) .. " "
									end
								end
								
								if string.sub(ref_data[ii][1], -1, -1) == string.sub(temp_str, -1, -1) then
									compare = 1
								end
								
								if compare == 1 then
									if string.sub(ref_data[ii][1], -1, -1) == " " then
										temp_num =  tonumber(ref_data[ii][1])
									else
										temp_num =  tonumber(string.sub(ref_data[ii][1], 1, -2))
									end
									if temp_num ~= nil then
										kk = temp_num * 10
										if string.sub(temp_str, -1, -1) == " " then
											temp_num =  tonumber(temp_str)
										else
											temp_num =  tonumber(string.sub(temp_str, 1, -2))
										end
										if temp_num ~= nil then
											temp_num = temp_num * 10
											kk = ((kk - temp_num) + 360) % 360
											if kk > 180 then
												kk = kk - 360
											end
											if kk < 0 then
												kk = -kk
											end
											if kk < 30 then
												if string.sub(ref_data[ii][1], -1, -1) == " " then
													temp_num = tonumber(ref_data[ii][1])
													token = string.format("%02d", temp_num)
												else
													temp_num = tonumber(string.sub(ref_data[ii][1], 1, -2))
													token = string.format("%02d", temp_num) .. string.sub(ref_data[ii][1], -1, -1)
												end
												rnw_data[idx_rec][2] = token		-- runway
												
												ref_data[ii][4] = rnw_data[idx_rec][3]
												ref_data[ii][5] = rnw_data[idx_rec][4]
												ref_data[ii][6] = rnw_data[idx_rec][8]
												
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	
	--dump_sid()
	--dump_rnw_data(ddd_ref_icao)
	
end

function dump_sid()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if rte_sid_num > 0 then
			for vvv = 1, rte_sid_num  do
				fms_line = rte_sid[vvv][1] .. "," .. rte_sid[vvv][2] .. "," .. rte_sid[vvv][10] .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
end

function dump_rnw_data(rrr_des_icao)
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if rnw_data_num > 0 then
			for vvv = 1, rnw_data_num  do
				if rnw_data[vvv][1] == rrr_des_icao then
					fms_line = rnw_data[vvv][1] .. "," .. rnw_data[vvv][2] .. "/" .. tostring(rnw_data[vvv][9]) .. "\n"
					file_navdata2:write(fms_line)
				end
			end
		end
		file_navdata2:close()
	end
end


function read_des_data(ddd_des_icao)
	
	local fms_line = ""
	local fms_word = {}
	local ii = 0
	local jj = 0
	local kk = 0
	local token = ""
	local temp_sid = ""
	local old_star = ""
	local old_star_tns = ""
	local old_app = ""
	local old_app_tns = ""
	local temp_str = ""
	local temp_num = 0
	local compare = 0
	local hold_iaf_enable = 0
	local pi_active = 0
	local pi_crs = 0
	local pi_path = ""
	local nd_x = 0
	local idx_rec = 0
	
	des_data = {}
	des_rwy_num = 0
	data_des_star = {}
	data_des_star_n = 0
	data_des_star_tns = {}
	data_des_star_tns_n = 0
	data_des_app = {}
	data_des_app_n = 0
	data_des_app_tns = {}
	data_des_app_tns_n = 0
	ed_app_num = 0
	ed_app = {}
	
	rte_star = {}
	rte_star_num = 0
	rte_app = {}
	rte_app_num = 0
	
	fms_line = file_navdata:read()
	while fms_line do
		
		-- split DATA
		fms_word = {}
		ii = 0
		for token in string.gmatch(fms_line, "[^,]+") do 		--%s*") do
			ii = ii + 1
			fms_word[ii] = token
		end
		
		-- read RUNWAYs
		if string.sub(fms_line, 1, 4) == "RWY:" then
			des_rwy_num = des_rwy_num + 1
			des_data[des_rwy_num] = {}
			des_data[des_rwy_num][1] = string.sub(fms_line, 5, 9)		-- RWY
			des_data[des_rwy_num][2] = "" --string.sub(fms_line, -26, -18)	-- lat
			des_data[des_rwy_num][3] = "" --string.sub(fms_line, -16, -7)	-- lon
			des_data[des_rwy_num][4] = fms_word[6]						-- id ILS
			des_data[des_rwy_num][5] = fms_word[4]						-- altitude
			des_data[des_rwy_num][6] = 0 
		end
		
		-- read STARs
		if string.sub(fms_word[1], 1, 5) == "STAR:" then
			if string.sub(fms_word[4], 1, 2) == "RW" or fms_word[4] == "ALL" then
				temp_sid = fms_word[3] .. fms_word[4]
				if old_star ~= temp_sid then
					data_des_star_n = data_des_star_n + 1
					data_des_star[data_des_star_n] = {}
					data_des_star[data_des_star_n][1] = fms_word[3]		-- id STAR
					data_des_star[data_des_star_n][2] = fms_word[4]		-- id runway
					old_star = fms_word[3] .. fms_word[4]
				end
			else
				temp_sid = fms_word[3] .. fms_word[4]
				if old_star_tns ~= temp_sid then
					data_des_star_tns_n = data_des_star_tns_n + 1
					data_des_star_tns[data_des_star_tns_n] = {}
					data_des_star_tns[data_des_star_tns_n][1] = fms_word[3]		-- id STAR
					data_des_star_tns[data_des_star_tns_n][2] = fms_word[4]		-- id trans
					old_star_tns = fms_word[3] .. fms_word[4]
				end
			end
			-- read Route STAR
			--fms_word[4] = string.gsub(fms_word[4], "%s+", "")
			rte_star_num = rte_star_num + 1
			rte_star[rte_star_num] = {}
			rte_star[rte_star_num][1] = fms_word[3]	-- id STAR
			rte_star[rte_star_num][2] = fms_word[4]	-- id RW / trans
			
			if fms_word[10] == "L" then
				rte_star[rte_star_num][9] = 2	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
			elseif fms_word[10] == "R" or fms_word[10] == "E" then
				rte_star[rte_star_num][9] = 3	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
			else
				rte_star[rte_star_num][9] = -1	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
			end
			if string.sub(fms_word[12], 1, 1) == "H" then
				-- HOLD
				rte_star[rte_star_num][3] = fms_word[5]	-- id WPT
				if fms_word[10] == "L" then
					rte_star[rte_star_num][9] = 0		-- HOLD: -1 -> no hold, 0 -> L, 1 -> R
				else
					rte_star[rte_star_num][9] = 1		-- HOLD: -1 -> no hold, 0 -> L, 1 -> R
				end
			end
			
			-- 5, 12, 14, 19, 22, 24
			rte_star[rte_star_num][3] = dec_name_cifs(fms_word[5], fms_word[12], fms_word[14], fms_word[19], fms_word[22], fms_word[24])
			rte_star[rte_star_num][20] = fms_word[5]	-- navaid_id_cifs
			rte_star[rte_star_num][4] = fms_word[28]	-- restrict speed
			rte_star[rte_star_num][5] = fms_word[24]	-- restrict altitude
			if fms_word[23] == "B" then
				rte_star[rte_star_num][6] = "-"	-- restrict altitude +,-,B
			else
				rte_star[rte_star_num][6] = fms_word[23]	-- restrict altitude +,-,B
			end
			rte_star[rte_star_num][7] = fms_word[19]	-- course
			rte_star[rte_star_num][8] = fms_word[29]	-- vpa
			rte_star[rte_star_num][10] = fms_word[22]	-- distance
			rte_star[rte_star_num][11] = fms_word[21]	-- course mag
			rte_star[rte_star_num][12] = fms_word[6]	-- id wpt reg code
			rte_star[rte_star_num][13] = fms_word[14]	-- rec navaid
			rte_star[rte_star_num][14] = fms_word[15]	-- rec navaid reg code
			rte_star[rte_star_num][15] = fms_word[12]	-- path termination
			rte_star[rte_star_num][18] = fms_word[20]	-- distance frrom rec navaid
			rte_star[rte_star_num][19] = fms_word[18]	-- Radius for turn
			rte_star[rte_star_num][21] = fms_word[11]	-- RNP
			rte_star[rte_star_num][16] = 0	-- fly over wpt 0/1
			rte_star[rte_star_num][17] = 0
			rte_star[rte_star_num][22] = 0	-- NDB navaid 0/1
			if string.len(fms_word[9]) > 1 then
				if string.sub(fms_word[9], 2, 2) == "B" or string.sub(fms_word[9], 2, 2) == "Y" then
					rte_star[rte_star_num][16] = 1	-- fly over wpt 0/1
				end
				if string.sub(fms_word[9], 1, 1) == "N" then
					rte_star[rte_star_num][22] = 1	-- NDB navaid 0/1
				elseif string.sub(fms_word[9], 1, 1) == "V" then
					rte_star[rte_star_num][22] = 2	-- NDB navaid 0/1
				end
				hold_iaf_enable = 1
				if fms_word[12] == "IF" and fms_word[3] == rte_star[rte_star_num][1] then
					hold_iaf_enable = 0
				end
			end
		end
		
		-- read APPROACHs
		if string.sub(fms_word[1], 1, 6) == "APPCH:" then
			if fms_word[2] == "A" then
				temp_sid = fms_word[3] .. fms_word[4]
				if old_app_tns ~= temp_sid then
					data_des_app_tns_n = data_des_app_tns_n + 1
					data_des_app_tns[data_des_app_tns_n] = {}
					data_des_app_tns[data_des_app_tns_n][1] = fms_word[3]		-- id APP
					data_des_app_tns[data_des_app_tns_n][2] = fms_word[4]		-- id trans
					data_des_app_tns[data_des_app_tns_n][3] = fms_word[5]		-- id E/D
					old_app_tns = fms_word[3] .. fms_word[4]
				end
			else
				if old_app ~= fms_word[3] then
					data_des_app_n = data_des_app_n + 1
					data_des_app[data_des_app_n] = fms_word[3]		-- id APP
					old_app = fms_word[3]
				end
				if string.len(fms_word[9]) > 3 then
					if string.sub(fms_word[9], -1, -1) == "F" then	-- FAF wpt E/D
						ed_app_num = ed_app_num + 1
						ed_app[ed_app_num] = {}
						ed_app[ed_app_num][1] = fms_word[3]	-- id APP
						ed_app[ed_app_num][2] = fms_word[5]	-- id E/D
					end
				end
			end
			-- read Route APP
			--fms_word[4] = string.gsub(fms_word[4], "%s+", "")
			rte_app_num = rte_app_num + 1
			rte_app[rte_app_num] = {}
			rte_app[rte_app_num][1] = fms_word[3]	-- id SID
			rte_app[rte_app_num][2] = fms_word[4]	-- id RW / trans
			
			if fms_word[10] == "L" then
				rte_app[rte_app_num][9] = 2	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
			elseif fms_word[10] == "R" or fms_word[10] == "E" then
				rte_app[rte_app_num][9] = 3	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
			else
				rte_app[rte_app_num][9] = -1	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
			end
			if pi_active ~= 0 then
				rte_app[rte_app_num][9] = pi_active
				pi_active = 0
			end
			if string.sub(fms_word[12], 1, 1) == "H" then
				-- HOLD
				rte_app[rte_app_num][3] = fms_word[5]	-- id WPT
				if fms_word[10] == "L" then
					rte_app[rte_app_num][9] = 0		-- HOLD: -1 -> no hold, 0 -> L, 1 -> R
				else
					rte_app[rte_app_num][9] = 1		-- HOLD: -1 -> no hold, 0 -> L, 1 -> R
				end
			end
			
			-- 5, 12, 14, 19, 22, 24
			if fms_word[12] == "PI" then
				if fms_word[19] == "0010" or fms_word[19] == "    " then
					pi_path = "TF"
				else
					pi_path = "CF"
				end
				rte_app[rte_app_num][3] = dec_name_cifs(fms_word[5], pi_path, fms_word[14], fms_word[19], fms_word[22], fms_word[24])
				rte_app[rte_app_num][9] = -1		-- no turn
				if fms_word[10] == "L" then
					pi_active = 2	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
				else
					pi_active = 3	-- -1 -> no turn, 0 -> HOLD L, 1 -> HOLD R, 2-> TURN L, 3-> TURN R
				end
			else
				rte_app[rte_app_num][3] = dec_name_cifs(fms_word[5], fms_word[12], fms_word[14], fms_word[19], fms_word[22], fms_word[24])
			end
			rte_app[rte_app_num][20] = fms_word[5]	-- navaid_id_cifs
			rte_app[rte_app_num][4] = fms_word[28]	-- restrict speed
			if fms_word[23] == "G" or fms_word[23] == "I" then
				rte_app[rte_app_num][5] = fms_word[25]	-- restrict altitude
				rte_app[rte_app_num][6] = " "	-- restrict altitude +,-,B
			elseif fms_word[23] == "H" or fms_word[23] == "J" then
				rte_app[rte_app_num][5] = fms_word[25]	-- restrict altitude
				rte_app[rte_app_num][6] = "+"	-- restrict altitude +,-,B
			elseif fms_word[23] == "B" then
				rte_app[rte_app_num][5] = fms_word[25]	-- restrict altitude
				rte_app[rte_app_num][6] = "-"	-- restrict altitude +,-,B
			else
				rte_app[rte_app_num][5] = fms_word[24]	-- restrict altitude
				rte_app[rte_app_num][6] = fms_word[23]	-- restrict altitude +,-,B
			end
			rte_app[rte_app_num][7] = fms_word[19]	-- course
			rte_app[rte_app_num][8] = fms_word[29]	-- vpa
			rte_app[rte_app_num][10] = fms_word[22]	-- distance
			if fms_word[12] == "PI" then
				pi_crs = tonumber(fms_word[21])
				if pi_crs == nil then
					rte_app[rte_app_num][11] = "    "
				else
					if fms_word[10] == "L" then
						pi_crs = ((pi_crs / 10) + 315) % 360
					else
						pi_crs = ((pi_crs / 10) + 225) % 360
					end
					rte_app[rte_app_num][11] = string.format("%04d", pi_crs * 10)
				end
			else
				rte_app[rte_app_num][11] = fms_word[21]	-- course mag
			end
			rte_app[rte_app_num][12] = fms_word[6]	-- id wpt reg code
			rte_app[rte_app_num][13] = fms_word[14]	-- rec navaid
			rte_app[rte_app_num][14] = fms_word[15]	-- rec navaid reg code
			if fms_word[12] == "PI" then
				rte_app[rte_app_num][15] = pi_path
			else
				rte_app[rte_app_num][15] = fms_word[12]	-- path termination
			end
			rte_app[rte_app_num][18] = fms_word[20]	-- distance frrom rec navaid
			rte_app[rte_app_num][19] = fms_word[18]	-- Radius for turn
			rte_app[rte_app_num][21] = fms_word[11]	-- RNP
			rte_app[rte_app_num][16] = 0	-- fly over wpt 0/1
			rte_app[rte_app_num][22] = 0	-- NDB navaid 0/1
			if string.len(fms_word[9]) > 1 then
				if string.sub(fms_word[9], 2, 2) == "B" or string.sub(fms_word[9], 2, 2) == "Y" then
					rte_app[rte_app_num][16] = 1	-- fly over wpt 0/1
				end
				if string.sub(fms_word[9], 1, 1) == "N" then
					rte_app[rte_app_num][22] = 1	-- NDB navaid 0/1
				elseif string.sub(fms_word[9], 1, 1) == "V" then
					rte_app[rte_app_num][22] = 2	-- NDB navaid 0/1
				end
			end
			rte_app[rte_app_num][17] = 0
			if string.len(fms_word[9]) > 3 then
				if string.sub(fms_word[9], -1, -1) == "F" then	-- FAF wpt E/D
					rte_app[rte_app_num][17] = 1	-- FAF
				-- else
					-- rte_app[rte_app_num][17] = 0
				elseif string.sub(fms_word[9], 3, 3) == "M" then	-- First missed approach wpt E/D
					rte_app[rte_app_num][17] = 2	-- FMA
				end
				hold_iaf_enable = 1
				if fms_word[12] == "IF" and fms_word[3] == rte_app[rte_app_num][1] then
					hold_iaf_enable = 0
				end
				if rte_star_num > 0 then
					if fms_word[12] == "IF" and fms_word[3] == rte_star[rte_star_num][1] then
						hold_iaf_enable = 0
					end
				end
			end
			-- add second PI wpt
			if fms_word[12] == "PI" then
				rte_app_num = rte_app_num + 1
				rte_app[rte_app_num] = {}
				rte_app[rte_app_num][1] = fms_word[3]	-- id SID
				rte_app[rte_app_num][2] = fms_word[4]	-- id RW / trans
				
				rte_app[rte_app_num][3] = dec_name_cifs(fms_word[5], "FC", fms_word[14], fms_word[19], fms_word[22], fms_word[24])
				if fms_word[10] == "L" then
					rte_app[rte_app_num][9] = 3		-- HOLD: -1 -> no hold, 0 -> L, 1 -> R
				else
					rte_app[rte_app_num][9] = 2		-- HOLD: -1 -> no hold, 0 -> L, 1 -> R
				end
				rte_app[rte_app_num][20] = fms_word[5]	-- navaid_id_cifs
				rte_app[rte_app_num][4] = "   "	-- restrict speed
				rte_app[rte_app_num][5] = "     "	-- restrict alt
				rte_app[rte_app_num][6] = " "		-- restrict alt type
				rte_app[rte_app_num][7] = fms_word[19]	-- course
				rte_app[rte_app_num][8] = fms_word[29]	-- vpa
				rte_app[rte_app_num][10] = fms_word[22]	-- distance
				rte_app[rte_app_num][11] = fms_word[21]	-- course mag
				rte_app[rte_app_num][12] = fms_word[6]	-- id wpt reg code
				rte_app[rte_app_num][13] = fms_word[14]	-- rec navaid
				rte_app[rte_app_num][14] = fms_word[15]	-- rec navaid reg code
				rte_app[rte_app_num][15] = "FC"
				rte_app[rte_app_num][18] = fms_word[20]	-- distance frrom rec navaid
				rte_app[rte_app_num][19] = fms_word[18]	-- Radius for turn
				rte_app[rte_app_num][21] = fms_word[11]	-- RNP
				rte_app[rte_app_num][16] = 0	-- fly over wpt 0/1
				rte_app[rte_app_num][22] = 0	-- NDB navaid 0/1
				if string.len(fms_word[9]) > 1 then
					if string.sub(fms_word[9], 2, 2) == "B" or string.sub(fms_word[9], 2, 2) == "Y" then
						rte_app[rte_app_num][16] = 1	-- fly over wpt 0/1
					end
					if string.sub(fms_word[9], 1, 1) == "N" then
						rte_app[rte_app_num][22] = 1	-- NDB navaid 0/1
					elseif string.sub(fms_word[9], 1, 1) == "V" then
						rte_app[rte_app_num][22] = 2	-- NDB navaid 0/1
					end
				end
				rte_app[rte_app_num][17] = 0
			end
		end
		
		fms_line = file_navdata:read()
	end
	
	
	if des_rwy_num > 0 and rnw_data_num > 0 then
		-- find unknown runways
		nd_x = string.byte(string.sub(ddd_des_icao, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_rnw[nd_x][99999] > 0 then
				for jj = 1, idx_rnw[nd_x][99999] do
					idx_rec = idx_rnw[nd_x][jj]
		--for jj = 1, rnw_data_num do
					if rnw_data[idx_rec][1] == ddd_des_icao then
						rnw_data[idx_rec][9] = 0
								
						if string.sub(rnw_data[idx_rec][2], -1, -1) == "L" or string.sub(rnw_data[idx_rec][2], -1, -1) == "R"
						or string.sub(rnw_data[idx_rec][2], -1, -1) == "C" then
							temp_num = tonumber(string.sub(rnw_data[idx_rec][2], 1, -2))
							if temp_num == nil then
								temp_str = ""
							else
								temp_str = "RW" .. string.format("%02d", temp_num) .. string.sub(rnw_data[idx_rec][2], -1, -1)
							end
						else
							temp_num = tonumber(rnw_data[idx_rec][2])
							if temp_num == nil then
								temp_str = ""
							else
								temp_str = "RW" .. string.format("%02d", temp_num) .. " "
							end
						end
						
						for ii = 1, des_rwy_num do
							if des_data[ii][1] == temp_str then
								rnw_data[idx_rec][9] = 1
								des_data[ii][6] = 1
							end
						end
					end
				end
			end
		end
		
		--dump_rnw_data(ddd_des_icao)
		
		-- compare runways and change to CIFP data
		for ii = 1, des_rwy_num do
			if des_data[ii][6] == 0 then
				nd_x = string.byte(string.sub(ddd_des_icao, 1, 1))
				if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
					if idx_rnw[nd_x][99999] > 0 then
						for jj = 1, idx_rnw[nd_x][99999] do
							idx_rec = idx_rnw[nd_x][jj]
				--for jj = 1, rnw_data_num do
							if rnw_data[idx_rec][1] == ddd_des_icao and rnw_data[idx_rec][9] == 0 then
								compare = 0
								
								if string.sub(rnw_data[idx_rec][2], -1, -1) == "L" or string.sub(rnw_data[idx_rec][2], -1, -1) == "R"
								or string.sub(rnw_data[idx_rec][2], -1, -1) == "C" then
									temp_num = tonumber(string.sub(rnw_data[idx_rec][2], 1, -2))
									if temp_num == nil then
										temp_str = ""
									else
										temp_str = "RW" .. string.format("%02d", temp_num) .. string.sub(rnw_data[idx_rec][2], -1, -1)
									end
								else
									temp_num = tonumber(rnw_data[idx_rec][2])
									if temp_num == nil then
										temp_str = ""
									else
										temp_str = "RW" .. string.format("%02d", temp_num) .. " "
									end
								end
								
								if string.sub(des_data[ii][1], -1, -1) == string.sub(temp_str, -1, -1) then
									compare = 1
								end
								
								if compare == 1 then
									if string.sub(des_data[ii][1], -1, -1) == " " then
										temp_num =  tonumber(string.sub(des_data[ii][1], 3, -1))
									else
										temp_num =  tonumber(string.sub(des_data[ii][1], 3, -2))	-- 1,-2
									end
									if temp_num ~= nil then
										kk = temp_num * 10
										if string.sub(temp_str, -1, -1) == " " then
											temp_num =  tonumber(string.sub(temp_str, 3, -1))	-- 1,-1
										else
											temp_num =  tonumber(string.sub(temp_str, 3, -2))	-- 1,-2
										end
										if temp_num ~= nil then
											temp_num = temp_num * 10
											kk = ((kk - temp_num) + 360) % 360
											if kk > 180 then
												kk = kk - 360
											end
											if kk < 0 then
												kk = -kk
											end
											if kk < 30 then
												if string.sub(des_data[ii][1], -1, -1) == " " then
													temp_num =  tonumber(string.sub(des_data[ii][1], 3, -1))	-- 1,-1
													token = string.format("%02d", temp_num)
												else
													temp_num = tonumber(string.sub(des_data[ii][1], 3, -2))	-- 1,-2
													token = string.format("%02d", temp_num) .. string.sub(des_data[ii][1], -1, -1)
												end
												rnw_data[idx_rec][2] = token		-- runway
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	
	--dump_rnw_data(ddd_des_icao)
	--dump_star()
	
end


function dump_star()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if rte_star_num > 0 then
			for vvv = 1, rte_star_num  do
				fms_line = rte_star[vvv][1] .. "," .. rte_star[vvv][2] .. "," .. rte_star[vvv][3] .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
end


function B738_detect_fmod()
	
	local fms_line = ""
	local temp_fmod = 0
	
	--file_name = "Aircraft/B737-800X/fmod/b738.snd"
	file_name = file_path .. FILE_NAME_FMOD		--"fmod/b738.snd"
	file_navdata = io.open(file_name, "r")
	if file_navdata == nil then
		fmod_version = ">NOT FOUND<"
	else
		fmod_version = ">UNKNOWN<"
		fms_line = file_navdata:read()
		while fms_line do
			if string.sub(fms_line, 1, 9) == "#version=" then
				temp_fmod = string.len(fms_line)
				if temp_fmod > 9 then
					fmod_version = string.sub(fms_line, 10, -1)
				end
				break
			end
			fms_line = file_navdata:read()
		end
		file_navdata:close()
	end
	
end


function B738_find_path()
	local i = 0
	local j = 0
	local k = 0
	local ii = 0
	local jj = 0
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	local words = {}
	local line = ""
	file_path = ""
	
	file_name = "Log.txt"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		line = file_navdata:read()
		while line do
			i = 0
			j = 0
			line_trim = ""
			line_char = ""
			line_lenght = string.len(line)
			if line_lenght > 0 then
				for k = 1, line_lenght do
					line_char = string.sub(line, k, k)
					if line_char == " " then
						if i == 1 then
							j = j + 1
							words[j] = line_trim
							i = 0
							line_trim = ""
							ii,jj = string.find(words[j], "/b738.acf")
							if ii ~= nil then
								file_path = string.sub(words[j], 1, ii)
								break
							end
						end
					else
						line_trim = line_trim .. line_char
						i = 1
					end
				end
				if string.len(line_trim) > 0 then
					j = j + 1
					words[j] = line_trim
				end
			end
			line = file_navdata:read()
		end
		file_navdata:close()
	end
	
end

function B738_find_path3()
	local i = 0
	local j = 0
	local k = 0
	local ii = 0
	local jj = 0
	local line = ""
	file_path = ""
	
	file_name = "Log.txt"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		line = file_navdata:read()
		while line do
			ii,jj = string.find(line, "/plugins/xlua/")
			if ii ~= nil then
				i,j = string.find(line, "/Aircraft/")
				if i ~= nil then
					file_path = string.sub(line, i+1, ii)
					break
				end
			end
			line = file_navdata:read()
		end
		file_navdata:close()
	end
	
end


function B738_find_path2()
	local i = 0
	local j = 0
	local k = 0
	local ii = 0
	local jj = 0
	local line_trim = ""
	local line_char = ""
	local line_lenght = 0
	local words = {}
	local line = ""
	file_path = ""
	
	file_name = "Log.txt"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		line = file_navdata:read()
		while line do
			i = 0
			j = 0
			line_trim = ""
			line_char = ""
			line_lenght = string.len(line)
			if line_lenght > 0 then
				for k = 1, line_lenght do
					line_char = string.sub(line, k, k)
					if line_char == " " then
						if i == 1 then
							j = j + 1
							words[j] = line_trim
							i = 0
							line_trim = ""
						end
					else
						line_trim = line_trim .. line_char
						i = 1
					end
				end
				if string.len(line_trim) > 0 then
					j = j + 1
					words[j] = line_trim
				end
				if j > 7 then
					if words[3] == "Starting" and words[4] == "new" and words[5] == "flight" then
						ii,jj = string.find(words[7], "/b738.acf")
						if ii ~= nil then
							file_path = string.sub(words[7], 1, ii)
							break
						end
					end
				end
			end
			line = file_navdata:read()
		end
		file_navdata:close()
	end
	
end

function B738_default_fmod_config()

	-- DEFAULT value
	B738DR_enable_pax_boarding = 1
	B738DR_enable_gyro = 0
	B738DR_enable_crew = 1
	B738DR_enable_chatter = 1
	B738DR_airport_set = 1
	B738DR_vol_int_ducker = 0
	B738DR_vol_int_eng = 5
	B738DR_vol_int_start = 5
	B738DR_vol_int_ac = 5
	B738DR_vol_int_gyro = 5
	B738DR_vol_int_roll = 5
	B738DR_vol_int_bump = 5
	B738DR_vol_int_pax = 5
	B738DR_vol_int_pax_applause = 5
	--B738DR_vol_int_wind = 5
	B738DR_enable_mutetrim = 0
	B738DR_vol_airport = 5
	B738DR_ann_set = 0

	-- new
	B738DR_enable_pax_boarding = 1
	B738DR_enable_chatter = 1
	B738DR_enable_fmc_mute_on = 0
	B738DR_vol_PM = 5
	B738DR_vol_int_wind_vol = 5
	B738DR_vol_crew = 5
	B738DR_announcement_set = 0
	eq_low = 0
	eq_mid = 0
	eq_high = 0
	play_cargo = 0
	B738DR_vol_computer = 5
	B738DR_vol_FAC = 5
	B738DR_vol_weather = 5
	
end

function B738_default_others_config()
	
	B738DR_align_time = 0
	simDR_hide_yoke = 1
	B738DR_toe_brakes_ovr = 0
	B738DR_chock_status = 0
	B738DR_pause_td = 0
	B738DR_lock_idle_thrust = 0
	B738DR_engine_no_running_state = 0
	B738DR_parkbrake_remove_chock = 1
	B738DR_throttle_noise = 0
	B738DR_fuelgauge = 0
	B738DR_nosewheel = 0
	B738DR_fpln_format = 0
	units = 0
	B738DR_track_up = 1
	B738DR_sync_baro = 0
	B738DR_kill_effect = 0
	
	simDR_pitch_nz = 0
	simDR_roll_nz = 0
	simDR_yaw_nz = 0
end


function B738_load_config()
	
	local fms_line = ""
	local temp_fmod = 0
	
	file_name = FILE_NAME_CFG	--"b738x.cfg"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		fms_line = file_navdata:read()
		while fms_line do
			if string.len(fms_line) > 1 and string.byte(fms_line, -1) == 13 then	-- CR
				fms_line = string.sub(fms_line, 1, -2)
			end
			
			if string.len(fms_line) > 16 then
				-- FMOD
				if string.sub(fms_line, 1, 16) == "PAX BOARDING   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_enable_pax_boarding = 1
							else
								B738DR_enable_pax_boarding = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "GYRO VIBRATORS =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_enable_gyro = 1
							else
								B738DR_enable_gyro = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "CREW ANNOUN    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_enable_crew = 1
							else
								B738DR_enable_crew = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "CHATTER PASS   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_enable_chatter = 1
							else
								B738DR_enable_chatter = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "AIRPORT SET    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_airport_set = 1
							elseif temp_fmod == 2 then
								B738DR_airport_set = 2
							else
								B738DR_airport_set = 3
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "INTERNAL VOL   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_vol_int_ducker = 1
							else
								B738DR_vol_int_ducker = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "INT ENG SND    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_int_eng = temp_fmod
							else
								B738DR_vol_int_eng = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "INT ENG START  =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_int_start = temp_fmod
							else
								B738DR_vol_int_start = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "AC FANS        =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_int_ac = temp_fmod
							else
								B738DR_vol_int_ac = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "GYRO VOL       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_int_gyro = temp_fmod
							else
								B738DR_vol_int_gyro = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ROLL VOL       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_int_roll = temp_fmod
							else
								B738DR_vol_int_roll = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "BUMP INTENS    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_int_bump = temp_fmod
							else
								B738DR_vol_int_bump = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "PAX VOLUME     =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and temp_fmod <= 10 then
								B738DR_vol_int_pax = temp_fmod
							else
								B738DR_vol_int_pax = 5
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "PAX APPLAUSE   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_vol_int_pax_applause = 1
							else
								B738DR_vol_int_pax_applause = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "INT WIND       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_int_wind_vol = temp_fmod
							else
								B738DR_vol_int_wind_vol = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "MUTE TRIM WH   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_enable_mutetrim = 1
							else
								B738DR_enable_mutetrim = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "AIRPORT VOL    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_airport = temp_fmod
							else
								B738DR_vol_airport = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ANNOUNCEM SET  =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 3 then
								B738DR_ann_set = temp_fmod
							else
								B738DR_ann_set = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "MUTE FMC       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_enable_fmc_mute_on = 1
							else
								B738DR_enable_fmc_mute_on = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "PM VOLUME      =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_PM = temp_fmod
							else
								B738DR_vol_PM = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ANNOUNC.VOLUME =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_crew = temp_fmod
							else
								B738DR_vol_crew = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ANNOUNC.SET NR =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 15 then
								B738DR_announcement_set = temp_fmod
							else
								B738DR_announcement_set = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ADD LOWS       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								eq_low = temp_fmod
							else
								eq_low = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ADD MIDS       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								eq_mid = temp_fmod
							else
								eq_mid = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ADD HIGHS      =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								eq_high = temp_fmod
							else
								eq_high = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "START CARGO    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								play_cargo = 1
							else
								play_cargo = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "COMPUTER VOLUME=" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_computer = temp_fmod
							else
								B738DR_vol_computer = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "FA COCKPIT VOL =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_FAC = temp_fmod
							else
								B738DR_vol_FAC = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "WEATHER VOL    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								B738DR_vol_weather = temp_fmod
							else
								B738DR_vol_weather = 10
							end
						end
					end
				-- OTHERS
				elseif string.sub(fms_line, 1, 16) == "UNITS          =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								units = 1
							else
								units = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ALIGN TIME     =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_align_time = 1
							elseif temp_fmod == 2 then
								B738DR_align_time = 2
							else
								B738DR_align_time = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "HIDE YOKE      =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								simDR_hide_yoke = 1
							else
								simDR_hide_yoke = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "PAUSE AT T/D   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_pause_td = 1
							else
								B738DR_pause_td = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "TOE BRAKE AXIS =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_toe_brakes_ovr = 1
							else
								B738DR_toe_brakes_ovr = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "LOCK IDLE THR  =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_lock_idle_thrust = 1
							else
								B738DR_lock_idle_thrust = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ENG NO RUNNING =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_engine_no_running_state = 1
							else
								B738DR_engine_no_running_state = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "BRAKE REM CHOCK=" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_parkbrake_remove_chock = 1
							else
								B738DR_parkbrake_remove_chock = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "THROTTLE NOISE =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and temp_fmod <= 10 then
								B738DR_throttle_noise = temp_fmod
							else
								B738DR_throttle_noise = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "FUEL GAUGE     =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_fuelgauge = 1
							else
								B738DR_fuelgauge = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "NOSEWHEEL AXIS =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_nosewheel = 1
							elseif temp_fmod == 2 then
								B738DR_nosewheel = 2
							else
								B738DR_nosewheel = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "FPLN SAVE FMT  =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_fpln_format = 1
							else
								B738DR_fpln_format = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "TRACK UP       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_track_up = 1
							else
								B738DR_track_up = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "SYNC BARO      =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_sync_baro = 1
							else
								B738DR_sync_baro = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "WINDSH.EFFECTS =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_kill_effect = 1
							elseif temp_fmod == 2 then
								B738DR_kill_effect = 2
							else
								B738DR_kill_effect = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "PITCH 0 ZONE   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 30 then
								simDR_pitch_nz = temp_fmod / 100
							else
								simDR_pitch_nz = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "YAW 0 ZONE     =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 30 then
								simDR_yaw_nz = temp_fmod / 100
							else
								simDR_yaw_nz = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ROLL 0 ZONE    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 30 then
								simDR_roll_nz = temp_fmod / 100
							else
								simDR_roll_nz = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "CHOCKS STATE   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								B738DR_chock_status = 1
							else
								B738DR_chock_status = 0
							end
						end
					end
				-- elseif string.sub(fms_line, 1, 16) == "LAST POS LAT   =" then
					-- temp_fmod = string.len(fms_line)
					-- if temp_fmod > 16 then
						-- temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						-- if temp_fmod == nil then
							-- B738DR_last_pos_lat = 0
						-- else
							-- B738DR_last_pos_lat = temp_fmod
						-- end
					-- end
				-- elseif string.sub(fms_line, 1, 16) == "LAST POS LON   =" then
					-- temp_fmod = string.len(fms_line)
					-- if temp_fmod > 16 then
						-- temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						-- if temp_fmod == nil then
							-- B738DR_last_pos_lon = 0
						-- else
							-- B738DR_last_pos_lon = temp_fmod
						-- end
					-- end
				-- elseif string.sub(fms_line, 1, 16) == "ANNOUNCEM SET  =" then
					-- temp_fmod = string.len(fms_line)
					-- if temp_fmod > 16 then
						-- temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						-- if temp_fmod ~= nil then
							-- if temp_fmod == 1 then
								-- B738DR_ann_set = 1
							-- else
								-- B738DR_ann_set = 0
							-- end
						-- end
					-- end
				end
			end
			fms_line = file_navdata:read()
		end
		file_navdata:close()
	end
end

function B738_load_fmod_config()
	
	local fms_line = ""
	local temp_fmod = 0
	local ff = 0
	
	fmod_preset = {}
	fmod_preset[1] = {}
	fmod_preset[2] = {}
	fmod_preset[3] = {}
	fmod_preset[4] = {}
	fmod_preset[5] = {}
	fmod_preset[1][1] = "PRESET 1"
	fmod_preset[2][1] = "PRESET 2"
	fmod_preset[3][1] = "PRESET 3"
	fmod_preset[4][1] = "PRESET 4"
	fmod_preset[5][1] = "PRESET 5"
	for temp_fmod = 1, 5 do
		fmod_preset[temp_fmod][2] = 1		-- PAX BOARDING
		fmod_preset[temp_fmod][3] = 0		-- GYRO VIBRATORS
		fmod_preset[temp_fmod][4] = 1		-- CREW ANNOUN
		fmod_preset[temp_fmod][5] = 1		-- CHATTER PASS
		fmod_preset[temp_fmod][6] = 1		-- AIRPORT SET
		fmod_preset[temp_fmod][7] = 0		-- INTERNAL VOL
		fmod_preset[temp_fmod][8] = 1		-- INT ENG SND
		fmod_preset[temp_fmod][9] = 1		-- INT ENG START
		fmod_preset[temp_fmod][10] = 1		-- AC FANS
		fmod_preset[temp_fmod][11] = 1		-- GYRO VOL
		fmod_preset[temp_fmod][12] = 1		-- ROLL VOL
		fmod_preset[temp_fmod][13] = 1		-- BUMP INTENS
		fmod_preset[temp_fmod][14] = 5		-- PAX VOLUME
		fmod_preset[temp_fmod][15] = 5		-- PAX APPLAUSE
		fmod_preset[temp_fmod][16] = 5		-- INT WIND
		fmod_preset[temp_fmod][17] = 1		-- MUTE TRIM WH
		fmod_preset[temp_fmod][18] = 5		-- AIRPORT VOL
		fmod_preset[temp_fmod][19] = 0		-- ANNOUNCEM SET
		fmod_preset[temp_fmod][20] = 0		-- MUTE FMC
		fmod_preset[temp_fmod][21] = 5		-- PM VOLUME
		fmod_preset[temp_fmod][22] = 5		-- ANNOUNC.VOLUME
		fmod_preset[temp_fmod][23] = 0		-- ANNOUNC.SET NR
		fmod_preset[temp_fmod][24] = 0		-- ADD LOWS
		fmod_preset[temp_fmod][25] = 0		-- ADD MIDS
		fmod_preset[temp_fmod][26] = 0		-- ADD HIGHS
		fmod_preset[temp_fmod][27] = 0		-- START CARGO
		fmod_preset[temp_fmod][28] = 5		-- COMPUTER VOLUME
		fmod_preset[temp_fmod][29] = 5		-- FA IN COCKPIT
		fmod_preset[temp_fmod][30] = 5		-- WEATHER VOLUME
	end
	
	
	local preset_nr_act = 0
	
	file_name = FILE_NAME_FMOD_CFG	--"b738x_fmod.cfg"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		fms_line = file_navdata:read()
		while fms_line do
			if string.len(fms_line) > 1 and string.byte(fms_line, -1) == 13 then	-- CR
				fms_line = string.sub(fms_line, 1, -2)
			end
			
			if string.len(fms_line) > 10 then
				ff = tonumber(string.sub(fms_line, 11, -1))
				if ff ~= nil then
					if string.sub(fms_line, 1, 10) == "PRESET NR " and ff > 0 and ff < 6 then
						preset_nr_act = ff
					end
				end
			end
			
			if preset_nr_act > 0 and preset_nr_act < 6 and string.len(fms_line) > 16 then
				-- FMOD
				if string.sub(fms_line, 1, 16) == "PRESET NAME    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						fmod_preset[preset_nr_act][1] = string.sub(fms_line, 17, -1)
					end
				elseif string.sub(fms_line, 1, 16) == "PAX BOARDING   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								fmod_preset[preset_nr_act][2] = 1
							else
								fmod_preset[preset_nr_act][2] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "GYRO VIBRATORS =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								fmod_preset[preset_nr_act][3] = 1
							else
								fmod_preset[preset_nr_act][3] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "CREW ANNOUN    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								fmod_preset[preset_nr_act][4] = 1
							else
								fmod_preset[preset_nr_act][4] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "CHATTER PASS   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								fmod_preset[preset_nr_act][5] = 1
							else
								fmod_preset[preset_nr_act][5] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "AIRPORT SET    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								fmod_preset[preset_nr_act][6] = 1
							elseif temp_fmod == 2 then
								fmod_preset[preset_nr_act][6] = 2
							else
								fmod_preset[preset_nr_act][6] = 3
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "INTERNAL VOL   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								fmod_preset[preset_nr_act][7] = 1
							else
								fmod_preset[preset_nr_act][7] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "INT ENG SND    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][8] = temp_fmod
							else
								fmod_preset[preset_nr_act][8] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "INT ENG START  =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][9] = temp_fmod
							else
								fmod_preset[preset_nr_act][9] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "AC FANS        =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][10] = temp_fmod
							else
								fmod_preset[preset_nr_act][10] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "GYRO VOL       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][11] = temp_fmod
							else
								fmod_preset[preset_nr_act][11] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ROLL VOL       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][12] = temp_fmod
							else
								fmod_preset[preset_nr_act][12] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "BUMP INTENS    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][13] = temp_fmod
							else
								fmod_preset[preset_nr_act][13] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "PAX VOLUME     =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and temp_fmod <= 10 then
								fmod_preset[preset_nr_act][14] = temp_fmod
							else
								fmod_preset[preset_nr_act][14] = 5
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "PAX APPLAUSE   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								fmod_preset[preset_nr_act][15] = 1
							else
								fmod_preset[preset_nr_act][15] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "INT WIND       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][16] = temp_fmod
							else
								fmod_preset[preset_nr_act][16] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "MUTE TRIM WH   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								fmod_preset[preset_nr_act][17] = 1
							else
								fmod_preset[preset_nr_act][17] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "AIRPORT VOL    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][18] = temp_fmod
							else
								fmod_preset[preset_nr_act][18] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ANNOUNCEM SET  =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 3 then
								fmod_preset[preset_nr_act][19] = temp_fmod
							else
								fmod_preset[preset_nr_act][19] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "MUTE FMC       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								fmod_preset[preset_nr_act][20] = 1
							else
								fmod_preset[preset_nr_act][20] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "PM VOLUME      =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][21] = temp_fmod
							else
								fmod_preset[preset_nr_act][21] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ANNOUNC.VOLUME =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][22] = temp_fmod
							else
								fmod_preset[preset_nr_act][22] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ANNOUNC.SET NR =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 3 then
								fmod_preset[preset_nr_act][23] = temp_fmod
							else
								fmod_preset[preset_nr_act][23] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ADD LOWS       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][24] = temp_fmod
							else
								fmod_preset[preset_nr_act][24] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ADD MIDS       =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][25] = temp_fmod
							else
								fmod_preset[preset_nr_act][25] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "ADD HIGHS      =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][26] = temp_fmod
							else
								fmod_preset[preset_nr_act][26] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "START CARGO    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							if temp_fmod == 1 then
								fmod_preset[preset_nr_act][27] = 1
							else
								fmod_preset[preset_nr_act][27] = 0
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "COMPUTER VOLUME=" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][28] = temp_fmod
							else
								fmod_preset[preset_nr_act][28] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "FA COCKPIT VOL =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][29] = temp_fmod
							else
								fmod_preset[preset_nr_act][29] = 10
							end
						end
					end
				elseif string.sub(fms_line, 1, 16) == "WEATHER VOL    =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod ~= nil then
							 temp_fmod = roundUpToIncrement(temp_fmod, 1 )
							if temp_fmod >= 0 and  temp_fmod <= 10 then
								fmod_preset[preset_nr_act][30] = temp_fmod
							else
								fmod_preset[preset_nr_act][30] = 10
							end
						end
					end
				end
			end
			fms_line = file_navdata:read()
		end
		file_navdata:close()
	end
end

function B738_set_fmod_config(fmod_nr)
	
	local ff = fmod_nr
	
	B738DR_enable_pax_boarding 		= fmod_preset[ff][2]
	B738DR_enable_gyro 				= fmod_preset[ff][3]
	B738DR_enable_crew 				= fmod_preset[ff][4]
	B738DR_enable_chatter 			= fmod_preset[ff][5]
	B738DR_airport_set 				= fmod_preset[ff][6]
	B738DR_vol_int_ducker 			= fmod_preset[ff][7]
	B738DR_vol_int_eng 				= fmod_preset[ff][8]
	B738DR_vol_int_start 			= fmod_preset[ff][9]
	B738DR_vol_int_ac 				= fmod_preset[ff][10]
	B738DR_vol_int_gyro 			= fmod_preset[ff][11]
	B738DR_vol_int_roll 			= fmod_preset[ff][12]
	B738DR_vol_int_bump 			= fmod_preset[ff][13]
	B738DR_vol_int_pax 				= fmod_preset[ff][14]
	B738DR_vol_int_pax_applause 	= fmod_preset[ff][15]
	B738DR_vol_int_wind_vol 		= fmod_preset[ff][16]
	B738DR_enable_mutetrim 			= fmod_preset[ff][17]
	B738DR_vol_airport 				= fmod_preset[ff][18]
	B738DR_ann_set 					= fmod_preset[ff][19]
	B738DR_enable_fmc_mute_on 		= fmod_preset[ff][20]
	B738DR_vol_PM 					= fmod_preset[ff][21]
	B738DR_vol_crew 				= fmod_preset[ff][22]
	B738DR_announcement_set 		= fmod_preset[ff][23]
	eq_low 							= fmod_preset[ff][24]
	eq_mid 							= fmod_preset[ff][25]
	eq_high 						= fmod_preset[ff][26]
	play_cargo 						= fmod_preset[ff][27]
	B738DR_vol_computer 			= fmod_preset[ff][28]
	B738DR_vol_FAC					= fmod_preset[ff][29]
	B738DR_vol_weather				= fmod_preset[ff][30]
	
end

function B738_mod_fmod_config(fmod_nr)
	
	local ff = fmod_nr
	
	fmod_preset[ff][2] 	= B738DR_enable_pax_boarding
	fmod_preset[ff][3] 	= B738DR_enable_gyro
	fmod_preset[ff][4] 	= B738DR_enable_crew
	fmod_preset[ff][5] 	= B738DR_enable_chatter
	fmod_preset[ff][6] 	= B738DR_airport_set
	fmod_preset[ff][7] 	= B738DR_vol_int_ducker
	fmod_preset[ff][8] 	= B738DR_vol_int_eng
	fmod_preset[ff][9] 	= B738DR_vol_int_start
	fmod_preset[ff][10] 	= B738DR_vol_int_ac
	fmod_preset[ff][11] 	= B738DR_vol_int_gyro
	fmod_preset[ff][12] 	= B738DR_vol_int_roll
	fmod_preset[ff][13] 	= B738DR_vol_int_bump
	fmod_preset[ff][14] 	= B738DR_vol_int_pax
	fmod_preset[ff][15] 	= B738DR_vol_int_pax_applause
	fmod_preset[ff][16] 	= B738DR_vol_int_wind_vol
	fmod_preset[ff][17] 	= B738DR_enable_mutetrim
	fmod_preset[ff][18] 	= B738DR_vol_airport
	fmod_preset[ff][19] 	= B738DR_ann_set
	fmod_preset[ff][20] 	= B738DR_enable_fmc_mute_on
	fmod_preset[ff][21] 	= B738DR_vol_PM
	fmod_preset[ff][22] 	= B738DR_vol_crew
	fmod_preset[ff][23] 	= B738DR_announcement_set
	fmod_preset[ff][24] 	= eq_low
	fmod_preset[ff][25] 	= eq_mid
	fmod_preset[ff][26] 	= eq_high
	fmod_preset[ff][27] 	= play_cargo
	fmod_preset[ff][28] 	= B738DR_vol_computer
	fmod_preset[ff][29] 	= B738DR_vol_FAC
	fmod_preset[ff][30] 	= B738DR_vol_weather
	
end

function B738_save_config()
	
	local fms_line = ""
	local ff = 0
	
	file_name = FILE_NAME_CFG	--"b738x.cfg"
	file_navdata = io.open(file_name, "w")
	if file_navdata ~= nil then
		-- OTHERS
		fms_line = "*** B737-800X ZIBO MOD ***\n"
		file_navdata:write(fms_line)
		fms_line = "*** Config file        ***\n"
		file_navdata:write(fms_line)
		fms_line = "UNITS          = " .. string.format("%2d", B738DR_fmc_units) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "ALIGN TIME     = " .. string.format("%2d", B738DR_align_time) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "HIDE YOKE      = " .. string.format("%2d", simDR_hide_yoke) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "PAUSE AT T/D   = " .. string.format("%2d", B738DR_pause_td) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "TOE BRAKE AXIS = " .. string.format("%2d", B738DR_toe_brakes_ovr) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "LOCK IDLE THR  = " .. string.format("%2d", B738DR_lock_idle_thrust) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "ENG NO RUNNING = " .. string.format("%2d", B738DR_engine_no_running_state) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "CHOCKS STATE   = " .. string.format("%2d", B738DR_chock_status) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "BRAKE REM CHOCK= " .. string.format("%2d", B738DR_parkbrake_remove_chock) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "THROTTLE NOISE = " .. string.format("%2d", B738DR_throttle_noise) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "FUEL GAUGE     = " .. string.format("%2d", B738DR_fuelgauge) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "NOSEWHEEL AXIS = " .. string.format("%2d", B738DR_nosewheel) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "FPLN SAVE FMT  = " .. string.format("%2d", B738DR_fpln_format) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "TRACK UP       = " .. string.format("%2d", B738DR_track_up) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "SYNC BARO      = " .. string.format("%2d", B738DR_sync_baro) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "WINDSH.EFFECTS = " .. string.format("%2d", B738DR_kill_effect) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "PITCH 0 ZONE   = " .. string.format("%2d", simDR_pitch_nz * 100) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "ROLL 0 ZONE    = " .. string.format("%2d", simDR_roll_nz * 100) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "YAW 0 ZONE     = " .. string.format("%2d", simDR_yaw_nz * 100) .. "\n"
		file_navdata:write(fms_line)
		-- FMOD
		fms_line = "\n*** FMOD by AudioBird XP ***\n"
		file_navdata:write(fms_line)
		fms_line = "PAX BOARDING   = " .. string.format("%2d", B738DR_enable_pax_boarding) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "GYRO VIBRATORS = " .. string.format("%2d", B738DR_enable_gyro) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "CREW ANNOUN    = " .. string.format("%2d", B738DR_enable_crew) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "CHATTER PASS   = " .. string.format("%2d", B738DR_enable_chatter) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "AIRPORT SET    = " .. string.format("%2d", B738DR_airport_set) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "INTERNAL VOL   = " .. string.format("%2d", B738DR_vol_int_ducker) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "INT ENG SND    = " .. string.format("%2d", B738DR_vol_int_eng) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "INT ENG START  = " .. string.format("%2d", B738DR_vol_int_start) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "AC FANS        = " .. string.format("%2d", B738DR_vol_int_ac) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "GYRO VOL       = " .. string.format("%2d", B738DR_vol_int_gyro) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "ROLL VOL       = " .. string.format("%2d", B738DR_vol_int_roll) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "BUMP INTENS    = " .. string.format("%2d", B738DR_vol_int_bump) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "PAX VOLUME     = " .. string.format("%2d", B738DR_vol_int_pax) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "PAX APPLAUSE   = " .. string.format("%2d", B738DR_vol_int_pax_applause) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "INT WIND       = " .. string.format("%2d", B738DR_vol_int_wind_vol) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "MUTE TRIM WH   = " .. string.format("%2d", B738DR_enable_mutetrim) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "AIRPORT VOL    = " .. string.format("%2d", B738DR_vol_airport) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "ANNOUNCEM SET  = " .. string.format("%2d", B738DR_ann_set) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "MUTE FMC       = " .. string.format("%2d", B738DR_enable_fmc_mute_on) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "PM VOLUME      = " .. string.format("%2d", B738DR_vol_PM) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "ANNOUNC.VOLUME = " .. string.format("%2d", B738DR_vol_crew) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "ANNOUNC.SET NR = " .. string.format("%2d", B738DR_announcement_set) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "ADD LOWS       = " .. string.format("%2d", eq_low) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "ADD MIDS       = " .. string.format("%2d", eq_mid) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "ADD HIGHS      = " .. string.format("%2d", eq_high) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "START CARGO    = " .. string.format("%2d", play_cargo) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "COMPUTER VOLUME= " .. string.format("%2d", B738DR_vol_computer) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "FA COCKPIT VOL = " .. string.format("%2d", B738DR_vol_FAC) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "WEATHER VOL    = " .. string.format("%2d", B738DR_vol_weather) .. "\n"
		file_navdata:write(fms_line)
		
		file_navdata:close()
	end
	
end

function B738_save_fmod_config()

	local fms_line = ""
	local ff = 0
	
	file_name = FILE_NAME_FMOD_CFG	--"b738x_fmod.cfg"
	file_navdata = io.open(file_name, "w")
	if file_navdata ~= nil then
		-- OTHERS
		fms_line = "*** B737-800X ZIBO MOD ***\n"
		file_navdata:write(fms_line)
		-- FMOD PRESETS
		fms_line = "\n*** FMOD by AudioBird XP ***\n"
		file_navdata:write(fms_line)
		fms_line = "\n*** FMOD Presets ***\n"
		file_navdata:write(fms_line)
		for ff = 1, 5 do
			fms_line = "\nPRESET NR " .. string.format("%1d", ff) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "PRESET NAME    =" .. fmod_preset[ff][1] .. "\n"
			file_navdata:write(fms_line)
			fms_line = "PAX BOARDING   = " .. string.format("%2d", fmod_preset[ff][2]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "GYRO VIBRATORS = " .. string.format("%2d", fmod_preset[ff][3]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "CREW ANNOUN    = " .. string.format("%2d", fmod_preset[ff][4]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "CHATTER PASS   = " .. string.format("%2d", fmod_preset[ff][5]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "AIRPORT SET    = " .. string.format("%2d", fmod_preset[ff][6]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "INTERNAL VOL   = " .. string.format("%2d", fmod_preset[ff][7]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "INT ENG SND    = " .. string.format("%2d", fmod_preset[ff][8]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "INT ENG START  = " .. string.format("%2d", fmod_preset[ff][9]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "AC FANS        = " .. string.format("%2d", fmod_preset[ff][10]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "GYRO VOL       = " .. string.format("%2d", fmod_preset[ff][11]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "ROLL VOL       = " .. string.format("%2d", fmod_preset[ff][12]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "BUMP INTENS    = " .. string.format("%2d", fmod_preset[ff][13]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "PAX VOLUME     = " .. string.format("%2d", fmod_preset[ff][14]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "PAX APPLAUSE   = " .. string.format("%2d", fmod_preset[ff][15]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "INT WIND       = " .. string.format("%2d", fmod_preset[ff][16]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "MUTE TRIM WH   = " .. string.format("%2d", fmod_preset[ff][17]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "AIRPORT VOL    = " .. string.format("%2d", fmod_preset[ff][18]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "ANNOUNCEM SET  = " .. string.format("%2d", fmod_preset[ff][19]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "MUTE FMC       = " .. string.format("%2d", fmod_preset[ff][20]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "PM VOLUME      = " .. string.format("%2d", fmod_preset[ff][21]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "ANNOUNC.VOLUME = " .. string.format("%2d", fmod_preset[ff][22]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "ANNOUNC.SET NR = " .. string.format("%2d", fmod_preset[ff][23]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "ADD LOWS       = " .. string.format("%2d", fmod_preset[ff][24]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "ADD MIDS       = " .. string.format("%2d", fmod_preset[ff][25]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "ADD HIGHS      = " .. string.format("%2d", fmod_preset[ff][26]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "START CARGO    = " .. string.format("%2d", fmod_preset[ff][27]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "COMPUTER VOLUME= " .. string.format("%2d", fmod_preset[ff][28]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "FA COCKPIT VOL = " .. string.format("%2d", fmod_preset[ff][29]) .. "\n"
			file_navdata:write(fms_line)
			fms_line = "WEATHER VOL    = " .. string.format("%2d", fmod_preset[ff][30]) .. "\n"
			file_navdata:write(fms_line)
		end
		file_navdata:close()
	end

end

function B738_load_status()
	
	local fms_line = ""
	local temp_fmod = 0
	
	file_name = FILE_NAME_STATUS	--"b738x_status.dat"
	file_navdata = io.open(file_name, "r")
	if file_navdata ~= nil then
		fms_line = file_navdata:read()
		while fms_line do
			if string.len(fms_line) > 1 and string.byte(fms_line, -1) == 13 then	-- CR
				fms_line = string.sub(fms_line, 1, -2)
			end
			
			if string.len(fms_line) > 16 then
				if string.sub(fms_line, 1, 16) == "LAST POS LAT   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod == nil then
							B738DR_last_pos_lat = 0
						else
							B738DR_last_pos_lat = temp_fmod
						end
					end
				elseif string.sub(fms_line, 1, 16) == "LAST POS LON   =" then
					temp_fmod = string.len(fms_line)
					if temp_fmod > 16 then
						temp_fmod = tonumber(string.sub(fms_line, 17, -1))
						if temp_fmod == nil then
							B738DR_last_pos_lon = 0
						else
							B738DR_last_pos_lon = temp_fmod
						end
					end
				end
			end
			fms_line = file_navdata:read()
		end
		file_navdata:close()
	end
end

function B738_save_status()
	
	local fms_line = ""
	local ff = 0
	
	file_name = FILE_NAME_STATUS	--"b738x_status.dat"
	file_navdata = io.open(file_name, "w")
	if file_navdata ~= nil then
		-- OTHERS
		fms_line = "*** B737-800X ZIBO MOD ***\n"
		file_navdata:write(fms_line)
		fms_line = "*** Statusfile         ***\n"
		file_navdata:write(fms_line)
		fms_line = "LAST POS LAT   = " .. tostring(simDR_latitude) .. "\n"
		file_navdata:write(fms_line)
		fms_line = "LAST POS LON   = " .. tostring(simDR_longitude) .. "\n"
		file_navdata:write(fms_line)
		file_navdata:close()
	end
end


-- function dataref_legs()
	-- local vvv = 0
	-- local fms_line = ""
	
	-- if legs_num > 0 then
		-- fms_line = legs_data[1][1]
		-- B738DR_fms_legs_lat[1] = legs_data[1][7]
		-- B738DR_fms_legs_lon[1] = legs_data[1][8]
		-- if legs_data[1][32] ~= 0 then
			-- B738DR_fms_legs_type[1] = 5
		-- else
			-- B738DR_fms_legs_type[1] = 0
		-- end
		-- for vvv = 2, legs_num + 1 do
			-- fms_line = fms_line .. " " .. legs_data[vvv][1]
			-- B738DR_fms_legs_lat[vvv] = legs_data[vvv][7]
			-- B738DR_fms_legs_lon[vvv] = legs_data[vvv][8]
			-- if legs_data[vvv][32] ~= 0 then
				-- B738DR_fms_legs_type[vvv] = 5
			-- else
				-- B738DR_fms_legs_type[vvv] = 0
			-- end
		-- end
	-- end
	-- B738DR_fms_legs = fms_line
-- end

-- function dataref_legs_latlon()
	
	-- local vvv = 0
	
	-- if legs_num > 0 then
		-- for vvv = 1, legs_num + 1 do
			-- B738DR_fms_legs_lat[vvv] = legs_data[vvv][7]
			-- B738DR_fms_legs_lon[vvv] = legs_data[vvv][8]
			-- if legs_data[vvv][32] ~= 0 then
				-- B738DR_fms_legs_type[vvv] = 5
			-- else
				-- B738DR_fms_legs_type[vvv] = 0
			-- end
		-- end
	-- end
	
-- end

-- function dataref_legs2_latlon()
	
	-- local vvv = 0
	
	-- B738DR_fms_legs_num2 = legs_num2
	
	-- if legs_num2 > 0 then
		-- for vvv = 1, legs_num2 + 1 do
			-- B738DR_fms_legs_lat2[vvv] = legs_data2[vvv][7]
			-- B738DR_fms_legs_lon2[vvv] = legs_data2[vvv][8]
			-- if legs_data2[vvv][32] ~= 0 then
				-- B738DR_fms_legs_type2[vvv] = 5
			-- else
				-- B738DR_fms_legs_type2[vvv] = 0
			-- end
			-- if legs_data2[vvv][17] > 199 then
				-- B738DR_fms_legs_connect2[vvv] = 2
			-- elseif legs_data2[vvv][17] > 99 then
				-- B738DR_fms_legs_connect2[vvv] = 1
			-- else
				-- B738DR_fms_legs_connect2[vvv] = 0
			-- end
		-- end
	-- end
	
-- end

--dump_legsk
function dump_leg()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if legs_num2 > 0 then
			for vvv = 1, legs_num2 + 1 do
				fms_line = legs_data2[vvv][1] .. "," .. legs_data2[vvv][16] .. "," .. legs_data2[vvv][31] .. ","
				fms_line = fms_line .. tostring(legs_data2[vvv][7]) .. "," .. tostring(legs_data2[vvv][8]) .. "," 
				fms_line = fms_line .. tostring(math.deg(legs_data2[vvv][2])) .. "," .. tostring(legs_data2[vvv][32]) .. "\n"
				--fms_line = legs_data2[vvv][1] .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
end

function dump_leg_mod()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if legs_num > 0 then
			for vvv = 1, legs_num + 1 do
				fms_line = legs_data[vvv][1] .. "," .. tostring(legs_data[vvv][5]) .. ","
				if legs_data[vvv][6] == 43 then
					fms_line = fms_line .. "A,"
				elseif legs_data[vvv][6] == 45 then
					fms_line = fms_line .. "B,"
				else
					fms_line = fms_line .. " ,"
				end
				fms_line = fms_line .. tostring(legs_data[vvv][11]) .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
	B738DR_fms_test = 0
end



function dump_leg4()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if legs_num > 0 then
			for vvv = 1, legs_num + 1 do
				fms_line = legs_data[vvv][1] .. "," .. legs_data[vvv][16] .. "," .. legs_data[vvv][31] .. ","
				fms_line = fms_line .. tostring(legs_data[vvv][7]) .. "," .. tostring(legs_data[vvv][8]) .. ","
				fms_line = fms_line .. tostring(legs_data[vvv][5]) .. "," .. tostring(legs_data[vvv][21]) .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
end


function dump_leg6()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if rte_sid_num > 0 then
			for vvv = 1, rte_sid_num do
				fms_line = rte_sid[vvv][1] .. "," .. rte_sid[vvv][2] .. ","
				fms_line = fms_line .. rte_sid[vvv][3] .. "," .. rte_sid[vvv][30] .. "\n" --.. "," .. legs_data[vvv][9] .. ","
				--fms_line = fms_line .. tostring(legs_data[vvv][7]) .. "," .. tostring(legs_data[vvv][8]) .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
end

					ed_fix_found2 = {}
					ed_fix_alt2 = {}
					ed_fix_vpa2 = {}
					ed_fix_num = 0


function dump_ed_fix()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if ed_fix_num > 0 then
			for vvv = 1, ed_fix_num do
				fms_line = tostring(ed_fix_found2[vvv]) .. "," .. tostring(ed_fix_alt2[vvv]) .. ","
				fms_line = fms_line .. tostring(ed_fix_vpa2[vvv])  .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
end

function dump_leg_temp()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if legs_data2_tmp_n > 0 then
			for vvv = 1, legs_data2_tmp_n do
				fms_line = legs_data2_tmp[vvv][1] .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
end

function dump_leg3()
	local vvv = 0
	local fms_line = ""
	
	local file_name2 = "legs.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if legs_num3 > 0 then
			for vvv = 1, legs_num3 + 1 do
				fms_line = legs_data3[vvv][1] .. "," .. legs_data3[vvv][16] .. "," .. legs_data3[vvv][9] .. ","
				fms_line = fms_line .. "" .. "," .. "" .. "\n"
				--fms_line = legs_data2[vvv][1] .. "\n"
				file_navdata2:write(fms_line)
			end
		end
		file_navdata2:close()
	end
end


function dump_log()
	local vvv = 0
	local vvvv = 0
	local fms_line = ""
	
	local file_name2 = "B738X_log.txt"
	local file_navdata2 = io.open(file_name2, "w")
	
	if file_navdata2 ~= nil then
		if awy_data_num > 10 then
			for vvv = 1, 10 do
				fms_line = awy_data[vvv][1] .. "," .. awy_data[vvv][2] .. "," .. awy_data[vvv][3] .. ","
				fms_line = fms_line .. awy_data[vvv][4] .. "," .. awy_data[vvv][5] .. "\n"
				file_navdata2:write(fms_line)
				fms_line = ""
				if string.len(awy_data[vvv][1]) > 0 then
					for vvvv = 1, string.len(awy_data[vvv][1]) do
						fms_line = fms_line .. tostring(string.byte(awy_data[vvv][1], vvvv)) .. "."
					end
					fms_line = fms_line .. "\n"
					file_navdata2:write(fms_line)
				end
			end
		end
		file_navdata2:close()
	end
end


-- function read_ref_data2()

	-- file_name = "Custom Data/CIFP/" .. ref_icao
	-- file_name = file_name .. ".dat"
	-- file_navdata = io.open(file_name, "r")
	-- if file_navdata == nil then
		-- file_name = "Resources/default data/CIFP/" .. ref_icao
		-- file_name = file_name .. ".dat"
		-- file_navdata = io.open(file_name, "r")
		-- if file_navdata ~= nil then
			-- read_ref_data(ref_icao)		-- read reference airport data
			-- file_navdata:close()
		-- end
	-- else
		-- read_ref_data(ref_icao)		-- read reference airport data
		-- file_navdata:close()
	-- end

-- end


-- function read_des_data2()

	-- file_name = "Custom Data/CIFP/" .. des_icao
	-- file_name = file_name .. ".dat"
	-- file_navdata = io.open(file_name, "r")
	-- if file_navdata == nil then
		-- file_name = "Resources/default data/CIFP/" .. des_icao
		-- file_name = file_name .. ".dat"
		-- file_navdata = io.open(file_name, "r")
		-- if file_navdata ~= nil then
			-- read_des_data()		-- read reference airport data
			-- file_navdata:close()
		-- end
	-- else
		-- read_des_data()		-- read reference airport data
		-- file_navdata:close()
	-- end
	
	-- --offset = 1

-- end



function B738_find_rnav()
	
	local ii = 0
	local jj = 0
	
	local fms_line = ""
	
	id_ed = ""
	
	offset = math.min(offset, legs_num)
	offset = math.max(offset, 1)
		
	-- legs
	idx_ed = 0
	rnav_idx_first = 0
	rnav_idx_last = 0
	first_miss_app_idx = 0
	last_miss_app_idx = 0
	missed_app_via = ""
	B738DR_missed_app_act = 0
	rnav_alt = 0
	rnav_vpa = 0
	
	if legs_num > 0 then
		for ii = 1, legs_num + 1 do
			if ii <= legs_num then
				--if legs_data[ii][1] == id_ed and idx_ed == 0 then
				if legs_data[ii][17] == 1 and idx_ed == 0 then	-- FAF wpt
					id_ed = legs_data[ii][1]
					idx_ed = ii
					alt_ed = legs_data[ii][5]
					alt_type_ed = legs_data[ii][6]
					-- find first and last RNAV wpt
					rnav_idx_first = idx_ed + 1
					if rnav_idx_first > legs_num then
						rnav_idx_first = 0
					else
						rnav_alt = legs_data[rnav_idx_first][5]
						rnav_vpa = legs_data[rnav_idx_first][20]
						rnav_idx_last = rnav_idx_first
						jj = rnav_idx_last + 1
						while jj < legs_num do
							if legs_data[jj][20] < 0 then	--vpa < 0
								rnav_idx_last = jj
								rnav_alt = legs_data[rnav_idx_last][5]
								rnav_vpa = legs_data[rnav_idx_last][20]
							else
								break
							end
							jj = jj + 1
						end
					end
					jj = idx_ed
					if alt_type_ed ~= 43 then	-- not alt Above
						jj = jj - 1
						while jj > 1 do
							if legs_data[jj][5] == alt_ed and legs_data[jj][6] ~= 43 then	-- previous fix alt
								idx_ed = jj
								id_ed = legs_data[idx_ed][1]
								alt_ed = legs_data[idx_ed][5]
								alt_type_ed = legs_data[idx_ed][6]
							else
								break
							end
							jj = jj - 1
						end
					end
				end
				
				-- found first Missed approach waypoints
				if legs_data[ii][17] == 2 then	-- FMA wpt
					first_miss_app_idx = ii
					missed_app_via = legs_data[ii][9]
				end
				if first_miss_app_idx ~= 0 then
					last_miss_app_idx = ii
				end
			end
			-- legs data + lat,lon
			if ii == 1 then
				fms_line = legs_data[1][1]
			else
				fms_line = fms_line .. " " .. legs_data[ii][1]
			end
			B738DR_fms_legs_lat[ii] = legs_data[ii][7]
			B738DR_fms_legs_lon[ii] = legs_data[ii][8]
			if legs_data[ii][32] ~= 0 then
				B738DR_fms_legs_type[ii] = 5
			else
				B738DR_fms_legs_type[ii] = 0
			end
		end
	end
	
	B738DR_fms_legs = fms_line
	vnav_update = 1

end

function B738_find_rnav_mod()
	
	local ii = 0
	local jj = 0
	
	local fms_line = ""
	
	id_ed_mod = ""
	
	-- legs
	idx_ed_mod = 0
	rnav_idx_first_mod = 0
	rnav_idx_last_mod = 0
	first_miss_app_idx_mod = 0
	last_miss_app_idx_mod = 0
	--B738DR_missed_app_act = 0
	rnav_alt_mod = 0
	rnav_vpa_mod = 0
	alt_ed_mod = 0
	alt_type_ed_mod = 0
	
	
	if legs_num2 > 0 then
		for ii = 1, legs_num2 do
			if ii <= legs_num2 + 1 then
				if (legs_data2[ii][17] == 1 or legs_data2[ii][17] == 101 or legs_data2[ii][17] == 201)
				and idx_ed_mod == 0 then	-- FAF wpt
					id_ed_mod = legs_data2[ii][1]
					idx_ed_mod = ii
					alt_ed_mod = legs_data2[ii][5]
					alt_type_ed_mod = legs_data2[ii][6]
					-- find first and last RNAV wpt
					rnav_idx_first_mod = idx_ed_mod + 1
					if rnav_idx_first_mod > legs_num2 then
						rnav_idx_first_mod = 0
					else
						rnav_alt_mod = legs_data2[rnav_idx_first_mod][5]
						rnav_vpa_mod = legs_data2[rnav_idx_first_mod][20]
						rnav_idx_last_mod = rnav_idx_first_mod
						jj = rnav_idx_last_mod + 1
						while jj < legs_num2 do
							if legs_data2[jj][20] < 0 then	--vpa < 0
								rnav_idx_last_mod = jj
								rnav_alt_mod = legs_data2[rnav_idx_last_mod][5]
								rnav_vpa_mod = legs_data2[rnav_idx_last_mod][20]
							else
								break
							end
							jj = jj + 1
						end
					end
					jj = idx_ed_mod
					if alt_type_ed_mod ~= 43 then	-- not alt Above
						jj = jj - 1
						while jj > 1 do
							if legs_data2[jj][5] == alt_ed_mod and legs_data2[jj][6] ~= 43 then	-- previous fix alt
								idx_ed_mod = jj
								id_ed_mod = legs_data2[idx_ed_mod][1]
								alt_ed_mod = legs_data2[idx_ed_mod][5]
								alt_type_ed_mod = legs_data2[idx_ed_mod][6]
							else
								break
							end
							jj = jj - 1
						end
					end
				end
				
				-- found first Missed approach waypoints
				if legs_data2[ii][17] == 2 or legs_data2[ii][17] == 102 or legs_data2[ii][17] == 202 then	-- FMA wpt
					first_miss_app_idx_mod = ii
				end
				if first_miss_app_idx_mod ~= 0 then
					last_miss_app_idx_mod = ii
				end
			end
			
			-- legs data2 + lat,lon
			
			if ii == 1 then
				fms_line = legs_data2[1][1]
			else
				fms_line = fms_line .. " " .. legs_data2[ii][1]
			end
			B738DR_fms_legs_lat2[ii] = legs_data2[ii][7]
			B738DR_fms_legs_lon2[ii] = legs_data2[ii][8]
			if legs_data2[ii][32] ~= 0 then
				B738DR_fms_legs_type2[ii] = 5
			else
				B738DR_fms_legs_type2[ii] = 0
			end
			if legs_data2[ii][17] > 199 then
				B738DR_fms_legs_connect2[ii] = 2
			elseif legs_data2[ii][17] > 99 then
				B738DR_fms_legs_connect2[ii] = 1
			else
				B738DR_fms_legs_connect2[ii] = 0
			end
		end
	end
	
	B738DR_fms_legs2 = fms_line
	vnav_update_mod = 1

end

---------------------------------------------------------------

-- -- eee -> icao
-- function apt_exist(eee)
	
	-- local ii = 0
	-- local res = false
	
	-- icao_latitude = 0
	-- icao_longitude = 0
	
	-- if apt_data_num > 0 then
		-- for ii = 1, apt_data_num do
			-- if eee == apt_data[ii][1] then
				-- icao_latitude = apt_data[ii][2]
				-- icao_longitude = apt_data[ii][3]
				-- icao_tns_alt = apt_data[ii][4]
				-- icao_tns_lvl = apt_data[ii][5]
				-- res = true
				-- break
			-- end
		-- end
	-- end
	-- return res
	
-- end

-- -- eee -> icao, rrr -> runway
-- function rnw_exist(eee, rrr)
	
	-- local ii = 0
	-- local res = false
	
	-- if rnw_data_num > 0 then
		-- for ii = 1, rnw_data_num do
			-- if eee == rnw_data[ii][1] and rrr == rnw_data[ii][2] then
				-- res = true
				-- break
			-- end
		-- end
	-- end
	-- return res
	
-- end


function apt_exist(eee)
	
	local ii = 0
	local res = false
	local nd_x = 0
	local idx_rec = 0
	
	icao_latitude = 0
	icao_longitude = 0
	
	if apt_data_num > 0 then
		nd_x = string.byte(string.sub(eee, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_apt[nd_x][99999] > 0 then
				for ii = 1, idx_apt[nd_x][99999] do
					idx_rec = idx_apt[nd_x][ii]
					if eee == apt_data[idx_rec][1] then
						icao_latitude = apt_data[idx_rec][2]
						icao_longitude = apt_data[idx_rec][3]
						icao_tns_alt = apt_data[idx_rec][4]
						icao_tns_lvl = apt_data[idx_rec][5]
						res = true
						break
					end
				end
			end
		end
	end
	return res
	
end

function rnw_exist(eee, rrr)
	
	local ii = 0
	local res = false
	local nd_x = 0
	local idx_rec = 0
	
	if rnw_data_num > 0 then
		nd_x = string.byte(string.sub(eee, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_rnw[nd_x][99999] > 0 then
				for ii = 1, idx_rnw[nd_x][99999] do
					idx_rec = idx_rnw[nd_x][ii]
					if eee == rnw_data[idx_rec][1] and rrr == rnw_data[idx_rec][2] then
						res = true
						break
					end
				end
			end
		end
	end
	return res
	
end

---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------

-- input mode: 0-xxx, 1-xxx/
function entry_spd_kts(input_str, input_min, input_max, input_mode)
	
	local str_len = string.len(input_str)
	local num_val = 0
	local result_output = nil
	output_str = ""
	
	if input_mode == 0 then
		-- format xxx
		if str_len == 3 then
			num_val = tonumber(input_str)
			if num_val ~= nil then
				if num_val >= input_min and num_val <=input_max then
					result_output = num_val
				end
			end
		end
	else
		-- format xxx/
		if str_len == 4 then
			if string.sub(input_str, -1, -1) == "/" then
				num_val = tonumber(string.sub(input_str, 1, -2))
				if num_val ~= nil then
					if num_val >= input_min and num_val <=input_max then
						result_output = num_val
					end
				end
			end
		end
	end
	
	if result_output ~= nil then
		output_str = string.format("%3d", result_output)
	end
	return result_output
	
end

-- mode: 0-without Above/Below, 1-with Above/Below
-- alttns: altitude/level transition
-- format LVL: xxx, FLxxx / xxxA, FLxxxA
-- format ALT: xxxxx / xxxxxA / xxxx / xxxxA
function entry_alt(input_str, input_min, input_max, input_mode, input_alttns)
	
	local str_len = string.len(input_str)
	local num_val = nil
	local str_type = ""
	local result_output = nil
	output_str = ""
	
	if str_len == 3 then
		-- format xxx
		num_val = tonumber(input_str) * 100
		if num_val ~= nil then
			if num_val < input_min or num_val > input_max then
				num_val = nil
			end
		end
	elseif str_len == 4 and input_mode == 1 then
		-- format xxxA
		str_type = string.sub(input_str, -1, -1)
		if str_type == "A" or str_type == "B" then
			num_val = tonumber(string.sub(input_str, 1, -2)) * 100
			if num_val ~= nil then
				if num_val < input_min or num_val > input_max then
					num_val = nil
				end
			end
		else
			--format xxxx
			num_val = tonumber(input_str)
			if num_val ~= nil then
				if num_val < input_min or num_val > input_max then
					num_val = nil
				end
			end
		end
	elseif str_len == 4 then
		-- format xxxx
		num_val = tonumber(input_str)
		if num_val ~= nil then
			if num_val < input_min or num_val > input_max then
				num_val = nil
			end
		end
	elseif str_len == 5 then
		if string.sub(input_str, 1, 2) == "FL" then
			-- format FLxxx
			num_val = tonumber(string.sub(input_str, 3, -1)) * 100
			if num_val ~= nil then
				if num_val < input_min or num_val > input_max then
					num_val = nil
				end
			end
		else
			str_type = string.sub(input_str, -1, -1)
			if (str_type == "A" or str_type == "B") and input_mode == 1 then
				-- format xxxxA
				num_val = tonumber(string.sub(input_str, 1, -2))
				if num_val ~= nil then
					if num_val < input_min or num_val > input_max then
						num_val = nil
					end
				end
			else
				-- format xxxxx
				num_val = tonumber(input_str)
				if num_val ~= nil then
					if num_val < input_min or num_val > input_max then
						num_val = nil
					end
				end
			end
		end
	elseif str_len == 6 and input_mode == 1 then
		-- format FLxxxA, xxxxxA
		str_type = string.sub(input_str, -1, -1)
		if str_type == "A" or str_type == "B" then
			if string.sub(input_str, 1, 2) == "FL" then
				-- format FLxxxA
				num_val = tonumber(string.sub(input_str, 3, -2)) * 100
				if num_val ~= nil then
					if num_val < input_min or num_val > input_max then
						num_val = nil
					end
				end
			else
				-- format xxxxxA
				num_val = tonumber(string.sub(input_str, 1, -2))
				if num_val ~= nil then
					if num_val < input_min or num_val > input_max then
						num_val = nil
					end
				end
			end
		end
	end
	
	-- change to alt/lvl
	if num_val ~= nil then
		result_output = num_val
		if num_val >= input_alttns then
			-- LVL FLxxx
			output_str = "FL".. string.sub(string.format("%05d", num_val), 1, 3) .. str_type
		else
			-- ALT xxxxx
			output_str = string.format("%5d", num_val) .. str_type
		end
	end
	
	return result_output
	
end

function entry_spd_alt(input_str, input_min_spd, input_max_spd, input_min_alt, input_max_alt, input_alttns2)
	
	local inp_str = ""
	local res = 0
	local result_output = nil
	output_str1 = ""
	output_str2 = ""
	output_num1 = 0
	output_num2 = 0
	
	-- SPD xxx/
	--inp_str = string.sub(input_str, 1, 4)
	res = entry_spd_kts(string.sub(input_str, 1, 4), input_min_spd, input_max_spd, 1)
	if res ~= nil then
		output_num1 = res
		output_str1 = output_str
		res = entry_alt(string.sub(input_str, 5, -1), input_min_alt, input_max_alt, 1, input_alttns2)
		if res ~= nil then
			output_num2 = res
			output_str2 = output_str
			result_output = 0
		end
	end
	
	return result_output
	
end

function lvl_to_alt(lvl_str)
	return string.format("%5d", tonumber(string.sub(lvl_str, 3, -1)) * 100)
end

function alt_to_lvl(alt_str)
	local pom_str = string.format("%05d", tonumber(alt_str))
	return "FL" .. string.sub(pom_str, 1, 3)
end

function set_spd_alt_rest(item_idx)
	
	local n = 0
	local nn = 0
	local nnn = 0
	local strlen = string.len(entry)
	
	
	if item_idx > legs_num2 then
		--add_fmc_msg(INVALID_INPUT, 1)
		add_fmc_msg(INVALID_INPUT, 1)
	elseif legs_data2[item_idx][1] == "DISCONTINUITY" then
		--add_fmc_msg(INVALID_INPUT, 1)
		add_fmc_msg(INVALID_INPUT, 1)
	elseif entry == ">DELETE" then
		legs_data2[item_idx][4] = 0
		legs_data2[item_idx][5] = 0
		legs_data2[item_idx][6] = 0
		entry = ""
		msg_chk_alt_constr = 0
		vnav_update = 1
	else
		if strlen < 7 then
			-- only SPD or ALT
			n = entry_spd_kts(entry, 100, 340, 1)
			if n == nil then
				n = entry_alt(entry, 100, 41000, 1, 18000)
				if n == nil then
					--add_fmc_msg(INVALID_INPUT, 1)
					add_fmc_msg(INVALID_INPUT, 1)
				else
					if string.sub(output_str, -1, -1) == "A" then
						nn = 43
					elseif string.sub(output_str, -1, -1) == "B" then
						nn = 45
					else
						nn = 32
					end
					legs_data2[item_idx][5] = n
					legs_data2[item_idx][6] = nn
					vnav_update = 1
					msg_chk_alt_constr = 0
					entry = ""
				end
			else
				legs_data2[item_idx][4] = n		-- speed
				vnav_update = 1
				msg_chk_alt_constr = 0
				entry = ""
			end
		else
			-- SPD/ALT
			n = entry_spd_alt(entry, 100, 340, 100, 41000, 18000)
			if n == nil then
				--add_fmc_msg(INVALID_INPUT, 1)
				add_fmc_msg(INVALID_INPUT, 1)
			else
				legs_data2[item_idx][4] = output_num1		-- speed
				if string.sub(output_str2, -1, -1) == "A" then
					nn = 43
				elseif string.sub(output_str2, -1, -1) == "B" then
					nn = 45
				else
					nn = 32
				end
				legs_data2[item_idx][5] = output_num2		-- altitude
				legs_data2[item_idx][6] = nn
				vnav_update = 1
				msg_chk_alt_constr = 0
				entry = ""
			end
		end
	end
end

function transf_lat_lon(trans_pos)
	
	transf_lat = tonumber(string.sub(trans_pos, 2, 3)) + (tonumber(string.sub(trans_pos, 4, 7)) / 60)
	if string.sub(trans_pos, 1, 1) == "S" then
		transf_lat = -transf_lat
	end
	
	transf_lon = tonumber(string.sub(trans_pos, 9, 11)) + (tonumber(string.sub(trans_pos, 12, 15)) / 60)
	if string.sub(trans_pos, 8, 8) == "W" then
		transf_lon = -transf_lon
	end

end

function wpt_lat_lon(aaa_txt)
	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local pos_N_S = 0
	local pos_E_W = 0
	local input_lat_ok = 0
	local input_lon_ok = 0
	local pos_tempp = ""
	
	if string.sub(aaa_txt, 1, 1) == "N" or string.sub(aaa_txt, 1, 1) == "S" then
		pos_N_S = 1
		if string.sub(aaa_txt, 4, 4) == "E" or string.sub(aaa_txt, 4, 4) == "W" then
			pos_E_W = 4
		elseif string.sub(aaa_txt, 8, 8) == "E" or string.sub(aaa_txt, 8, 8) == "W" then
			pos_E_W = 8
		end
	end
	
	if pos_N_S ~= 0 and pos_E_W ~= 0 then
		-- latitutde
		pos_tempp = string.sub(aaa_txt, 1, 1)
		if string.len(aaa_txt) == 7 then
			jj = tonumber(string.sub(aaa_txt, 2, 3))
			if jj >= 0 and jj <= 90 then
				pos_tempp = pos_tempp .. string.sub(aaa_txt, 2, 3) .. "00.0"
				input_lat_ok = 1
			end
		elseif string.sub(aaa_txt, 6, 6) == "." and string.len(aaa_txt) == 15 then
			jj = tonumber(string.sub(aaa_txt, 2, 3))
			if jj >= 0 and jj < 90 then
				jj = tonumber(string.sub(aaa_txt, 4, 7))
				if jj >= 0 and jj < 60 then
					pos_tempp = pos_tempp .. string.sub(aaa_txt, 2, 7)
					input_lat_ok = 1
				end
			end
		end
		
		-- longitude
		pos_tempp = pos_tempp .. string.sub(aaa_txt, pos_E_W, pos_E_W)
		if string.len(aaa_txt) == 7 then
			jj = tonumber(string.sub(aaa_txt, 5, 7))
			if jj >= 0 and jj <= 90 then
				pos_tempp = pos_tempp .. string.sub(aaa_txt, 5, 7) .. "00.0"
				input_lon_ok = 1
			end
		elseif string.sub(aaa_txt, 14, 14) == "." and string.len(aaa_txt) == 15 then
			jj = tonumber(string.sub(aaa_txt, 9, 11))
			if jj >= 0 and jj < 180 then
				jj = tonumber(string.sub(aaa_txt, 12, 15))
				if jj >= 0 and jj < 60 then
					pos_tempp = pos_tempp .. string.sub(aaa_txt, 9, 15)
					input_lon_ok = 1
				end
			end
		end
	end
	
	if input_lat_ok == 0 or input_lon_ok == 0 then
		return false
	else
		transf_lat_lon(pos_tempp)
		return true
	end
end



function reset_fmc_pages()
	page_dep_arr = 0
	page_climb = 0
	page_menu = 0
	page_init = 0
	page_ident = 0
	page_takeoff = 0
	page_approach = 0
	page_perf = 0
	page_n1_limit = 0
	page_pos_init = 0
	page_cruise = 0
	page_descent = 0
	--page_clear = 0
	page_route = 0
	page_legs = 0
	page_descent_forecast = 0
	page_rte_init = 0
	page_dep = 0
	page_arr = 0
	page_progress = 0
	page_hold = 0
	page_xtras_fmod = 0
	page_fmod_features = 0
	page_fmod_volumes = 0
	page_fmod_announ = 0
	page_fmod_eq = 0
	page_fmod_flight_ctrl = 0
	page_xtras = 0
	page_xtras_others = 0
	page_sel_wpt = 0
	page_sel_wpt2 = 0
	page_sel_wpt3 = 0
	page_sel_wpt4 = 0
	page_offset = 0
	page_xtras_fuel = 0
	page_ref_nav_data = 0
	page_ref_nav_data_wpt = 0
	page_ref_nav_data_navaid = 0
	page_ref_nav_data_apt = 0
	page_ref_sel = 0
	page_fix = 0
	page_rte_legs = 0
end

function reset_fmc_pages_fo()
	page_dep_arr2 = 0
	page_climb2 = 0
	page_menu2 = 0
	page_init2 = 0
	page_ident2 = 0
	page_takeoff2 = 0
	page_approach2 = 0
	page_perf2 = 0
	page_n1_limit2 = 0
	page_pos_init2 = 0
	page_cruise2 = 0
	page_descent2 = 0
	page_route2 = 0
	page_legs2 = 0
	page_descent_forecast2 = 0
	page_rte_init2 = 0
	page_dep2 = 0
	page_arr2 = 0
	page_progress2 = 0
	page_hold2 = 0
	page_xtras_fmod2 = 0
	page_xtras2 = 0
	page_fmod_features2 = 0
	page_fmod_volumes2 = 0
	page_fmod_announ2 = 0
	page_fmod_eq2 = 0
	page_fmod_flight_ctrl2 = 0
	page_xtras_others2 = 0
	page_sel_wpt_2 = 0
	page_sel_wpt2_2 = 0
	page_sel_wpt3_2 = 0
	page_sel_wpt4_2 = 0
	page_offset2 = 0
	page_xtras_fuel2 = 0
	page_ref_nav_data2 = 0
	page_ref_nav_data_wpt2 = 0
	page_ref_nav_data_navaid2 = 0
	page_ref_nav_data_apt2 = 0
	page_ref_sel2 = 0
	page_fix2 = 0
	page_rte_legs2 = 0
end


function rte_add_dep_arr()
	if ref_rwy_exec == 1 or ref_sid_exec == 1 or ref_tns_exec == 1 then
		--rte_add_sid()
		rte_add_sid_act = 1
	end
	if des_star_exec == 1 or des_star_tns_exec == 1 or des_app_exec == 1 or des_app_tns_exec == 1 then
		--rte_add_star()
		--rte_add_app()
		rte_add_star_act = 1
		rte_add_app_act = 1
	end
	ref_rwy_exec = 0
	ref_sid_exec = 0
	ref_tns_exec = 0
	des_star_exec = 0
	des_star_tns_exec = 0
	des_app_exec = 0
	des_app_tns_exec = 0
	calc_rte_enable2 = 1
	legs_delete = 1
end



function nav_data_find(nav_data_inp)
	
	local nav_data = {}
	local nav_data_n = 0
	local ii = 0
	local add_nav_data = 0
	
	find_navaid(entry, "", 0, "")
	
	if navaid_list_n == 0 then
		ref_nav_wpt = "-----"
		ref_nav_navaid = "----"
		ref_nav_apt = "----"
		ref_nav_new = "*****"
		add_fmc_msg(NOT_IN_DATABASE, 1)
	else
		for ii = 1, navaid_list_n do
			add_nav_data = 0
			if nav_data_type == 0 then -- WPT
				if navaid_list[ii][1] == 4 then
					add_nav_data = 1
				end
			elseif nav_data_type == 1 then -- NAVAID
				if navaid_list[ii][1] < 4 or navaid_list[ii][1] == 5 then
					add_nav_data = 1
				end
			else -- APT
				if navaid_list[ii][1] == 9 then
					add_nav_data = 1
				end
			end
			if add_nav_data == 1 then
				nav_data_n = nav_data_n + 1
				nav_data[nav_data_n] = {}
				for jj = 1, 8 do
					nav_data[nav_data_n][jj] = navaid_list[ii][jj]
				end
				nav_data[nav_data_n][20] = navaid_list[ii][20]
				nav_data[nav_data_n][21] = navaid_list[ii][21]
				nav_data[nav_data_n][22] = navaid_list[ii][22]
				nav_data[nav_data_n][23] = navaid_list[ii][23]
				nav_data[nav_data_n][24] = navaid_list[ii][24]
			end
		end
		navaid_list_n = nav_data_n
		if navaid_list_n == 0 then
			add_fmc_msg(NOT_IN_DATABASE, 1)
		else
			for ii = 1, nav_data_n do
				for jj = 1, 8 do
					navaid_list[ii][jj] = nav_data[ii][jj]
				end
				navaid_list[ii][20] = nav_data[ii][20]
				navaid_list[ii][21] = nav_data[ii][21]
				navaid_list[ii][22] = nav_data[ii][22]
				navaid_list[ii][23] = nav_data[ii][23]
				navaid_list[ii][24] = nav_data[ii][24]
			end
			if navaid_list_n == 1 then
				if nav_data_type == 0 then -- WPT
					ref_nav_wpt = entry
					ref_nav_navaid = "----"
					ref_nav_apt = "----"
				elseif nav_data_type == 1 then -- NAVAID
					ref_nav_wpt = "-----"
					ref_nav_navaid = entry
					ref_nav_apt = "----"
				else -- APT
					ref_nav_wpt = "-----"
					ref_nav_navaid = "----"
					ref_nav_apt = entry
				end
				ref_nav_new = "*****"
				nav_data_idx = 1
			else
				page_ref_nav_data = 0
				page_ref_sel = 1
			end
			nav_data_entry = entry
			entry = ""
		end
	end
	
end



---------------------------------------------------------------


-- 1LSK
function B738_fmc1_1L_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		if page_dep == 1 and in_flight_mode == 0 then
			if ref_sid2 == "------" then
				if ref_sid_sel[1] ~= "------" then
					ref_sid2 = ref_sid_sel[1]
					ref_sid_tns2 = "------"
					if ref_rwy2 == "-----" then
						create_rnw_list()
					end
					create_tns_list()
					act_page = 1
					ref_sid_exec = 1
				end
			else
				ref_sid2 = "------"
				ref_sid_tns2 = "------"
				if ref_rwy2 == "-----" then
					create_rnw_list()
				end
				create_sid_list()
				act_page = 1
				ref_sid_exec = 1
			end
			rte_add_dep_arr()
		elseif page_arr == 1 then
			if des_star2 == "------" then
				if des_star_sel[1] ~= "------" then
					des_star2 = des_star_sel[1]
					des_star_trans2 = "------"
					if des_app2 == "------" then
						create_des_app_list()
					end
					create_star_tns_list()
					act_page = 1
					des_star_exec = 1
				end
			else
				des_star2 = "------"
				des_star_trans2 = "------"
				if des_app2 == "------" then
					create_des_app_list()
				end
				create_star_list()
				act_page = 1
				des_star_exec = 1
			end
			rte_add_dep_arr()
		elseif page_rte_init == 1 then --and in_flight_mode == 0 then	-- only on the groundthen
			if act_page == 1 then
				-- entry Ref airport ICAO
				local apt_ok = 0
				local xy = 0
				if entry == ">DELETE" then
					entry = INVALID_DELETE
					-- if ref_icao ~= "****" then
						-- ref_icao_x = "****"
						-- des_icao_x = "****"
						-- ref_exec = 1
					-- end
					-- entry = ""
					
					-- ref_icao = "----"
					-- ref_icao_x = "----"
					-- des_icao = "****"
					-- des_icao_x = "****"
					-- ref_gate = "-----"
					-- co_route = "------------"
					-- trans_alt = "-----"
					-- ref_rwy = "-----"
					-- ref_sid = "------"
					-- ref_sid_tns = "------"
					-- des_app = "------"
					-- des_app_tns = "------"
					-- des_star = "------"
					-- des_star_trans = "------"
					-- ----
					-- ref_rwy2 = "-----"
					-- ref_sid2 = "------"
					-- ref_sid_tns2 = "------"
					-- des_app2 = "------"
					-- des_app_tns2 = "------"
					-- des_star2 = "------"
					-- des_star_trans2 = "------"
					-- ----
					-- crz_alt = "*****"
					-- crz_alt_num = 0
					-- crz_alt_num2 = 0
					-- entry = ""
					-- offset = 0
					-- legs_num = 0
					-- hold_data_num2 = 0
					
					-- offset_act = 0
					-- offset_start = 0
					-- offset_end = 0
					-- offset_dist = 0
					-- offset_side = 0
				else
					if string.len(entry) == 4 then
						-- file_name = "Custom Data/CIFP/" .. entry
						-- file_name = file_name .. ".dat"
						-- file_navdata = io.open(file_name, "r")
						-- if file_navdata == nil then
							-- file_name = "Resources/default data/CIFP/" .. entry
							-- file_name = file_name .. ".dat"
							-- file_navdata = io.open(file_name, "r")
							-- if file_navdata == nil then
								-- if apt_exist(entry) == true then
									-- apt_ok = 1
								-- end
							-- else
								-- read_ref_data(entry)		-- read reference airport data
								-- file_navdata:close()
								-- apt_ok = 1
							-- end
						-- else
							-- read_ref_data(entry)		-- read reference airport data
							-- file_navdata:close()
							-- apt_ok = 1
						-- end
						
						if cust_def_data == 1 then
							file_name = "Custom Data/CIFP/" .. entry
							file_name = file_name .. ".dat"
							file_navdata = io.open(file_name, "r")
							if file_navdata == nil then
								if apt_exist(entry) == true then
									apt_ok = 1
								end
							else
								read_ref_data(entry)		-- read reference airport data
								file_navdata:close()
								apt_ok = 1
							end
						elseif cust_def_data == 2 then
							file_name = "Resources/default data/CIFP/" .. entry
							file_name = file_name .. ".dat"
							file_navdata = io.open(file_name, "r")
							if file_navdata == nil then
								if apt_exist(entry) == true then
									apt_ok = 1
								end
							else
								read_ref_data(entry)		-- read reference airport data
								file_navdata:close()
								apt_ok = 1
							end
						end
						
						if apt_ok == 0 then
							add_fmc_msg(NOT_IN_DATABASE, 1)
						else
							ref_icao_x = entry
							des_icao_x = "****"
							
							if ref_icao == "----" then
							
								ref_icao = entry
								des_icao = "****"
								--des_icao_x = "****"
								des_app_from_apt = 0
								ref_gate = "-----"
								co_route = "------------"
								co_route_x = co_route
								trans_alt = "-----"
								ref_rwy = "-----"
								ref_sid = "------"
								ref_sid_tns = "------"
								des_app = "------"
								des_app_tns = "------"
								des_star = "------"
								des_star_trans = "------"
								----
								ref_rwy2 = "-----"
								ref_sid2 = "------"
								ref_sid_tns2 = "------"
								des_app2 = "------"
								des_app_tns2 = "------"
								des_star2 = "------"
								des_star_trans2 = "------"
								----
								legs_num = 0
								crz_alt = "*****"
								crz_alt_num = 0
								crz_alt_num2 = 0
								offset = 0
								
								offset_act = 0
								offset_start = 0
								offset_end = 0
								offset_dist = 0
								offset_side = 0
								
								if apt_exist(entry) == true then
									ref_icao_lat = icao_latitude
									ref_icao_lon = icao_longitude
									ref_tns_alt = icao_tns_alt
									ref_tns_lvl = icao_tns_lvl
									ref_icao_alt = 0
									if rwy_num > 0 then
										xy = tonumber(ref_data[1][2])
										if xy ~= nil then
											ref_icao_alt = xy
										end
									end
								else
									ref_tns_alt = 0
									ref_tns_lvl = 0
								end
								if ref_tns_alt == 0 then
									trans_alt = "-----"
								else
									trans_alt = string.format("%5d", ref_tns_alt)
								end
								arr_data = 0
								airport_pos()
								create_rnw_list()
								create_sid_list()
							
							else
								ref_exec = 1
							end
							entry = ""
						end
					elseif entry == "" and ref_icao ~= "----" then
						entry = ref_icao
					else
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
				-- arr_data = 0
				-- airport_pos()
				-- create_rnw_list()
				-- create_sid_list()
			else
				local item = 0
				local button = 1	-- button 1 LSK
				local tmp_tmp = 0
				
				item = (act_page - 2) * 5 + button
				tmp_tmp = fpln_num2 + 1
				--if fpln_num2 > 1 then
				if item > 1 then
					if entry == ">DELETE" then
						del_via(item)
					else
						if item == tmp_tmp then
							if fpln_data2[fpln_num2][1] == "" and fpln_data2[fpln_num2][2] ~= "" then
								-- add new via via
								via_via_add()
							elseif fpln_data2[fpln_num2][1] ~= "" then
								-- add new via
								via_add(fpln_data2[fpln_num2][1], fpln_data2[fpln_num2][3])
							end
							item_sel_via = 0
						elseif item <= fpln_num2 then --and fpln_num2 > 1 then
							-- change via
							via_chg(fpln_data2[item-1][1], fpln_data2[item-1][3], item)
							item_sel_via = 0
						end
					end
				else
					entry = ">INVALID ENTRY"
				end
			end
		elseif page_dep_arr == 1 and in_flight_mode == 0 then	-- only on the ground
			-- SID departures
			local prev_repeat = 20
			if ref_icao ~= "----" and des_icao ~= "****" and exec_load_fpln == 0 then
				page_dep = 1
				page_dep_arr = 0
				arr_data = 0
				---
				-- ref_rwy2 = ref_rwy
				-- ref_sid2 = ref_sid
				-- ref_sid_tns2 = ref_sid_tns
				---
				create_rnw_list()
				create_sid_list()
				create_tns_list()
			end
		elseif page_sel_wpt == 1 then
			
			local item = 0
			local button = 1	-- button 1 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				rte_add_wpt2(item)
				--if legs_num > 1 then
					legs_delete = 1
				--end
			end
		elseif page_sel_wpt2 == 1 then
			
			local item = 0
			local button = 1	-- button 1 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				dir_add(item)
			end
		elseif page_sel_wpt3 == 1 then
			
			local item = 0
			local button = 1	-- button 1 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				rte_add_wpt4(item)
				--if legs_num > 1 then
					legs_delete = 1
				--end
			end
		elseif page_ref_sel == 1 then
			
			local item = 0
			local button = 1	-- button 1 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				if nav_data_type == 0 then -- WPT
					ref_nav_wpt = nav_data_entry	--entry
					ref_nav_navaid = "----"
					ref_nav_apt = "----"
				elseif nav_data_type == 1 then -- NAVAID
					ref_nav_wpt = "-----"
					ref_nav_navaid = nav_data_entry	--entry
					ref_nav_apt = "----"
				else -- APT
					ref_nav_wpt = "-----"
					ref_nav_navaid = "----"
					ref_nav_apt = nav_data_entry	--entry
				end
				nav_data_idx = item
				ref_nav_new = "*****"
				--ref_nav_wpt = nav_data_entry
				page_ref_nav_data = 1
				page_ref_sel = 0
			end
		elseif page_fix == 1 then
			local ii = 0
			local jj = 0
			if entry == ">DELETE" then
				if fix_data_num == act_page then
					fix_data_num = fix_data_num - 1
					entry = ""
				elseif act_page < fix_data_num then
					for ii = act_page, (fix_data_num - 1) do
						for jj = 1, 38 do
							fix_data[ii][jj] = fix_data[ii+1][jj]
						end
					end
					fix_data_num = fix_data_num - 1
					entry = ""
				end
			elseif act_page > fix_data_num then
				if item_sel > 0 and item_sel<= legs_num2 then
					-- add new fix from legs
					fix_data_num = fix_data_num + 1
					fix_data[fix_data_num] = {}
					fix_data[fix_data_num][1] = legs_data2[item_sel][1]
					fix_data[fix_data_num][2] = legs_data2[item_sel][36] -- navaid type: 1-VOR, 2-VOR TAG, 3-NDB, 4-WPT, 5-DME, 9-APT (legs_data2[item_sel][1])
					fix_data[fix_data_num][3] = legs_data2[item_sel][7]
					fix_data[fix_data_num][4] = legs_data2[item_sel][8]
					fix_data[fix_data_num][5] = legs_data2[item_sel][16]	-- reg code
					fix_data[fix_data_num][6] = -1
					fix_data[fix_data_num][7] = -1
					fix_data[fix_data_num][8] = -1
					fix_data[fix_data_num][9] = -1
					fix_data[fix_data_num][10] = -1
					fix_data[fix_data_num][11] = -1
					-- 1. radial
					fix_data[fix_data_num][12] = 0	-- wpt before
					fix_data[fix_data_num][13] = 0	-- dist before
					fix_data[fix_data_num][14] = 0	-- lat
					fix_data[fix_data_num][15] = 0	-- lon
					fix_data[fix_data_num][16] = 0	-- dist calc
					fix_data[fix_data_num][17] = 0	-- rad calc
					fix_data[fix_data_num][18] = 0	-- eta calc
					fix_data[fix_data_num][19] = 0	-- dtg calc
					fix_data[fix_data_num][20] = 0	-- alt calc
					-- 2. radial
					fix_data[fix_data_num][21] = 0	-- wpt before
					fix_data[fix_data_num][22] = 0	-- dist before
					fix_data[fix_data_num][23] = 0	-- lat
					fix_data[fix_data_num][24] = 0	-- lon
					fix_data[fix_data_num][25] = 0	-- dist calc
					fix_data[fix_data_num][26] = 0	-- rad calc
					fix_data[fix_data_num][27] = 0	-- eta calc
					fix_data[fix_data_num][28] = 0	-- dtg calc
					fix_data[fix_data_num][29] = 0	-- alt calc
					-- 3. radial
					fix_data[fix_data_num][30] = 0	-- wpt before
					fix_data[fix_data_num][31] = 0	-- dist before
					fix_data[fix_data_num][32] = 0	-- lat
					fix_data[fix_data_num][33] = 0	-- lon
					fix_data[fix_data_num][34] = 0	-- dist calc
					fix_data[fix_data_num][35] = 0	-- rad calc
					fix_data[fix_data_num][36] = 0	-- eta calc
					fix_data[fix_data_num][37] = 0	-- dtg calc
					fix_data[fix_data_num][38] = 0	-- alt calc
					item_sel = 0
					entry = ""
				else
					-- add new fix from sel desires
					find_navaid(entry, "", 0, "")
					if navaid_list_n == 0 then
						entry = ""
						add_fmc_msg(NOT_IN_DATABASE, 1)
					else
						fix_data_num = fix_data_num + 1
						fix_data[fix_data_num] = {}
						fix_data[fix_data_num][1] = entry
						fix_data[fix_data_num][2] = navaid_list[1][1]	-- type
						fix_data[fix_data_num][3] = navaid_list[1][2]	-- lat
						fix_data[fix_data_num][4] = navaid_list[1][3]	-- lon
						fix_data[fix_data_num][5] = navaid_list[1][8]	-- reg code
						fix_data[fix_data_num][6] = -1	-- rad1
						fix_data[fix_data_num][7] = -1	-- dist1
						fix_data[fix_data_num][8] = -1	-- rad2
						fix_data[fix_data_num][9] = -1	-- dist2
						fix_data[fix_data_num][10] = -1	-- rad3
						fix_data[fix_data_num][11] = -1	-- dist3
						-- 1. radial
						fix_data[fix_data_num][12] = 0	-- wpt before
						fix_data[fix_data_num][13] = 0	-- dist before
						fix_data[fix_data_num][14] = 0	-- lat
						fix_data[fix_data_num][15] = 0	-- lon
						fix_data[fix_data_num][16] = 0	-- dist calc
						fix_data[fix_data_num][17] = 0	-- rad calc
						fix_data[fix_data_num][18] = 0	-- eta calc
						fix_data[fix_data_num][19] = 0	-- dtg calc
						fix_data[fix_data_num][20] = 0	-- alt calc
						-- 2. radial
						fix_data[fix_data_num][21] = 0	-- wpt before
						fix_data[fix_data_num][22] = 0	-- dist before
						fix_data[fix_data_num][23] = 0	-- lat
						fix_data[fix_data_num][24] = 0	-- lon
						fix_data[fix_data_num][25] = 0	-- dist calc
						fix_data[fix_data_num][26] = 0	-- rad calc
						fix_data[fix_data_num][27] = 0	-- eta calc
						fix_data[fix_data_num][28] = 0	-- dtg calc
						fix_data[fix_data_num][29] = 0	-- alt calc
						-- 3. radial
						fix_data[fix_data_num][30] = 0	-- wpt before
						fix_data[fix_data_num][31] = 0	-- dist before
						fix_data[fix_data_num][32] = 0	-- lat
						fix_data[fix_data_num][33] = 0	-- lon
						fix_data[fix_data_num][34] = 0	-- dist calc
						fix_data[fix_data_num][35] = 0	-- rad calc
						fix_data[fix_data_num][36] = 0	-- eta calc
						fix_data[fix_data_num][37] = 0	-- dtg calc
						fix_data[fix_data_num][38] = 0	-- alt calc
						entry = ""
					end
				end
			end
		elseif page_legs == 1 then
			
			local item = 0
			local button = 1	-- button 1 LSK
			local tmp_tmp = 0
			local jj = 0
			local kk = 0
			
			if nav_mode == 1 and act_page == 1 then
				item = legs_num2 + 1
			else
				item = (act_page - 1) * 5 + offset - 1 + button
			end
			jj,kk = string.find(entry, "/")
			if item > legs_num2 then
				tmp_tmp = legs_num2 + 1
				if item == tmp_tmp then
					if string.len(entry) > 1 and string.len(entry) < 6 and item_sel == 0 then
						if wpt_lat_lon(entry) == true then
							legs_data2[item][31] = "TF"
							rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
						else
						-- add waypoint last
							rte_add_wpt(item)
						end
						item_sel = 0
					elseif jj ~= nil then
						rte_add_wpt3(item, string.sub(entry, 1, jj-4), string.sub(entry, jj-3, jj-1), string.sub(entry, jj+1, -1))
						item_sel = 0
					else
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			else
				if entry == ">DELETE" then
					-- delete waypoint
					if act_page == 1 then
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if legs_data2[item-1][17] < 99 then
							legs_data2[item-1][17] = legs_data2[item-1][17] + 100
						end
						legs_data2[item+1][31] = "TF"
						if item == legs_num2 then
							rte_copy(legs_num2 + 1)
							rte_paste(legs_num2)
							calc_rte_enable2 = 1
						else
							if legs_data2[item+1][1] == "DISCONTINUITY" then
								rte_copy(item + 1)
								rte_paste(item)
							else
								tmp_tmp = legs_num2
								rte_add_disco(item)
								legs_num2 = tmp_tmp
							end
							calc_rte_enable2 = 1
						end
						legs_delete = 1
						entry = ""
					end
					item_sel = 0
				elseif string.len(entry) > 1 and string.len(entry) < 6 and item_sel == 0 then
					if offset_act == 3 then
						if legs_data2[item][19] ~= 6 then
							-- add waypoint
							rte_add_wpt(item)
						else
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						-- add waypoint
						rte_add_wpt(item)
					end
					if act_page == 1 then
						legs_intdir = 1
						legs_intdir_idx = item
						-- compute >legs_intdir_crs
						local nd_lat = math.rad(simDR_latitude)
						local nd_lon = math.rad(simDR_longitude)
						local nd_lat2 = math.rad(legs_data2[item][7])
						local nd_lon2 = math.rad(legs_data2[item][8])
						
						local nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
						local nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
						local nd_hdg = math.atan2(nd_y, nd_x)
						nd_hdg = math.deg(nd_hdg)
						nd_hdg = (nd_hdg + 360) % 360
						--legs_intdir_crs = (nd_hdg - simDR_mag_variation) % 360
						legs_intdir_crs_mod = (nd_hdg + simDR_mag_variation) % 360
					end
					item_sel = 0
				elseif jj ~= nil then
					rte_add_wpt3(item, string.sub(entry, 1, jj-4), string.sub(entry, jj-3, jj-1), string.sub(entry, jj+1, -1))
					item_sel = 0
				elseif wpt_lat_lon(entry) == true and item_sel == 0 then
						legs_data2[item][31] = "TF"
						rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
						if act_page == 1 then
							legs_intdir = 1
							legs_intdir_idx = item
							-- compute >legs_intdir_crs
							local nd_lat = math.rad(simDR_latitude)
							local nd_lon = math.rad(simDR_longitude)
							local nd_lat2 = math.rad(legs_data2[item][7])
							local nd_lon2 = math.rad(legs_data2[item][8])
							
							local nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
							local nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
							local nd_hdg = math.atan2(nd_y, nd_x)
							nd_hdg = math.deg(nd_hdg)
							nd_hdg = (nd_hdg + 360) % 360
							--legs_intdir_crs = (nd_hdg - simDR_mag_variation) % 360
							legs_intdir_crs_mod = (nd_hdg + simDR_mag_variation) % 360
						end
				elseif item_sel == 0 then
					if string.len(entry) == 0 then
						if offset_act == 3 then
							if legs_data2[item][19] ~= 6 then
								-- select item
								if legs_data2[item][1] == "DISCONTINUITY" then
									--add_fmc_msg(INVALID_INPUT, 1)
									add_fmc_msg(INVALID_INPUT, 1)
									item_sel = 0
								else
									item_sel = item
									entry = legs_data2[item][1]
								end
							else
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
								item_sel = 0
							end
						else
							-- select item
							if legs_data2[item][1] == "DISCONTINUITY" then
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
								item_sel = 0
							else
								item_sel = item
								entry = legs_data2[item][1]
							end
						end
					else
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
						item_sel = 0
					end
				else
					if offset_act == 3 then
						if legs_data2[item][19] ~= 6 then
							-- entry item
							if item_sel > item then
								if legs_data2[item-1][17] < 99 then
									legs_data2[item-1][17] = legs_data2[item-1][17] + 100
								end
								if act_page ~= 1 then
									legs_data2[item_sel][31] = "TF"
								end
								rte_copy(item_sel)
								rte_paste(item)
								calc_rte_enable2 = 1
								if act_page == 1 then
									legs_intdir = 1
									legs_intdir_idx = item
									-- compute >legs_intdir_crs
									local nd_lat = math.rad(simDR_latitude)
									local nd_lon = math.rad(simDR_longitude)
									local nd_lat2 = math.rad(legs_data2[item][7])
									local nd_lon2 = math.rad(legs_data2[item][8])
									
									--local nd_x = (nd_lon2 - nd_lon) * math.cos((nd_lat + nd_lat2)/2)
									--local nd_y = nd_lat2 - nd_lat
									--local nd_dis = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
									
									local nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
									local nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
									local nd_hdg = math.atan2(nd_y, nd_x)
									nd_hdg = math.deg(nd_hdg)
									nd_hdg = (nd_hdg + 360) % 360
									--legs_intdir_crs = (nd_hdg - simDR_mag_variation) % 360
									legs_intdir_crs_mod = (nd_hdg + simDR_mag_variation) % 360
								end
							elseif item_sel < item then
								item_sel = item_sel + 1
								item = item + 1
								rte_copy(item)
								rte_paste(item_sel)
								calc_rte_enable2 = 1
							else
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							end
							entry = ""
							item_sel = 0
							legs_delete = 1
						else
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						-- entry item
						if item_sel > item then
							if legs_data2[item-1][17] < 99 then
								legs_data2[item-1][17] = legs_data2[item-1][17] + 100
							end
							if act_page ~= 1 then
								legs_data2[item_sel][31] = "TF"
							end
							rte_copy(item_sel)
							rte_paste(item)
							calc_rte_enable2 = 1
							if act_page == 1 then
								legs_intdir = 1
								legs_intdir_idx = item
								-- compute >legs_intdir_crs
								local nd_lat = math.rad(simDR_latitude)
								local nd_lon = math.rad(simDR_longitude)
								local nd_lat2 = math.rad(legs_data2[item][7])
								local nd_lon2 = math.rad(legs_data2[item][8])
								
								local nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
								local nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
								local nd_hdg = math.atan2(nd_y, nd_x)
								nd_hdg = math.deg(nd_hdg)
								nd_hdg = (nd_hdg + 360) % 360
								--legs_intdir_crs = (nd_hdg - simDR_mag_variation) % 360
								legs_intdir_crs_mod = (nd_hdg + simDR_mag_variation) % 360
							end
						elseif item_sel < item then
							item_sel = item_sel + 1
							item = item + 1
							rte_copy(item)
							rte_paste(item_sel)
							calc_rte_enable2 = 1
						elseif item_sel == item and act_page == 1 then --and lnav_engaged == 0 and act_page == 1 then
							legs_intdir = 1
							legs_intdir_idx = item
							-- compute >legs_intdir_crs
							local nd_lat = math.rad(simDR_latitude)
							local nd_lon = math.rad(simDR_longitude)
							local nd_lat2 = math.rad(legs_data2[item][7])
							local nd_lon2 = math.rad(legs_data2[item][8])
							
							local nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
							local nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
							local nd_hdg = math.atan2(nd_y, nd_x)
							nd_hdg = math.deg(nd_hdg)
							nd_hdg = (nd_hdg + 360) % 360
							--legs_intdir_crs = (nd_hdg - simDR_mag_variation) % 360
							legs_intdir_crs_mod = (nd_hdg + simDR_mag_variation) % 360
						else
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						end
						entry = ""
						item_sel = 0
						legs_delete = 1
					end
					item_sel = 0
				end
			end
		elseif page_takeoff == 1 then
			-- entry flaps
			if entry == "1" then
				flaps = " 1"
				if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
					if v1_set == "---" and vr_set == "---" and v2_set == "---" then
						entry = ""
					else
						add_fmc_msg(VERIFY_TO_SPEEDS, 1)
						entry = ""
					end
				end
				B738DR_calc_vspd = 1
				B738DR_calc_trim = 1
			elseif entry == "5" then
				flaps = " 5"
				if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
					if v1_set == "---" and vr_set == "---" and v2_set == "---" then
						entry = ""
					else
						add_fmc_msg(VERIFY_TO_SPEEDS, 1)
						entry = ""
					end
				end
				B738DR_calc_vspd = 1
				B738DR_calc_trim = 1
			elseif entry == "10" then
				flaps = "10"
				if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
					if v1_set == "---" and vr_set == "---" and v2_set == "---" then
						entry = ""
					else
						add_fmc_msg(VERIFY_TO_SPEEDS, 1)
						entry = ""
					end
				end
				B738DR_calc_vspd = 1
				B738DR_calc_trim = 1
			elseif entry == "15" then
				flaps = "15"
				if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
					if v1_set == "---" and vr_set == "---" and v2_set == "---" then
						entry = ""
					else
						add_fmc_msg(VERIFY_TO_SPEEDS, 1)
						entry = ""
					end
				end
				B738DR_calc_vspd = 1
				B738DR_calc_trim = 1
			elseif entry == "25" then
				flaps = "25"
				if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
					if v1_set == "---" and vr_set == "---" and v2_set == "---" then
						entry = ""
					else
						add_fmc_msg(VERIFY_TO_SPEEDS, 1)
						entry = ""
					end
				end
				B738DR_calc_vspd = 1
				B738DR_calc_trim = 1
			else
				if entry == ">DELETE" then
					flaps = "**"
					if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
						if v1_set == "---" and vr_set == "---" and v2_set == "---" then
							entry = ""
						else
							add_fmc_msg(VERIFY_TO_SPEEDS, 1)
							entry = ""
						end
					end
					B738DR_calc_vspd = 1
					B738DR_calc_trim = 1
				else
					--add_fmc_msg(INVALID_INPUT, 1)
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
			display_update = 1
		elseif page_init == 1 then
			-- go to Ident page
			page_ident = 1
			page_init = 0
			display_update = 1
		elseif page_menu == 1 then
			-- go to Ident page
			page_ident = 1
			page_menu = 0
		elseif page_pos_init == 2 then
			if fmc_pos == "-----.-------.-" then
				entry = ""
			else
				entry = fmc_pos
			end
		elseif page_perf == 1 then
			-- entry GW
			local strlen = string.len(entry)
			local n = tonumber(entry)
			if strlen == 0 then
				gw = gw_calc
				zfw = zfw_calc
				if units == 0 then
					gw_lbs = gw
					gw_kgs = string.format("%5.1f", (tonumber(gw) / 2.204))
					zfw_lbs = zfw
					zfw_kgs = string.format("%5.1f", (tonumber(zfw) / 2.204))
				else
					gw_kgs = gw
					gw_lbs = string.format("%5.1f", (tonumber(gw) * 2.204))
					zfw_kgs = zfw
					zfw_lbs = string.format("%5.1f", (tonumber(zfw) * 2.204))
				end
			else
				if entry == ">DELETE" then
					gw = "***.*"
					gw_lbs = gw
					gw_kgs = gw
					zfw = "***.*"
					zfw_kgs = zfw
					zfw_lbs = zfw
					if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
						if v1_set == "---" and vr_set == "---" and v2_set == "---" then
							entry = ""
						else
							add_fmc_msg(VERIFY_TO_SPEEDS, 1)
							entry = ""
						end
					end
					B738DR_calc_vspd = 1
					B738DR_calc_trim = 1
				else
					if n == nil then
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < weight_min or n > weight_max then	-- GW min and max
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						else
							gw = string.format("%5.1f", n)
							if units == 0 then
								gw_lbs = gw
								gw_kgs = string.format("%5.1f", (tonumber(gw) / 2.204))		-- to kgs
								local weight_lbs = (simDR_fuel_weight / 1000) * 2.204		-- to lbs
								local xxx = tonumber(gw_lbs)
								xxx = xxx - weight_lbs
								zfw = string.format("%5.1f", (tonumber(xxx)))
								zfw_lbs = zfw
								zfw_kgs = string.format("%5.1f", (tonumber(zfw) / 2.204))	-- to kgs
							else
								gw_kgs = gw
								gw_lbs = string.format("%5.1f", (tonumber(gw) * 2.204))		-- to lbs
								local weight_lbs = (simDR_fuel_weight / 1000) * 2.204		-- to lbs
								local xxx = tonumber(gw_lbs)
								xxx = xxx - weight_lbs
								zfw_lbs = string.format("%5.1f", (tonumber(xxx)))
								zfw_kgs = string.format("%5.1f", (tonumber(zfw_lbs) / 2.204))	-- to kgs
								zfw = zfw_kgs
							end
							if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
								if v1_set == "---" and vr_set == "---" and v2_set == "---" then
									entry = ""
								else
									add_fmc_msg(VERIFY_TO_SPEEDS, 1)
									entry = ""
								end
							end
							B738DR_calc_vspd = 1
							B738DR_calc_trim = 1
						end
					end
				end
			end
			B738_calc_vnav_spd()
			vnav_update = 1
		elseif page_approach == 1 then
			-- entry GW
			local strlen = string.len(entry)
			local n = tonumber(entry)
			local qqq = 0
			if strlen > 0 then
				if entry == ">DELETE" then
					entry = ""
					-- gw_app = "***.*"
					-- gw_app_lbs = gw_app
					-- gw_app_kgs = gw_app
					-- gw_app_nul = 0
					-- if legs_num > 1 then
						-- if legs_data[legs_num][40] ~= 0 then
							-- qqq = tonumber(zfw_kgs)
							-- if qqq ~= nil then
								-- qqq = ((tonumber(zfw_kgs) * 1000) + legs_data[legs_num][40]) / 1000
								-- if qqq < 0 then
									-- qqq = 0
								-- end
								-- if units == 0 then
									-- gw_app = string.format("%5.1f", (qqq * 2.204))		-- to lbs
									-- gw_app_lbs = gw_app
									-- gw_app_kgs = string.format("%5.1f", (tonumber(gw_app) / 2.204))		-- to kgs
								-- else
									-- gw_app = string.format("%5.1f", qqq)		-- to kgs
									-- gw_app_kgs = gw_app
									-- gw_app_lbs = string.format("%5.1f", (tonumber(gw_app) * 2.204))		-- to lbs
								-- end
							-- end
						-- end
					-- end
					gw_app_nul = 0
					gw_app = gw
					gw_app_lbs = gw_lbs
					gw_app_kgs = gw_kgs
				else
					if n == nil then
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < weight_min or n > weight_max then	-- GW min and max
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						else
							gw_app = string.format("%5.1f", n)
							if units == 0 then
								gw_app_lbs = gw_app
								gw_app_kgs = string.format("%5.1f", (tonumber(gw_app) / 2.204))		-- to kgs
							else
								gw_app_kgs = gw_app
								gw_app_lbs = string.format("%5.1f", (tonumber(gw_app) * 2.204))		-- to lbs
							end
							gw_app_nul = 1
							entry = ""
						end
					end
				end
			end
		
		elseif page_descent_forecast == 1 then
			-- entry Trans level
			local strlen = string.len(entry)
			local n = tonumber(entry)
			local nn = 0
			local n_str = ""
			if strlen > 0 then
				if entry == ">DELETE" then
					trans_lvl = "-----"
					entry = ""
				else
					if strlen == 3 then
						if n == nil then
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 30 or n > 410 then
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							else
								trans_lvl = "FL" .. string.format("%03d", n)
								entry = ""
								nn = n * 100
								if forec_alt_1 ~= "-----" then
									n_str = string.sub(forec_alt_1, 1, 2)
									if forec_alt_1_num > nn then
										if n_str ~= "FL" then
											n = tonumber(forec_alt_1) / 100
											forec_alt_1 = "FL" .. string.format("%03d", n)
										end
									else
										if n_str == "FL" then
											n_str = string.sub(forec_alt_1, 3, 5)
											n = tonumber(n_str) * 100
											forec_alt_1 = string.format("%5d", n)
										end
									end
								end
								if forec_alt_2 ~= "-----" then
									n_str = string.sub(forec_alt_2, 1, 2)
									if forec_alt_2_num > nn then
										if n_str ~= "FL" then
											n = tonumber(forec_alt_2) / 100
											forec_alt_2 = "FL" .. string.format("%03d", n)
										end
									else
										if n_str == "FL" then
											n_str = string.sub(forec_alt_2, 3, 5)
											n = tonumber(n_str) * 100
											forec_alt_2 = string.format("%5d", n)
										end
									end
								end
								if forec_alt_3 ~= "-----" then
									n_str = string.sub(forec_alt_3, 1, 2)
									if forec_alt_3_num > nn then
										if n_str ~= "FL" then
											n = tonumber(forec_alt_3) / 100
											forec_alt_3 = "FL" .. string.format("%03d", n)
										end
									else
										if n_str == "FL" then
											n_str = string.sub(forec_alt_3, 3, 5)
											n = tonumber(n_str) * 100
											forec_alt_3 = string.format("%5d", n)
										end
									end
								end
							end
						end
					elseif strlen == 5 then
						if string.sub(entry, 1, 2) == "FL" then
							n = tonumber(string.sub(entry, 3, 5))
							if n == nil then
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							else
								if n < 30 or n > 410 then
									--add_fmc_msg(INVALID_INPUT, 1)
									add_fmc_msg(INVALID_INPUT, 1)
								else
									trans_lvl = "FL" .. string.format("%03d", n)
									entry = ""
									nn = n * 100
									if forec_alt_1 ~= "-----" then
										n_str = string.sub(forec_alt_1, 1, 2)
										if forec_alt_1_num > nn then
											if n_str ~= "FL" then
												n = tonumber(forec_alt_1) / 100
												forec_alt_1 = "FL" .. string.format("%03d", n)
											end
										else
											if n_str == "FL" then
												n_str = string.sub(forec_alt_1, 3, 5)
												n = tonumber(n_str) * 100
												forec_alt_1 = string.format("%5d", n)
											end
										end
									end
									if forec_alt_2 ~= "-----" then
										n_str = string.sub(forec_alt_2, 1, 2)
										if forec_alt_2_num > nn then
											if n_str ~= "FL" then
												n = tonumber(forec_alt_2) / 100
												forec_alt_2 = "FL" .. string.format("%03d", n)
											end
										else
											if n_str == "FL" then
												n_str = string.sub(forec_alt_2, 3, 5)
												n = tonumber(n_str) * 100
												forec_alt_2 = string.format("%5d", n)
											end
										end
									end
									if forec_alt_3 ~= "-----" then
										n_str = string.sub(forec_alt_3, 1, 2)
										if forec_alt_3_num > nn then
											if n_str ~= "FL" then
												n = tonumber(forec_alt_3) / 100
												forec_alt_3 = "FL" .. string.format("%03d", n)
											end
										else
											if n_str == "FL" then
												n_str = string.sub(forec_alt_3, 3, 5)
												n = tonumber(n_str) * 100
												forec_alt_3 = string.format("%5d", n)
											end
										end
									end
								end
							end
						else
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_takeoff == 2 then
			-- entry RW WIND
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					rw_wind_dir = "---"
					rw_wind_spd = "---"
					if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
						if v1_set == "---" and vr_set == "---" and v2_set == "---" then
							entry = ""
						else
							add_fmc_msg(VERIFY_TO_SPEEDS, 1)
							entry = ""
						end
					end
					B738DR_calc_vspd = 1
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then		-- wind heading 0 - 359
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local wind_dir = string.format("%03d", n)
								n = tonumber(string.sub(entry, 5, strlen))
								if n == nil then
									--add_fmc_msg(INVALID_INPUT, 1)
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < 1 or n > 199 then	-- wind speed 1 - 199
										--add_fmc_msg(INVALID_INPUT, 1)
										add_fmc_msg(INVALID_INPUT, 1)
									else
										rw_wind_dir = wind_dir
										rw_wind_spd = string.format("%03d", n)
										if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
											if v1_set == "---" and vr_set == "---" and v2_set == "---" then
												entry = ""
											else
												add_fmc_msg(VERIFY_TO_SPEEDS, 1)
												entry = ""
											end
										end
										B738DR_calc_vspd = 1
									end
								end
							end
						end
					else
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_perf == 2 then
			-- Time Error
			local strlen = string.len(entry)
			local n = tonumber(entry)
			if strlen == 0 then
				 --add_fmc_msg(INVALID_INPUT, 1)
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					time_err = "  "
					entry = ""
				else
					if n == nil then
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 5 or n > 30 then	-- Time error min and max
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						else
							time_err = string.format("%2d", n)
							entry = ""
						end
					end
				end
			end
		elseif page_climb == 1 and B738DR_flight_phase < 2 then
			-- Change cruise alt
			local strlen = string.len(entry)
			if strlen > 0 then
				if strlen == 5 and string.sub(entry, 1, 2) == "FL" then
					local n = tonumber(string.sub(entry, 3, 5))
					if n == nil then
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					else
						--local nn = crz_alt_num / 100
						--if n < nn or n > 410 then	-- Cruise level FLxxx min and max
						if n < 10 or n > 410 then	-- Cruise level FLxxx min and max
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						else
							crz_alt_num = n * 100
							if crz_alt_num >= B738DR_trans_alt then
								--n = n / 100
								crz_alt = "FL" .. string.format("%03d", n)
							else
								n = n * 100
								crz_alt = string.format("%5d", n)
							end
							B738DR_fmc_cruise_alt = crz_alt_num
							entry = ""
							msg_unavaible_crz_alt = 0
							msg_chk_alt_constr = 0
						end
					end
				else
					local n = tonumber(entry)
					if n == nil then
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if strlen == 3 then
							--local nn = crz_alt_num / 100
							--if n < nn or n > 410 then	-- Cruise level FLxxx min and max
							if n < 10 or n > 410 then	-- Cruise level FLxxx min and max
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							else
								crz_alt_num = n * 100
								if crz_alt_num >= B738DR_trans_alt then
									--n = n / 100
									crz_alt = "FL" .. string.format("%03d", n)
								else
									n = n * 100
									crz_alt = string.format("%5d", n)
								end
								B738DR_fmc_cruise_alt = crz_alt_num
								entry = ""
								msg_unavaible_crz_alt = 0
								msg_chk_alt_constr = 0
							end
						else
							--if n < crz_alt_num or n > 41000 then	-- Cruise alt min and max
							if n < 1000 or n > 41000 then	-- Cruise level FLxxx min and max
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							else
								crz_alt_num = n
								if crz_alt_num >= B738DR_trans_alt then
									n = n / 100
									crz_alt = "FL" .. string.format("%03d", n)
								else
									crz_alt = string.format("%5d", n)
								end
								B738DR_fmc_cruise_alt = crz_alt_num
								entry = ""
								msg_unavaible_crz_alt = 0
								msg_chk_alt_constr = 0
							end
						end
					end
				end
			end
		elseif page_cruise == 1 then
			-- Change cruise alt
			local strlen = string.len(entry)
			if strlen > 0 then
				-- if entry == ">DELETE" and crz_exec == 0 then
					-- crz_alt = "*****"
					-- crz_alt_num = 0
					-- entry = ""
				if strlen == 5 and string.sub(entry, 1, 2) == "FL" then
					local n = tonumber(string.sub(entry, 3, 5))
					if n == nil then
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 10 or n > 410 then	-- Cruise level FLxxx min and max
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if B738DR_autopilot_vnav_status == 1 then
								--if B738DR_flight_phase == 2 or B738DR_flight_phase == 3 or B738DR_flight_phase == 4 then
								if B738DR_flight_phase > 1 and B738DR_flight_phase < 5 then
									crz_alt_num2 = n * 100
									if crz_alt_num ~= crz_alt_num2 then
										-- crz_alt_old = crz_alt
										crz_alt_old = "FL" .. string.format("%03d", (crz_alt_num/100))
										crz_alt = "FL" .. string.format("%03d", n)
										if B738DR_flight_phase == 2 then
											if crz_alt_num2 > crz_alt_num then
												crz_exec = 1	-- CRZ CLB
											else
												crz_exec = 2	-- CRZ DES
											end
										else
											if crz_alt_num2 > simDR_altitude_pilot then
												crz_exec = 1	-- CRZ CLB
											else
												crz_exec = 2	-- CRZ DES
											end
										end
										exec1_light = 1
									end
									entry = ""
								else
									if B738DR_flight_phase < 2 then
										crz_alt_num = n * 100
										if crz_alt_num >= B738DR_trans_alt then
											--n = n / 100
											crz_alt = "FL" .. string.format("%03d", n)
										else
											n = n * 100
											crz_alt = string.format("%5d", n)
										end
										B738DR_fmc_cruise_alt = crz_alt_num
										crz_alt_num2 = 0
										crz_alt_old = "     "
										entry = ""
									end
								end
							else
								crz_alt_num = n * 100
								if crz_alt_num >= B738DR_trans_alt then
									--n = n / 100
									crz_alt = "FL" .. string.format("%03d", n)
								else
									n = n * 100
									crz_alt = string.format("%5d", n)
								end
								B738DR_fmc_cruise_alt = crz_alt_num
								crz_alt_num2 = 0
								crz_alt_old = "     "
								if simDR_altitude_pilot >= (crz_alt_num - 100) and B738DR_flight_phase > 2 then
									B738DR_flight_phase = 2
									altitude_last = simDR_altitude_pilot
									B738DR_fms_descent_now = 0
								end
								entry = ""
							end
						end
					end
				else
					local n = tonumber(entry)
					if n == nil then
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if strlen == 3 then
							if n < 10 or n > 410 then	-- Cruise level FLxxx min and max
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							else
								if B738DR_autopilot_vnav_status == 1 then
									--if B738DR_flight_phase == 2 or B738DR_flight_phase == 3 or B738DR_flight_phase == 4 then
									if B738DR_flight_phase > 1 and B738DR_flight_phase < 5 then
										crz_alt_num2 = n * 100
										if crz_alt_num ~= crz_alt_num2 then
											-- crz_alt_old = crz_alt
											crz_alt_old = "FL" .. string.format("%03d", (crz_alt_num/100))
											crz_alt = "FL" .. string.format("%03d", n)
											if B738DR_flight_phase == 2 then
												if crz_alt_num2 > crz_alt_num then
													crz_exec = 1	-- CRZ CLB
												else
													crz_exec = 2	-- CRZ DES
												end
											else
												if crz_alt_num2 > simDR_altitude_pilot then
													crz_exec = 1	-- CRZ CLB
												else
													crz_exec = 2	-- CRZ DES
												end
											end
											exec1_light = 1
										end
										entry = ""
									else
										if B738DR_flight_phase < 2 then
											crz_alt_num = n * 100
											if crz_alt_num >= B738DR_trans_alt then
												--n = n / 100
												crz_alt = "FL" .. string.format("%03d", n)
											else
												n = n * 100
												crz_alt = string.format("%5d", n)
											end
											B738DR_fmc_cruise_alt = crz_alt_num
											crz_alt_num2 = 0
											crz_alt_old = "     "
											entry = ""
										end
									end
								else
									crz_alt_num = n * 100
									if crz_alt_num >= B738DR_trans_alt then
										--n = n / 100
										crz_alt = "FL" .. string.format("%03d", n)
									else
										n = n * 100
										crz_alt = string.format("%5d", n)
									end
									B738DR_fmc_cruise_alt = crz_alt_num
									crz_alt_num2 = 0
									crz_alt_old = "     "
									if simDR_altitude_pilot >= (crz_alt_num - 100) and B738DR_flight_phase > 2 then
										B738DR_flight_phase = 2
										B738DR_fms_descent_now = 0
										altitude_last = simDR_altitude_pilot
									end
									entry = ""
								end
							end
						else
							if n < 1000 or n > 41000 then	-- Cruise alt min and max
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							else
								if B738DR_autopilot_vnav_status == 1 then
									--if B738DR_flight_phase == 2 or B738DR_flight_phase == 3 or B738DR_flight_phase == 4  then
									if B738DR_flight_phase > 1 and B738DR_flight_phase < 5 then
										crz_alt_num2 = n
										if crz_alt_num ~= crz_alt_num2 then
												--crz_alt_old = crz_alt
												crz_alt_old = "FL" .. string.format("%03d", (crz_alt_num/100))
												crz_alt = string.format("%5d", n)
											if B738DR_flight_phase == 2 then
												if crz_alt_num2 > crz_alt_num then
													crz_exec = 1	-- CRZ CLB
												else
													crz_exec = 2	-- CRZ DES
												end
											else
												if crz_alt_num2 > simDR_altitude_pilot then
													crz_exec = 1	-- CRZ CLB
												else
													crz_exec = 2	-- CRZ DES
												end
											end
											exec1_light = 1
										end
										entry = ""
									else
										if B738DR_flight_phase < 2 then
											crz_alt_num = n
											if crz_alt_num >= B738DR_trans_alt then
												n = n / 100
												crz_alt = "FL" .. string.format("%03d", n)
											else
												crz_alt = string.format("%5d", n)
											end
											B738DR_fmc_cruise_alt = crz_alt_num
											crz_alt_num2 = 0
											crz_alt_old = "     "
											entry = ""
										end
									end
								else
									crz_alt_num = n
									if crz_alt_num >= B738DR_trans_alt then
										n = n / 100
										crz_alt = "FL" .. string.format("%03d", n)
									else
										crz_alt = string.format("%5d", n)
									end
									B738DR_fmc_cruise_alt = crz_alt_num
									crz_alt_num2 = 0
									crz_alt_old = "     "
									if simDR_altitude_pilot >= (crz_alt_num - 100) and B738DR_flight_phase > 2 then
										B738DR_flight_phase = 2
										B738DR_fms_descent_now = 0
										altitude_last = simDR_altitude_pilot
									end
									entry = ""
								end
							end
						end
					end
				end
			end
		elseif page_n1_limit == 1 then
			if in_flight_mode == 0 then
				-- entry SEL TEMP and OAT
				local strlen = string.len(entry)
				local n = 0
				if strlen == 0 then
					-- autofill OAT
					n = simDR_OAT
					if n < 0 then
						oat = string.format("%4d", n)
					else
						if n < 10 then
							oat = "  +" .. string.sub(string.format("%4d", n), 4, 4)
						else
							oat = " +" .. string.sub(string.format("%4d", n), 3, 4)
						end
					end
					n = (n * 9 / 5) + 32
					oat_f = string.format("%4d", n)
					oat_unit = "`C"
					if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
						if v1_set == "---" and vr_set == "---" and v2_set == "---" then
							entry = ""
						else
							add_fmc_msg(VERIFY_TO_SPEEDS, 1)
							entry = ""
						end
					end
					v1_set = "---"
					vr_set = "---"
					v2_set = "---"
					B738DR_calc_vspd = 1
				elseif strlen > 0 then
					if entry == ">DELETE" then
						sel_temp = "----"
						oat = "****"
						sel_temp_f = "----"
						oat_f = "****"
						oat_unit = "`C"
						if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
							if v1_set == "---" and vr_set == "---" and v2_set == "---" then
								entry = ""
							else
								add_fmc_msg(VERIFY_TO_SPEEDS, 1)
								entry = ""
							end
						end
						B738DR_calc_vspd = 1
					else
						if strlen > 0 and strlen < 6 then
							local oat_set = 0
							if string.sub(entry, 1, 1) == "/" and strlen > 1 then
								oat_set = 1		-- entry OAT
								entry = string.sub(entry, 2, strlen)
								strlen = strlen -1
							end
							
							local n_str = string.sub(entry, strlen, strlen)
							if n_str == "C" then 
								n = tonumber(string.sub(entry, 1, strlen-1))
								if n == nil then
									--add_fmc_msg(INVALID_INPUT, 1)
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < -40 or n > 70 then	-- Celsius min and max
										--add_fmc_msg(INVALID_INPUT, 1)
										add_fmc_msg(INVALID_INPUT, 1)
									else
										oat_unit = "`C"
										if oat_set == 0 then
											if n < 0 then
												sel_temp = string.format("%4d", n)
											else
												if n < 10 then
													sel_temp = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													sel_temp = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
											n = (n * 9 / 5) + 32
											sel_temp_f = string.format("%4d", n)
										else
											if n < 0 then
												oat = string.format("%4d", n)
											else
												if n < 10 then
													oat = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													oat = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
											n = (n * 9 / 5) + 32
											oat_f = string.format("%4d", n)
										end
										if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
											if v1_set == "---" and vr_set == "---" and v2_set == "---" then
												entry = ""
											else
												add_fmc_msg(VERIFY_TO_SPEEDS, 1)
												entry = ""
											end
										end
										B738DR_calc_vspd = 1
									end
								end
							elseif n_str == "F" then
								n = tonumber(string.sub(entry, 1, strlen-1))
								if n == nil then
									--add_fmc_msg(INVALID_INPUT, 1)
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < -40 or n > 158 then	-- Fahrenheit min and max
										--add_fmc_msg(INVALID_INPUT, 1)
										add_fmc_msg(INVALID_INPUT, 1)
									else
										oat_unit = "`F"
										if oat_set == 0 then
											sel_temp_f = string.format("%4d", n)
											n = (n - 32) * 5 / 9
											if n < 0 then
												sel_temp = string.format("%4d", n)
											else
												if n < 10 then
													sel_temp = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													sel_temp = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
										else
											oat_f = string.format("%4d", n)
											n = (n - 32) * 5 / 9
											if n < 0 then
												oat = string.format("%4d", n)
											else
												if n < 10 then
													oat = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													oat = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
										end
										if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
											if v1_set == "---" and vr_set == "---" and v2_set == "---" then
												entry = ""
											else
												add_fmc_msg(VERIFY_TO_SPEEDS, 1)
												entry = ""
											end
										end
										B738DR_calc_vspd = 1
									end
								end
							else
								n = tonumber(string.sub(entry, 1, strlen))
								if n == nil then
									--add_fmc_msg(INVALID_INPUT, 1)
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < -40 or n > 70 then	-- Celsius min and max
										--add_fmc_msg(INVALID_INPUT, 1)
										add_fmc_msg(INVALID_INPUT, 1)
									else
										oat_unit = "`C"
										if oat_set == 0 then
											if n < 0 then
												sel_temp = string.format("%4d", n)
											else
												if n < 10 then
													sel_temp = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													sel_temp = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
											n = (n * 9 / 5) + 32
											sel_temp_f = string.format("%4d", n)
										else
											if n < 0 then
												oat = string.format("%4d", n)
											else
												if n < 10 then
													oat = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													oat = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
											n = (n * 9 / 5) + 32
											oat_f = string.format("%4d", n)
										end
										if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
											if v1_set == "---" and vr_set == "---" and v2_set == "---" then
												entry = ""
											else
												add_fmc_msg(VERIFY_TO_SPEEDS, 1)
												entry = ""
											end
										end
										B738DR_calc_vspd = 1
									end
								end
							end
							
							
						else
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						end
					end
				end
			else
				-- select AUTO
				auto_act = "<ACT>"
				ga_act = "     "
				con_act = "     "
				clb_act = "     "
				crz_act = "     "
			end
		elseif page_ref_nav_data == 1 then
			local strlen = string.len(entry)
			if strlen == 0 or strlen > 5 then
				--add_fmc_msg(INVALID_INPUT, 1)
				add_fmc_msg(INVALID_INPUT, 1)
			else
				nav_data_type = 0 -- wpt
				nav_data_find(entry)
			end
		elseif page_xtras == 1 then
			fmc_xtras_main(1)
			-- -- FMOD SETTINGS menu
			-- page_xtras = 0
			-- page_xtras_fmod = 1
		-- elseif page_xtras_fmod == 1 then
			-- -- FMOD Pax Boarding
			-- B738CMD_enable_pax_boarding:once()
		-- elseif page_xtras_fmod == 2 then
			-- -- FMOD Internal all sounds
			-- B738CMD_vol_int_ducker:once()
		-- elseif page_xtras_fmod == 3 then
			-- -- FMOD Internal roll volume
			-- B738CMD_vol_int_roll:once()
		-- elseif page_xtras_fmod == 4 then
			-- -- FMOD Mute trim wheel
			-- B738CMD_enable_mutetrim:once()
		elseif page_xtras_fmod > 0 then
			fmc_fmod_main(1,0)
		elseif page_fmod_features > 0 then
			fmc_fmod_features(1)
		elseif page_fmod_volumes > 0 then
			fmc_fmod_volumes(1)
		elseif page_fmod_announ > 0 then
			fmc_fmod_announ(1)
		elseif page_fmod_flight_ctrl > 0 then
			fmc_fmod_flight_ctrl(1)
		elseif page_fmod_eq > 0 then
			fmc_fmod_eq(1)
		elseif page_xtras_others == 1 then
			-- OTHERS - Align time
			if B738DR_align_time == 0 then
				B738DR_align_time = 1
			elseif B738DR_align_time == 1 then
				B738DR_align_time = 2
			else
				B738DR_align_time = 0
			end
		elseif page_xtras_others == 2 then
			if B738DR_engine_no_running_state == 0 then
				B738DR_engine_no_running_state = 1
			else
				B738DR_engine_no_running_state = 0
			end
		elseif page_xtras_others == 3 then
			if B738DR_fpln_format == 0 then
				B738DR_fpln_format = 1
			else
				B738DR_fpln_format = 0
			end
		elseif page_xtras_others == 4 then
			if simDR_pitch_nz <= 0 then
				simDR_pitch_nz = 0.30
			else
				simDR_pitch_nz = simDR_pitch_nz - 0.01
			end
		end
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 2LSK
function B738_fmc1_2L_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if page_dep == 1 then
			if ref_sid2 == "------" then
				if ref_sid_sel[2] ~= "------" then
					ref_sid2 = ref_sid_sel[2]
					ref_sid_tns2 = "------"
					if ref_rwy2 == "-----" then
						create_rnw_list()
					end
					create_tns_list()
					act_page = 1
					ref_sid_exec = 1
				end
			else
				if ref_sid_tns2 == "------" then
					if ref_tns_sel[2] ~= "------" then
						ref_sid_tns2 = ref_tns_sel[2]
						act_page = 1
						ref_tns_exec = 1
					end
				else
					ref_sid_tns2 = "------"
					act_page = 1
					ref_tns_exec = 1
				end
			end
			rte_add_dep_arr()
		elseif page_arr == 1 then
			if des_star2 == "------" then
				if des_star_sel[2] ~= "------" then
					des_star2 = des_star_sel[2]
					des_star_trans2 = "------"
					if des_app2 == "------" then
						create_des_app_list()
					end
					create_star_tns_list()
					act_page = 1
					des_star_exec = 1
				end
			else
				if des_star_trans2 == "------" then
					if des_star_tns_sel[2] ~= "------" then
						des_star_trans2 = des_star_tns_sel[2]
						des_star_tns_exec = 1
						act_page = 1
					end
				else
					des_star_trans2 = "------"
					act_page = 1
					des_star_tns_exec = 1
				end
			end
			rte_add_dep_arr()
		elseif page_sel_wpt == 1 then
			
			local item = 0
			local button = 2	-- button 2 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				rte_add_wpt2(item)
				legs_delete = 1
			end
		elseif page_sel_wpt2 == 1 then
			
			local item = 0
			local button = 2	-- button 2 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				dir_add(item)
			end
		elseif page_sel_wpt3 == 1 then
			
			local item = 0
			local button = 2	-- button 2 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				rte_add_wpt4(item)
				legs_delete = 1
			end
		elseif page_ref_sel == 1 then
			
			local item = 0
			local button = 2	-- button 2 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				if nav_data_type == 0 then -- WPT
					ref_nav_wpt = nav_data_entry	--entry
					ref_nav_navaid = "----"
					ref_nav_apt = "----"
				elseif nav_data_type == 1 then -- NAVAID
					ref_nav_wpt = "-----"
					ref_nav_navaid = nav_data_entry	--entry
					ref_nav_apt = "----"
				else -- APT
					ref_nav_wpt = "-----"
					ref_nav_navaid = "----"
					ref_nav_apt = nav_data_entry	--entry
				end
				nav_data_idx = item
				--ref_nav_wpt = nav_data_entry
				ref_nav_new = "*****"
				page_ref_nav_data = 1
				page_ref_sel = 0
			end
		elseif page_xtras == 1 then
			fmc_xtras_main(2)
			-- -- OTHERS menu
			-- page_xtras = 0
			-- page_xtras_others = 1
		-- elseif page_xtras_fmod == 1 then
			-- -- FMOD Chatter
			-- B738CMD_enable_chatter:once()
		-- elseif page_xtras_fmod == 2 then
			-- -- FMOD Internal engine sounds
			-- B738CMD_vol_int_eng:once()
		-- elseif page_xtras_fmod == 3 then
			-- -- FMOD Internal bump volume
			-- B738CMD_vol_int_bump:once()
		-- elseif page_xtras_fmod == 4 then
			-- -- FMOD Airport volume
			-- B738CMD_vol_airport:once()
		elseif page_xtras_fmod > 0 then
			fmc_fmod_main(2,0)
		elseif page_fmod_features > 0 then
			fmc_fmod_features(2)
		elseif page_fmod_volumes > 0 then
			fmc_fmod_volumes(2)
		elseif page_fmod_announ > 0 then
			fmc_fmod_announ(2)
		elseif page_fmod_flight_ctrl > 0 then
			fmc_fmod_flight_ctrl(2)
		elseif page_fmod_eq > 0 then
			fmc_fmod_eq(2)
		elseif page_xtras_others == 1 then
			if simDR_hide_yoke == 0 then
				simDR_hide_yoke = 1
			else
				simDR_hide_yoke = 0
			end
		elseif page_xtras_others == 2 then
			if B738DR_parkbrake_remove_chock == 0 then
				B738DR_parkbrake_remove_chock = 1
			else
				B738DR_parkbrake_remove_chock = 0
			end
		elseif page_xtras_others == 3 then
			if B738DR_track_up == 0 then
				B738DR_track_up = 1
			else
				B738DR_track_up = 0
			end
		elseif page_fix == 1 then
			local ii = 0
			local jj = string.len(entry)
			if act_page <= fix_data_num then
				if jj == 0 then
					if fix_data[act_page][12] > 0 then
						-- copy wpt to clipboard
						if fix_data[act_page][6] ~= -1 then
							entry = fix_data[act_page][1] .. string.format("%03d", fix_data[act_page][6]) .. "/" .. string.format("%05.1f", fix_data[act_page][16])
						elseif fix_data[act_page][7] ~= -1 then
							--
						end
					end
				elseif entry == ">DELETE" then
					if fix_data[act_page][6] ~= -1 or fix_data[act_page][7] ~= -1 then
						fix_data[act_page][6] = -1
						fix_data[act_page][7] = -1
						fix_data[act_page][12] = -1
						entry = ""
					end
				elseif jj > 1 then
					if string.sub(entry, 1, 1) == "/" then
						-- distance
						ii = tonumber(string.sub(entry, 2, -1))
						if ii == nil then
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if ii <= 0 or ii > 511 then
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							else
								fix_data[act_page][7] = ii
								fix_data[act_page][6] = -1
								fix_data[act_page][12] = -1
								entry = ""
							end
						end
					elseif string.sub(entry, -1, -1) == "/" then
						-- radial
						ii = tonumber(string.sub(entry, 1, -2))
						if ii == nil then
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if ii < 0 or ii > 359 then
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							else
								fix_data[act_page][6] = ii
								fix_data[act_page][7] = -1
								fix_data[act_page][12] = -1
								entry = ""
							end
						end
					else
						-- radial
						ii = tonumber(entry)
						if ii == nil then
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if ii < 0 or ii > 359 then
								--add_fmc_msg(INVALID_INPUT, 1)
								add_fmc_msg(INVALID_INPUT, 1)
							else
								fix_data[act_page][6] = ii
								fix_data[act_page][7] = -1
								fix_data[act_page][12] = -1
								entry = ""
							end
						end
					end
				else
					--add_fmc_msg(INVALID_INPUT, 1)
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		elseif page_legs == 1 then
			
			local item = 0
			local button = 2	-- button 2 LSK
			local tmp_tmp = 0
			local jj = 0
			local kk = 0
			local xy = 0
			
			if nav_mode == 1 then
				item = legs_num2 + 2
			else
				item = (act_page - 1) * 5 + offset - 1 + button
			end
			jj,kk = string.find(entry, "/")
			if item > legs_num2 then
				tmp_tmp = legs_num2 + 1
				if item == tmp_tmp then
					if wpt_lat_lon(entry) == true then
						legs_data2[item][31] = "TF"
						rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
					elseif jj ~= nil then
						rte_add_wpt3(item, string.sub(entry, 1, jj-4), string.sub(entry, jj-3, jj-1), string.sub(entry, jj+1, -1))
					elseif item_sel == 0 then
						-- add waypoint last
						rte_add_wpt(item)
					else
						--add_fmc_msg(INVALID_INPUT, 1)
						add_fmc_msg(INVALID_INPUT, 1)
					end
					item_sel = 0
				else
					--add_fmc_msg(INVALID_INPUT, 1)
					add_fmc_msg(INVALID_INPUT, 1)
				end
			else
				if entry == ">DELETE" then
					-- delete waypoint
					if legs_data2[item-1][17] < 99 then
						legs_data2[item-1][17] = legs_data2[item-1][17] + 100
					end
					legs_data2[item+1][31] = "TF"
					if item == legs_num2 then
						rte_copy(legs_num2 + 1)
						rte_paste(legs_num2)
						calc_rte_enable2 = 1
					else
						if legs_data2[item+1][1] == "DISCONTINUITY" then
							rte_copy(item + 1)
							rte_paste(item)
						else
							tmp_tmp = legs_num2
							rte_add_disco(item)
							legs_num2 = tmp_tmp
						end
						calc_rte_enable2 = 1
					end
					legs_delete = 1
					entry = ""
				elseif string.len(entry) > 1 and string.len(entry) < 6 and item_sel == 0 then
					if offset_act == 3 then
						if legs_data2[item][19] ~= 6 then
							-- add waypoint
							rte_add_wpt(item)
						else
							--add_fmc_msg(INVALID_INPUT, 1)
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						-- add waypoint
						rte_add_wpt(item)
					end
					item_sel = 0
				elseif jj ~= nil then
					rte_add_wpt3(item, string.sub(entry, 1, jj-4), string.sub(entry, jj-3, jj-1), string.sub(entry, jj+1, -1))
					item_sel = 0
				elseif wpt_lat_lon(entry) == true and item_sel == 0 then
						legs_data2[item][31] = "TF"
						rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
				elseif item_sel == 0 then
					if string.len(entry) == 0 then
						if offset_act == 3 then
							if legs_data2[item][19] ~= 6 then
								-- select item
								if legs_data2[item][1] == "DISCONTINUITY" then
									add_fmc_msg(INVALID_INPUT, 1)
									item_sel = 0
								else
									item_sel = item
									entry = legs_data2[item][1]
								end
							else
								add_fmc_msg(INVALID_INPUT, 1)
								item_sel = 0
							end
						else
							-- select item
							if legs_data2[item][1] == "DISCONTINUITY" then
								add_fmc_msg(INVALID_INPUT, 1)
								item_sel = 0
							else
								item_sel = item
								entry = legs_data2[item][1]
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
						item_sel = 0
					end
				else
					if offset_act == 3 then
						if legs_data2[item][19] ~= 6 then
							-- entry item
							if item_sel > item then
								if legs_data2[item-1][17] < 99 then
									legs_data2[item-1][17] = legs_data2[item-1][17] + 100
								end
								legs_data2[item_sel][31] = "TF"
								rte_copy(item_sel)
								rte_paste(item)
								calc_rte_enable2 = 1
								-- if act_page == 1 then
									-- legs_intdir = 1
								-- end
							elseif item_sel < item then
								item_sel = item_sel + 1
								item = item + 1
								rte_copy(item)
								rte_paste(item_sel)
								calc_rte_enable2 = 1
							else
								add_fmc_msg(INVALID_INPUT, 1)
							end
							entry = ""
							item_sel = 0
							legs_delete = 1
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						-- entry item
						if item_sel > item then
							if legs_data2[item-1][17] < 99 then
								legs_data2[item-1][17] = legs_data2[item-1][17] + 100
							end
							legs_data2[item_sel][31] = "TF"
							rte_copy(item_sel)
							rte_paste(item)
							calc_rte_enable2 = 1
							-- if act_page == 1 then
								-- legs_intdir = 1
							-- end
						elseif item_sel < item then
							item_sel = item_sel + 1
							item = item + 1
							rte_copy(item)
							rte_paste(item_sel)
							calc_rte_enable2 = 1
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
						entry = ""
						item_sel = 0
						legs_delete = 1
					end
					item_sel = 0
				end
			end
		elseif page_pos_init == 1 and in_flight_mode == 0 then	-- only on the ground
			-- entry Ref airport ICAO
			local apt_ok = 0
			local xy = 0
			if entry == ">DELETE" then
				entry = INVALID_DELETE
			else
				-- if string.len(entry) == 4 then
					-- if cust_def_data == 1 then
						-- file_name = "Custom Data/CIFP/" .. entry
						-- file_name = file_name .. ".dat"
						-- file_navdata = io.open(file_name, "r")
						-- if file_navdata == nil then
							-- if apt_exist(entry) == true then
								-- apt_ok = 1
							-- end
						-- else
							-- read_ref_data(entry)		-- read reference airport data
							-- file_navdata:close()
							-- apt_ok = 1
						-- end
					-- elseif cust_def_data == 2 then
						-- file_name = "Resources/default data/CIFP/" .. entry
						-- file_name = file_name .. ".dat"
						-- file_navdata = io.open(file_name, "r")
						-- if file_navdata == nil then
							-- if apt_exist(entry) == true then
								-- apt_ok = 1
							-- end
						-- else
							-- read_ref_data(entry)		-- read reference airport data
							-- file_navdata:close()
							-- apt_ok = 1
						-- end
					-- end
					
					-- if apt_ok == 0 then
						-- add_fmc_msg(NOT_IN_DATABASE, 1)
					-- else
						-- ref_icao_x = entry
						-- des_icao_x = "****"
						
						-- if ref_icao == "----" then
						
							-- ref_icao = entry
							-- des_icao = "****"
							-- --des_icao_x = "****"
							-- des_app_from_apt = 0
							-- ref_gate = "-----"
							-- co_route = "------------"
							-- co_route_x = co_route
							-- trans_alt = "-----"
							-- ref_rwy = "-----"
							-- ref_sid = "------"
							-- ref_sid_tns = "------"
							-- des_app = "------"
							-- des_app_tns = "------"
							-- des_star = "------"
							-- des_star_trans = "------"
							-- ----
							-- ref_rwy2 = "-----"
							-- ref_sid2 = "------"
							-- ref_sid_tns2 = "------"
							-- des_app2 = "------"
							-- des_app_tns2 = "------"
							-- des_star2 = "------"
							-- des_star_trans2 = "------"
							-- ----
							-- legs_num = 0
							-- crz_alt = "*****"
							-- crz_alt_num = 0
							-- crz_alt_num2 = 0
							-- offset = 0
							
							-- offset_act = 0
							-- offset_start = 0
							-- offset_end = 0
							-- offset_dist = 0
							-- offset_side = 0
							
							-- if apt_exist(entry) == true then
								-- ref_icao_lat = icao_latitude
								-- ref_icao_lon = icao_longitude
								-- ref_tns_alt = icao_tns_alt
								-- ref_tns_lvl = icao_tns_lvl
								-- ref_icao_alt = 0
								-- if rwy_num > 0 then
									-- xy = tonumber(ref_data[1][2])
									-- if xy ~= nil then
										-- ref_icao_alt = xy
									-- end
								-- end
							-- else
								-- ref_tns_alt = 0
								-- ref_tns_lvl = 0
							-- end
							-- if ref_tns_alt == 0 then
								-- trans_alt = "-----"
							-- else
								-- trans_alt = string.format("%5d", ref_tns_alt)
							-- end
							-- arr_data = 0
							-- airport_pos()
							-- create_rnw_list()
							-- create_sid_list()
						
						-- else
							-- ref_exec = 1
						-- end
						-- entry = ""
					-- end
				-- elseif entry == "" and ref_icao ~= "----" then
					-- entry = ref_icao
				-- else
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- end
				
				if string.len(entry) == 4 then
					if cust_def_data == 1 then
						file_name = "Custom Data/CIFP/" .. entry
						file_name = file_name .. ".dat"
						file_navdata = io.open(file_name, "r")
						if file_navdata == nil then
							if apt_exist(entry) == true then
								apt_ok = 1
							end
						else
							file_navdata:close()
							apt_ok = 1
						end
					elseif cust_def_data == 2 then
						file_name = "Resources/default data/CIFP/" .. entry
						file_name = file_name .. ".dat"
						file_navdata = io.open(file_name, "r")
						if file_navdata == nil then
							if apt_exist(entry) == true then
								apt_ok = 1
							end
						else
							file_navdata:close()
							apt_ok = 1
						end
					end
					
					if apt_ok == 0 then
						add_fmc_msg(NOT_IN_DATABASE, 1)
					else
						ref_icao2 = entry
						airport_pos2()
						entry = ""
					end
				elseif entry == "" and ref_icao2 ~= "----" then
					entry = ref_icao2
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
			-- -- entry Ref airport ICAO
			-- local apt_ok = 0
			-- local xy = 0
			-- if entry == ">DELETE" then
				-- ref_icao = "----"
				-- des_icao = "****"
				-- ref_gate = "-----"
				-- co_route = "------------"
				-- trans_alt = "-----"
				-- ref_rwy = "-----"
				-- ref_sid = "------"
				-- ref_sid_tns = "------"
				-- des_app = "------"
				-- des_app_tns = "------"
				-- des_star = "------"
				-- des_star_trans = "------"
				-- ----
				-- ref_rwy2 = "-----"
				-- ref_sid2 = "------"
				-- ref_sid_tns2 = "------"
				-- des_app2 = "------"
				-- des_app_tns2 = "------"
				-- des_star2 = "------"
				-- des_star_trans2 = "------"
				-- ----
				-- crz_alt = "*****"
				-- crz_alt_num = 0
				-- crz_alt_num2 = 0
				-- entry = ""
				-- offset = 0
				-- legs_num = 0
				-- hold_data_num2 = 0
				
				-- offset_act = 0
				-- offset_start = 0
				-- offset_end = 0
				-- offset_dist = 0
				-- offset_side = 0
			-- else
				-- if string.len(entry) == 4 then
					-- file_name = "Custom Data/CIFP/" .. entry
					-- file_name = file_name .. ".dat"
					-- file_navdata = io.open(file_name, "r")
					-- if file_navdata == nil then
						-- file_name = "Resources/default data/CIFP/" .. entry
						-- file_name = file_name .. ".dat"
						-- file_navdata = io.open(file_name, "r")
						-- if file_navdata == nil then
							-- if apt_exist(entry) == true then
								-- apt_ok = 1
							-- end
						-- else
							-- read_ref_data(entry)		-- read reference airport data
							-- file_navdata:close()
							-- apt_ok = 1
						-- end
					-- else
						-- read_ref_data(entry)		-- read reference airport data
						-- file_navdata:close()
						-- apt_ok = 1
					-- end
					
					-- if apt_ok == 0 then
						-- -- fmc_message_num = fmc_message_num + 1
						-- -- fmc_message[fmc_message_num] = NOT_IN_DATABASE
						-- add_fmc_msg(NOT_IN_DATABASE, 1)
					-- else
						-- ref_icao = entry
						-- des_icao = "****"
						-- des_app_from_apt = 0
						-- ref_gate = "-----"
						-- co_route = "------------"
						-- trans_alt = "-----"
						-- ref_rwy = "-----"
						-- ref_sid = "------"
						-- ref_sid_tns = "------"
						-- des_app = "------"
						-- des_app_tns = "------"
						-- des_star = "------"
						-- des_star_trans = "------"
						-- ----
						-- ref_rwy2 = "-----"
						-- ref_sid2 = "------"
						-- ref_sid_tns2 = "------"
						-- des_app2 = "------"
						-- des_app_tns2 = "------"
						-- des_star2 = "------"
						-- des_star_trans2 = "------"
						-- ----
						-- legs_num = 0
						-- crz_alt = "*****"
						-- crz_alt_num = 0
						-- crz_alt_num2 = 0
						-- offset = 0
						
						-- offset_act = 0
						-- offset_start = 0
						-- offset_end = 0
						-- offset_dist = 0
						-- offset_side = 0
						-- if apt_exist(entry) == true then
							-- ref_icao_lat = icao_latitude
							-- ref_icao_lon = icao_longitude
							-- ref_tns_alt = icao_tns_alt
							-- ref_tns_lvl = icao_tns_lvl
							-- ref_icao_alt = 0
							-- if rwy_num > 0 then
								-- xy = tonumber(ref_data[1][2])
								-- if xy ~= nil then
									-- ref_icao_alt = xy
								-- end
							-- end
						-- else
							-- ref_tns_alt = 0
							-- ref_tns_lvl = 0
						-- end
						-- if ref_tns_alt == 0 then
							-- trans_alt = "-----"
						-- else
							-- trans_alt = string.format("%5d", ref_tns_alt)
						-- end
						-- entry = ""
					-- end
				-- elseif entry == "" and ref_icao ~= "----" then
					-- entry = ref_icao
				-- else
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- end
			-- end
			-- arr_data = 0
			-- airport_pos()
			-- create_rnw_list()
			-- create_sid_list()
		elseif page_rte_init == 1 then
			if act_page == 1 then
				-- entry CO ROUTE
				local ii = 0
				if entry == ">DELETE" then
					entry = INVALID_DELETE
					-- co_route = "------------"
					-- entry = ""
				else
					ii = string.len(entry)
					if ii > 0 and ii < 13 then
						load_fpln()
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			else
				local item = 0
				local button = 2	-- button 2 LSK
				local tmp_tmp = 0
				
				item = (act_page - 2) * 5 + button
				tmp_tmp = fpln_num2 + 1
				if fpln_num2 > 0 then
					if entry == ">DELETE" then
						del_via(item)
					else
						if item == tmp_tmp then
							if fpln_data2[fpln_num2][1] == "" and fpln_data2[fpln_num2][2] ~= "" then
								-- add new via via
								via_via_add()
							elseif fpln_data2[fpln_num2][1] ~= "" then
								-- add new via
								via_add(fpln_data2[fpln_num2][1], fpln_data2[fpln_num2][3])
							end
							item_sel_via = 0
						elseif item <= fpln_num2 and fpln_num2 > 1 then
							-- change via
							via_chg(fpln_data2[item-1][1], fpln_data2[item-1][3], item)
							item_sel_via = 0
						end
					end
				else
					entry = ">INVALID ENTRY"
				end
			end
		elseif page_ref_nav_data == 1 then
			local strlen = string.len(entry)
			if strlen ~= 4 then
				add_fmc_msg(INVALID_INPUT, 1)
			else
				nav_data_type = 2 -- apt
				nav_data_find(entry)
			end
		elseif page_init == 1 then
			-- go to Pos init page
			page_init = 0
			page_pos_init = 1
			display_update = 1
		elseif page_pos_init == 2 then
			if B738DR_irs_pos == "-----.-------.-" then
				entry = ""
			else
				entry = B738DR_irs_pos
			end
		elseif page_perf == 1 then
			-- entry Plan weight
			local strlen = string.len(entry)
			local n = tonumber(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					plan_weight = "---.-"
					plan_weight_lbs = plan_weight
					plan_weight_kgs = plan_weight
					entry = ""
				else
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if units == 0 then
							if n < 0 or n > 45.1 then	-- Plan min and max
								add_fmc_msg(INVALID_INPUT, 1)
							else
								plan_weight = string.format("%5.1f", n)
								plan_weight_lbs = plan_weight
								plan_weight_kgs = string.format("%5.1f", (tonumber(plan_weight) / 2.204))
								entry = ""
							end
						else
							if n < 0 or n > 20.5 then	-- Plan min and max
								add_fmc_msg(INVALID_INPUT, 1)
							else
								plan_weight = string.format("%5.1f", n)
								plan_weight_kgs = plan_weight
								plan_weight_lbs = string.format("%5.1f", (tonumber(plan_weight) * 2.204))
								entry = ""
							end
						end
						
						-- if n < weight_min or n > weight_max then	-- Plan min and max
							-- add_fmc_msg(INVALID_INPUT, 1)
						-- else
							-- plan_weight = string.format("%5.1f", n)
							-- if units == 0 then
								-- plan_weight_lbs = plan_weight
								-- plan_weight_kgs = string.format("%5.1f", (tonumber(plan_weight) / 2.204))
							-- else
								-- plan_weight_kgs = plan_weight
								-- plan_weight_lbs = string.format("%5.1f", (tonumber(plan_weight) * 2.204))
							-- end
							-- entry = ""
						-- end
					end
				end
			end
		elseif page_n1_limit == 1 then
			if in_flight_mode == 0 then
				-- select TO
				to = "<ACT>"
				to_1 = "     "
				to_2 = "     "
				if sel_clb_thr == 0 then
					clb = "<SEL>"
					clb_1 = "     "
					clb_2 = "     "
				end
				if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
					if v1_set == "---" and vr_set == "---" and v2_set == "---" then
						entry = ""
					else
						add_fmc_msg(VERIFY_TO_SPEEDS, 1)
						entry = ""
					end
				end
				B738DR_calc_vspd = 1
			else
				-- select GA
				auto_act = "     "
				ga_act = "<ACT>"
				con_act = "     "
				clb_act = "     "
				crz_act = "     "
			end
		elseif page_takeoff == 2 then
			-- entry RW SLOPE / HDG
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					rw_slope = "--.-"
					rw_hdg = "---"
					if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
						if v1_set == "---" and vr_set == "---" and v2_set == "---" then
							entry = ""
						else
							add_fmc_msg(VERIFY_TO_SPEEDS, 1)
							entry = ""
						end
					end
					B738DR_calc_vspd = 1
				else
					if strlen == 4 then
						if string.sub(entry, 1, 1) == "/" then
							local n = tonumber(string.sub(entry, 2, 4))
							if n == nil then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								if n < 0 or n > 359 then	-- HDG min and max
									add_fmc_msg(INVALID_INPUT, 1)
								else
									rw_hdg = string.format("%03d", n)
									if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
										if v1_set == "---" and vr_set == "---" and v2_set == "---" then
											entry = ""
										else
											add_fmc_msg(VERIFY_TO_SPEEDS, 1)
											entry = ""
										end
									end
									B738DR_calc_vspd = 1
								end
							end
						elseif string.sub(entry, 3, 3) == "." then
							local up_down = string.sub(entry, 1, 1)
							if up_down == "D" or up_down == "U" then
								local n = tonumber(string.sub(entry, 2, 4))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									rw_slope = up_down .. string.format("%03.1f", n)
									if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
										if v1_set == "---" and vr_set == "---" and v2_set == "---" then
											entry = ""
										else
											add_fmc_msg(VERIFY_TO_SPEEDS, 1)
											entry = ""
										end
									end
									B738DR_calc_vspd = 1
								end
							else
								add_fmc_msg(INVALID_INPUT, 1)
							end
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
			elseif page_descent == 1 then	--and B738DR_flight_phase < 5 then
			-- DES speed kts/mach
			local strlen = string.len(entry)
			local n = 0
			local nn = 0
			local nnn = 0
			local n2 = 0
			if strlen == 0 then
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					entry = ""
				else
					if strlen > 2 and  strlen < 6 and string.sub(entry, 1, 2) == "/." then		-- only mach
						n = tonumber(string.sub(entry, 2, strlen))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							nn = tonumber(des_max_mach)
							nnn = tonumber(des_min_mach)
							if nn == nil then
								nn = 0.820		-- max
							else
								nn = nn / 1000
							end
							if nnn == nil then
								nnn = 0.400		-- min
							end
							if n < nnn or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								B738DR_fmc_descent_speed_mach = n
								entry = ""
								B738DR_descent_mode = 2
							end
						end
					elseif strlen > 1 and  strlen < 5 and string.sub(entry, 1, 1) == "." then		-- only mach
						n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							nn = tonumber(des_max_mach)
							nnn = tonumber(des_min_mach)
							if nn == nil then
								nn = 0.820		-- max
							else
								nn = nn / 1000
							end
							if nnn == nil then
								nnn = 0.400		-- min
							end
							if n < nnn or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								B738DR_fmc_descent_speed_mach = n
								entry = ""
								B738DR_descent_mode = 2
							end
						end
					elseif strlen == 3 then			-- only kts
						n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							nn = tonumber(des_max_kts)
							nnn = tonumber(des_min_kts)
							if nn == nil then
								nn = 340
							end
							if nnn == nil then
								nnn = 100		-- min
							end
							if n < nnn or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								B738DR_descent_mode = 2
								entry = ""
								B738DR_fmc_descent_speed = n
							end
						end
					elseif strlen > 5 then		-- kts/mach xxx/.xxx
						if string.sub(entry, 4, 5) == "/." then
							n = tonumber(string.sub(entry, 1, 3))
							if n == nil then
							else
								nn = tonumber(des_max_kts)
								nnn = tonumber(des_min_kts)
								if nn == nil then
									nn = 340
								end
								if nnn == nil then
									nnn = 100		-- min
								end
								if n < nnn or n > nn then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									n2 = n
									n = tonumber(string.sub(entry, 5, -1))
									if n == nil then
										add_fmc_msg(INVALID_INPUT, 1)
									else
										nn = tonumber(des_max_mach)
										nnn = tonumber(des_min_mach)
										if nn == nil then
											nn = 0.820		-- max
										else
											nn = nn / 1000
										end
										if nnn == nil then
											nnn = 0.400		-- min
										end
										if n < nnn or n > nn then
											add_fmc_msg(INVALID_INPUT, 1)
										else
											B738DR_fmc_descent_speed_mach = n
											B738DR_fmc_descent_speed = n2
											B738DR_descent_mode = 2
											entry = ""
										end
									end
								end
							end
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
			elseif page_climb == 1 then
			-- CLB speed kts/mach
			local strlen = string.len(entry)
			local n = 0
			local nn = 0
			local nnn = 0
			local n2 = 0
			if strlen == 0 then
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					entry = ""
				else
					if strlen > 2 and  strlen < 6 and string.sub(entry, 1, 2) == "/." then		-- only mach
						n = tonumber(string.sub(entry, 2, strlen))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							nn = tonumber(clb_max_mach)
							nnn = tonumber(clb_min_mach)
							if nn == nil then
								nn = 0.820		-- max
							else
								nn = nn / 1000
							end
							if nnn == nil then
								nnn = 0.400		-- min
							end
							if n < nnn or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								B738DR_fmc_climb_speed_mach = n
								entry = ""
								B738DR_climb_mode = 3
							end
						end
					elseif strlen > 1 and strlen < 5 and string.sub(entry, 1, 1) == "." then		-- only mach
						n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							nn = tonumber(clb_max_mach)
							nnn = tonumber(clb_min_mach)
							if nn == nil then
								nn = 0.820		-- max
							else
								nn = nn / 1000
							end
							if nnn == nil then
								nnn = 0.400		-- min
							end
							if n < nnn or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								B738DR_fmc_climb_speed_mach = n
								entry = ""
								B738DR_climb_mode = 3
							end
						end
					elseif strlen == 3 then			-- only kts
						n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							nn = tonumber(clb_max_kts)
							nnn = tonumber(clb_min_kts)
							if nn == nil then
								nn = 340
							end
							if nnn == nil then
								nnn = 100		-- min
							end
							if n < nnn or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								B738DR_fmc_climb_speed = n
								entry = ""
								B738DR_climb_mode = 3
							end
						end
					elseif strlen > 5 then		-- kts/mach xxx/.xxx
						if string.sub(entry, 4, 5) == "/." then
							n = tonumber(string.sub(entry, 1, 3))
							if n == nil then
							else
								nn = tonumber(clb_max_kts)
								nnn = tonumber(clb_min_kts)
								if nn == nil then
									nn = 340
								end
								if nnn == nil then
									nnn = 100		-- min
								end
								if n < nnn or n > nn then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									n2 = n
									n = tonumber(string.sub(entry, 5, -1))
									if n == nil then
										add_fmc_msg(INVALID_INPUT, 1)
									else
										nn = tonumber(clb_max_mach)
										nnn = tonumber(clb_min_mach)
										if nn == nil then
											nn = 0.820		-- max
										else
											nn = nn / 1000
										end
										if nnn == nil then
											nnn = 0.400		-- min
										end
										if n < nnn or n > nn then
											add_fmc_msg(INVALID_INPUT, 1)
										else
											B738DR_fmc_climb_speed_mach = n
											B738DR_fmc_climb_speed = n2
											B738DR_climb_mode = 3
											entry = ""
										end
									end
								end
							end
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_cruise == 1 then
			-- CRZ speed kts/mach
			local strlen = string.len(entry)
			local n = 0
			local nn = 0
			local nnn = 0
			local n2 = 0
			if strlen == 0 then
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					entry = ""
				else
					if strlen > 2 and  strlen < 6 and string.sub(entry, 1, 2) == "/." then		-- only mach
						n = tonumber(string.sub(entry, 2, strlen))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							nn = tonumber(crz_max_mach)
							nnn = tonumber(crz_min_mach)
							if nn == nil then
								nn = 0.820		-- max
							else
								nn = nn / 1000
							end
							if nnn == nil then
								nnn = 0.400		-- min
							end
							if n < nnn or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								B738DR_fmc_cruise_speed_mach = n
								entry = ""
								B738DR_cruise_mode = 2
							end
						end
					elseif strlen > 1 and  strlen < 5 and string.sub(entry, 1, 1) == "." then		-- only mach
						n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							nn = tonumber(crz_max_mach)
							nnn = tonumber(crz_min_mach)
							if nn == nil then
								nn = 0.820		-- max
							else
								nn = nn / 1000
							end
							if nnn == nil then
								nnn = 0.400		-- min
							end
							if n < nnn or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								B738DR_fmc_cruise_speed_mach = n
								entry = ""
								B738DR_cruise_mode = 2
							end
						end
					elseif strlen == 3 then			-- only kts
						n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							nn = tonumber(crz_max_kts)
							nnn = tonumber(crz_min_kts)
							if nn == nil then
								nn = 340
							end
							if nnn == nil then
								nnn = 100		-- min
							end
							if n < nnn or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								B738DR_fmc_cruise_speed = n
								entry = ""
								B738DR_cruise_mode = 2
							end
						end
					elseif strlen > 5 then		-- kts/mach xxx/.xxx
						if string.sub(entry, 4, 5) == "/." then
							n = tonumber(string.sub(entry, 1, 3))
							if n == nil then
							else
								nn = tonumber(crz_max_kts)
								nnn = tonumber(crz_min_kts)
								if nn == nil then
									nn = 340
								end
								if nnn == nil then
									nnn = 100		-- min
								end
								if n < nnn or n > nn then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									n2 = n
									n = tonumber(string.sub(entry, 5, -1))
									if n == nil then
										add_fmc_msg(INVALID_INPUT, 1)
									else
										nn = tonumber(crz_max_mach)
										nnn = tonumber(crz_min_mach)
										if nn == nil then
											nn = 0.820		-- max
										else
											nn = nn / 1000
										end
										if nnn == nil then
											nnn = 0.400		-- min
										end
										if n < nnn or n > nn then
											add_fmc_msg(INVALID_INPUT, 1)
										else
											B738DR_fmc_cruise_speed_mach = n
											B738DR_fmc_cruise_speed = n2
											B738DR_cruise_mode = 2
											entry = ""
										end
									end
								end
							end
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_perf == 2 then
			-- CLB min speed kts/mach
			local strlen = string.len(entry)
			if strlen == 0 then
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					clb_min_kts = "   "
					clb_min_mach = "   "
					entry = ""
				else
					if strlen > 2 and  strlen < 6 and string.sub(entry, 1, 2) == "/." then		-- only mach
						local n = tonumber(string.sub(entry, 2, strlen))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(clb_max_mach)
							if nn == nil then
								nn = 0.82
							else
								nn = nn / 1000
							end
							if n < 0.4 or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								n = n * 1000
								clb_min_mach = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen == 3 then			-- only kts
						local n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(clb_max_kts)
							if nn == nil then
								nn = 340
							end
							if n < 100 or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								clb_min_kts = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen > 5 and strlen < 9 and string.sub(entry, 4, 5) == "/." then 	-- kts and mach
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(clb_max_kts)
							if nn == nil then
								nn = 340
							end
							if n < 100 or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local kts = string.format("%03d", n)
									n = tonumber(string.sub(entry, 5, strlen))
									if n == nil then
										add_fmc_msg(INVALID_INPUT, 1)
									else
										nn = tonumber(clb_max_mach)
										if nn == nil then
											nn = 0.82
										else
											nn = nn / 1000
										end
										if n < 0.4 or n > nn then
											add_fmc_msg(INVALID_INPUT, 1)
										else
											n = n * 1000
											clb_min_kts = kts
											clb_min_mach = string.format("%03d", n)
											entry = ""
										end
									end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		-----------
		elseif page_offset == 1 then
			local strlen = string.len(entry)
			local n = 0
			if strlen < 3 then
				add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					--offset_dist = 0
					--offset_side = 0
					--offset_start = 0
					--offset_end = 0
					
					offset_act = 0
					offset_start = 0
					offset_end = 0
					offset_dist = 0
					offset_side = 0
					legs_off_tmp_n = 0
					copy_to_legsdata_3()
					copy_to_legsdata2()
					create_fpln()
					
					entry = ""
				elseif strlen == 3 or strlen == 5 then
					if string.sub(entry, 1, 1) == "L" then
						offset_side = 1
						n = tonumber(string.sub(entry, 2, -1))
					elseif string.sub(entry, -1, -1) == "L" then
						offset_side = 1
						n = tonumber(string.sub(entry, 1, -2))
					elseif string.sub(entry, 1, 1) == "R" then
						offset_side = 2
						n = tonumber(string.sub(entry, 2, -1))
					elseif string.sub(entry, -1, -1) == "R" then
						offset_side = 2
						n = tonumber(string.sub(entry, 1, -2))
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
					if offset_side ~= 0 then
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n > 0 and n < 50 then
								offset_dist = n
								entry = ""
								offset_act = 1
								if offset_dist ~= 0 and offset_start ~= 0 and offset_end ~= 0 then
									--offset_create()
									offset_act = 2
								end
							else
								add_fmc_msg(INVALID_INPUT, 1)
							end
						end
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		elseif page_xtras_others == 4 then
			if simDR_roll_nz <= 0 then
				simDR_roll_nz = 0.30
			else
				simDR_roll_nz = simDR_roll_nz - 0.01
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 3LSK
function B738_fmc1_3L_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		if page_dep == 1 then
			if ref_sid2 == "------" then
				if ref_sid_sel[3] ~= "------" then
					ref_sid2 = ref_sid_sel[3]
					ref_sid_tns2 = "------"
					if ref_rwy2 == "-----" then
						create_rnw_list()
					end
					create_tns_list()
					act_page = 1
					ref_sid_exec = 1
				end
			else
				if ref_sid_tns2 == "------" then
					if ref_tns_sel[3] ~= "------" then
						ref_sid_tns2 = ref_tns_sel[3]
						act_page = 1
						ref_tns_exec = 1
					end
				end
			end
			rte_add_dep_arr()
		elseif page_sel_wpt == 1 then
			
			local item = 0
			local button = 3	-- button 3 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				rte_add_wpt2(item)
				legs_delete = 1
			end
		elseif page_sel_wpt2 == 1 then
			
			local item = 0
			local button = 3	-- button 3 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				dir_add(item)
			end
		elseif page_sel_wpt3 == 1 then
			
			local item = 0
			local button = 3	-- button 3 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				rte_add_wpt4(item)
				legs_delete = 1
			end
		elseif page_ref_sel == 1 then
			
			local item = 0
			local button = 3	-- button 3 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				if nav_data_type == 0 then -- WPT
					ref_nav_wpt = nav_data_entry	--entry
					ref_nav_navaid = "----"
					ref_nav_apt = "----"
				elseif nav_data_type == 1 then -- NAVAID
					ref_nav_wpt = "-----"
					ref_nav_navaid = nav_data_entry	--entry
					ref_nav_apt = "----"
				else -- APT
					ref_nav_wpt = "-----"
					ref_nav_navaid = "----"
					ref_nav_apt = nav_data_entry	--entry
				end
				nav_data_idx = item
				--ref_nav_wpt = nav_data_entry
				ref_nav_new = "*****"
				page_ref_nav_data = 1
				page_ref_sel = 0
			end
		elseif page_hold == 1 then
			local strlen = string.len(entry)
			local m = 0
			local n = 0
			local ww = 0
			if entry == ">DELETE" then
				-- new_hold_inbd = "---"
				-- new_hold_turn = -1
				-- entry = ""
				-- hold_exec = 1
				add_fmc_msg(INVALID_INPUT, 1)
			else
				if strlen == 5 then
					-- format XXX/X
					if string.sub(entry, 4, 4) ~= "/" then
						ww = 1
					end
					m = tonumber(string.sub(entry, 1, 3))
					if m == nil then
						ww = 1
					else
						if m < 0 and m > 359 then
							ww = 1
						end
					end
					if string.sub(entry, 5, 5) ~= "L" and string.sub(entry, 5, 5) ~= "R" then
						ww = 1
					end
					if ww == 0 then
						--if hold_exec == 0 then
							--edit_hold()
						--end
						new_hold_inbd = string.format("%03d", m)
						if string.sub(entry, 5, 5) == "L" then
							new_hold_turn = 0
						else
							new_hold_turn = 1
						end
						
						-- save data
						if new_hold_turn == -1 then
							legs_data2[hold_offset_idx][21] = 1
						else
							legs_data2[hold_offset_idx][21] = new_hold_turn
						end
						if new_hold_inbd == "---" then
							legs_data2[hold_offset_idx][29] = "000"
						else
							legs_data2[hold_offset_idx][29] = tostring(tonumber(new_hold_inbd) * 10)
						end
						legs_data2[hold_offset_idx][17] = 100
						--legs_delete = 1
						
						entry = ""
						hold_exec = 1
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				elseif strlen == 3 then
					-- format XXX
					m = tonumber(entry)
					if m == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						-- if hold_exec == 0 then
							-- edit_hold()
						-- end
						new_hold_inbd = string.format("%03d", m)
						
						-- save data
						if new_hold_inbd == "---" then
							legs_data2[hold_offset_idx][29] = "000"
						else
							legs_data2[hold_offset_idx][29] = tostring(tonumber(new_hold_inbd) * 10)
						end
						legs_data2[hold_offset_idx][17] = 100
						--legs_delete = 1
						entry = ""
						hold_exec = 1
					end
				elseif strlen == 2 then
					-- format /X
					if string.sub(entry, 1, 1) ~= "/" then
						ww = 1
					end
					if string.sub(entry, 2, 2) ~= "L" and string.sub(entry, 2, 2) ~= "R" then
						ww = 1
					end
					if ww == 0 then
						if hold_exec == 0 then
							edit_hold()
						end
						if string.sub(entry, 2, 2) == "L" then
							new_hold_turn = 0
						else
							new_hold_turn = 1
						end
						-- save data
						if new_hold_turn == -1 then
							legs_data2[hold_offset_idx][21] = 1
						else
							legs_data2[hold_offset_idx][21] = new_hold_turn
						end
						legs_data2[hold_offset_idx][17] = 100
						--legs_delete = 1
						entry = ""
						hold_exec = 1
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				elseif strlen == 1 then
					-- format X
					if entry == "L" then
						if hold_exec == 0 then
							edit_hold()
						end
						new_hold_turn = 0
						-- save data
						if new_hold_turn == -1 then
							legs_data2[hold_offset_idx][21] = 1
						else
							legs_data2[hold_offset_idx][21] = new_hold_turn
						end
						legs_data2[hold_offset_idx][17] = 100
						--legs_delete = 1
						entry = ""
						hold_exec = 1
					elseif entry == "R" then
						if hold_exec == 0 then
							edit_hold()
						end
						new_hold_turn = 1
						-- save data
						if new_hold_turn == -1 then
							legs_data2[hold_offset_idx][21] = 1
						else
							legs_data2[hold_offset_idx][21] = new_hold_turn
						end
						legs_data2[hold_offset_idx][17] = 100
						--legs_delete = 1
						entry = ""
						hold_exec = 1
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		-- elseif page_xtras == 1 then
			-- -- FUEL menu
			-- page_xtras = 0
			-- page_xtras_fuel = 1
			-- cg_set_m = simDR_cg
			-- cg_set_in = cg_set_m * 39.37
			-- mac = calc_mac(simDR_cg)
			-- mac_zfw = calc_zfw_mac(cg_set_m)
			
			
		elseif page_xtras == 1 then
			fmc_xtras_main(3)
			
		-- elseif page_xtras_fmod == 1 then
			-- -- FMOD Crew
			-- B738CMD_enable_crew:once()
		-- elseif page_xtras_fmod == 2 then
			-- -- FMOD Internal engine Start/Stop
			-- B738CMD_vol_int_start:once()
		-- elseif page_xtras_fmod == 3 then
			-- -- FMOD PAX volume
			-- B738CMD_vol_int_pax:once()
		-- elseif page_xtras_fmod == 4 then
			-- -- FMOD "ANNOUN SET NR
			-- B738CMD_announcement_set:once()
		elseif page_xtras_fmod > 0 then
			fmc_fmod_main(3,0)
		elseif page_fmod_features > 0 then
			fmc_fmod_features(3)
		elseif page_fmod_volumes > 0 then
			fmc_fmod_volumes(3)
		elseif page_fmod_announ > 0 then
			fmc_fmod_announ(3)
		elseif page_fmod_flight_ctrl > 0 then
			fmc_fmod_flight_ctrl(3)
		elseif page_fmod_eq > 0 then
			fmc_fmod_eq(3)
		elseif page_xtras_others == 1 then
			B738CMD_chock_toggle:once()
		elseif page_xtras_others == 2 then
			B738DR_throttle_noise = B738DR_throttle_noise + 1
			if B738DR_throttle_noise > 10 then
				B738DR_throttle_noise = 0
			end
		elseif page_xtras_others == 3 then
			if B738DR_sync_baro == 0 then
				B738DR_sync_baro = 1
			else
				B738DR_sync_baro = 0
			end
		elseif page_arr == 1 then
			if des_star2 == "------" then
				if des_star_sel[3] ~= "------" then
					des_star2 = des_star_sel[3]
					des_star_trans2 = "------"
					if des_app2 == "------" then
						create_des_app_list()
					end
					create_star_tns_list()
					act_page = 1
					des_star_exec = 1
				end
			else
				if des_star_trans2 == "------" then
					if des_star_tns_sel[3] ~= "------" then
						des_star_trans2 = des_star_tns_sel[3]
						des_star_tns_exec = 1
						act_page = 1
					end
				end
			end
			rte_add_dep_arr()
		elseif page_rte_init == 1 then
			if act_page == 1 and ref_icao ~= "----" then
				-- entry RWY
				if entry == ">DELETE" then
					ref_rwy2 = "-----"
					entry = ""
				else
					if rnw_exist(ref_icao, entry) == false then
						-- fmc_message_num = fmc_message_num + 1
						-- fmc_message[fmc_message_num] = NOT_IN_DATABASE
						add_fmc_msg(NOT_IN_DATABASE, 1)
					else
						ref_rwy2 = entry
						entry = ""
					end
				end
			else
				local item = 0
				local button = 3	-- button 3 LSK
				local tmp_tmp = 0
				
				item = (act_page - 2) * 5 + button
				tmp_tmp = fpln_num2 + 1
				if fpln_num2 > 0 then
					if entry == ">DELETE" then
						del_via(item)
					else
						if item == tmp_tmp then
							if fpln_data2[fpln_num2][1] == "" and fpln_data2[fpln_num2][2] ~= "" then
								-- add new via via
								via_via_add()
							elseif fpln_data2[fpln_num2][1] ~= "" then
								-- add new via
								via_add(fpln_data2[fpln_num2][1], fpln_data2[fpln_num2][3])
							end
							item_sel_via = 0
						elseif item <= fpln_num2 and fpln_num2 > 1 then
							-- change via
							via_chg(fpln_data2[item-1][1], fpln_data2[item-1][3], item)
							item_sel_via = 0
						end
					end
				else
					entry = ">INVALID ENTRY"
				end
			end
		elseif page_fix == 1 then
			local ii = 0
			local jj = string.len(entry)
			if act_page <= fix_data_num then
				if jj == 0 then
					if fix_data[act_page][21] > 0 then
						-- copy wpt to clipboard
						if fix_data[act_page][8] ~= -1 then
							entry = fix_data[act_page][1] .. string.format("%03d", fix_data[act_page][8]) .. "/" .. string.format("%05.1f", fix_data[act_page][25])
						elseif fix_data[act_page][9] ~= -1 then
							--
						end
					end
				elseif entry == ">DELETE" then
					if fix_data[act_page][8] ~= -1 or fix_data[act_page][9] ~= -1 then
						fix_data[act_page][8] = -1
						fix_data[act_page][9] = -1
						fix_data[act_page][21] = -1
						entry = ""
					end
				elseif jj > 1 then
					if string.sub(entry, 1, 1) == "/" then
						-- distance
						ii = tonumber(string.sub(entry, 2, -1))
						if ii == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if ii <= 0 or ii > 511 then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								fix_data[act_page][9] = ii
								fix_data[act_page][8] = -1
								fix_data[act_page][21] = -1
								entry = ""
							end
						end
					elseif string.sub(entry, -1, -1) == "/" then
						-- radial
						ii = tonumber(string.sub(entry, 1, -2))
						if ii == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if ii < 0 or ii > 359 then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								fix_data[act_page][8] = ii
								fix_data[act_page][9] = -1
								fix_data[act_page][21] = -1
								entry = ""
							end
						end
					else
						-- radial
						ii = tonumber(entry)
						if ii == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if ii < 0 or ii > 359 then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								fix_data[act_page][8] = ii
								fix_data[act_page][9] = -1
								fix_data[act_page][21] = -1
								entry = ""
							end
						end
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		elseif page_legs == 1 then
			
			local item = 0
			local button = 3	-- button 3 LSK
			local tmp_tmp = 0
			local jj = 0
			local kk = 0
			
			if nav_mode == 1 then
				item = legs_num2 + 2
			else
				item = (act_page - 1) * 5 + offset - 1 + button
			end
			jj,kk = string.find(entry, "/")
			if item > legs_num2 then
				tmp_tmp = legs_num2 + 1
				if item == tmp_tmp then
					if wpt_lat_lon(entry) == true then
						legs_data2[item][31] = "TF"
						rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
					elseif jj ~= nil then
						rte_add_wpt3(item, string.sub(entry, 1, jj-4), string.sub(entry, jj-3, jj-1), string.sub(entry, jj+1, -1))
					elseif item_sel == 0 then
						-- add waypoint last
						rte_add_wpt(item)
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
					item_sel = 0
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
				-- if item == tmp_tmp and item_sel == 0 then
					-- if wpt_lat_lon(entry) == true then
						-- legs_data2[item][31] = "TF"
						-- rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
					-- else
						-- -- add waypoint last
						-- rte_add_wpt(item)
					-- end
					-- item_sel = 0
				-- else
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- end
			else
				if entry == ">DELETE" then
					-- delete waypoint
					if legs_data2[item-1][17] < 99 then
						legs_data2[item-1][17] = legs_data2[item-1][17] + 100
					end
					legs_data2[item+1][31] = "TF"
					if item == legs_num2 then
						rte_copy(legs_num2 + 1)
						rte_paste(legs_num2)
						calc_rte_enable2 = 1
					else
						if legs_data2[item+1][1] == "DISCONTINUITY" then
							rte_copy(item + 1)
							rte_paste(item)
						else
							tmp_tmp = legs_num2
							rte_add_disco(item)
							legs_num2 = tmp_tmp
						end
						calc_rte_enable2 = 1
					end
					legs_delete = 1
					entry = ""
				elseif string.len(entry) > 1 and string.len(entry) < 6 and item_sel == 0 then
					if offset_act == 3 then
						if legs_data2[item][19] ~= 6 then
							-- add waypoint
							rte_add_wpt(item)
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						-- add waypoint
						rte_add_wpt(item)
					end
					item_sel = 0
				elseif jj ~= nil then
					rte_add_wpt3(item, string.sub(entry, 1, jj-4), string.sub(entry, jj-3, jj-1), string.sub(entry, jj+1, -1))
					item_sel = 0
				elseif wpt_lat_lon(entry) == true and item_sel == 0 then
						legs_data2[item][31] = "TF"
						rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
				elseif item_sel == 0 then
					if string.len(entry) == 0 then
						if offset_act == 3 then
							if legs_data2[item][19] ~= 6 then
								-- select item
								if legs_data2[item][1] == "DISCONTINUITY" then
									add_fmc_msg(INVALID_INPUT, 1)
									item_sel = 0
								else
									item_sel = item
									entry = legs_data2[item][1]
								end
							else
								add_fmc_msg(INVALID_INPUT, 1)
								item_sel = 0
							end
						else
							-- select item
							if legs_data2[item][1] == "DISCONTINUITY" then
								add_fmc_msg(INVALID_INPUT, 1)
								item_sel = 0
							else
								item_sel = item
								entry = legs_data2[item][1]
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
						item_sel = 0
					end
				else
					if offset_act == 3 then
						if legs_data2[item][19] ~= 6 then
							-- entry item
							if item_sel > item then
								if legs_data2[item-1][17] < 99 then
									legs_data2[item-1][17] = legs_data2[item-1][17] + 100
								end
								legs_data2[item_sel][31] = "TF"
								rte_copy(item_sel)
								rte_paste(item)
								calc_rte_enable2 = 1
							elseif item_sel < item then
								item_sel = item_sel + 1
								item = item + 1
								rte_copy(item)
								rte_paste(item_sel)
								calc_rte_enable2 = 1
							else
								add_fmc_msg(INVALID_INPUT, 1)
							end
							entry = ""
							item_sel = 0
							legs_delete = 1
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						-- entry item
						if item_sel > item then
							if legs_data2[item-1][17] < 99 then
								legs_data2[item-1][17] = legs_data2[item-1][17] + 100
							end
							legs_data2[item_sel][31] = "TF"
							rte_copy(item_sel)
							rte_paste(item)
							calc_rte_enable2 = 1
						elseif item_sel < item then
							item_sel = item_sel + 1
							item = item + 1
							rte_copy(item)
							rte_paste(item_sel)
							calc_rte_enable2 = 1
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
						entry = ""
						item_sel = 0
						legs_delete = 1
					end
					item_sel = 0
				end
			end
		elseif page_takeoff == 1 then
			-- CG entry
			local strlen = string.len(entry)
			local n = tonumber(entry)
			if strlen == 0 then
				n = calc_mac(simDR_cg)
				if n < 6 or n > 36 then	-- CG min and max
					add_fmc_msg(INVALID_INPUT, 1)
				else
					cg = string.format("%4.1f", n)
					if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
						if v1_set == "---" and vr_set == "---" and v2_set == "---" then
							entry = ""
						else
							add_fmc_msg(VERIFY_TO_SPEEDS, 1)
							entry = ""
						end
					end
					B738DR_calc_trim = 1
				end
			else
				if entry == ">DELETE" then
					cg = "--.-"
					if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
						if v1_set == "---" and vr_set == "---" and v2_set == "---" then
							entry = ""
						else
							add_fmc_msg(VERIFY_TO_SPEEDS, 1)
							entry = ""
						end
					end
					B738DR_calc_trim = 1
				else
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 6 or n > 36 then	-- CG min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							cg = string.format("%4.1f", n)
							if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
								if v1_set == "---" and vr_set == "---" and v2_set == "---" then
									entry = ""
								else
									add_fmc_msg(VERIFY_TO_SPEEDS, 1)
									entry = ""
								end
							end
							B738DR_calc_trim = 1
						end
					end
				end
			end
		elseif page_init == 1 then
			-- go to Perf init page
			page_init = 0
			page_perf = 1
			display_update = 1
		elseif page_pos_init == 2 then
			if B738DR_irs2_pos == "-----.-------.-" then
				entry = ""
			else
				entry = B738DR_irs2_pos
			end
		elseif page_pos_init == 1 and disable_POS_3L == 0 then
			-- entry Gate
			if entry == ">DELETE" then
				ref_gate = "-----"
				entry = ""
			else
				if string.len(entry) > 0 and string.len(entry) < 6 then
					ref_gate = entry
					local lenstr = string.len(ref_gate)
					if lenstr == 1 then
						ref_gate = ref_gate .. "    "
					elseif lenstr == 2 then
						ref_gate = ref_gate .. "   "
					elseif lenstr == 3 then
						ref_gate = ref_gate .. "  "
					elseif lenstr == 4 then
						ref_gate = ref_gate .. " "
					end
					entry = ""
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		elseif page_perf == 1 then
			-- entry ZFW
			local strlen = string.len(entry)
			local n = tonumber(entry)
			if strlen == 0 then
				zfw = zfw_calc
				if units == 0 then
					zfw_lbs = zfw
					zfw_kgs = string.format("%5.1f", (tonumber(zfw) / 2.204))
				else
					zfw_kgs = zfw
					zfw_lbs = string.format("%5.1f", (tonumber(zfw) * 2.204))
				end
			else
				if entry == ">DELETE" then
					zfw = "***.*"
					zfw_lbs = zfw
					zfw_kgs = zfw
					if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
						if v1_set == "---" and vr_set == "---" and v2_set == "---" then
							entry = ""
						else
							add_fmc_msg(VERIFY_TO_SPEEDS, 1)
							entry = ""
						end
					end
					B738DR_calc_vspd = 1
					B738DR_calc_trim = 1
				else
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < weight_min or n > weight_max then	-- ZFW min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							zfw = string.format("%5.1f", n)
							if units == 0 then
								zfw_lbs = zfw
								zfw_kgs = string.format("%5.1f", (tonumber(zfw) / 2.204))
							else
								zfw_kgs = zfw
								zfw_lbs = string.format("%5.1f", (tonumber(zfw) * 2.204))
							end
							if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
								if v1_set == "---" and vr_set == "---" and v2_set == "---" then
									entry = ""
								else
									add_fmc_msg(VERIFY_TO_SPEEDS, 1)
									entry = ""
								end
							end
							B738DR_calc_vspd = 1
							B738DR_calc_trim = 1
						end
					end
				end
			end
		elseif page_n1_limit == 1 then
			if in_flight_mode == 0 then
				-- local clb_auto_thr = 0
				-- local clb_auto_thr1 = 0
				-- local clb_auto_thr2 = 0
				-- select TO-1
				to_1 = "<ACT>"
				to = "     "
				to_2 = "     "
				if sel_clb_thr == 0 then
					-- clb_auto_thr = B738DR_thr_climb_N1
					-- clb_auto_thr1 = clb_auto_thr * 0.97
					-- clb_auto_thr2 = clb_auto_thr * 0.94
					-- if clb_auto_thr < B738DR_thr_takeoff_N1 then
						-- clb = "<SEL>"
						-- clb_1 = "     "
						-- clb_2 = "     "
					-- elseif clb_auto_thr2 < B738DR_thr_takeoff_N1 then
						clb = "     "
						clb_1 = "<SEL>"
						clb_2 = "     "
					-- else
						-- clb = "     "
						-- clb_1 = "     "
						-- clb_2 = "<SEL>"
					-- end
				end
				if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
					if v1_set == "---" and vr_set == "---" and v2_set == "---" then
						entry = ""
					else
						add_fmc_msg(VERIFY_TO_SPEEDS, 1)
						entry = ""
					end
				end
				B738DR_calc_vspd = 1
			else
				-- select CON
				auto_act = "     "
				ga_act = "     "
				con_act = "<ACT>"
				clb_act = "     "
				crz_act = "     "
			end
		elseif page_descent_forecast == 1 then
			-- entry WIND ALT LAYER 1
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					forec_alt_1 = "-----"
					forec_alt_1_num = 0
					entry = ""
				elseif strlen == 5 and string.sub(entry, 1, 2) == "FL" then
					local n = tonumber(string.sub(entry, 3, 5))
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 10 or n > 410 then	-- FLxxx min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							forec_alt_1_num = n * 100
							if forec_alt_1_num > B738DR_trans_lvl then
								--n = n / 100
								forec_alt_1 = "FL" .. string.format("%03d", n)
							else
								n = n * 100
								forec_alt_1 = string.format("%5d", n)
							end
							entry = ""
							wind_alt_order()
						end
					end
				else
					local n = tonumber(entry)
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if strlen == 3 then
							if n < 10 or n > 410 then	-- FLxxx min and max
								add_fmc_msg(INVALID_INPUT, 1)
							else
								forec_alt_1_num = n * 100
								if forec_alt_1_num > B738DR_trans_lvl then
									--n = n / 100
									forec_alt_1 = "FL" .. string.format("%03d", n)
								else
									n = n * 100
									forec_alt_1 = string.format("%5d", n)
								end
								entry = ""
								wind_alt_order()
							end
						else
							if n < 1000 or n > 41000 then	-- Alt min and max
								add_fmc_msg(INVALID_INPUT, 1)
							else
								forec_alt_1_num = n
								if forec_alt_1_num > B738DR_trans_lvl then
									n = n / 100
									forec_alt_1 = "FL" .. string.format("%03d", n)
								else
									forec_alt_1 = string.format("%5d", n)
								end
								entry = ""
								wind_alt_order()
							end
						end
					end
				end
			end
		elseif page_perf == 2 then
			-- CRZ min speed kts/mach
			local strlen = string.len(entry)
			if strlen == 0 then
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					crz_min_kts = "   "
					crz_min_mach = "   "
					entry = ""
				else
					if strlen > 2 and  strlen < 6 and string.sub(entry, 1, 2) == "/." then		-- only mach
						local n = tonumber(string.sub(entry, 2, strlen))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(crz_max_mach)
							if nn == nil then
								nn = 0.82
							else
								nn = nn / 1000
							end
							if n < 0.4 or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								n = n * 1000
								crz_min_mach = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen == 3 then			-- only kts
						local n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(crz_max_kts)
							if nn == nil then
								nn = 340
							end
							if n < 100 or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								crz_min_kts = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen > 5 and strlen < 9 and string.sub(entry, 4, 5) == "/." then 	-- kts and mach
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(crz_max_kts)
							if nn == nil then
								nn = 340
							end
							if n < 100 or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local kts = string.format("%03d", n)
									n = tonumber(string.sub(entry, 5, strlen))
									if n == nil then
										add_fmc_msg(INVALID_INPUT, 1)
									else
										nn = tonumber(crz_max_mach)
										if nn == nil then
											nn = 0.82
										else
											nn = nn / 1000
										end
										if n < 0.4 or n > nn then
											add_fmc_msg(INVALID_INPUT, 1)
										else
											n = n * 1000
											crz_min_kts = kts
											crz_min_mach = string.format("%03d", n)
											entry = ""
										end
									end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		-----------
		elseif page_ref_nav_data_wpt == 1 then
			if string.len(entry) > 0 then
				local err_pos = 0
				local n = 0
				if string.len(entry) ~= 7 or string.sub(entry, 6, 6) ~= "." then
					err_pos = 1
				end
				n = tonumber(string.sub(entry, 2, 3))
				if (n == nil) or (n < 0) or (n > 90) then
					err_pos = 1
				end
				n = tonumber(string.sub(entry, 4, 5))
				if (n == nil) or (n < 0) or (n > 59) then
					err_pos = 1
				end
				n = tonumber(string.sub(entry, 7, 7))
				if n == nil then
					err_pos = 1
				end
				if string.sub(entry, 1, 1) ~= "N" 
				and string.sub(entry, 1, 1) ~= "S" then
					err_pos = 1
				end
				if err_pos == 0 then
					ref_nav_lat = tonumber(string.sub(entry, 2, 3)) + (tonumber(string.sub(entry, 4, 7)) / 60)
					if string.sub(entry, 1, 1) == "S" then
						ref_nav_lat = -ref_nav_lat
					end
					entry = ""
					ref_nav_id = "-----"
					ref_nav_rc = ""
					ref_nav_brg = "---"
					ref_nav_dist = "---"
					if ref_nav_lon ~= 0 then
						ref_nav_exec = 1
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		elseif page_offset == 1 and offset_dist ~= 0 then
			local strlen = string.len(entry)
			if strlen == 0 then
				add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					offset_start = 0
					offset_end = 0
					entry = ""
				elseif strlen < 6 then
					offset_check1(entry)
					if offset_start == 0 then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						entry = ""
						offset_act = 1
						if offset_dist ~= 0 and offset_start ~= 0 and offset_end ~= 0 then
							--offset_create()
							offset_act = 2
						end
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		elseif page_climb == 1 then
			-- change restrict speed by altitude
			
			local no_restrict = 0
			if B738DR_ap_spd_interv_status == 0 and B738DR_fmc_climb_speed_l ~= 0 
			and (B738DR_flight_phase < 2 or B738DR_flight_phase == 3) and B738DR_fmc_climb_speed_l ~= 340 then
				if flaps_speed == B738DR_fmc_climb_speed_l or flaps_speed < vnav_speed then
					no_restrict = 1
				elseif vnav_speed == B738DR_fmc_climb_speed_l then
					no_restrict = 1
				end
			end
			
			local n = 0
			local strlen = string.len(entry)
			if no_restrict == 0 then
				if entry == ">DELETE" then
					B738DR_fmc_climb_r_speed1 = 0
					B738DR_fmc_climb_r_alt1 = 0
					fmc_climb_r_alt1 = ""
					entry = ""
				else
					if strlen > 6 then
						-- SPD/ALT
						n = entry_spd_alt(entry, 100, 340, 100, 41000, 18000)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							B738DR_fmc_climb_r_speed1 = output_num1		-- speed
							B738DR_fmc_climb_r_alt1 = output_num2		-- altitude
							fmc_climb_r_alt1 = spaces_after(output_str2, 5)
							entry = ""
						end
					end
				end
			else
				add_fmc_msg(INVALID_INPUT, 1)
			end
			
		elseif page_descent == 1 then
			-- change restrict speed by altitude
			
			local no_restrict = 0
			local temp_speed = tonumber(string.format("%3d", flaps_speed))
			local temp_speed2 = tonumber(string.format("%3d", B738DR_rest_wpt_spd))
			local ap_mcp_spd = tonumber(string.format("%3d", simDR_airspeed_dial))
			if B738DR_ap_spd_interv_status == 0 and B738DR_flight_phase > 3 then
				if ap_mcp_spd == temp_speed or ap_mcp_spd == temp_speed2 then
					no_restrict = 1
				end
			end
			
			local n = 0
			local strlen = string.len(entry)
			if no_restrict == 0 then
				if entry == ">DELETE" then
					B738DR_fmc_descent_r_speed1 = 0
					B738DR_fmc_descent_r_alt1 = 0
					fmc_descent_r_alt1 = ""
					entry = ""
				else
					if strlen > 6 then
						-- SPD/ALT
						n = entry_spd_alt(entry, 100, 340, 100, 41000, 18000)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							B738DR_fmc_descent_r_speed1 = output_num1		-- speed
							B738DR_fmc_descent_r_alt1 = output_num2		-- altitude
							fmc_descent_r_alt1 = spaces_after(output_str2, 5)
							entry = ""
						end
					end
				end
			else
				add_fmc_msg(INVALID_INPUT, 1)
			end
		elseif page_xtras_others == 4 then
			if simDR_yaw_nz <= 0 then
				simDR_yaw_nz = 0.30
			else
				simDR_yaw_nz = simDR_yaw_nz - 0.01
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 4LSK
function B738_fmc1_4L_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		if page_dep == 1 then
			if ref_sid2 == "------" then
				if ref_sid_sel[4] ~= "------" then
					ref_sid2 = ref_sid_sel[4]
					ref_sid_tns2 = "------"
					if ref_rwy2 == "-----" then
						create_rnw_list()
					end
					create_tns_list()
					act_page = 1
					ref_sid_exec = 1
				end
			else
				if ref_sid_tns2 == "------" then
					if ref_tns_sel[4] ~= "------" then
						ref_sid_tns2 = ref_tns_sel[4]
						act_page = 1
						ref_tns_exec = 1
					end
				end
			end
			rte_add_dep_arr()
		elseif page_sel_wpt == 1 then
			
			local item = 0
			local button = 4	-- button 4 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				rte_add_wpt2(item)
				legs_delete = 1
			end
		elseif page_sel_wpt2 == 1 then
			
			local item = 0
			local button = 4	-- button 4 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				dir_add(item)
			end
		elseif page_sel_wpt3 == 1 then
			
			local item = 0
			local button = 4	-- button 4 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				rte_add_wpt4(item)
				legs_delete = 1
			end
		elseif page_ref_sel == 1 then
			
			local item = 0
			local button = 4	-- button 4 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				if nav_data_type == 0 then -- WPT
					ref_nav_wpt = nav_data_entry	--entry
					ref_nav_navaid = "----"
					ref_nav_apt = "----"
				elseif nav_data_type == 1 then -- NAVAID
					ref_nav_wpt = "-----"
					ref_nav_navaid = nav_data_entry	--entry
					ref_nav_apt = "----"
				else -- APT
					ref_nav_wpt = "-----"
					ref_nav_navaid = "----"
					ref_nav_apt = nav_data_entry	--entry
				end
				nav_data_idx = item
				--ref_nav_wpt = nav_data_entry
				ref_nav_new = "*****"
				page_ref_nav_data = 1
				page_ref_sel = 0
			end
		elseif page_rte_init == 1 then
			if act_page > 1 then
				local item = 0
				local button = 4	-- button 4 LSK
				local tmp_tmp = 0
				
				item = (act_page - 2) * 5 + button
				tmp_tmp = fpln_num2 + 1
				if fpln_num2 > 0 then
					if entry == ">DELETE" then
						del_via(item)
					else
						if item == tmp_tmp then
							if fpln_data2[fpln_num2][1] == "" and fpln_data2[fpln_num2][2] ~= "" then
								-- add new via via
								via_via_add()
							elseif fpln_data2[fpln_num2][1] ~= "" then
								-- add new via
								via_add(fpln_data2[fpln_num2][1], fpln_data2[fpln_num2][3])
							end
							item_sel_via = 0
						elseif item <= fpln_num2 and fpln_num2 > 1 then
							-- change via
							via_chg(fpln_data2[item-1][1], fpln_data2[item-1][3], item)
							item_sel_via = 0
						end
					end
				else
					entry = ">INVALID ENTRY"
				end
			end
		elseif page_hold == 1 then
			local strlen = string.len(entry)
			local m = 0
			local n = 0
			local ww = 0
			if entry == ">DELETE" then
				new_hold_time = "-.-"
				if new_hold_time == "-.-" then
					if new_hold_dist == "--.-" then
						-- default 1.5 min
						legs_data2[hold_offset_idx][30] = ""
					else
						m = tonumber(new_hold_dist) * 10
						legs_data2[hold_offset_idx][30] = string.format("%04d", m)
					end
				else
					m = tonumber(new_hold_time) * 10
					legs_data2[hold_offset_idx][30] = "T" .. string.format("%03d", m)
				end
				legs_data2[hold_offset_idx][17] = 100
				entry = ""
			else
				if strlen == 3 then
					-- format X.X
					if string.sub(entry, 2, 2) ~= "." then
						ww = 1
					end
					m = tonumber(string.sub(entry, 1, 1))
					if m == nil then
						ww = 1
					end
					n = tonumber(string.sub(entry, 3, 3))
					if n == nil then
						ww = 1
					end
					if ww == 0 then
						-- if hold_exec == 0 then
							-- edit_hold()
						-- end
						m = tonumber(entry)
						new_hold_time = string.format("%03.1f", m)
						new_hold_dist = "--.-"
						if new_hold_time == "-.-" then
							if new_hold_dist == "--.-" then
								-- default 1.5 min
								legs_data2[hold_offset_idx][30] = ""
							else
								m = tonumber(new_hold_dist) * 10
								legs_data2[hold_offset_idx][30] = string.format("%04d", m)
							end
						else
							m = tonumber(new_hold_time) * 10
							legs_data2[hold_offset_idx][30] = "T" .. string.format("%03d", m)
						end
						legs_data2[hold_offset_idx][17] = 100
						entry = ""
						hold_exec = 1
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		-- elseif page_xtras_fmod == 1 then
			-- -- FMOD Airport ambience
			-- B738CMD_airport_set:once()
		-- elseif page_xtras_fmod == 2 then
			-- -- FMOD Internal AC fans volume
			-- B738CMD_vol_int_ac:once()
		-- elseif page_xtras_fmod == 3 then
			-- -- FMOD PAX applause enable
			-- B738CMD_vol_int_pax_applause:once()
		elseif page_xtras == 1 then
			fmc_xtras_main(4)
		elseif page_xtras_fmod > 0 then
			fmc_fmod_main(4,0)
		elseif page_fmod_features > 0 then
			fmc_fmod_features(4)
		elseif page_fmod_volumes > 0 then
			fmc_fmod_volumes(4)
		elseif page_fmod_announ > 0 then
			fmc_fmod_announ(4)
		elseif page_fmod_flight_ctrl > 0 then
			fmc_fmod_flight_ctrl(4)
		elseif page_fmod_eq > 0 then
			fmc_fmod_eq(4)
		elseif page_xtras_others == 1 then
			B738CMD_pause_td_toggle:once()
		elseif page_xtras_others == 2 then
			if B738DR_fuelgauge == 0 then
				B738DR_fuelgauge = 1
			else
				B738DR_fuelgauge = 0
			end
		elseif page_xtras_others == 3 then
			if B738DR_kill_effect == 0 then
				B738DR_kill_effect = 1
			elseif B738DR_kill_effect == 1 then
				B738DR_kill_effect = 2
			else
				B738DR_kill_effect = 0
			end
		elseif page_arr == 1 then
			if des_star2 == "------" then
				if des_star_sel[4] ~= "------" then
					des_star2 = des_star_sel[4]
					des_star_trans2 = "------"
					if des_app2 == "------" then
						create_des_app_list()
					end
					create_star_tns_list()
					act_page = 1
					des_star_exec = 1
				end
			else
				if des_star_trans2 == "------" then
					if des_star_tns_sel[4] ~= "------" then
						des_star_trans2 = des_star_tns_sel[4]
						des_star_tns_exec = 1
						act_page = 1
					end
				end
			end
			rte_add_dep_arr()
		elseif page_fix == 1 then
			local ii = 0
			local jj = string.len(entry)
			if act_page <= fix_data_num then
				if jj == 0 then
					if fix_data[act_page][30] > 0 then
						-- copy wpt to clipboard
						if fix_data[act_page][10] ~= -1 then
							entry = fix_data[act_page][1] .. string.format("%03d", fix_data[act_page][10]) .. "/" .. string.format("%05.1f", fix_data[act_page][34])
						elseif fix_data[act_page][11] ~= -1 then
							--
						end
					end
				elseif entry == ">DELETE" then
					if fix_data[act_page][10] ~= -1 or fix_data[act_page][11] ~= -1 then
						fix_data[act_page][10] = -1
						fix_data[act_page][11] = -1
						fix_data[act_page][30] = -1
						entry = ""
					end
				elseif jj > 1 then
					if string.sub(entry, 1, 1) == "/" then
						-- distance
						ii = tonumber(string.sub(entry, 2, -1))
						if ii == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if ii <= 0 or ii > 511 then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								fix_data[act_page][11] = ii
								fix_data[act_page][10] = -1
								fix_data[act_page][30] = -1
								entry = ""
							end
						end
					elseif string.sub(entry, -1, -1) == "/" then
						-- radial
						ii = tonumber(string.sub(entry, 1, -2))
						if ii == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if ii < 0 or ii > 359 then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								fix_data[act_page][10] = ii
								fix_data[act_page][11] = -1
								fix_data[act_page][30] = -1
								entry = ""
							end
						end
					else
						-- radial
						ii = tonumber(entry)
						if ii == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if ii < 0 or ii > 359 then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								fix_data[act_page][10] = ii
								fix_data[act_page][11] = -1
								fix_data[act_page][30] = -1
								entry = ""
							end
						end
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		elseif page_legs == 1 then
			
			local item = 0
			local button = 4	-- button 4 LSK
			local tmp_tmp = 0
			local jj = 0
			local kk = 0
			
			if nav_mode == 1 then
				item = legs_num2 + 2
			else
				item = (act_page - 1) * 5 + offset - 1 + button
			end
			jj,kk = string.find(entry, "/")
			if item > legs_num2 then
				tmp_tmp = legs_num2 + 1
				if item == tmp_tmp then
					if wpt_lat_lon(entry) == true then
						legs_data2[item][31] = "TF"
						rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
					elseif jj ~= nil then
						rte_add_wpt3(item, string.sub(entry, 1, jj-4), string.sub(entry, jj-3, jj-1), string.sub(entry, jj+1, -1))
					elseif item_sel == 0 then
						-- add waypoint last
						rte_add_wpt(item)
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
					item_sel = 0
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
				-- if item == tmp_tmp and item_sel == 0 then
					-- if wpt_lat_lon(entry) == true then
						-- legs_data2[item][31] = "TF"
						-- rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
					-- else
					-- -- add waypoint last
						-- rte_add_wpt(item)
					-- end
					-- item_sel = 0
				-- else
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- end
			else
				if entry == ">DELETE" then
					-- delete waypoint
					if legs_data2[item-1][17] < 99 then
						legs_data2[item-1][17] = legs_data2[item-1][17] + 100
					end
					legs_data2[item+1][31] = "TF"
					if item == legs_num2 then
						rte_copy(legs_num2 + 1)
						rte_paste(legs_num2)
						calc_rte_enable2 = 1
					else
						if legs_data2[item+1][1] == "DISCONTINUITY" then
							rte_copy(item + 1)
							rte_paste(item)
						else
							tmp_tmp = legs_num2
							rte_add_disco(item)
							legs_num2 = tmp_tmp
						end
						calc_rte_enable2 = 1
					end
					legs_delete = 1
					entry = ""
				elseif string.len(entry) > 1 and string.len(entry) < 6 and item_sel == 0 then
					if offset_act == 3 then
						if legs_data2[item][19] ~= 6 then
							-- add waypoint
							rte_add_wpt(item)
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						-- add waypoint
						rte_add_wpt(item)
					end
					item_sel = 0
				elseif jj ~= nil then
					rte_add_wpt3(item, string.sub(entry, 1, jj-4), string.sub(entry, jj-3, jj-1), string.sub(entry, jj+1, -1))
					item_sel = 0
				elseif wpt_lat_lon(entry) == true and item_sel == 0 then
						legs_data2[item][31] = "TF"
						rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
				elseif item_sel == 0 then
					if string.len(entry) == 0 then
						if offset_act == 3 then
							if legs_data2[item][19] ~= 6 then
								-- select item
								if legs_data2[item][1] == "DISCONTINUITY" then
									add_fmc_msg(INVALID_INPUT, 1)
									item_sel = 0
								else
									item_sel = item
									entry = legs_data2[item][1]
								end
							else
								add_fmc_msg(INVALID_INPUT, 1)
								item_sel = 0
							end
						else
							-- select item
							if legs_data2[item][1] == "DISCONTINUITY" then
								add_fmc_msg(INVALID_INPUT, 1)
								item_sel = 0
							else
								item_sel = item
								entry = legs_data2[item][1]
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
						item_sel = 0
					end
				else
					if offset_act == 3 then
						if legs_data2[item][19] ~= 6 then
							-- entry item
							if item_sel > item then
								if legs_data2[item-1][17] < 99 then
									legs_data2[item-1][17] = legs_data2[item-1][17] + 100
								end
								legs_data2[item_sel][31] = "TF"
								rte_copy(item_sel)
								rte_paste(item)
								calc_rte_enable2 = 1
							elseif item_sel < item then
								item_sel = item_sel + 1
								item = item + 1
								rte_copy(item)
								rte_paste(item_sel)
								calc_rte_enable2 = 1
							else
								add_fmc_msg(INVALID_INPUT, 1)
							end
							entry = ""
							item_sel = 0
							legs_delete = 1
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						-- entry item
						if item_sel > item then
							if legs_data2[item-1][17] < 99 then
								legs_data2[item-1][17] = legs_data2[item-1][17] + 100
							end
							legs_data2[item_sel][31] = "TF"
							rte_copy(item_sel)
							rte_paste(item)
							calc_rte_enable2 = 1
						elseif item_sel < item then
							item_sel = item_sel + 1
							item = item + 1
							rte_copy(item)
							rte_paste(item_sel)
							calc_rte_enable2 = 1
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
						entry = ""
						item_sel = 0
						legs_delete = 1
					end
					item_sel = 0
				end
			end
		elseif page_init == 1 then
			if B738DR_flight_phase == 1 then
				-- go to Climb page
				page_menu = 0
				page_init = 0
				page_ident = 0
				page_takeoff = 0
				page_approach = 0
				page_perf = 0
				page_n1_limit = 0
				page_pos_init = 0
				page_climb = 1
				page_cruise = 0
			elseif B738DR_flight_phase == 2 then
				-- go to Cruise page
				page_menu = 0
				page_init = 0
				page_ident = 0
				page_takeoff = 0
				page_approach = 0
				page_perf = 0
				page_n1_limit = 0
				page_pos_init = 0
				page_climb = 0
				page_cruise = 1
			else
				-- go to Takeoff page
				page_takeoff = 1
				page_init = 0
				page_menu = 0
				page_ident = 0
				page_approach = 0
				page_perf = 0
				page_n1_limit = 0
				page_pos_init = 0
				page_climb = 0
				page_cruise = 0
			end
		elseif page_pos_init == 2 then
			if B738DR_gps_pos == "-----.-------.-" then
				entry = ""
			else
				entry = B738DR_gps_pos
			end
		elseif page_climb == 1 then
			-- CLB ECON
			entry = ""
			B738DR_climb_mode = 0
			B738DR_fmc_climb_speed_mach = econ_clb_spd_mach		-- temporary
			B738DR_fmc_climb_speed = econ_clb_spd				-- temporary
		elseif page_descent_forecast == 1 then
			-- entry WIND ALT LAYER 2
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					forec_alt_2 = "-----"
					forec_alt_2_num = 0
					entry = ""
				elseif strlen == 5 and string.sub(entry, 1, 2) == "FL" then
					local n = tonumber(string.sub(entry, 3, 5))
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 10 or n > 410 then	-- FLxxx min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							forec_alt_2_num = n * 100
							if forec_alt_2_num >= B738DR_trans_lvl then
								--n = n / 100
								forec_alt_2 = "FL" .. string.format("%03d", n)
							else
								n = n * 100
								forec_alt_2 = string.format("%5d", n)
							end
							entry = ""
							wind_alt_order()
						end
					end
				else
					local n = tonumber(entry)
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if strlen == 3 then
							if n < 10 or n > 410 then	-- FLxxx min and max
								add_fmc_msg(INVALID_INPUT, 1)
							else
								forec_alt_2_num = n * 100
								if forec_alt_2_num > B738DR_trans_lvl then
									--n = n / 100
									forec_alt_2 = "FL" .. string.format("%03d", n)
								else
									n = n * 100
									forec_alt_2 = string.format("%5d", n)
								end
								entry = ""
								wind_alt_order()
							end
						else
							if n < 1000 or n > 41000 then	-- Alt min and max
								add_fmc_msg(INVALID_INPUT, 1)
							else
								forec_alt_2_num = n
								if forec_alt_2_num > B738DR_trans_lvl then
									n = n / 100
									forec_alt_2 = "FL" .. string.format("%03d", n)
								else
									forec_alt_2 = string.format("%5d", n)
								end
								entry = ""
								wind_alt_order()
							end
						end
					end
				end
			end
		elseif page_perf == 1 then
			-- entry Reserve fuel
			local strlen = string.len(entry)
			local n = tonumber(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					reserves = "**.*"
					reserves_lbs = reserves
					reserves_kgs = reserves
					msg_using_rsv_fuel = 0
					entry = ""
				else
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 0 or n > 99.9 then	-- Reserves min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							reserves = string.format("%4.1f", n)
							if units == 0 then
								reserves_lbs = reserves
								reserves_kgs = string.format("%4.1f", (tonumber(reserves) / 2.204))
							else
								reserves_kgs = reserves
								reserves_lbs = string.format("%4.1f", (tonumber(reserves) * 2.204))
							end
							msg_using_rsv_fuel = 0
							entry = ""
						end
					end
				end
			end
		elseif page_n1_limit == 1 then
			if in_flight_mode == 0 then
				to_2 = "<ACT>"
				to = "     "
				to_1 = "     "
				if sel_clb_thr == 0 then
					clb = "     "
					clb_1 = "     "
					clb_2 = "<SEL>"
				end
				if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
					if v1_set == "---" and vr_set == "---" and v2_set == "---" then
						entry = ""
					else
						add_fmc_msg(VERIFY_TO_SPEEDS, 1)
						entry = ""
					end
				end
				B738DR_calc_vspd = 1
			else
				-- select CLB
				auto_act = "     "
				ga_act = "     "
				con_act = "     "
				clb_act = "<ACT>"
				crz_act = "     "
			end
		elseif page_takeoff == 2 then
				-- entry SEL TEMP and OAT
				local strlen = string.len(entry)
				local n = 0
				if strlen > 0 then
					if entry == ">DELETE" then
						sel_temp = "----"
						oat = "****"
						sel_temp_f = "----"
						oat_f = "****"
						oat_unit = "`C"
						if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
							if v1_set == "---" and vr_set == "---" and v2_set == "---" then
								entry = ""
							else
								add_fmc_msg(VERIFY_TO_SPEEDS, 1)
								entry = ""
							end
						end
						B738DR_calc_vspd = 1
					else
						if strlen > 0 and strlen < 6 then
							local oat_set = 0
							if string.sub(entry, 1, 1) == "/" and strlen > 1 then
								oat_set = 1		-- entry OAT
								entry = string.sub(entry, 2, strlen)
								strlen = strlen -1
							end
							
							local n_str = string.sub(entry, strlen, strlen)
							if n_str == "C" then 
								n = tonumber(string.sub(entry, 1, strlen-1))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < -40 or n > 70 then	-- Celsius min and max
										add_fmc_msg(INVALID_INPUT, 1)
									else
										oat_unit = "`C"
										if oat_set == 0 then
											if n < 0 then
												sel_temp = string.format("%4d", n)
											else
												if n < 10 then
													sel_temp = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													sel_temp = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
											n = (n * 9 / 5) + 32
											sel_temp_f = string.format("%4d", n)
										else
											if n < 0 then
												oat = string.format("%4d", n)
											else
												if n < 10 then
													oat = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													oat = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
											n = (n * 9 / 5) + 32
											oat_f = string.format("%4d", n)
										end
										if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
											if v1_set == "---" and vr_set == "---" and v2_set == "---" then
												entry = ""
											else
												add_fmc_msg(VERIFY_TO_SPEEDS, 1)
												entry = ""
											end
										end
										B738DR_calc_vspd = 1
									end
								end
							elseif n_str == "F" then
								n = tonumber(string.sub(entry, 1, strlen-1))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < -40 or n > 158 then	-- Fahrenheit min and max
										add_fmc_msg(INVALID_INPUT, 1)
									else
										oat_unit = "`F"
										if oat_set == 0 then
											sel_temp_f = string.format("%4d", n)
											n = (n - 32) * 5 / 9
											if n < 0 then
												sel_temp = string.format("%4d", n)
											else
												if n < 10 then
													sel_temp = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													sel_temp = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
										else
											oat_f = string.format("%4d", n)
											n = (n - 32) * 5 / 9
											if n < 0 then
												oat = string.format("%4d", n)
											else
												if n < 10 then
													oat = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													oat = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
										end
										if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
											if v1_set == "---" and vr_set == "---" and v2_set == "---" then
												entry = ""
											else
												add_fmc_msg(VERIFY_TO_SPEEDS, 1)
												entry = ""
											end
										end
										B738DR_calc_vspd = 1
									end
								end
							else
								n = tonumber(string.sub(entry, 1, strlen))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < -40 or n > 70 then	-- Celsius min and max
										add_fmc_msg(INVALID_INPUT, 1)
									else
										oat_unit = "`C"
										if oat_set == 0 then
											if n < 0 then
												sel_temp = string.format("%4d", n)
											else
												if n < 10 then
													sel_temp = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													sel_temp = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
											n = (n * 9 / 5) + 32
											sel_temp_f = string.format("%4d", n)
										else
											if n < 0 then
												oat = string.format("%4d", n)
											else
												if n < 10 then
													oat = "  +" .. string.sub(string.format("%4d", n), 4, 4)
												else
													oat = " +" .. string.sub(string.format("%4d", n), 3, 4)
												end
											end
											n = (n * 9 / 5) + 32
											oat_f = string.format("%4d", n)
										end
										if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
											if v1_set == "---" and vr_set == "---" and v2_set == "---" then
												entry = ""
											else
												add_fmc_msg(VERIFY_TO_SPEEDS, 1)
												entry = ""
											end
										end
										B738DR_calc_vspd = 1
									end
								end
							end
							
							
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					end
				end
		elseif page_perf == 2 then
			-- DES min speed kts/mach
			local strlen = string.len(entry)
			if strlen == 0 then
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					des_min_kts = "   "
					des_min_mach = "   "
					entry = ""
				else
					if strlen > 2 and  strlen < 6 and string.sub(entry, 1, 2) == "/." then		-- only mach
						local n = tonumber(string.sub(entry, 2, strlen))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(des_max_mach)
							if nn == nil then
								nn = 0.82
							else
								nn = nn / 1000
							end
							if n < 0.4 or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								n = n * 1000
								des_min_mach = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen == 3 then			-- only kts
						local n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(des_max_kts)
							if nn == nil then
								nn = 340
							end
							if n < 100 or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								des_min_kts = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen > 5 and strlen < 9 and string.sub(entry, 4, 5) == "/." then 	-- kts and mach
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(des_max_kts)
							if nn == nil then
								nn = 340
							end
							if n < 100 or n > nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local kts = string.format("%03d", n)
									n = tonumber(string.sub(entry, 5, strlen))
									if n == nil then
										add_fmc_msg(INVALID_INPUT, 1)
									else
										nn = tonumber(des_max_mach)
										if nn == nil then
											nn = 0.82
										else
											nn = nn / 1000
										end
										if n < 0.4 or n > nn then
											add_fmc_msg(INVALID_INPUT, 1)
										else
											n = n * 1000
											des_min_kts = kts
											des_min_mach = string.format("%03d", n)
											entry = ""
										end
									end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		-----------
		elseif page_offset == 1 and offset_dist ~= 0 then
			local strlen = string.len(entry)
			if strlen == 0 then
				add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					offset_end = 0
					entry = ""
				elseif strlen < 6 and offset_start ~= 0 then
					offset_check2(entry)
					if offset_end == 0 then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						entry = ""
						offset_act = 1
						if offset_dist ~= 0 and offset_start ~= 0 and offset_end ~= 0 then
							--offset_create()
							offset_act = 2
						end
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 5LSK
function B738_fmc1_5L_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		if page_dep == 1 then
			if ref_sid2 == "------" then
				if ref_sid_sel[5] ~= "------" then
					ref_sid2 = ref_sid_sel[5]
					ref_sid_tns2 = "------"
					if ref_rwy2 == "-----" then
						create_rnw_list()
					end
					create_tns_list()
					act_page = 1
					ref_sid_exec = 1
				end
			else
				if ref_sid_tns2 == "------" then
					if ref_tns_sel[5] ~= "------" then
						ref_sid_tns2 = ref_tns_sel[5]
						act_page = 1
						ref_tns_exec = 1
					end
				end
			end
			rte_add_dep_arr()
		elseif page_sel_wpt == 1 then
			
			local item = 0
			local button = 5	-- button 5 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				rte_add_wpt2(item)
				legs_delete = 1
			end
		
		elseif page_sel_wpt2 == 1 then
			
			local item = 0
			local button = 5	-- button 5 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				dir_add(item)
			end
		elseif page_sel_wpt3 == 1 then
			
			local item = 0
			local button = 5	-- button 5 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				rte_add_wpt4(item)
				legs_delete = 1
			end
		elseif page_ref_sel == 1 then
			
			local item = 0
			local button = 5	-- button 5 LSK
			
			item = (act_page - 1) * 5 + button
			if item <= navaid_list_n then
				-- select item
				if nav_data_type == 0 then -- WPT
					ref_nav_wpt = nav_data_entry	--entry
					ref_nav_navaid = "----"
					ref_nav_apt = "----"
				elseif nav_data_type == 1 then -- NAVAID
					ref_nav_wpt = "-----"
					ref_nav_navaid = nav_data_entry	--entry
					ref_nav_apt = "----"
				else -- APT
					ref_nav_wpt = "-----"
					ref_nav_navaid = "----"
					ref_nav_apt = nav_data_entry	--entry
				end
				nav_data_idx = item
				--ref_nav_wpt = nav_data_entry
				ref_nav_new = "*****"
				page_ref_nav_data = 1
				page_ref_sel = 0
			end
		elseif page_rte_init == 1 then
			if act_page > 1 then
				local item = 0
				local button = 5	-- button 5 LSK
				local tmp_tmp = 0
				
				item = (act_page - 2) * 5 + button
				tmp_tmp = fpln_num2 + 1
				if fpln_num2 > 0 then
					if entry == ">DELETE" then
						del_via(item)
					else
						if item == tmp_tmp then
							if fpln_data2[fpln_num2][1] == "" and fpln_data2[fpln_num2][2] ~= "" then
								-- add new via via
								via_via_add()
							elseif fpln_data2[fpln_num2][1] ~= "" then
								-- add new via
								via_add(fpln_data2[fpln_num2][1], fpln_data2[fpln_num2][3])
							end
							item_sel_via = 0
						elseif item <= fpln_num2 and fpln_num2 > 1 then
							-- change via
							via_chg(fpln_data2[item-1][1], fpln_data2[item-1][3], item)
							item_sel_via = 0
						end
					end
				else
					entry = ">INVALID ENTRY"
				end
			end
		elseif page_hold == 1 then
			local strlen = string.len(entry)
			local m = 0
			local n = 0
			local ww = 0
			if entry == ">DELETE" then
				new_hold_dist = "--.-"
				if new_hold_time == "-.-" then
					if new_hold_dist == "--.-" then
						-- default 1.5 min
						legs_data2[hold_offset_idx][30] = ""
					else
						m = tonumber(new_hold_dist) * 10
						legs_data2[hold_offset_idx][30] = string.format("%04d", m)
					end
				else
					m = tonumber(new_hold_time) * 10
					legs_data2[hold_offset_idx][30] = "T" .. string.format("%03d", m)
				end
				legs_data2[hold_offset_idx][17] = 100
				entry = ""
			else
				if strlen == 3 then
					-- format X.X
					if string.sub(entry, 2, 2) ~= "." then
						ww = 1
					end
					m = tonumber(string.sub(entry, 1, 1))
					if m == nil then
						ww = 1
					end
					n = tonumber(string.sub(entry, 3, 3))
					if n == nil then
						ww = 1
					end
					if ww == 0 then
						-- if hold_exec == 0 then
							-- edit_hold()
						-- end
						m = tonumber(entry)
						new_hold_dist = string.format("%04.1f", m)
						new_hold_time = "-.-"
						if new_hold_time == "-.-" then
							if new_hold_dist == "--.-" then
								-- default 1.5 min
								legs_data2[hold_offset_idx][30] = ""
							else
								m = tonumber(new_hold_dist) * 10
								legs_data2[hold_offset_idx][30] = string.format("%04d", m)
							end
						else
							m = tonumber(new_hold_time) * 10
							legs_data2[hold_offset_idx][30] = "T" .. string.format("%03d", m)
						end
						legs_data2[hold_offset_idx][17] = 100
						entry = ""
						hold_exec = 1
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				elseif strlen == 4 then
					-- format XX.X
					if string.sub(entry, 3, 3) ~= "." then
						ww = 1
					end
					m = tonumber(string.sub(entry, 1, 2))
					if m == nil then
						ww = 1
					end
					n = tonumber(string.sub(entry, 4, 4))
					if n == nil then
						ww = 1
					end
					if ww == 0 then
						-- if hold_exec == 0 then
							-- edit_hold()
						-- end
						m = tonumber(entry)
						new_hold_dist = string.format("%04.1f", m)
						new_hold_time = "-.-"
						if new_hold_time == "-.-" then
							if new_hold_dist == "--.-" then
								-- default 1.5 min
								legs_data2[hold_offset_idx][30] = ""
							else
								m = tonumber(new_hold_dist) * 10
								legs_data2[hold_offset_idx][30] = string.format("%04d", m)
							end
						else
							m = tonumber(new_hold_time) * 10
							legs_data2[hold_offset_idx][30] = "T" .. string.format("%03d", m)
						end
						legs_data2[hold_offset_idx][17] = 100
						entry = ""
						hold_exec = 1
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		-- elseif page_xtras_fmod == 1 then
			-- -- FMOD Gyro vibrators
			-- B738CMD_enable_gyro:once()
		-- elseif page_xtras_fmod == 2 then
			-- -- FMOD Internal GYRO volume
			-- B738CMD_vol_int_gyro:once()
		-- elseif page_xtras_fmod == 3 then
			-- -- FMOD Internal WIND volume
			-- B738CMD_vol_int_wind:once()
		elseif page_xtras == 1 then
			fmc_xtras_main(5)
		elseif page_xtras_fmod > 0 then
			fmc_fmod_main(5,0)
		elseif page_fmod_features > 0 then
			fmc_fmod_features(5)
		elseif page_fmod_volumes > 0 then
			fmc_fmod_volumes(5)
		elseif page_fmod_announ > 0 then
			fmc_fmod_announ(5)
		elseif page_fmod_flight_ctrl > 0 then
			fmc_fmod_flight_ctrl(5)
		elseif page_fmod_eq > 0 then
			fmc_fmod_eq(5)
		elseif page_xtras_others == 1 then
			if B738DR_toe_brakes_ovr == 0 then
				B738DR_toe_brakes_ovr = 1
			else
				B738DR_toe_brakes_ovr = 0
			end
		elseif page_xtras_others == 2 then
			if B738DR_nosewheel == 0 then
				B738DR_nosewheel = 1
			elseif B738DR_nosewheel == 1 then
				B738DR_nosewheel = 2
			else
				B738DR_nosewheel = 0
			end
		elseif page_arr == 1 then
			if des_star2 == "------" then
				if des_star_sel[5] ~= "------" then
					des_star2 = des_star_sel[5]
					des_star_trans2 = "------"
					if des_app2 == "------" then
						create_des_app_list()
					end
					create_star_tns_list()
					act_page = 1
					des_star_exec = 1
				end
			else
				if des_star_trans2 == "------" then
					if des_star_tns_sel[5] ~= "------" then
						des_star_trans2 = des_star_tns_sel[5]
						des_star_tns_exec = 1
						act_page = 1
					end
				end
			end
			rte_add_dep_arr()
		elseif page_legs == 1 then
			
			local item = 0
			local button = 5	-- button 5 LSK
			local tmp_tmp = 0
			local jj = 0
			local kk = 0
			
			if nav_mode == 1 then
				item = legs_num2 + 2
			else
				item = (act_page - 1) * 5 + offset - 1 + button
			end
			jj,kk = string.find(entry, "/")
			if item > legs_num2 then
				tmp_tmp = legs_num2 + 1
				if item == tmp_tmp then
					if wpt_lat_lon(entry) == true then
						legs_data2[item][31] = "TF"
						rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
					elseif jj ~= nil then
						rte_add_wpt3(item, string.sub(entry, 1, jj-4), string.sub(entry, jj-3, jj-1), string.sub(entry, jj+1, -1))
					elseif item_sel == 0 then
						-- add waypoint last
						rte_add_wpt(item)
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
					item_sel = 0
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
				-- if item == tmp_tmp and item_sel == 0 then
					-- if wpt_lat_lon(entry) == true then
						-- if legs_data2[item-1][17] < 99 then
							-- legs_data2[item-1][17] = legs_data2[item-1][17] + 100
						-- end
						-- legs_data2[item][31] = "TF"
						-- rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
						-- legs_delete = 1
					-- else
					-- -- add waypoint last
						-- rte_add_wpt(item)
					-- end
					-- item_sel = 0
				-- else
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- end
			else
				if entry == ">DELETE" then
					-- delete waypoint
					if legs_data2[item-1][17] < 99 then
						legs_data2[item-1][17] = legs_data2[item-1][17] + 100
					end
					legs_data2[item+1][31] = "TF"
					if item == legs_num2 then
						rte_copy(legs_num2 + 1)
						rte_paste(legs_num2)
					else
						if legs_data2[item+1][1] == "DISCONTINUITY" then
							rte_copy(item + 1)
							rte_paste(item)
						else
							tmp_tmp = legs_num2
							rte_add_disco(item)
							legs_num2 = tmp_tmp
						end
					end
					calc_rte_enable2 = 1
					legs_delete = 1
					entry = ""
				elseif string.len(entry) > 1 and string.len(entry) < 6 and item_sel == 0 then
					if offset_act == 3 then
						if legs_data2[item][19] ~= 6 then
							-- add waypoint
							rte_add_wpt(item)
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						-- add waypoint
						rte_add_wpt(item)
					end
					item_sel = 0
				elseif jj ~= nil then
					rte_add_wpt3(item, string.sub(entry, 1, jj-4), string.sub(entry, jj-3, jj-1), string.sub(entry, jj+1, -1))
					item_sel = 0
				elseif wpt_lat_lon(entry) == true and item_sel == 0 then
						--custom lat/lon wpt
						legs_data2[item][31] = "TF"
						rte_add_wpt_cust(item, "WPT01", transf_lat, transf_lon)
						item_sel = 0
				elseif item_sel == 0 then
					if string.len(entry) == 0 then
						if offset_act == 3 then
							if legs_data2[item][19] ~= 6 then
								-- select item
								if legs_data2[item][1] == "DISCONTINUITY" then
									add_fmc_msg(INVALID_INPUT, 1)
									item_sel = 0
								else
									item_sel = item
									entry = legs_data2[item][1]
								end
							else
								add_fmc_msg(INVALID_INPUT, 1)
								item_sel = 0
							end
						else
							-- select item
							if legs_data2[item][1] == "DISCONTINUITY" then
								add_fmc_msg(INVALID_INPUT, 1)
								item_sel = 0
							else
								item_sel = item
								entry = legs_data2[item][1]
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
						item_sel = 0
					end
				else
					if offset_act == 3 then
						if legs_data2[item][19] ~= 6 then
							-- entry item
							if item_sel > item then
								if legs_data2[item-1][17] < 99 then
									legs_data2[item-1][17] = legs_data2[item-1][17] + 100
								end
								legs_data2[item_sel][31] = "TF"
								rte_copy(item_sel)
								rte_paste(item)
								calc_rte_enable2 = 1
							elseif item_sel < item then
								item_sel = item_sel + 1
								item = item + 1
								rte_copy(item)
								rte_paste(item_sel)
								calc_rte_enable2 = 1
							else
								add_fmc_msg(INVALID_INPUT, 1)
							end
							entry = ""
							item_sel = 0
							item_sel_via = 0
							legs_delete = 1
						else
							add_fmc_msg(INVALID_INPUT, 1)
							item_sel = 0
							item_sel_via = 0
						end
					else
						-- entry item
						if item_sel > item then
							if legs_data2[item-1][17] < 99 then
								legs_data2[item-1][17] = legs_data2[item-1][17] + 100
							end
							legs_data2[item_sel][31] = "TF"
							rte_copy(item_sel)
							rte_paste(item)
							calc_rte_enable2 = 1
						elseif item_sel < item then
							item_sel = item_sel + 1
							item = item + 1
							rte_copy(item)
							rte_paste(item_sel)
							calc_rte_enable2 = 1
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
						entry = ""
						item_sel = 0
						item_sel_via = 0
						legs_delete = 1
					end
				end
			end
		elseif page_init == 1 then
			-- go to Approach page
			page_init = 0
			page_approach = 1
			display_update = 1
			-- local qqq = 0
			-- gw_app = "***.*"
			-- gw_app_lbs = gw_app
			-- gw_app_kgs = gw_app
			-- gw_app_nul = 0
			-- if legs_num > 1 then
				-- if legs_data[legs_num][40] ~= 0 then
					-- qqq = tonumber(zfw_kgs)
					-- if qqq ~= nil then
						-- qqq = ((tonumber(zfw_kgs) * 1000) + legs_data[legs_num][40]) / 1000
						-- if qqq < 0 then
							-- qqq = 0
						-- end
						-- if units == 0 then
							-- gw_app = string.format("%5.1f", (qqq * 2.204))		-- to lbs
							-- gw_app_lbs = gw_app
							-- gw_app_kgs = string.format("%5.1f", (tonumber(gw_app) / 2.204))		-- to kgs
						-- else
							-- gw_app = string.format("%5.1f", qqq)		-- to kgs
							-- gw_app_kgs = gw_app
							-- gw_app_lbs = string.format("%5.1f", (tonumber(gw_app) * 2.204))		-- to lbs
						-- end
					-- end
				-- end
			-- end
			gw_app_nul = 0
			gw_app = gw
			gw_app_lbs = gw_lbs
			gw_app_kgs = gw_kgs
		elseif page_pos_init == 2 then
			if B738DR_gps2_pos == "-----.-------.-" then
				entry = ""
			else
				entry = B738DR_gps2_pos
			end
		elseif page_approach == 1 then
			-- G/S enable/disable
			if des_app ~= "------" then
				if simDR_glideslope_status == 0 then
					if B738DR_fms_ils_disable == 0 then
						B738DR_fms_ils_disable = 1
					else
						B738DR_fms_ils_disable = 0
					end
				end
			end
		elseif page_perf == 1 then --and was_on_air == 0 then	-- only on ground
			-- entry Cost Index
			local strlen = string.len(entry)
			local n = tonumber(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					cost_index = "***"
					entry = ""
				else
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 0 or n > 500 then	-- Cost Index min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							cost_index = string.format("%3d", n)
							B738_calc_vnav_spd()
							vnav_update = 1
							msg_chk_alt_constr = 0
							entry = ""
						end
					end
				end
			end
		elseif page_cruise == 1 then
			-- CRZ ECON
			entry = ""
			B738DR_cruise_mode = 0
			B738DR_fmc_cruise_speed_mach = econ_crz_spd_mach		-- temporary
			B738DR_fmc_cruise_speed = econ_crz_spd				-- temporary
		elseif page_descent == 1 and B738DR_flight_phase < 5 and simDR_vnav_tod_nm > 15 then
			-- DES ECON
			entry = ""
			B738DR_descent_mode = 0
			B738DR_fmc_descent_speed_mach = econ_des_spd_mach		-- temporary
			B738DR_fmc_descent_speed = econ_des_spd				-- temporary
		-- elseif page_xtras_fuel == 1 then
			-- simDR_cg = tonumber(entry)
			-- entry = ""
		elseif page_n1_limit == 1 then
			if in_flight_mode == 1 then
				-- select CRZ
				auto_act = "     "
				ga_act = "     "
				con_act = "     "
				clb_act = "     "
				crz_act = "<ACT>"
			end
		elseif page_ref_nav_data_wpt == 1 then
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" and ref_nav_id ~= "-----" then
					ref_nav_id = "-----"
					ref_nav_id_lat = 0
					ref_nav_id_lon = 0
					ref_nav_rc = ""
					ref_nav_lat = 0
					ref_nav_lon = 0
					ref_nav_exec = 1
					entry = ""
				else
					find_navaid(entry, "", 0, "")
					if navaid_list_n > 0 then
						-- first navaid
						ref_nav_id = navaid_list[1][4]
						ref_nav_rc = navaid_list[1][8]
						ref_nav_id_lat = navaid_list[1][2]
						ref_nav_id_lon = navaid_list[1][3]
						
						-- calc lat / lon
						if ref_nav_brg ~= "---" and ref_nav_dist ~= "---" then
							calc_brg_dist(ref_nav_id_lat, ref_nav_id_lon, math.rad(tonumber(ref_nav_brg)), tonumber(ref_nav_dist))
							ref_nav_lat = calc_lat
							ref_nav_lon = calc_lon
							ref_nav_exec = 1
						end
						entry = ""
					end
				end
			end
		elseif page_descent_forecast == 1 then
			-- entry WIND ALT LAYER 3
			local strlen = string.len(entry)
			local n = 0
			if strlen > 0 then
				if entry == ">DELETE" then
					forec_alt_3 = "-----"
					forec_alt_3_num = 0
					entry = ""
				elseif strlen == 5 and string.sub(entry, 1, 2) == "FL" then
					n = tonumber(string.sub(entry, 3, 5))
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 10 or n > 410 then	-- FLxxx min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							forec_alt_3_num = n * 100
							if forec_alt_3_num > B738DR_trans_lvl then
								--n = n / 100
								forec_alt_3 = "FL" .. string.format("%03d", n)
							else
								n = n * 100
								forec_alt_3 = string.format("%5d", n)
							end
							entry = ""
							wind_alt_order()
						end
					end
				else
					n = tonumber(entry)
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if strlen == 3 then
							if n < 10 or n > 410 then	-- FLxxx min and max
								add_fmc_msg(INVALID_INPUT, 1)
							else
								forec_alt_3_num = n * 100
								if forec_alt_3_num > B738DR_trans_lvl then
									--n = n / 100
									forec_alt_3 = "FL" .. string.format("%03d", n)
								else
									n = n * 100
									forec_alt_3 = string.format("%5d", n)
								end
								entry = ""
								wind_alt_order()
							end
						else
							if n < 1000 or n > 41000 then	-- Alt min and max
								add_fmc_msg(INVALID_INPUT, 1)
							else
								forec_alt_3_num = n
								if forec_alt_3_num > B738DR_trans_lvl then
									n = n / 100
									forec_alt_3 = "FL" .. string.format("%03d", n)
								else
									forec_alt_3 = string.format("%5d", n)
								end
								entry = ""
								wind_alt_order()
							end
						end
					end
				end
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 6LSK
function B738_fmc1_6L_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		if page_takeoff ~= 0  then
			if pre_flt_pos_init == 0 then
				-- go to Pos init
				page_pos_init = 1
			elseif pre_flt_rte == 0 then
				-- go to Route init
				page_rte_init = 1
			elseif pre_flt_dep == 0 then
				-- go to Departure
				page_dep = 1
			elseif pre_flt_perf_init == 0 then
				-- go to Perf_init
				page_perf = 1
			else
				-- go to Index page
				page_init = 1
			end
			page_takeoff = 0
			display_update = 1
		elseif page_dep == 1 then
			if B738DR_fmc_exec_lights == 1 then
				if legs_num > 1 then
					if rte_exec == 1 then
						--copy_to_fpln2()
						legs_delete = 0
						copy_to_legsdata2()
						create_fpln()
						rte_exec = 0
					end
					if legs_delete == 1 then
						legs_delete = 0
						copy_to_legsdata2()
						-- new
						create_fpln()
						-- new
					end
				end
				if legs_intdir == 1 then
					legs_intdir = 0
					copy_to_legsdata2()
					create_fpln()
				end
				ref_rwy2 = ref_rwy
				ref_sid2 = ref_sid
				ref_sid_tns2 = ref_sid_tns
				des_app2 = des_app
				des_app_tns2 = des_app_tns
				des_star2 = des_star
				des_star_trans2 = des_star_trans
			end
			-- if ref_sid_exec == 1 or ref_rwy_exec == 1 or ref_tns_exec == 1 then --or ref_app_tns_exec == 1 then
				-- ref_rwy2 = ref_rwy
				-- ref_sid2 = ref_sid
				-- ref_sid_tns2 = ref_sid_tns
				-- if legs_num == 1 then
					-- rte_add_sid()
				-- end
				-- ref_sid_exec = 0
				-- ref_rwy_exec = 0
				-- ref_tns_exec = 0
				-- ref_app_tns_exec = 0
				-- act_page = 1
				-- -- update legs_data2
			-- end
		elseif page_arr == 1 then
			if B738DR_fmc_exec_lights == 1 then
				if legs_num > 1 then
					if rte_exec == 1 then
						--copy_to_fpln2()
						legs_delete = 0
						copy_to_legsdata2()
						create_fpln()
						rte_exec = 0
					end
					if legs_delete == 1 then
						legs_delete = 0
						copy_to_legsdata2()
						-- new
						create_fpln()
						-- new
					end
				end
				if legs_intdir == 1 then
					legs_intdir = 0
					copy_to_legsdata2()
					create_fpln()
				end
				ref_rwy2 = ref_rwy
				ref_sid2 = ref_sid
				ref_sid_tns2 = ref_sid_tns
				des_app2 = des_app
				des_app_tns2 = des_app_tns
				des_star2 = des_star
				des_star_trans2 = des_star_trans
			end
			-- if des_star_exec == 1 or des_star_tns_exec == 1 or des_app_exec == 1 or des_app_tns_exec == 1 then
				-- des_app2 = des_app
				-- des_app_tns2 = des_app_tns
				-- des_star2 = des_star
				-- des_star_trans2 = des_star_trans
				-- if legs_num == 1 then
					-- rte_add_star()
					-- rte_add_app()
				-- end
				-- des_star_exec = 0
				-- des_star_tns_exec = 0
				-- des_app_exec = 0
				-- des_app_tns_exec = 0
				-- act_page = 1
				-- if arr_data == 1 then
					-- arr_data = 0
					-- page_arr = 0
					-- page_dep_arr = 1
				-- end
			-- end
		elseif page_rte_init == 1 then
			if B738DR_fmc_exec_lights == 1 then
				if legs_num > 1 then
					if ref_exec == 1 then
						ref_icao_x = ref_icao
						des_icao_x = des_icao
						ref_exec = 0
						-- read data
						-- file_name = "Custom Data/CIFP/" .. ref_icao
						-- file_name = file_name .. ".dat"
						-- file_navdata = io.open(file_name, "r")
						-- if file_navdata == nil then
							-- file_name = "Resources/default data/CIFP/" .. ref_icao
							-- file_name = file_name .. ".dat"
							-- file_navdata = io.open(file_name, "r")
							-- if file_navdata == nil then
								-- if apt_exist(ref_icao) == true then
								-- end
							-- else
								-- read_ref_data(ref_icao)		-- read reference airport data
								-- file_navdata:close()
							-- end
						-- else
							-- read_ref_data(ref_icao)		-- read reference airport data
							-- file_navdata:close()
						-- end
						
						if cust_def_data == 1 then
							file_name = "Custom Data/CIFP/" .. ref_icao
							file_name = file_name .. ".dat"
							file_navdata = io.open(file_name, "r")
							if file_navdata == nil then
								if apt_exist(ref_icao) == true then
								end
							else
								read_ref_data(ref_icao)		-- read reference airport data
								file_navdata:close()
							end
						elseif cust_def_data == 2 then
							file_name = "Resources/default data/CIFP/" .. ref_icao
							file_name = file_name .. ".dat"
							file_navdata = io.open(file_name, "r")
							if file_navdata == nil then
								if apt_exist(ref_icao) == true then
								end
							else
								read_ref_data(entry)		-- read reference airport data
								file_navdata:close()
							end
						end
					end
					if des_exec == 1 then
						des_icao_x = des_icao
						des_exec = 0
						-- file_name = "Custom Data/CIFP/" .. des_icao
						-- file_name = file_name .. ".dat"
						-- file_navdata = io.open(file_name, "r")
						-- if file_navdata == nil then
							-- file_name = "Resources/default data/CIFP/" .. des_icao
							-- file_name = file_name .. ".dat"
							-- file_navdata = io.open(file_name, "r")
							-- if file_navdata == nil then
								-- if apt_exist(des_icao) == true then
								-- end
							-- else
								-- read_ref_data(des_icao)		-- read reference airport data
								-- file_navdata:close()
							-- end
						-- else
							-- read_ref_data(des_icao)		-- read reference airport data
							-- file_navdata:close()
						-- end
						
						if cust_def_data == 1 then
							file_name = "Custom Data/CIFP/" .. des_icao
							file_name = file_name .. ".dat"
							file_navdata = io.open(file_name, "r")
							if file_navdata == nil then
								if apt_exist(des_icao) == true then
								end
							else
								read_ref_data(des_icao)		-- read reference airport data
								file_navdata:close()
							end
						elseif cust_def_data == 2 then
							file_name = "Resources/default data/CIFP/" .. des_icao
							file_name = file_name .. ".dat"
							file_navdata = io.open(file_name, "r")
							if file_navdata == nil then
								if apt_exist(des_icao) == true then
								end
							else
								read_ref_data(entry)		-- read reference airport data
								file_navdata:close()
							end
						end
					end
					if rte_exec == 1 then
						--copy_to_fpln2()
						legs_delete = 0
						copy_to_legsdata2()
						create_fpln()
						rte_exec = 0
					end
					if legs_delete == 1 then
						legs_delete = 0
						copy_to_legsdata2()
						-- new
						create_fpln()
						-- new
					end
					ref_rwy2 = ref_rwy
					ref_sid2 = ref_sid
					ref_sid_tns2 = ref_sid_tns
					des_app2 = des_app
					des_app_tns2 = des_app_tns
					des_star2 = des_star
					des_star_trans2 = des_star_trans
					co_route_x = co_route
				end
			else
				if exec_load_fpln == 1 and legs_num > 1 then
					exec_load_fpln = 0
					rte_exec = 0
					legs_delete = 0
					copy_to_legsdata2()
					create_fpln()
					
					ref_icao_x = ref_icao
					des_icao_x = des_icao
					
					--ref_gate_x = "-----"
					--co_route_x = "------------"
					--trans_alt_x = "-----"
					ref_gate_x = ref_gate
					co_route_x = co_route
					trans_alt_x = trans_alt
					
					ref_rwy2 = ref_rwy
					ref_sid2 = ref_sid
					ref_sid_tns2 = ref_sid_tns
					des_app2 = des_app
					des_app_tns2 = des_app_tns
					des_star2 = des_star
					des_star_trans2 = des_star_trans
				end
			end
		elseif page_legs == 1 then
			local ww = 0
			local uu = 0
			-- cancel MOD
			if B738DR_fmc_exec_lights == 1 then
				if legs_num > 1 then
					if rte_exec == 1 then
						--copy_to_fpln2()
						legs_delete = 0
						copy_to_legsdata2()
						create_fpln()
						rte_exec = 0
					end
					if legs_delete == 1 then
						legs_delete = 0
						copy_to_legsdata2()
						-- new
						create_fpln()
						-- new
					end
					ref_rwy2 = ref_rwy
					ref_sid2 = ref_sid
					ref_sid_tns2 = ref_sid_tns
					des_app2 = des_app
					des_app_tns2 = des_app_tns
					des_star2 = des_star
					des_star_trans2 = des_star_trans
				end
				if legs_intdir == 1 then
					legs_intdir = 0
					legs_intdir_crs2 = -1
					copy_to_legsdata2()
					create_fpln()
				end
			else
				if exec_load_fpln == 1 and legs_num > 1 then
					exec_load_fpln = 0
					rte_exec = 0
					legs_delete = 0
					copy_to_legsdata2()
					create_fpln()
					
					ref_icao_x = ref_icao
					des_icao_x = des_icao
					
					ref_gate_x = "-----"
					co_route_x = "------------"
					trans_alt_x = "-----"
					
					ref_rwy2 = ref_rwy
					ref_sid2 = ref_sid
					ref_sid_tns2 = ref_sid_tns
					des_app2 = des_app
					des_app_tns2 = des_app_tns
					des_star2 = des_star
					des_star_trans2 = des_star_trans
				elseif new_hold == 1 then
					if item_sel ~= 0 then
						new_hold_idx = item_sel
						if hold_data_num2 > 0 then
							for ww = 1, hold_data_num2 do
								if hold_data2[ww] == new_hold_idx + 1 then
									uu = 1
								end
							end
						end
						if legs_data2[new_hold_idx][21] == 0 or legs_data2[new_hold_idx][21] == 1 then
							uu = 1
						end
						
						if uu == 0 then
							-- add new hold
							rte_add_hold(item_sel)
							page_hold = 1
							page_legs = 0
							entry = ""
							hold_exec = 1
							act_page = 1
							new_hold = 0
							item_sel = 0
						-- if uu == 0 then
							-- new_hold_wpt = legs_data[new_hold_idx][1]
							-- if legs_data[new_hold_idx][4] > 0 then
								-- new_hold_spd = legs_data[new_hold_idx][4]
							-- else
								-- new_hold_spd = legs_data[new_hold_idx][10]
							-- end
							-- if legs_data[new_hold_idx][5] > 0 then
								-- new_hold_alt = legs_data[new_hold_idx][5]
							-- else
								-- new_hold_alt = legs_data[new_hold_idx][11]
							-- end
							-- new_hold_inbd = string.format("%03d", math.deg(legs_data[new_hold_idx][2]))
							-- --new_hold_inbd = "---"
							-- new_hold_turn = -1
							-- new_hold_time = "-.-"
							-- new_hold_dist = "--.-"
							-- new_hold_rc = legs_data[new_hold_idx][16]
							-- new_hold_via = legs_data[new_hold_idx][9]
							-- new_hold_lat = legs_data[new_hold_idx][7]
							-- new_hold_lon = legs_data[new_hold_idx][8]
							-- page_hold = 1
							-- page_legs = 0
							-- entry = ""
							-- hold_exec = 1
							-- act_page = 1
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					end
				end
			end
		elseif page_hold == 1 then
			if hold_exec == 1 then
				if hold_term == 0 then
					-- ERASE
					copy_to_legsdata2()
					create_fpln()
					entry = ""
					hold_exec = 0
					new_hold_idx = 0
					item_sel = 0
					item_sel_via = 0
				else
					hold_term = 0
					hold_exec = 0
					new_hold_idx = 0
				end
			else
				-- show Legs page with Hold select
				act_page = 1
				page_hold = 0
				page_legs = 1
				new_hold = 1
				new_hold_wpt = "*****"
			end
		elseif page_ident == 1 then
			-- go to Index page
			page_ident = 0
			page_init = 1
			display_update = 1
		elseif page_approach == 1 then
			-- go to Index page
			page_approach = 0
			page_init = 1
			display_update = 1
		elseif page_n1_limit == 1 and disable_N1_6L == 0 then
			if in_flight_mode == 0 then
				-- go to Perf init page
				page_n1_limit = 0
				page_perf = 1
				display_update = 1
			else
				-- select / deselect CLB-1
				if clb_1 == "<SEL>" then
					clb = "<SEL>"
					clb_1 = "     "
					clb_2 = "     "
				else
					clb = "     "
					clb_1 = "<SEL>"
					clb_2 = "     "
				end
				sel_clb_thr = 1
			end
		elseif page_perf ~= 0 then
			-- go to Index page
			page_perf = 0
			page_init = 1
			display_update = 1
		elseif page_pos_init == 1 then
			-- go to Index page
			page_pos_init = 0
			page_init = 1
			display_update = 1
		elseif page_descent == 1 then
			page_descent = 0
			page_descent_forecast = 1
			display_update = 1
		elseif page_xtras == 1 then
			-- SAVE CONFIG
			B738_save_config()
			-- fmc_message_num = fmc_message_num + 1
			-- fmc_message[fmc_message_num] = CONFIG_SAVED
			-- fms_msg_sound = 1
			add_fmc_msg(CONFIG_SAVED, 1)
			--entry = CONFIG_SAVED
		elseif page_xtras_fmod > 0 then
			-- DEFAULT value
			B738_default_fmod_config()
		elseif page_fmod_features > 0 then
			-- DEFAULT value
			B738_default_fmod_config()
		elseif page_fmod_volumes > 0 then
			-- DEFAULT value
			B738_default_fmod_config()
		elseif page_fmod_announ > 0 then
			-- DEFAULT value
			B738_default_fmod_config()
		elseif page_fmod_eq > 0 then
			-- DEFAULT value
			B738_default_fmod_config()
		elseif page_fmod_flight_ctrl > 0 then
			-- DEFAULT value
			B738_default_fmod_config()
		elseif page_xtras_others > 0 then
			-- DEFAULT value
			B738_default_others_config()
		elseif page_init == 1 then
			-- go to OFFSET
			page_init = 0
			page_offset = 1
		elseif page_ref_nav_data == 1 then
			-- go to INDEX
			page_ref_nav_data = 0
			page_init = 1
		elseif page_ref_nav_data_wpt == 1 then
			-- go to INDEX
			page_ref_nav_data_wpt = 0
			page_init = 1
		elseif page_offset == 1 and offset_act == 1 then
			offset_act = 0
			offset_start = 0
			offset_end = 0
			offset_dist = 0
			offset_side = 0
			legs_off_tmp_n = 0
			copy_to_legsdata_3()
			copy_to_legsdata2()
			create_fpln()
		elseif page_rte_legs > 0 then
			if B738DR_fmc_exec_lights == 1 then
				if legs_num > 1 then
					if rte_exec == 1 then
						--copy_to_fpln2()
						legs_delete = 0
						copy_to_legsdata2()
						create_fpln()
						rte_exec = 0
					end
					if legs_delete == 1 then
						legs_delete = 0
						copy_to_legsdata2()
						-- new
						create_fpln()
						-- new
					end
					ref_rwy2 = ref_rwy
					ref_sid2 = ref_sid
					ref_sid_tns2 = ref_sid_tns
					des_app2 = des_app
					des_app_tns2 = des_app_tns
					des_star2 = des_star
					des_star_trans2 = des_star_trans
				end
			-- else
				-- page_rte_legs = 0
				-- page_legs = 1
				--act_page = 1
			end
		elseif page_xtras_fuel == 1 then
			-- entry cg
			local kk = 0
			local ll = 0
			if string.len(entry) ~= 0 then
				if entry == ">DELETE" then
					entry = INVALID_DELETE
				else
					kk = tonumber(entry)
					if kk == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if units == 0 then
							ll = kk * 2.54
						else
							ll = kk
							kk = kk * 0.3937
						end
						if ll < -130 or ll > 266.6 then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							cg_set_m = ll / 100
							cg_set_in = kk
							simDR_cg = cg_set_m
							mac = calc_mac(simDR_cg)
							mac_zfw = calc_zfw_mac(cg_set_m)
							entry = ""
							gpu_test_enable = 1
							if is_timer_scheduled(gpu_test_reset) == false then
								run_after_time(gpu_test_reset, 1.5)
							end
						end
					end
				end
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 1RSK
function B738_fmc1_1R_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		if page_dep == 1 then
			if ref_rwy2 == "-----" then
				if ref_rwy_sel[1] ~= "-----" then
					ref_rwy2 = ref_rwy_sel[1]
					if ref_sid2 == "------" then
						create_sid_list()
					end
					act_page = 1
					ref_rwy_exec = 1
				end
			else
				ref_rwy2 = "-----"
				if ref_sid2 == "------" then
					create_sid_list()
				end
				create_rnw_list()
				act_page = 1
				ref_rwy_exec = 1
			end
			rte_add_dep_arr()
		elseif page_arr == 1 then
			if des_app2 == "------" then
				if des_app_sel[1] ~= "------" then
					des_app2 = des_app_sel[1]
					if des_star2 == "------" then
						create_star_list()
					end
					des_app_tns2 = "------"
					act_page = 1
					des_app_exec = 1
					create_app_tns_list()
				end
			else
				des_app2 = "------"
				if des_star2 == "------" then
					create_star_list()
				end
				des_app_tns2 = "------"
				create_des_app_list()
				act_page = 1
				des_app_exec = 1
			end
			rte_add_dep_arr()
		elseif page_dep_arr == 1 then
			-- Reference ARR
			if des_icao ~= "****" and ref_icao ~= "----" and exec_load_fpln == 0 then
				if arr_data == 0 then
					des_app2 = "------"
					des_app_tns2 = "------"
				end
				arr_data = 1
				if des_icao == ref_icao then
					page_arr = 1
					page_dep_arr = 0
					--arr_data = 1
					---
					-- des_app2 = des_app
					-- des_app_tns2 = des_app_tns
					-- des_star2 = des_star
					-- des_star_trans2 = des_star_trans
					---
					create_star_list()
					create_star_tns_list()
					create_des_app_list()
					create_app_tns_list()
				else
					page_arr = 1
					page_dep_arr = 0
					--arr_data = 1
					---
					-- des_app2 = "------"
					-- des_app_tns2 = "------"
					-- des_star2 = "------"
					-- des_star_trans2 = "------"
					---
					create_star_list()
					create_star_tns_list()
					create_des_app_list()
					create_app_tns_list()
				end
			end
		elseif page_rte_init == 1 then
			if act_page == 1 then
				-- entry Destination airport ICAO
				local xy = 0
				local apt_ok = 0
				if ref_icao ~= "----" then
					if entry == ">DELETE" then
						entry = INVALID_DELETE
						-- if des_icao ~= "****" then
							-- des_icao_x = "****"
							-- des_exec = 1
						-- end
						-- entry = ""
					else
						if string.len(entry) == 4 then
							des_app_from_apt = 0
							-- file_name = "Custom Data/CIFP/" .. entry
							-- file_name = file_name .. ".dat"
							-- file_navdata = io.open(file_name, "r")
							-- if file_navdata == nil then
								-- file_name = "Resources/default data/CIFP/" .. entry
								-- file_name = file_name .. ".dat"
								-- file_navdata = io.open(file_name, "r")
								-- if file_navdata == nil then
									-- if apt_exist(entry) == true then
										-- apt_ok = 1
									-- end
								-- else
									-- read_des_data(entry)		-- read destination airport data
									-- --dump_rnw(entry)
									-- file_navdata:close()
									-- apt_ok = 1
								-- end
							-- else
								-- read_des_data(entry)		-- read destination airport data
								-- --dump_rnw(entry)
								-- file_navdata:close()
								-- apt_ok = 1
							-- end
							
							if cust_def_data == 1 then
								file_name = "Custom Data/CIFP/" .. entry
								file_name = file_name .. ".dat"
								file_navdata = io.open(file_name, "r")
								if file_navdata == nil then
									if apt_exist(entry) == true then
										apt_ok = 1
									end
								else
									read_des_data(entry)		-- read reference airport data
									file_navdata:close()
									apt_ok = 1
								end
							elseif cust_def_data == 2 then
								file_name = "Resources/default data/CIFP/" .. entry
								file_name = file_name .. ".dat"
								file_navdata = io.open(file_name, "r")
								if file_navdata == nil then
									if apt_exist(entry) == true then
										apt_ok = 1
									end
								else
									read_des_data(entry)		-- read reference airport data
									file_navdata:close()
									apt_ok = 1
								end
							end
							
							if apt_ok == 0 then
								-- fmc_message_num = fmc_message_num + 1
								-- fmc_message[fmc_message_num] = NOT_IN_DATABASE
								add_fmc_msg(NOT_IN_DATABASE, 1)
							else
								des_icao_x = entry
								if des_icao == "****" then --or in_flight_mode == 0 then
									if apt_exist(entry) == true then
										des_icao_lat = icao_latitude
										des_icao_lon = icao_longitude
										des_tns_alt = icao_tns_alt
										des_tns_lvl = icao_tns_lvl
										des_icao_alt = 2500
										if des_rwy_num > 0 then
											xy = tonumber(des_data[1][5])
											if xy ~= nil then
												des_icao_alt = xy
											end
										end
									else
										des_tns_alt = 0
										des_tns_lvl = 0
									end
									if des_tns_lvl == 0 then
										trans_lvl = "-----"
									else
										apt_ok = des_tns_lvl / 100
										trans_lvl = "FL" .. string.format("%03d", apt_ok)
									end
									
									des_app = "------"
									des_app_tns = "------"
									des_star = "------"
									des_star_trans = "------"
									----
									des_app2 = "------"
									des_app_tns2 = "------"
									des_star2 = "------"
									des_star_trans2 = "------"
									----
									co_route = "------------"
									co_route_x = co_route
									--legs_num2 = 0
									
									offset_act = 0
									offset_start = 0
									offset_end = 0
									offset_dist = 0
									offset_side = 0
									
									des_icao = des_icao_x
									
									-- REF ICAO
									--des_exec = 0
									legs_num2 = 1
									legs_data2[legs_num2] = {}
									legs_data2[legs_num2][1] = ref_icao
									legs_data2[legs_num2][2] = 0		-- brg
									legs_data2[legs_num2][3] = 0		-- distance
									legs_data2[legs_num2][4] = 0		-- speed
									legs_data2[legs_num2][5] = 0		-- altitude
									legs_data2[legs_num2][6] = 0	-- altitude type
									legs_data2[legs_num2][7] = ref_icao_lat		-- latitude
									legs_data2[legs_num2][8] = ref_icao_lon		-- longitude
									legs_data2[legs_num2][9] = ""			-- via id
									legs_data2[legs_num2][10] = 0		-- calc speed
									legs_data2[legs_num2][11] = 0		-- calc altitude
									legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
									legs_data2[legs_num2][13] = 0
									legs_data2[legs_num2][14] = 0		-- rest alt
									legs_data2[legs_num2][15] = 0		-- last fuel
									legs_data2[legs_num2][16] = ""
									legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
									legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
									legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR, 3-APP
									legs_data2[legs_num2][20] = 0
									legs_data2[legs_num2][21] = -1
									legs_data2[legs_num2][22] = ""
									legs_data2[legs_num2][23] = 0
									legs_data2[legs_num2][24] = 0
									legs_data2[legs_num2][25] = 0
									legs_data2[legs_num2][26] = 0
									legs_data2[legs_num2][27] = ""
									legs_data2[legs_num2][28] = ""
									legs_data2[legs_num2][29] = ""
									legs_data2[legs_num2][30] = ""
									legs_data2[legs_num2][31] = ""
									legs_data2[legs_num2][32] = 0
									legs_data2[legs_num2][33] = ""
									legs_data2[legs_num2][34] = ""
									legs_data2[legs_num2][35] = ""
									legs_data2[legs_num2][36] = 9
									legs_data2[legs_num2][37] = 0
									legs_data2[legs_num2][38] = ""
									legs_data2[legs_num2][39] = ""
									legs_data2[legs_num2][40] = 0
									
									-- DES ICAO
									legs_num2 = legs_num2 + 1
									legs_data2[legs_num2] = {}
									legs_data2[legs_num2][1] = des_icao
									legs_data2[legs_num2][2] = 0		-- brg
									legs_data2[legs_num2][3] = 0		-- distance
									legs_data2[legs_num2][4] = 0		-- speed
									legs_data2[legs_num2][5] = 0		-- altitude
									legs_data2[legs_num2][6] = 0	-- altitude type
									legs_data2[legs_num2][7] = des_icao_lat		-- latitude
									legs_data2[legs_num2][8] = des_icao_lon		-- longitude
									legs_data2[legs_num2][9] = ""			-- via id
									legs_data2[legs_num2][10] = 0		-- calc speed
									legs_data2[legs_num2][11] = 0		-- calc altitude
									legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
									legs_data2[legs_num2][13] = 0
									legs_data2[legs_num2][14] = 0		-- rest alt
									legs_data2[legs_num2][15] = 0		-- last fuel
									legs_data2[legs_num2][16] = ""
									legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
									legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
									legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR, 3-APP
									legs_data2[legs_num2][20] = 0
									legs_data2[legs_num2][21] = -1
									legs_data2[legs_num2][22] = ""
									legs_data2[legs_num2][23] = 0
									legs_data2[legs_num2][24] = 0
									legs_data2[legs_num2][25] = 0
									legs_data2[legs_num2][26] = 0
									legs_data2[legs_num2][27] = ""
									legs_data2[legs_num2][28] = ""
									legs_data2[legs_num2][29] = ""
									legs_data2[legs_num2][30] = ""
									legs_data2[legs_num2][31] = ""
									legs_data2[legs_num2][32] = 0
									legs_data2[legs_num2][33] = ""
									legs_data2[legs_num2][34] = ""
									legs_data2[legs_num2][35] = ""
									legs_data2[legs_num2][36] = 9
									legs_data2[legs_num2][37] = 0
									legs_data2[legs_num2][38] = ""
									legs_data2[legs_num2][39] = ""
									legs_data2[legs_num2][40] = 0
									legs_num2 = legs_num2 - 1
									----
									copy_to_legsdata()
									
									arr_data = 0
									create_rnw_list()
									create_star_list()
									create_des_app_list()
								else
									des_exec = 1
								end
								entry = ""
							end
						elseif entry == "" and des_icao ~= "****" then
							entry = des_icao
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					end
				end
			else
				local item = 0
				local button = 1	-- button 1 RSK
				local tmp_tmp = 0
				
				item = (act_page - 2) * 5 + button
				tmp_tmp = fpln_num2 + 1
				if fpln_num2 > 0 then
					if item == tmp_tmp then
						--if fpln_data2[fpln_num2][1] ~= "" then
							-- add new direct to navaid
							dir_via_add("", "", entry, "", "", item)
						--end
						item_sel_via = 0
					elseif string.len(entry) == 0 then
						item_sel_via = item
						entry = fpln_data2[item][1]
					elseif item_sel_via > item then
						legs_data2[fpln_data2[item][4]-1][17] = legs_data2[fpln_data2[item][4]-1][17] + 100
						rte_copy(fpln_data2[item_sel_via][4])
						rte_paste(fpln_data2[item][4])
						create_fpln()
						calc_rte_enable2 = 1
						legs_delete = 1
						item_sel_via = 0
						entry = ""
					elseif item <= fpln_num2 then --and fpln_num2 > 1 then
						if item == 1 then
							dir_via_add("", "", entry, "", "", item)
						else
							dir_via_add(fpln_data2[item-1][1], fpln_data2[item-1][3], entry, "", fpln_data2[item][2], item)
						end
						item_sel_via = 0
					end
				else
					-- first waypoint
					if item == tmp_tmp then
						-- add new direct to navaid
						dir_via_add("", "", entry, "", "", item)
					end
					item_sel_via = 0
				end
			end
		elseif page_legs == 1 then
				local item = 0
				local button = 1	-- button 1 RSK
				item = (act_page - 1) * 5 + offset - 1 + button
				
				set_spd_alt_rest(item)
				if entry ~= INVALID_INPUT then
					legs_delete = 1
				end
				
			-- if B738DR_fms_exec_light_pilot == 0 then
				-- local item = 0
				-- local button = 1	-- button 1 RSK
				-- local n = 0
				-- local nn = 0
				-- local nnn = 0
				-- local strlen = string.len(entry)
				
				-- item = (act_page - 1) * 5 + offset - 1 + button
				-- if item > legs_num then
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- elseif legs_data[item][1] == "DISCONTINUITY" then
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- elseif entry == ">DELETE" then
					-- legs_data[item][4] = 0
					-- legs_data[item][5] = 0
					-- legs_data[item][6] = 0
					-- entry = ""
					-- msg_chk_alt_constr = 0
					-- vnav_update = 1
				-- else
					-- if strlen < 7 then
						-- -- only SPD or ALT
						-- n = entry_spd_kts(entry, 100, 340, 1)
						-- if n == nil then
							-- n = entry_alt(entry, 100, 41000, 1, 18000)
							-- if n == nil then
								-- add_fmc_msg(INVALID_INPUT, 1)
							-- else
								-- if string.sub(output_str, -1, -1) == "A" then
									-- nn = 43
								-- elseif string.sub(output_str, -1, -1) == "B" then
									-- nn = 45
								-- else
									-- nn = 32
								-- end
								-- legs_data[item][5] = n
								-- legs_data[item][6] = nn
								-- vnav_update = 1
								-- msg_chk_alt_constr = 0
								-- entry = ""
							-- end
						-- else
							-- legs_data[item][4] = n		-- speed
							-- vnav_update = 1
							-- msg_chk_alt_constr = 0
							-- entry = ""
						-- end
					-- else
						-- -- SPD/ALT
						-- n = entry_spd_alt(entry, 100, 340, 100, 41000, 18000)
						-- if n == nil then
							-- add_fmc_msg(INVALID_INPUT, 1)
						-- else
							-- legs_data[item][4] = output_num1		-- speed
							-- if string.sub(output_str2, -1, -1) == "A" then
								-- nn = 43
							-- elseif string.sub(output_str2, -1, -1) == "B" then
								-- nn = 45
							-- else
								-- nn = 32
							-- end
							-- legs_data[item][5] = output_num2		-- altitude
							-- legs_data[item][6] = nn
							-- vnav_update = 1
							-- msg_chk_alt_constr = 0
							-- entry = ""
						-- end
					-- end
				-- end
			-- end
		elseif page_hold == 1 then
			local strlen = string.len(entry)
			local m = 0
			local n = 0
			local ww = 0
			if entry == ">DELETE" then
				new_hold_spd = 0
				new_hold_alt = 0
				legs_data2[hold_offset_idx][4] = new_hold_spd		-- speed
				legs_data2[hold_offset_idx][5] = new_hold_alt		-- altitude
				legs_data2[hold_offset_idx][6] = 0		-- altitude
				legs_data2[hold_offset_idx][17] = 100
				if legs_data2[hold_offset_idx-1][4] ~= 0 then
					legs_data2[hold_offset_idx-1][4] = new_hold_spd
				end
				entry = ""
				hold_exec = 1
			else
				if strlen == 9 then
					-- format XXX/XXXXX
					if string.sub(entry, 4, 4) ~= "/" then
						ww = 1
					end
					m = tonumber(string.sub(entry, 1, 3))
					if m == nil then
						ww = 1
					else
						if m < 130 or m > 280 then
							ww = 1
						end
					end
					n = tonumber(string.sub(entry, 5, 9))
					if n == nil then
						ww = 1
					else
						if n < 1000 or m > 40000 then
							ww = 1
						end
					end
					if ww == 0 then
						-- if hold_exec == 0 then
							-- edit_hold()
						-- end
						new_hold_spd = m
						new_hold_alt = n
						legs_data2[hold_offset_idx][4] = new_hold_spd		-- speed
						legs_data2[hold_offset_idx][5] = new_hold_alt		-- altitude
						legs_data2[hold_offset_idx][6] = 0		-- altitude
						legs_data2[hold_offset_idx][17] = 100
						if legs_data2[hold_offset_idx-1][4] ~= 0 then
							legs_data2[hold_offset_idx-1][4] = new_hold_spd
						end
						entry = ""
						hold_exec = 1
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				elseif strlen == 4 then
					-- format XXX/
					if string.sub(entry, 4, 4) ~= "/" then
						ww = 1
					end
					m = tonumber(string.sub(entry, 1, 3))
					if m == nil then
						ww = 1
					else
						if m < 130 or m > 280 then
							ww = 1
						end
					end
					if ww == 0 then
						-- if hold_exec == 0 then
							-- edit_hold()
						-- end
						new_hold_spd = m
						legs_data2[hold_offset_idx][4] = new_hold_spd		-- speed
						legs_data2[hold_offset_idx][17] = 100
						if legs_data2[hold_offset_idx-1][4] ~= 0 then
							legs_data2[hold_offset_idx-1][4] = new_hold_spd
						end
						entry = ""
						hold_exec = 1
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				elseif strlen == 3 then
					-- format XXX
					n = tonumber(entry)
					if n == nil then
						ww = 1
					else
						n = n * 100
						if n < 1000 or m > 40000 then
							ww = 1
						end
					end
					if ww == 1 then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						-- if hold_exec == 0 then
							-- edit_hold()
						-- end
						new_hold_alt = n
						legs_data2[hold_offset_idx][5] = new_hold_alt		-- altitude
						legs_data2[hold_offset_idx][6] = 0		-- altitude
						legs_data2[hold_offset_idx][17] = 100
						entry = ""
						hold_exec = 1
					end
				elseif strlen == 5 then
					-- format XXXXX or FLXXX
					n = tonumber(entry)
					if n == nil then
						if string.sub(entry, 1, 2) ~= "FL" then
							ww = 1
						else
							n = tonumber(string.sub(entry, 3, 5))
							if n == nil then
								ww = 1
							else
								n = n * 100
								if n < 1000 or m > 40000 then
									ww = 1
								end
							end
						end
					else
						if n < 1000 or m > 40000 then
							ww = 1
						end
					end
					if ww == 1 then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						-- if hold_exec == 0 then
							-- edit_hold()
						-- end
						new_hold_alt = n
						legs_data2[hold_offset_idx][5] = new_hold_alt		-- altitude
						legs_data2[hold_offset_idx][6] = 0		-- altitude
						legs_data2[hold_offset_idx][17] = 100
						entry = ""
						hold_exec = 1
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		elseif page_ref_nav_data == 1 then
			local strlen = string.len(entry)
			if strlen == 0 or strlen > 4 then
				add_fmc_msg(INVALID_INPUT, 1)
			else
				nav_data_type = 1 -- navaid
				nav_data_find(entry)
			end
		elseif page_takeoff == 1 then
			-- entry V1
			if entry == "" then
				if v1 ~= "---" and qrh == "OFF" then
					v1_set = v1
				end
			else
				-- from scratch (test speed correct)
				if entry == ">DELETE" then
					v1_set = "---"
					entry = ""
				else
					local n = tonumber(entry)
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n > 99 and n < 170 then
							v1_set = entry
							entry = ""
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					end
				end
			end
			display_update = 1
		elseif page_takeoff == 2 then
			if rw_cond == 2 then
				rw_cond = 0
			else
				rw_cond = rw_cond + 1
			end
			if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
				if v1_set == "---" and vr_set == "---" and v2_set == "---" then
					entry = ""
				else
					add_fmc_msg(VERIFY_TO_SPEEDS, 1)
					entry = ""
				end
			end
			B738DR_calc_vspd = 1
		-- elseif page_menu == 1 then
			--B738_init2()
		elseif page_climb == 1 and B738DR_flight_phase < 2 then
			if entry == ">DELETE" then
				set_spd_alt_rest(B738DR_rest_wpt_alt_idx)
				if entry ~= INVALID_INPUT then
					legs_delete = 1
				end
			end
		elseif page_menu == 1 then
			-- select Units
			if units == 0 then
				units = 1
			else
				units = 0
			end
			units_recalc = 1
		elseif page_approach == 1 then
			-- select flaps 15
			if vref_15 == "---" then
				entry = ""
			else
				if flaps_app == "15" then
					app_flap = "15"
					app_spd = vref_15
					flaps_app = "  "
				else
					flaps_app = "15"
				end
			end
		elseif page_perf == 1 then --and was_on_air == 0 then	-- only on ground
			-- entry Cruise alt
			local strlen = string.len(entry)
			local alt_temp = 0
			if strlen > 0 then
				if entry == ">DELETE" then
					if B738DR_flight_phase == 0 then
						crz_alt = "*****"
						crz_alt_num = 0
						entry = ""
						msg_chk_alt_constr = 0
					else
						entry = INVALID_DELETE
					end
				elseif strlen == 5 and string.sub(entry, 1, 2) == "FL" then
					local n = tonumber(string.sub(entry, 3, 5))
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 10 or n > 410 then	-- Cruise level FLxxx min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							crz_alt_num = n * 100
							if crz_alt_num >= B738DR_trans_alt then
								--n = n / 100
								crz_alt = "FL" .. string.format("%03d", n)
							else
								n = n * 100
								crz_alt = string.format("%5d", n)
							end
							entry = ""
							vnav_update = 1
							msg_unavaible_crz_alt = 0
							msg_chk_alt_constr = 0
							B738DR_fmc_cruise_alt = crz_alt_num
							crz_alt_num2 = 0
							crz_alt_old = "     "
							if isa_dev_c ~= "---" then
								n = tonumber(isa_dev_c)
								alt_temp = math.min(crz_alt_num, 37000)
								tc_oat_c = string.format("%3d", (B738_rescale(0, 15, 37000, -56.5, alt_temp) + n))
								n = tonumber(tc_oat_c)
								n = (n * 9 / 5) + 32
								tc_oat_f = string.format("%3d", n)
							end
						end
					end
				else
					local n = tonumber(entry)
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if strlen == 3 then
							if n < 10 or n > 410 then	-- Cruise level FLxxx min and max
								add_fmc_msg(INVALID_INPUT, 1)
							else
								crz_alt_num = n * 100
								if crz_alt_num >= B738DR_trans_alt then
									--n = n / 100
									crz_alt = "FL" .. string.format("%03d", n)
								else
									n = n * 100
									crz_alt = string.format("%5d", n)
								end
								entry = ""
								vnav_update = 1
								msg_unavaible_crz_alt = 0
								msg_chk_alt_constr = 0
								B738DR_fmc_cruise_alt = crz_alt_num
								crz_alt_num2 = 0
								crz_alt_old = "     "
								if isa_dev_c ~= "---" then
									n = tonumber(isa_dev_c)
									alt_temp = math.min(crz_alt_num, 37000)
									tc_oat_c = string.format("%3d", (B738_rescale(0, 15, 37000, -56.5, alt_temp) + n))
									n = tonumber(tc_oat_c)
									n = (n * 9 / 5) + 32
									tc_oat_f = string.format("%3d", n)
								end
							end
						else
							if n < 1000 or n > 41000 then	-- Cruise alt min and max
								add_fmc_msg(INVALID_INPUT, 1)
							else
								crz_alt_num = n
								if crz_alt_num >= B738DR_trans_alt then
									n = n / 100
									crz_alt = "FL" .. string.format("%03d", n)
								else
									crz_alt = string.format("%5d", n)
								end
								entry = ""
								vnav_update = 1
								msg_unavaible_crz_alt = 0
								msg_chk_alt_constr = 0
								B738DR_fmc_cruise_alt = crz_alt_num
								crz_alt_num2 = 0
								crz_alt_old = "     "
								if isa_dev_c ~= "---" then
									n = tonumber(isa_dev_c)
									alt_temp = math.min(crz_alt_num, 37000)
									tc_oat_c = string.format("%3d", (B738_rescale(0, 15, 37000, -56.5, alt_temp) + n))
									n = tonumber(tc_oat_c)
									n = (n * 9 / 5) + 32
									tc_oat_f = string.format("%3d", n)
								end
							end
						end
					end
				end
			end
			B738_calc_vnav_spd()
			vnav_update = 1
		elseif page_init == 1 then
			-- go to REF NAV DATA
			page_init = 0
			page_ref_nav_data = 1
			ref_nav_wpt = "-----"
			ref_nav_navaid = "----"
			ref_nav_apt = "----"
			ref_nav_new = "*****"
		elseif page_pos_init == 1 then
			entry = last_pos
		elseif page_xtras_fmod > 0 then
			fmc_fmod_main(0,1)
		elseif page_xtras_fuel == 1 then
			-- entry fuel
			local kk = 0
			local ll = 0
			if string.len(entry) == 0 then
				kk = simDR_payload_weight
				kk = kk / 1000
				if units == 0 then
					kk = kk * 2.204
				end
				entry = string.format("%4.1f", kk)
			else
				if entry == ">DELETE" then
					entry = INVALID_DELETE
				else
					kk = tonumber(entry)
					if kk == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if units == 0 then
							ll = ((simDR_fuel_weight / 1000) * 2.204) + kk + 91.3
							if kk >=0 and ll <= 174.2 then
								simDR_payload_weight = kk / 2.204 * 1000
								mac = calc_mac(simDR_cg)
								mac_zfw = calc_zfw_mac(cg_set_m)
								entry = ""
								gpu_test_enable = 1
								if is_timer_scheduled(gpu_test_reset) == false then
									run_after_time(gpu_test_reset, 1.5)
								end
							else
								add_fmc_msg(INVALID_INPUT, 1)
							end
						else
							ll = (simDR_fuel_weight / 1000) + kk + 41.4
							if kk >= 0 and ll <= 79 then
								simDR_payload_weight = kk * 1000
								mac = calc_mac(simDR_cg)
								mac_zfw = calc_zfw_mac(cg_set_m)
								entry = ""
								gpu_test_enable = 1
								if is_timer_scheduled(gpu_test_reset) == false then
									run_after_time(gpu_test_reset, 1.5)
								end
							else
								add_fmc_msg(INVALID_INPUT, 1)
							end
						end
					end
				end
			end
		elseif page_rte_legs > 0 then
			-- entry WIND DATA
			local strlen = string.len(entry)
			local item = 0
			local button = 1	-- button 1 RSK
			local qqq = 0
			
			if nav_mode == 1 then
				item = legs_num2 + 2
			else
				item = (act_page - 1) * 5 + offset - 1 + button
			end
			
			if strlen > 0 and item <= legs_num2 and item > 0 then
				if entry == ">DELETE" then
					legs_data2[item][39] = ""
					entry = ""
					legs_delete = 1
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then		-- wind heading 0 - 359
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local wind_dir = string.format("%03d", n)
								n = tonumber(string.sub(entry, 5, strlen))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < 1 or n > 199 then	-- wind speed 1 - 199
										add_fmc_msg(INVALID_INPUT, 1)
									else
										legs_data2[item][39] = wind_dir .. "`/" .. string.format("%3d", n)
										if item + 1 <= legs_num2 + 1 then
											for qqq = item + 1, legs_num2 + 1 do
												if item >= tc_idx and item < td_idx and tc_idx ~= 0 and td_idx ~= 0 then
													if qqq >= td_idx then
														break
													end
												end
												if item < tc_idx and tc_idx ~= 0 then
													if qqq >= tc_idx then
														break
													end
												end
												if legs_data2[qqq][39] == "" then
													legs_data2[qqq][39] = wind_dir .. "`/" .. string.format("%3d", n)
												else
													break
												end
											end
										end
										entry = ""
										legs_delete = 1
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			else
				if legs_data2[item][39] ~= "" then
					entry = string.sub(legs_data2[item][39], 1, 3) .. string.sub(legs_data2[item][39], -4, -1)
				elseif legs_data2[item][38] ~= "" then
					entry = string.sub(legs_data2[item][38], 1, 3) .. string.sub(legs_data2[item][38], -4, -1)
				end
			end
		elseif page_xtras_others == 4 then
			if simDR_pitch_nz < 0.30 then
				simDR_pitch_nz = simDR_pitch_nz + 0.01
			else
				simDR_pitch_nz = 0
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 2RSK
function B738_fmc1_2R_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		if page_dep == 1 then
			if ref_rwy2 == "-----" then
				if ref_rwy_sel[2] ~= "-----" then
					ref_rwy2 = ref_rwy_sel[2]
					if ref_sid2 == "------" then
						create_sid_list()
					end
					act_page = 1
					ref_rwy_exec = 1
				end
			end
			rte_add_dep_arr()
		elseif page_arr == 1 then
			if des_app2 == "------" then
				if des_app_sel[2] ~= "------" then
					des_app2 = des_app_sel[2]
					if des_star2 == "------" then
						create_star_list()
					end
					des_app_tns2 = "------"
					act_page = 1
					des_app_exec = 1
					create_app_tns_list()
				end
			else
				if des_app_tns2 == "------" then
					if des_tns_sel[2] ~= "------" then
						des_app_tns2 = des_tns_sel[2]
						act_page = 1
						des_app_tns_exec = 1
					end
				else
					des_app_tns2 = "------"
					act_page = 1
					des_app_tns_exec = 1
				end
			end
			rte_add_dep_arr()
		elseif page_dep_arr == 1 then
			-- Destination ARR
			if des_icao ~= "****" and des_icao ~= ref_icao and exec_load_fpln == 0 then
				page_arr = 1
				page_dep_arr = 0
				arr_data = 0
				---
				-- des_app2 = des_app
				-- des_app_tns2 = des_app_tns
				-- des_star2 = des_star
				-- des_star_trans2 = des_star_trans
				---
				create_star_list()
				create_star_tns_list()
				create_des_app_list()
				create_app_tns_list()
			end
		elseif page_rte_init == 1 then
			-- entry FLIGHT NUMBER
			if act_page == 1 then
				if entry == ">DELETE" then
					entry = INVALID_DELETE
					-- flt_num = "--------"
					-- entry = ""
				else
					if string.len(entry) > 8 then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						flt_num = entry
						entry = ""
					end
				end
			else
				local item = 0
				local button = 2	-- button 2 RSK
				local tmp_tmp = 0
				
				item = (act_page - 2) * 5 + button
				tmp_tmp = fpln_num2 + 1
				if fpln_num2 > 0 then
					if item == tmp_tmp then
						--if fpln_data2[fpln_num2][1] ~= "" then
							-- add new direct to navaid
							dir_via_add("", "", entry, "", "", item)
						--end
						item_sel_via = 0
					elseif string.len(entry) == 0 then
						item_sel_via = item
						entry = fpln_data2[item][1]
					elseif item_sel_via > item then
						legs_data2[fpln_data2[item][4]-1][17] = legs_data2[fpln_data2[item][4]-1][17] + 100
						rte_copy(fpln_data2[item_sel_via][4])
						rte_paste(fpln_data2[item][4])
						create_fpln()
						calc_rte_enable2 = 1
						legs_delete = 1
						item_sel_via = 0
						entry = ""
					elseif item <= fpln_num2 then --and fpln_num2 > 1 then
						-- add new via to navaid
						if item == 1 then
							dir_via_add("", "", entry, "", "", item)
						else
							dir_via_add(fpln_data2[item-1][1], fpln_data2[item-1][3], entry, "", fpln_data2[item][2], item)
						end
						item_sel_via = 0
					end
				end
			end
		elseif page_legs == 1 then
				local item = 0
				local button = 2	-- button 2 RSK
				item = (act_page - 1) * 5 + offset - 1 + button
				
				set_spd_alt_rest(item)
				if entry ~= INVALID_INPUT then
					legs_delete = 1
				end
				
				
			-- if B738DR_fms_exec_light_pilot == 0 then
				-- local item = 0
				-- local button = 2	-- button 2 RSK
				-- item = (act_page - 1) * 5 + offset - 1 + button
				
				-- set_spd_alt_rest(item_idx)
				
				-- local item = 0
				-- local button = 2	-- button 2 RSK
				-- local n = 0
				-- local nn = 0
				-- local nnn = 0
				-- local strlen = string.len(entry)
				
				-- item = (act_page - 1) * 5 + offset - 1 + button
				-- if item > legs_num then
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- elseif legs_data[item][1] == "DISCONTINUITY" then
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- elseif entry == ">DELETE" then
					-- legs_data[item][4] = 0
					-- legs_data[item][5] = 0
					-- legs_data[item][6] = 0
					-- entry = ""
					-- msg_chk_alt_constr = 0
					-- vnav_update = 1
				-- else
					-- if strlen < 7 then
						-- -- only SPD or ALT
						-- n = entry_spd_kts(entry, 100, 340, 1)
						-- if n == nil then
							-- n = entry_alt(entry, 100, 41000, 1, 18000)
							-- if n == nil then
								-- add_fmc_msg(INVALID_INPUT, 1)
							-- else
								-- if string.sub(output_str, -1, -1) == "A" then
									-- nn = 43
								-- elseif string.sub(output_str, -1, -1) == "B" then
									-- nn = 45
								-- else
									-- nn = 32
								-- end
								-- legs_data[item][5] = n
								-- legs_data[item][6] = nn
								-- vnav_update = 1
								-- msg_chk_alt_constr = 0
								-- entry = ""
							-- end
						-- else
							-- legs_data[item][4] = n		-- speed
							-- vnav_update = 1
							-- msg_chk_alt_constr = 0
							-- entry = ""
						-- end
					-- else
						-- -- SPD/ALT
						-- n = entry_spd_alt(entry, 100, 340, 100, 41000, 18000)
						-- if n == nil then
							-- add_fmc_msg(INVALID_INPUT, 1)
						-- else
							-- legs_data[item][4] = output_num1		-- speed
							-- if string.sub(output_str2, -1, -1) == "A" then
								-- nn = 43
							-- elseif string.sub(output_str2, -1, -1) == "B" then
								-- nn = 45
							-- else
								-- nn = 32
							-- end
							-- legs_data[item][5] = output_num2		-- altitude
							-- legs_data[item][6] = nn
							-- vnav_update = 1
							-- msg_chk_alt_constr = 0
							-- entry = ""
						-- end
					-- end
				-- end
			-- end
		elseif page_takeoff == 1 then
			-- entry VR
			if entry == "" then
				if vr ~= "---" and qrh == "OFF" then
					vr_set = vr
				end
			else
				-- from scratch (test speed correct)
				if entry == ">DELETE" then
					vr_set = "---"
					entry = ""
				else
					local n = tonumber(entry)
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n > 99 and n < 170 then
							vr_set = entry
							entry = ""
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					end
				end
			end
			display_update = 1
		elseif page_approach == 1 then
			-- select flaps 30
			if vref_30 == "---" then
				entry = ""
			else
				if flaps_app == "30" then
					app_flap = "30"
					app_spd = vref_30
					flaps_app = "  "
				else
					flaps_app = "30"
				end
			end
		elseif page_n1_limit == 1 then
			-- select CLB
			clb = "<SEL>"
			clb_1 = "     "
			clb_2 = "     "
			sel_clb_thr = 1
		elseif page_descent_forecast == 1 then
			-- entry ISA DEV / QNH
			local strlen = string.len(entry)
			local n = tonumber(entry)
			local n_str = ""
			if strlen > 0 then
				if entry == ">DELETE" then
					forec_isa_dev = "---"
					forec_qnh = "------"
					entry = ""
				else
					if strlen == 5 then		-- QNH /XXXX
						if string.sub(entry, 1, 1) == "/" then
							n = tonumber(string.sub(entry, 2, 5))
							if n == nil then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								if n < 0 or n > 1355 then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									forec_qnh = "  " .. string.sub(entry, 2, 5)
									entry = ""
									-- set preselect baro hpa -> in hg
									n = 0.02952998751 * n * 100
									n = math.floor(n + 0.5) / 100
									if B738DR_baro_set_std_pilot == 1 then
										B738DR_baro_sel_in_hg_pilot = n
									end
									if B738DR_baro_set_std_copilot == 1 then
										B738DR_baro_sel_in_hg_copilot = n
									end
								end
							end
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					elseif strlen == 6 then		-- QNH /XX.XX in hg
						if string.sub(entry, 1, 1) == "/" and string.sub(entry, 4, 4) == "." then
							n = tonumber(string.sub(entry, 2, 6))
							if n == nil then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								if n < 0 or n > 40.0 then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									forec_qnh = " " .. string.sub(entry, 2, 6)
									entry = ""
									-- set preselect baro in hg
									if B738DR_baro_set_std_pilot == 1 then
										B738DR_baro_sel_in_hg_pilot = n
									end
									if B738DR_baro_set_std_copilot == 1 then
										B738DR_baro_sel_in_hg_copilot = n
									end
								end
							end
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_menu == 1 then
			-- go to XTRAS menu
			page_menu = 0
			page_xtras = 1
			act_page = 1
		-- elseif page_menu == 1 then
			-- -- select Units
			-- if units == 0 then
				-- units = 1
			-- else
				-- units = 0
			-- end
			-- units_recalc = 1
		elseif page_perf == 1 then
			-- entry CRZ WIND
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					crz_wind_dir = "---"
					crz_wind_spd = "---"
					entry = ""
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then		-- wind heading 0 - 359
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local wind_dir = string.format("%03d", n)
								n = tonumber(string.sub(entry, 5, strlen))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < 1 or n > 199 then	-- wind speed 1 - 199
										add_fmc_msg(INVALID_INPUT, 1)
									else
										crz_wind_dir = wind_dir
										crz_wind_spd = string.format("%3d", n)
										entry = ""
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_perf == 2 then
			-- CLB max speed kts/mach
			local strlen = string.len(entry)
			if strlen == 0 then
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					clb_max_kts = "   "
					clb_max_mach = "   "
					entry = ""
				else
					if strlen > 2 and  strlen < 6 and string.sub(entry, 1, 2) == "/." then		-- only mach
						local n = tonumber(string.sub(entry, 2, strlen))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(clb_min_mach)
							if nn == nil then
								nn = 0.4
							else
								nn = nn / 1000
							end
							if n > 0.82 or n < nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								n = n * 1000
								clb_max_mach = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen == 3 then			-- only kts
						local n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(clb_min_kts)
							if nn == nil then
								nn = 100
							end
							if n > 340  or n < nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								clb_max_kts = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen > 5 and strlen < 9 and string.sub(entry, 4, 5) == "/." then 	-- kts and mach
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(clb_min_kts)
							if nn == nil then
								nn = 100
							end
							if n > 340 or n < nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local kts = string.format("%03d", n)
									n = tonumber(string.sub(entry, 5, strlen))
									if n == nil then
										add_fmc_msg(INVALID_INPUT, 1)
									else
										nn = tonumber(clb_min_mach)
										if nn == nil then
											nn = 0.4
										else
											nn = nn / 1000
										end
										if n > 0.82 or n < nn then
											add_fmc_msg(INVALID_INPUT, 1)
										else
											n = n * 1000
											clb_max_kts = kts
											clb_max_mach = string.format("%03d", n)
											entry = ""
										end
									end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		----
		elseif page_pos_init == 1 then
			if ref_icao_pos ~= "               " then
				entry = ref_icao_pos
			end
		elseif page_xtras_fmod > 0 then
			fmc_fmod_main(0,2)
		elseif page_xtras_others == 4 then
			if simDR_roll_nz < 0.30 then
				simDR_roll_nz = simDR_roll_nz + 0.01
			else
				simDR_roll_nz = 0
			end
		elseif page_rte_legs > 0 then
			-- entry WIND DATA
			local strlen = string.len(entry)
			local item = 0
			local button = 2	-- button 2 RSK
			local qqq = 0
			
			if nav_mode == 1 then
				item = legs_num2 + 2
			else
				item = (act_page - 1) * 5 + offset - 1 + button
			end
			
			if strlen > 0 and item <= legs_num2 and item > 0 then
				if entry == ">DELETE" then
					legs_data2[item][39] = ""
					entry = ""
					legs_delete = 1
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then		-- wind heading 0 - 359
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local wind_dir = string.format("%03d", n)
								n = tonumber(string.sub(entry, 5, strlen))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < 1 or n > 199 then	-- wind speed 1 - 199
										add_fmc_msg(INVALID_INPUT, 1)
									else
										legs_data2[item][39] = wind_dir .. "`/" .. string.format("%3d", n)
										if item + 1 <= legs_num2 + 1 then
											for qqq = item + 1, legs_num2 + 1 do
												if item >= tc_idx and item < td_idx and tc_idx ~= 0 and td_idx ~= 0 then
													if qqq >= td_idx then
														break
													end
												end
												if item < tc_idx and tc_idx ~= 0 then
													if qqq >= tc_idx then
														break
													end
												end
												if legs_data2[qqq][39] == "" then
													legs_data2[qqq][39] = wind_dir .. "`/" .. string.format("%3d", n)
												else
													break
												end
											end
										end
										entry = ""
										legs_delete = 1
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			else
				if legs_data2[item][39] ~= "" then
					entry = string.sub(legs_data2[item][39], 1, 3) .. string.sub(legs_data2[item][39], -4, -1)
				elseif legs_data2[item][38] ~= "" then
					entry = string.sub(legs_data2[item][38], 1, 3) .. string.sub(legs_data2[item][38], -4, -1)
				end
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 3RSK
function B738_fmc1_3R_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		if page_dep == 1 then
			if ref_rwy2 == "-----" then
				if ref_rwy_sel[3] ~= "-----" then
					ref_rwy2 = ref_rwy_sel[3]
					if ref_sid2 == "------" then
						create_sid_list()
					end
					act_page = 1
					ref_rwy_exec = 1
				end
			end
			rte_add_dep_arr()
		-- elseif page_menu == 1 then
			-- -- go to XTRAS menu
			-- page_menu = 0
			-- page_xtras = 1
			-- act_page = 1
		elseif page_arr == 1 then
			if des_app2 == "------" then
				if des_app_sel[3] ~= "------" then
					des_app2 = des_app_sel[3]
					if des_star2 == "------" then
						create_star_list()
					end
					act_page = 1
					des_app_exec = 1
					create_app_tns_list()
				end
			else
				if des_app_tns2 == "------" then
					if des_tns_sel[3] ~= "------" then
						des_app_tns2 = des_tns_sel[3]
						act_page = 1
						des_app_tns_exec = 1
					end
					if des_app_tns_list_num == 0 then
						if simDR_glideslope_status == 0 then
							if B738DR_fms_ils_disable == 0 then
								B738DR_fms_ils_disable = 1
							else
								B738DR_fms_ils_disable = 0
							end
						end
					end
				else
					if simDR_glideslope_status == 0 then
						if B738DR_fms_ils_disable == 0 then
							B738DR_fms_ils_disable = 1
						else
							B738DR_fms_ils_disable = 0
						end
					end
				end
			end
			rte_add_dep_arr()
		elseif page_rte_init == 1 then
			if act_page == 1 then
				--save route
				if string.len(entry) == 0 or string.len(entry) > 12 then
					add_fmc_msg(INVALID_INPUT, 1)
				else
					save_fpln()
					co_route = entry
					co_route_x = co_route
					entry = ""
				end
			else
				local item = 0
				local button = 3	-- button 3 RSK
				local tmp_tmp = 0
				
				item = (act_page - 2) * 5 + button
				tmp_tmp = fpln_num2 + 1
				if fpln_num2 > 0 then
					if item == tmp_tmp then
						--if fpln_data2[fpln_num2][1] ~= "" then
							-- add new direct to navaid
							dir_via_add("", "", entry, "", "", item)
						--end
						item_sel_via = 0
					elseif string.len(entry) == 0 then
						item_sel_via = item
						entry = fpln_data2[item][1]
					elseif item_sel_via > item then
						legs_data2[fpln_data2[item][4]-1][17] = legs_data2[fpln_data2[item][4]-1][17] + 100
						rte_copy(fpln_data2[item_sel_via][4])
						rte_paste(fpln_data2[item][4])
						create_fpln()
						calc_rte_enable2 = 1
						legs_delete = 1
						item_sel_via = 0
						entry = ""
					elseif item <= fpln_num2 then --and fpln_num2 > 1 then
						if item == 1 then
							dir_via_add("", "", entry, "", "", item)
						else
							dir_via_add(fpln_data2[item-1][1], fpln_data2[item-1][3], entry, "", fpln_data2[item][2], item)
						end
						item_sel_via = 0
					end
				end
			end
		elseif page_legs == 1 then
				local item = 0
				local button = 3	-- button 3 RSK
				item = (act_page - 1) * 5 + offset - 1 + button
				
				set_spd_alt_rest(item)
				if entry ~= INVALID_INPUT then
					legs_delete = 1
				end
			
			
			-- if B738DR_fms_exec_light_pilot == 0 then
				-- local item = 0
				-- local button = 3	-- button 3 RSK
				-- local n = 0
				-- local nn = 0
				-- local nnn = 0
				-- local strlen = string.len(entry)
				
				-- item = (act_page - 1) * 5 + offset - 1 + button
				-- if item > legs_num then
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- elseif legs_data[item][1] == "DISCONTINUITY" then
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- elseif entry == ">DELETE" then
					-- legs_data[item][4] = 0
					-- legs_data[item][5] = 0
					-- legs_data[item][6] = 0
					-- entry = ""
					-- msg_chk_alt_constr = 0
					-- vnav_update = 1
				-- else
					-- if strlen < 7 then
						-- -- only SPD or ALT
						-- n = entry_spd_kts(entry, 100, 340, 1)
						-- if n == nil then
							-- n = entry_alt(entry, 100, 41000, 1, 18000)
							-- if n == nil then
								-- add_fmc_msg(INVALID_INPUT, 1)
							-- else
								-- if string.sub(output_str, -1, -1) == "A" then
									-- nn = 43
								-- elseif string.sub(output_str, -1, -1) == "B" then
									-- nn = 45
								-- else
									-- nn = 32
								-- end
								-- legs_data[item][5] = n
								-- legs_data[item][6] = nn
								-- vnav_update = 1
								-- msg_chk_alt_constr = 0
								-- entry = ""
							-- end
						-- else
							-- legs_data[item][4] = n		-- speed
							-- vnav_update = 1
							-- msg_chk_alt_constr = 0
							-- entry = ""
						-- end
					-- else
						-- -- SPD/ALT
						-- n = entry_spd_alt(entry, 100, 340, 100, 41000, 18000)
						-- if n == nil then
							-- add_fmc_msg(INVALID_INPUT, 1)
						-- else
							-- legs_data[item][4] = output_num1		-- speed
							-- if string.sub(output_str2, -1, -1) == "A" then
								-- nn = 43
							-- elseif string.sub(output_str2, -1, -1) == "B" then
								-- nn = 45
							-- else
								-- nn = 32
							-- end
							-- legs_data[item][5] = output_num2		-- altitude
							-- legs_data[item][6] = nn
							-- vnav_update = 1
							-- msg_chk_alt_constr = 0
							-- entry = ""
						-- end
					-- end
				-- end
			-- end
					
		elseif page_takeoff == 1 then
			-- entry V2
			if entry == "" then
				if v2 ~= "---" and qrh == "OFF" then
					v2_set = v2
				end
			else
				-- from scratch (test speed correct)
				if entry == ">DELETE" then
					v2_set = "---"
					entry = ""
				else
					local n = tonumber(entry)
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n > 99 and n < 170 then
							v2_set = entry
							entry = ""
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					end
				end
			end
			display_update = 1
		elseif page_approach == 1 then
			-- select flaps 40
			if vref_40 == "---" then
				entry = ""
			else
				if flaps_app == "40" then
					app_flap = "40"
					app_spd = vref_40
					flaps_app = "  "
				else
					flaps_app = "40"
				end
			end
		elseif page_n1_limit == 1 then
			-- select CLB-1
			clb_1 = "<SEL>"
			clb = "     "
			clb_2 = "     "
			sel_clb_thr = 1
		elseif page_ref_nav_data_wpt == 1 then
			if string.len(entry) > 0 then
				local err_pos = 0
				local n = 0
				if string.len(entry) ~= 8 or string.sub(entry, 7, 7) ~= "." then
					err_pos = 1
				end
				n = tonumber(string.sub(entry, 2, 4))
				if (n == nil) or (n < 0) or (n > 180) then
					err_pos = 1
				end
				n = tonumber(string.sub(entry, 5, 6))
				if (n == nil) or (n < 0) or (n > 59) then
					err_pos = 1
				end
				n = tonumber(string.sub(entry, 8, 8))
				if n == nil then
					err_pos = 1
				end
				if string.sub(entry, 1, 1) ~= "E" 
				and string.sub(entry, 1, 1) ~= "W" then
					err_pos = 1
				end
				if err_pos == 0 then
					ref_nav_lon = tonumber(string.sub(entry, 2, 4)) + (tonumber(string.sub(entry, 5, 8)) / 60)
					if string.sub(entry, 1, 1) == "W" then
						ref_nav_lon = -ref_nav_lon
					end
					entry = ""
					ref_nav_id = "-----"
					ref_nav_rc = ""
					ref_nav_brg = "---"
					ref_nav_dist = "---"
					if ref_nav_lat ~= 0 then
						ref_nav_exec = 1
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		elseif page_takeoff == 2 then
			-- enter ACCELERATION HEIGHT AGL
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					accel_alt = "----"
					accel_alt_num = 1000
					entry = ""
				elseif strlen > 2 and strlen < 5 then
					local n = tonumber(entry)
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 400 or n > 9999 then	-- ACCEL HT AGL min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							accel_alt = string.format("%4d", n)
							entry = ""
							accel_alt_num = n
						end
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			else
				add_fmc_msg(INVALID_INPUT, 1)
			end
		elseif page_descent_forecast == 1 then
			-- entry WIND LAYER 1
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					forec_dir_1 = "---"
					forec_spd_1 = "---"
					entry = ""
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then		-- wind heading 0 - 359
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local wind_dir = string.format("%03d", n)
								n = tonumber(string.sub(entry, 5, strlen))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < 1 or n > 199 then	-- wind speed 1 - 199
										add_fmc_msg(INVALID_INPUT, 1)
									else
										forec_dir_1 = wind_dir
										forec_spd_1 = string.format("%03d", n)
										entry = ""
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_perf == 1 and disable_PERF_3R == 0 then
			-- entry ISA DEV
			local strlen = string.len(entry)
			local alt_temp = crz_alt_num
			local n = 0
			local n_str = ""
			if strlen > 0 then
				if entry == ">DELETE" then
					isa_dev_f = "---"
					isa_dev_c = "---"
					entry = ""
				else
					--if strlen > 0 and strlen < 5 then
					if strlen < 5 then
						n = tonumber(entry)
						if n == nil and strlen > 1 then
							n = tonumber(string.sub(entry, 1, strlen-1))
							if n == nil then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								n_str = string.sub(entry, strlen, strlen)
								if n_str == "C" then 
									if n < -40 or n > 70 then	-- ISA DEV Celsius min and max
										add_fmc_msg(INVALID_INPUT, 1)
									else
										isa_dev_c = string.format("%3d", n)
										n = (n * 9 / 5) + 32
										isa_dev_f = string.format("%3d", n)
										-- calc TC OAT
										n = tonumber(isa_dev_c)
										alt_temp = math.min(alt_temp, 37000)
										tc_oat_c = string.format("%3d", (B738_rescale(0, 15, 37000, -56.5, alt_temp) + n))
										n = tonumber(tc_oat_c)
										n = (n * 9 / 5) + 32
										tc_oat_f = string.format("%3d", n)
										entry = ""
									end
								elseif n_str == "F" then
									if n < -40 or n > 158 then	-- ISA DEV Fahrenheit min and max
										add_fmc_msg(INVALID_INPUT, 1)
									else
										isa_dev_f = string.format("%3d", n)
										n = (n - 32) * 5 / 9
										isa_dev_c = string.format("%3d", n)
										-- calc TC OAT
										n = tonumber(isa_dev_c)
										alt_temp = math.min(alt_temp, 37000)
										tc_oat_c = string.format("%3d", (B738_rescale(0, 15, 37000, -56.5, alt_temp) + n))
										n = tonumber(tc_oat_c)
										n = (n * 9 / 5) + 32
										tc_oat_f = string.format("%3d", n)
										entry = ""
									end
								else
									add_fmc_msg(INVALID_INPUT, 1)
								end
							end
						else
							if n == nil then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								if B738DR_fmc_units == 0 then
									if n < -40 or n > 158 then	-- ISA DEV Fahrenheit min and max
										add_fmc_msg(INVALID_INPUT, 1)
									else
										isa_dev_f = string.format("%3d", n)
										n = (n - 32) * 5 / 9
										isa_dev_c = string.format("%3d", n)
										-- calc TC OAT
										n = tonumber(isa_dev_c)
										alt_temp = math.min(alt_temp, 37000)
										tc_oat_c = string.format("%3d", (B738_rescale(0, 15, 37000, -56.5, alt_temp) + n))
										n = tonumber(tc_oat_c)
										n = (n * 9 / 5) + 32
										tc_oat_f = string.format("%3d", n)
										entry = ""
									end
								else
									if n < -40 or n > 70 then	-- ISA DEV Celsius min and max
										add_fmc_msg(INVALID_INPUT, 1)
									else
										isa_dev_c = string.format("%3d", n)
										n = (n * 9 / 5) + 32
										isa_dev_f = string.format("%3d", n)
										-- calc TC OAT
										n = tonumber(isa_dev_c)
										alt_temp = math.min(alt_temp, 37000)
										tc_oat_c = string.format("%3d", (B738_rescale(0, 15, 37000, -56.5, alt_temp) + n))
										n = tonumber(tc_oat_c)
										n = (n * 9 / 5) + 32
										tc_oat_f = string.format("%3d", n)
										entry = ""
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_perf == 2 then
			-- CRZ max speed kts/mach
			local strlen = string.len(entry)
			if strlen == 0 then
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					crz_max_kts = "   "
					crz_max_mach = "   "
					entry = ""
				else
					if strlen > 2 and  strlen < 6 and string.sub(entry, 1, 2) == "/." then		-- only mach
						local n = tonumber(string.sub(entry, 2, strlen))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(crz_min_mach)
							if nn == nil then
								nn = 0.4
							else
								nn = nn / 1000
							end
							if n > 0.82 or n < nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								n = n * 1000
								crz_max_mach = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen == 3 then			-- only kts
						local n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(crz_min_kts)
							if nn == nil then
								nn = 100
							end
							if n > 340  or n < nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								crz_max_kts = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen > 5 and strlen < 9 and string.sub(entry, 4, 5) == "/." then 	-- kts and mach
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(crz_min_kts)
							if nn == nil then
								nn = 100
							end
							if n > 340 or n < nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local kts = string.format("%03d", n)
									n = tonumber(string.sub(entry, 5, strlen))
									if n == nil then
										add_fmc_msg(INVALID_INPUT, 1)
									else
										nn = tonumber(crz_min_mach)
										if nn == nil then
											nn = 0.4
										else
											nn = nn / 1000
										end
										if n > 0.82 or n < nn then
											add_fmc_msg(INVALID_INPUT, 1)
										else
											n = n * 1000
											crz_max_kts = kts
											entry = ""
										end
									end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		----------
		elseif page_xtras_fmod > 0 then
			fmc_fmod_main(0,3)
		elseif page_xtras_fuel == 1 then
			-- entry fuel
			local kk = 0
			local ll = 0
			if string.len(entry) == 0 then
				kk = simDR_fuel_tank_weight_kg[0] + simDR_fuel_tank_weight_kg[1] + simDR_fuel_tank_weight_kg[2]
				kk = kk / 1000
				if units == 0 then
					kk = kk * 2.204
				end
				entry = string.format("%4.1f", kk)
			else
				if entry == ">DELETE" then
					entry = INVALID_DELETE
				else
					kk = tonumber(entry)
					if kk == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if units == 0 then
							ll = ((simDR_payload_weight / 1000) * 2.204) + kk + 91.3
							if kk >= 1 and kk <= 45.1 and ll <= 174.2 then
								if kk > 17.2 then
									simDR_fuel_tank_weight_kg[0] = 3900
									simDR_fuel_tank_weight_kg[2] = 3900
									simDR_fuel_tank_weight_kg[1] = (kk - 17.2) / 2.204 * 1000
								else
									-- if kk > 1.8 then
										-- kk = kk - 1.8
									-- end
									simDR_fuel_tank_weight_kg[0] = (kk / 2) / 2.204 * 1000
									simDR_fuel_tank_weight_kg[2] = (kk / 2) / 2.204 * 1000
									simDR_fuel_tank_weight_kg[1] = 0 --1800 / 2.204
								end
								mac = calc_mac(simDR_cg)
								mac_zfw = calc_zfw_mac(cg_set_m)
								entry = ""
								gpu_test_enable = 1
								if is_timer_scheduled(gpu_test_reset) == false then
									run_after_time(gpu_test_reset, 1.5)
								end
							else
								add_fmc_msg(INVALID_INPUT, 1)
							end
						else
							ll = (simDR_payload_weight / 1000) + kk + 41.4
							if kk >= 1 and kk <= 20.5 and ll <= 79 then
								if kk > 7.8 then
									simDR_fuel_tank_weight_kg[0] = 3900
									simDR_fuel_tank_weight_kg[2] = 3900
									simDR_fuel_tank_weight_kg[1] = (kk - 7.8) * 1000
								else
									-- if kk > 0.8 then
										-- kk = kk - 0.8
									-- end
									simDR_fuel_tank_weight_kg[0] = (kk / 2) * 1000
									simDR_fuel_tank_weight_kg[2] = (kk / 2) * 1000
									simDR_fuel_tank_weight_kg[1] = 0 --800
								end
								mac = calc_mac(simDR_cg)
								mac_zfw = calc_zfw_mac(cg_set_m)
								gpu_test_enable = 1
								if is_timer_scheduled(gpu_test_reset) == false then
									run_after_time(gpu_test_reset, 1.5)
								end
								entry = ""
							else
								add_fmc_msg(INVALID_INPUT, 1)
							end
						end
					end
				end
			end
		elseif page_xtras_others == 4 then
			if simDR_yaw_nz < 0.30 then
				simDR_yaw_nz = simDR_yaw_nz + 0.01
			else
				simDR_yaw_nz = 0
			end
		elseif page_rte_legs > 0 then
			-- entry WIND DATA
			local strlen = string.len(entry)
			local item = 0
			local button = 3	-- button 3 RSK
			local qqq = 0
			
			if nav_mode == 1 then
				item = legs_num2 + 2
			else
				item = (act_page - 1) * 5 + offset - 1 + button
			end
			
			if strlen > 0 and item <= legs_num2 and item > 0 then
				if entry == ">DELETE" then
					legs_data2[item][39] = ""
					entry = ""
					legs_delete = 1
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then		-- wind heading 0 - 359
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local wind_dir = string.format("%03d", n)
								n = tonumber(string.sub(entry, 5, strlen))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < 1 or n > 199 then	-- wind speed 1 - 199
										add_fmc_msg(INVALID_INPUT, 1)
									else
										legs_data2[item][39] = wind_dir .. "`/" .. string.format("%3d", n)
										if item + 1 <= legs_num2 + 1 then
											for qqq = item + 1, legs_num2 + 1 do
												if item >= tc_idx and item < td_idx and tc_idx ~= 0 and td_idx ~= 0 then
													if qqq >= td_idx then
														break
													end
												end
												if item < tc_idx and tc_idx ~= 0 then
													if qqq >= tc_idx then
														break
													end
												end
												if legs_data2[qqq][39] == "" then
													legs_data2[qqq][39] = wind_dir .. "`/" .. string.format("%3d", n)
												else
													break
												end
											end
										end
										entry = ""
										legs_delete = 1
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			else
				if legs_data2[item][39] ~= "" then
					entry = string.sub(legs_data2[item][39], 1, 3) .. string.sub(legs_data2[item][39], -4, -1)
				elseif legs_data2[item][38] ~= "" then
					entry = string.sub(legs_data2[item][38], 1, 3) .. string.sub(legs_data2[item][38], -4, -1)
				end
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 4RSK
function B738_fmc1_4R_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if page_dep == 1 then
			if ref_rwy2 == "-----" then
				if ref_rwy_sel[4] ~= "-----" then
					ref_rwy2 = ref_rwy_sel[4]
					if ref_sid2 == "------" then
						create_sid_list()
					end
					act_page = 1
					ref_rwy_exec = 1
				end
			end
			rte_add_dep_arr()
		elseif page_arr == 1 then
			if des_app2 == "------" then
				if des_app_sel[4] ~= "------" then
					des_app2 = des_app_sel[4]
					if des_star2 == "------" then
						create_star_list()
					end
					act_page = 1
					des_app_exec = 1
					create_app_tns_list()
				end
			else
				if des_app_tns2 == "------" then
					if des_tns_sel[4] ~= "------" then
						des_app_tns2 = des_tns_sel[4]
						act_page = 1
						des_app_tns_exec = 1
					end
				end
			end
			rte_add_dep_arr()
		elseif page_rte_init == 1 then
			if act_page > 1 then
				local item = 0
				local button = 4	-- button 4 RSK
				local tmp_tmp = 0
				
				item = (act_page - 2) * 5 + button
				tmp_tmp = fpln_num2 + 1
				if fpln_num2 > 0 then
					if item == tmp_tmp then
						--if fpln_data2[fpln_num2][1] ~= "" then
							-- add new direct to navaid
							dir_via_add("", "", entry, "", "", item)
						--end
						item_sel_via = 0
					elseif string.len(entry) == 0 then
						item_sel_via = item
						entry = fpln_data2[item][1]
					elseif item_sel_via > item then
						legs_data2[fpln_data2[item][4]-1][17] = legs_data2[fpln_data2[item][4]-1][17] + 100
						rte_copy(fpln_data2[item_sel_via][4])
						rte_paste(fpln_data2[item][4])
						create_fpln()
						calc_rte_enable2 = 1
						legs_delete = 1
						item_sel_via = 0
						entry = ""
					elseif item <= fpln_num2 then --and fpln_num2 > 1 then
						if item == 1 then
							dir_via_add("", "", entry, "", "", item)
						else
							dir_via_add(fpln_data2[item-1][1], fpln_data2[item-1][3], entry, "", fpln_data2[item][2], item)
						end
						item_sel_via = 0
					end
				end
			end
		elseif page_legs == 1 then
				local item = 0
				local button = 4	-- button 4 RSK
				item = (act_page - 1) * 5 + offset - 1 + button
				
				set_spd_alt_rest(item)
				if entry ~= INVALID_INPUT then
					legs_delete = 1
				end
			
			
					
		elseif page_pos_init == 1 and disable_POS_4R == 0 then
			-- set IRS POS
			if entry == ">DELETE" then
--				B738DR_irs_pos_set = "*****.*******.*"
				irs_pos = "*****.*******.*"
				entry = ""
			else
				if string.len(entry) > 0 then
					local err_pos = 0
					local n = 0
					if string.len(entry) ~= 15
					or string.sub(entry, 6, 6) ~= "."
					or  string.sub(entry, 14, 14) ~= "." then
						err_pos = 1
					end
					n = tonumber(string.sub(entry, 2, 3))
					if (n == nil) or (n < 0) or (n > 90) then
						err_pos = 1
					end
					n = tonumber(string.sub(entry, 4, 5))
					if (n == nil) or (n < 0) or (n > 59) then
						err_pos = 1
					end
					n = tonumber(string.sub(entry, 9, 11))
					if (n == nil) or (n < 0) or (n > 180) then
						err_pos = 1
					end
					n = tonumber(string.sub(entry, 12, 13))
					if (n == nil) or (n < 0) or (n > 59) then
						err_pos = 1
					end
					if string.sub(entry, 1, 1) ~= "N" 
					and string.sub(entry, 1, 1) ~= "S" then
						err_pos = 1
					end
					if string.sub(entry, 8, 8) ~= "E" 
					and string.sub(entry, 8, 8) ~= "W" then
						err_pos = 1
					end
					if err_pos == 0 then
						irs_pos = entry
						entry = ""
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_n1_limit == 1 then
			-- select CLB-2
			clb_2 = "<SEL>"
			clb = "     "
			clb_1 = "     "
			sel_clb_thr = 1
		elseif page_descent_forecast == 1 then
			-- entry WIND LAYER 2
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					forec_dir_2 = "---"
					forec_spd_2 = "---"
					entry = ""
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then		-- wind heading 0 - 359
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local wind_dir = string.format("%03d", n)
								n = tonumber(string.sub(entry, 5, strlen))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < 1 or n > 199 then	-- wind speed 1 - 199
										add_fmc_msg(INVALID_INPUT, 1)
									else
										forec_dir_2 = wind_dir
										forec_spd_2 = string.format("%03d", n)
										entry = ""
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_approach == 1 then
			-- FLAP / SPD
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					app_flap = "--"
					app_spd = "---"
					entry = ""
				elseif strlen == 3 then
					if string.sub(entry, 3, 3) == "/" then
						local flp = string.sub(entry, 1, 2)
						if flp == "15" or flp == "30" or flp == "40" then
							app_flap = flp
							entry = ""
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						local n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if vref_15 ~= "---" and vref_40 ~= "---" then
								local flp_max = tonumber(vref_15)
								local flp_min = tonumber(vref_40)
								if n > flp_max or n < flp_min then	-- SPEED min and max
									add_fmc_msg(INVALID_INPUT, 1)
								else
									app_spd = string.format("%3d", n)
									entry = ""
								end
							end
						end
					end
				elseif strlen == 4 then
					if string.sub(entry, 1, 1) == "/" then
						local n = tonumber(string.sub(entry, 2, 4))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if vref_15 ~= "---" and vref_40 ~= "---" then
								local flp_max = tonumber(vref_15)
								local flp_min = tonumber(vref_40)
								if n > flp_max or n < flp_min then	-- SPEED min and max
									add_fmc_msg(INVALID_INPUT, 1)
								else
									app_spd = string.format("%3d", n)
									entry = ""
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				elseif strlen == 6 then
					if string.sub(entry, 3, 3) == "/" then
						local flp = string.sub(entry, 1, 2)
						if flp == "15" or flp == "30" or flp == "40" then
							local n = tonumber(string.sub(entry, 4, 6))
							if n == nil then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								if vref_15 ~= "---" and vref_40 ~= "---" then
									local flp_max = tonumber(vref_15)
									local flp_min = tonumber(vref_40)
									if n > flp_max or n < flp_min then	-- SPEED min and max
										add_fmc_msg(INVALID_INPUT, 1)
									else
										app_flap = flp
										app_spd = string.format("%3d", n)
										entry = ""
									end
								end
							end
						else
							add_fmc_msg(INVALID_INPUT, 1)
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			end
		elseif page_perf == 1 and disable_PERF_4R == 0 then
			-- entry T/C OAT
			local strlen = string.len(entry)
			local alt_temp = crz_alt_num
			local n = 0
			local n_str = ""
			if strlen > 0 then
				if entry == ">DELETE" then
					tc_oat_f = "---"
					tc_oat_c = "---"
					entry = ""
				else
					--if strlen > 1 and strlen < 5 then
					if strlen < 5 then
						n = tonumber(entry)
						if n == nil and strlen > 1 then
							n = tonumber(string.sub(entry, 1, strlen-1))
							if n == nil then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								n = tonumber(string.sub(entry, 1, strlen-1))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									n_str = string.sub(entry, strlen, strlen)
									if n_str == "C" then 
										if n < -70 or n > 70 then	-- T/C OAT Celsius min and max
											add_fmc_msg(INVALID_INPUT, 1)
										else
											tc_oat_c = string.format("%3d", n)
											n = (n * 9 / 5) + 32
											tc_oat_f = string.format("%3d", n)
											-- calc ISA DEV
											n = tonumber(tc_oat_c)
											alt_temp = math.min(alt_temp, 37000)
											isa_dev_c = string.format("%3d", (n - B738_rescale(0, 15, 37000, -56.5, alt_temp)))
											n = tonumber(isa_dev_c)
											n = (n * 9 / 5) + 32
											isa_dev_f = string.format("%3d", n)
											entry = ""
										end
									elseif n_str == "F" then
										if n < -94 or n > 158 then	-- T/C OAT Fahrenheit min and max
											add_fmc_msg(INVALID_INPUT, 1)
										else
											tc_oat_f = string.format("%3d", n)
											n = (n - 32) * 5 / 9
											tc_oat_c = string.format("%3d", n)
											-- calc ISA DEV
											n = tonumber(tc_oat_c)
											alt_temp = math.min(alt_temp, 37000)
											isa_dev_c = string.format("%3d", (n - B738_rescale(0, 15, 37000, -56.5, alt_temp)))
											n = tonumber(isa_dev_c)
											n = (n * 9 / 5) + 32
											isa_dev_f = string.format("%3d", n)
											entry = ""
										end
									else
										add_fmc_msg(INVALID_INPUT, 1)
									end
								end
							end
						else
							if n == nil then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								if B738DR_fmc_units == 0 then
									if n < -94 or n > 158 then	-- T/C OAT Fahrenheit min and max
										add_fmc_msg(INVALID_INPUT, 1)
									else
										tc_oat_f = string.format("%3d", n)
										n = (n - 32) * 5 / 9
										tc_oat_c = string.format("%3d", n)
										-- calc ISA DEV
										n = tonumber(tc_oat_c)
										alt_temp = math.min(alt_temp, 37000)
										isa_dev_c = string.format("%3d", (n - B738_rescale(0, 15, 37000, -56.5, alt_temp)))
										n = tonumber(isa_dev_c)
										n = (n * 9 / 5) + 32
										isa_dev_f = string.format("%3d", n)
										entry = ""
									end
								else
									if n < -70 or n > 70 then	-- T/C OAT Celsius min and max
										add_fmc_msg(INVALID_INPUT, 1)
									else
										tc_oat_c = string.format("%3d", n)
										n = (n * 9 / 5) + 32
										tc_oat_f = string.format("%3d", n)
										-- calc ISA DEV
										n = tonumber(tc_oat_c)
										alt_temp = math.min(alt_temp, 37000)
										isa_dev_c = string.format("%3d", (n - B738_rescale(0, 15, 37000, -56.5, alt_temp)))
										n = tonumber(isa_dev_c)
										n = (n * 9 / 5) + 32
										isa_dev_f = string.format("%3d", n)
										entry = ""
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_perf == 2 then
			-- DES max speed kts/mach
			local strlen = string.len(entry)
			if strlen == 0 then
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					des_max_kts = "   "
					des_max_mach = "   "
					entry = ""
				else
					if strlen > 2 and  strlen < 6 and string.sub(entry, 1, 2) == "/." then		-- only mach
						local n = tonumber(string.sub(entry, 2, strlen))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(des_min_mach)
							if nn == nil then
								nn = 0.4
							else
								nn = nn / 1000
							end
							if n > 0.82 or n < nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								n = n * 1000
								des_max_mach = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen == 3 then			-- only kts
						local n = tonumber(entry)
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(des_min_kts)
							if nn == nil then
								nn = 100
							end
							if n > 340  or n < nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								des_max_kts = string.format("%03d", n)
								entry = ""
							end
						end
					elseif strlen > 5 and strlen < 9 and string.sub(entry, 4, 5) == "/." then 	-- kts and mach
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							local nn = tonumber(des_min_kts)
							if nn == nil then
								nn = 100
							end
							if n > 340 or n < nn then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local kts = string.format("%03d", n)
									n = tonumber(string.sub(entry, 5, strlen))
									if n == nil then
										add_fmc_msg(INVALID_INPUT, 1)
									else
										nn = tonumber(des_min_mach)
										if nn == nil then
											nn = 0.4
										else
											nn = nn / 1000
										end
										if n > 0.82 or n < nn then
											add_fmc_msg(INVALID_INPUT, 1)
										else
											n = n * 1000
											des_max_kts = kts
											des_max_mach = string.format("%03d", n)
											entry = ""
										end
									end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		----------
		elseif page_xtras_fmod > 0 then
			fmc_fmod_main(0,4)
		elseif page_rte_legs > 0 then
			-- entry WIND DATA
			local strlen = string.len(entry)
			local item = 0
			local button = 4	-- button 4 RSK
			local qqq = 0
			
			if nav_mode == 1 then
				item = legs_num2 + 2
			else
				item = (act_page - 1) * 5 + offset - 1 + button
			end
			
			if strlen > 0 and item <= legs_num2 and item > 0 then
				if entry == ">DELETE" then
					legs_data2[item][39] = ""
					entry = ""
					legs_delete = 1
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then		-- wind heading 0 - 359
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local wind_dir = string.format("%03d", n)
								n = tonumber(string.sub(entry, 5, strlen))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < 1 or n > 199 then	-- wind speed 1 - 199
										add_fmc_msg(INVALID_INPUT, 1)
									else
										legs_data2[item][39] = wind_dir .. "`/" .. string.format("%3d", n)
										if item + 1 <= legs_num2 + 1 then
											for qqq = item + 1, legs_num2 + 1 do
												if item >= tc_idx and item < td_idx and tc_idx ~= 0 and td_idx ~= 0 then
													if qqq >= td_idx then
														break
													end
												end
												if item < tc_idx and tc_idx ~= 0 then
													if qqq >= tc_idx then
														break
													end
												end
												if legs_data2[qqq][39] == "" then
													legs_data2[qqq][39] = wind_dir .. "`/" .. string.format("%3d", n)
												else
													break
												end
											end
										end
										entry = ""
										legs_delete = 1
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			else
				if legs_data2[item][39] ~= "" then
					entry = string.sub(legs_data2[item][39], 1, 3) .. string.sub(legs_data2[item][39], -4, -1)
				elseif legs_data2[item][38] ~= "" then
					entry = string.sub(legs_data2[item][38], 1, 3) .. string.sub(legs_data2[item][38], -4, -1)
				end
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 5RSK
function B738_fmc1_5R_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if page_dep == 1 then
			if ref_rwy2 == "-----" then
				if ref_rwy_sel[5] ~= "-----" then
					ref_rwy2 = ref_rwy_sel[5]
					if ref_sid2 == "------" then
						create_sid_list()
					end
					act_page = 1
					ref_rwy_exec = 1
				end
			end
			rte_add_dep_arr()
		elseif page_arr == 1 then
			if des_app2 == "------" then
				if des_app_sel[5] ~= "------" then
					des_app2 = des_app_sel[5]
					if des_star2 == "------" then
						create_star_list()
					end
					act_page = 1
					des_app_exec = 1
					create_app_tns_list()
				end
			else
				if des_app_tns2 == "------" then
					if des_tns_sel[5] ~= "------" then
						des_app_tns2 = des_tns_sel[5]
						act_page = 1
						des_app_tns_exec = 1
					end
				end
			end
			rte_add_dep_arr()
		elseif page_rte_init == 1 then
			if act_page > 1 then
				local item = 0
				local button = 5	-- button 5 RSK
				local tmp_tmp = 0
				
				item = (act_page - 2) * 5 + button
				tmp_tmp = fpln_num2 + 1
				if fpln_num2 > 0 then
					if item == tmp_tmp then
						--if fpln_data2[fpln_num2][1] ~= "" then
							-- add new direct to navaid
							dir_via_add("", "", entry, "", "", item)
						--end
						item_sel_via = 0
					elseif string.len(entry) == 0 then
						item_sel_via = item
						entry = fpln_data2[item][1]
					elseif item_sel_via > item then
						legs_data2[fpln_data2[item][4]-1][17] = legs_data2[fpln_data2[item][4]-1][17] + 100
						rte_copy(fpln_data2[item_sel_via][4])
						rte_paste(fpln_data2[item][4])
						create_fpln()
						calc_rte_enable2 = 1
						legs_delete = 1
						item_sel_via = 0
						entry = ""
					elseif item <= fpln_num2 then --and fpln_num2 > 1 then
						if item == 1 then
							dir_via_add("", "", entry, "", "", item)
						else
							dir_via_add(fpln_data2[item-1][1], fpln_data2[item-1][3], entry, "", fpln_data2[item][2], item)
						end
						item_sel_via = 0
					end
				end
			end
		elseif page_legs == 1 then
				local item = 0
				local button = 5	-- button 5 RSK
				item = (act_page - 1) * 5 + offset - 1 + button
				
				set_spd_alt_rest(item)
				if entry ~= INVALID_INPUT then
					legs_delete = 1
				end
			
			
			-- if B738DR_fms_exec_light_pilot == 0 then
				-- local item = 0
				-- local button = 5	-- button 5 RSK
				-- local n = 0
				-- local nn = 0
				-- local nnn = 0
				-- local strlen = string.len(entry)
				
				-- item = (act_page - 1) * 5 + offset - 1 + button
				-- if item > legs_num then
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- elseif legs_data[item][1] == "DISCONTINUITY" then
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- elseif entry == ">DELETE" then
					-- legs_data[item][4] = 0
					-- legs_data[item][5] = 0
					-- legs_data[item][6] = 0
					-- entry = ""
					-- msg_chk_alt_constr = 0
					-- vnav_update = 1
				-- else
					-- if strlen < 7 then
						-- -- only SPD or ALT
						-- n = entry_spd_kts(entry, 100, 340, 1)
						-- if n == nil then
							-- n = entry_alt(entry, 100, 41000, 1, 18000)
							-- if n == nil then
								-- add_fmc_msg(INVALID_INPUT, 1)
							-- else
								-- if string.sub(output_str, -1, -1) == "A" then
									-- nn = 43
								-- elseif string.sub(output_str, -1, -1) == "B" then
									-- nn = 45
								-- else
									-- nn = 32
								-- end
								-- legs_data[item][5] = n
								-- legs_data[item][6] = nn
								-- vnav_update = 1
								-- msg_chk_alt_constr = 0
								-- entry = ""
							-- end
						-- else
							-- legs_data[item][4] = n		-- speed
							-- vnav_update = 1
							-- msg_chk_alt_constr = 0
							-- entry = ""
						-- end
					-- else
						-- -- SPD/ALT
						-- n = entry_spd_alt(entry, 100, 340, 100, 41000, 18000)
						-- if n == nil then
							-- add_fmc_msg(INVALID_INPUT, 1)
						-- else
							-- legs_data[item][4] = output_num1		-- speed
							-- if string.sub(output_str2, -1, -1) == "A" then
								-- nn = 43
							-- elseif string.sub(output_str2, -1, -1) == "B" then
								-- nn = 45
							-- else
								-- nn = 32
							-- end
							-- legs_data[item][5] = output_num2		-- altitude
							-- legs_data[item][6] = nn
							-- vnav_update = 1
							-- msg_chk_alt_constr = 0
							-- entry = ""
						-- end
					-- end
				-- end
			-- end
					
		elseif page_takeoff == 2 then
			-- entry THR REDUCTION ALT AGL
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					clb_alt = "----"
					clb_alt_num = 1500
					entry = ""
				elseif strlen > 2 and strlen < 5 then
					local n = tonumber(entry)
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 800 or n > 9999 then	-- THR RED ALT AGL min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							clb_alt = string.format("%4d", n)
							entry = ""
							clb_alt_num = n
						end
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			else
				add_fmc_msg(INVALID_INPUT, 1)
			end
		elseif page_approach == 1 then
			-- WIND CORR
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					wind_corr = "--"
					entry = ""
				elseif strlen < 3 then
					local n = tonumber(entry)
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 5 or n > 20 then	-- WIND CORR min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							wind_corr = string.format("%02d", n)
							entry = ""
						end
					end
				else
					add_fmc_msg(INVALID_INPUT, 1)
				end
			else
				--add_fmc_msg(INVALID_INPUT, 1)
				if wind_corr == "--" then
					entry = 5
				else
					entry = wind_corr
				end
			end
		elseif page_descent_forecast == 1 then
			-- entry WIND LAYER 3
			local strlen = string.len(entry)
			if strlen > 0 then
				if entry == ">DELETE" then
					forec_dir_3 = "---"
					forec_spd_3 = "---"
					entry = ""
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then		-- wind heading 0 - 359
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local wind_dir = string.format("%03d", n)
								n = tonumber(string.sub(entry, 5, strlen))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < 1 or n > 199 then	-- wind speed 1 - 199
										add_fmc_msg(INVALID_INPUT, 1)
									else
										forec_dir_3 = wind_dir
										forec_spd_3 = string.format("%03d", n)
										entry = ""
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_perf == 1 then
			-- entry Trans alt
			local strlen = string.len(entry)
			local n = tonumber(entry)
			local n_str = ""
			if strlen > 0 then
				if entry == ">DELETE" then
					trans_alt = "-----"
					n = 18000
					if crz_alt ~= "*****" then
						n_str = string.sub(crz_alt, 1, 2)
						if crz_alt_num >= n then
							if n_str ~= "FL" then
								--n_str = string.sub(crz_alt)
								n = tonumber(crz_alt) / 100
								crz_alt = "FL" .. string.format("%03d", n)
							end
						else
							if n_str == "FL" then
								n_str = string.sub(crz_alt, 3, 5)
								n = tonumber(n_str) * 100
								crz_alt = string.format("%5d", n)
							end
						end
					end
					entry = ""
				else
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 1000 or n > 99999 then	-- Trans alt min and max
							add_fmc_msg(INVALID_INPUT, 1)
						else
							trans_alt = string.format("%5d", n)
							if crz_alt ~= "*****" then
								n_str = string.sub(crz_alt, 1, 2)
								if crz_alt_num >= n then
									if n_str ~= "FL" then
										--n_str = string.sub(crz_alt, 3, 5)
										n = tonumber(crz_alt) / 100
										crz_alt = "FL" .. string.format("%03d", n)
									end
								else
									if n_str == "FL" then
										n_str = string.sub(crz_alt, 3, 5)
										n = tonumber(n_str) * 100
										crz_alt = string.format("%5d", n)
									end
								end
							end
							entry = ""
						end
					end
				end
			end
		elseif page_ref_nav_data_wpt == 1 then
			local strlen = string.len(entry)
			local ii = 0
			local jj = 0
			local entry_ok = 0
			if strlen > 0 then
				if entry == ">DELETE" and ref_nav_brg ~= "-----" then
					ref_nav_brg = "---"
					ref_nav_dist = "---"
					ref_nav_lat = 0
					ref_nav_lon = 0
					ref_nav_exec = 1
					entry = ""
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						ii = tonumber(string.sub(entry, 1, 3))
						if ii ~= nil then
							if ii >= 0 and ii <= 359 then
								entry_ok = entry_ok + 1
							end
						end
						jj = tonumber(string.sub(entry, 5, -1))
						if jj ~= nil then
							if jj >= 0 and jj <= 999 then
								entry_ok = entry_ok + 1
							end
						end
						entry = ""
					end
					if entry_ok == 2 then
						ref_nav_brg = string.format("%03d", ii)
						ref_nav_dist = string.format("%3d", jj)
						-- calc lat / lon
						if ref_nav_id ~= "-----" then
							calc_brg_dist(ref_nav_id_lat, ref_nav_id_lon, math.rad(tonumber(ref_nav_brg)), tonumber(ref_nav_dist))
							ref_nav_lat = calc_lat
							ref_nav_lon = calc_lon
							ref_nav_exec = 1
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			end
		elseif page_xtras_fuel == 1 then
			entry = string.format("%d", mac)
		elseif page_pos_init == 1 and disable_POS_5R == 0 then
			-- SET IRS HDG
			local strlen = string.len(entry)
			local n = tonumber(entry)
			if strlen == 0 then
				 add_fmc_msg(INVALID_INPUT, 1)
			else
				if entry == ">DELETE" then
					irs_hdg = "---`"
					entry = ""
				else
					if n == nil then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						if n < 0 or n > 359 or strlen ~= 3 then	-- HDG min and max
							-- TO DO INHIBIT FRAC NUMBER
							add_fmc_msg(INVALID_INPUT, 1)
						else
							irs_hdg = string.format("%03d", n)
							irs_hdg = irs_hdg .. "`"
							entry = ""
						end
					end
				end
			end
		---
		elseif page_xtras_fmod > 0 then
			fmc_fmod_main(0,5)
		elseif page_rte_legs > 0 then
			-- entry WIND DATA
			local strlen = string.len(entry)
			local item = 0
			local button = 5	-- button 5 RSK
			local qqq = 0
			
			if nav_mode == 1 then
				item = legs_num2 + 2
			else
				item = (act_page - 1) * 5 + offset - 1 + button
			end
			
			if strlen > 0 and item <= legs_num2 and item > 0 then
				if entry == ">DELETE" then
					legs_data2[item][39] = ""
					entry = ""
					legs_delete = 1
				else
					if strlen > 4 and strlen < 8 and string.sub(entry, 4, 4) == "/" then
						local n = tonumber(string.sub(entry, 1, 3))
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then		-- wind heading 0 - 359
								add_fmc_msg(INVALID_INPUT, 1)
							else
								local wind_dir = string.format("%03d", n)
								n = tonumber(string.sub(entry, 5, strlen))
								if n == nil then
									add_fmc_msg(INVALID_INPUT, 1)
								else
									if n < 1 or n > 199 then	-- wind speed 1 - 199
										add_fmc_msg(INVALID_INPUT, 1)
									else
										legs_data2[item][39] = wind_dir .. "`/" .. string.format("%3d", n)
										if item + 1 <= legs_num2 + 1 then
											for qqq = item + 1, legs_num2 + 1 do
												if item >= tc_idx and item < td_idx and tc_idx ~= 0 and td_idx ~= 0 then
													if qqq >= td_idx then
														break
													end
												end
												if item < tc_idx and tc_idx ~= 0 then
													if qqq >= tc_idx then
														break
													end
												end
												if legs_data2[qqq][39] == "" then
													legs_data2[qqq][39] = wind_dir .. "`/" .. string.format("%3d", n)
												else
													break
												end
											end
										end
										entry = ""
										legs_delete = 1
									end
								end
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				end
			else
				if legs_data2[item][39] ~= "" then
					entry = string.sub(legs_data2[item][39], 1, 3) .. string.sub(legs_data2[item][39], -4, -1)
				elseif legs_data2[item][38] ~= "" then
					entry = string.sub(legs_data2[item][38], 1, 3) .. string.sub(legs_data2[item][38], -4, -1)
				end
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- 6RSK
function B738_fmc1_6R_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		if page_rte_init == 1 then
			if B738DR_fmc_exec_lights == 0 then
				if exec_load_fpln == 1 then
						exec_load_fpln = 2
						-- ACTIVATE Flight plan
						rte_exec = 1
				elseif legs_num > 1 then
					if in_flight_mode == 0 then
						if pre_flt_perf_init == 0 then
							-- go to perf init
							page_perf = 1
							page_rte_init = 0
						else
							-- go to takeoff
							page_takeoff = 1
							page_rte_init = 0
						end
					else
						-- go to offset page
						page_rte_init = 0
						page_offset = 1
						item_sel = 0
						item_sel_via = 0
					end
				else
					if legs_num == 1 and legs_num2 > 1 then
						-- ACTIVATE Flight plan
						rte_exec = 1
					else
						if in_flight_mode == 0 then
							if pre_flt_perf_init == 0 then
								-- go to perf init
								page_perf = 1
								page_rte_init = 0
							else
								-- go to takeoff
								page_takeoff = 1
								page_rte_init = 0
							end
						else
							-- go to offset page
							page_rte_init = 0
							page_offset = 1
							item_sel = 0
							item_sel_via = 0
						end
					end
				end
			end
		elseif page_dep == 1 then
			-- go to route
--			simCMD_FMS_key_fpln:once()
			page_climb = 0
			page_menu = 0
			page_init = 0
			page_ident = 0
			page_takeoff = 0
			page_approach = 0
			page_perf = 0
			page_n1_limit = 0
			page_pos_init = 0
			page_cruise = 0
			page_descent = 0
			--page_clear = 0
			page_route = 0
			page_legs = 0
			page_descent_forecast = 0
			page_rte_init = 1
			page_dep_arr = 0
			page_dep = 0
			page_arr = 0
			act_page = 1
		elseif page_arr == 1 then
			-- go to route
--			simCMD_FMS_key_fpln:once()
			page_climb = 0
			page_menu = 0
			page_init = 0
			page_ident = 0
			page_takeoff = 0
			page_approach = 0
			page_perf = 0
			page_n1_limit = 0
			page_pos_init = 0
			page_cruise = 0
			page_descent = 0
			--page_clear = 0
			page_route = 0
			page_legs = 0
			page_descent_forecast = 0
			page_rte_init = 1
			page_dep_arr = 0
			page_dep = 0
			page_arr = 0
			act_page = 1
		elseif page_legs == 1 then
			local strlen = string.len(entry)
			local n = tonumber(entry)
			
			if B738DR_fmc_exec_lights == 1 then --and legs_intdir == 1 then
				if legs_intdir == 1 then
					if strlen == 3 then
						if n == nil then
							add_fmc_msg(INVALID_INPUT, 1)
						else
							if n < 0 or n > 359 then
								add_fmc_msg(INVALID_INPUT, 1)
							else
								legs_intdir_crs2 = n
								legs_intdir_crs_mod = legs_intdir_crs2
								entry = ""
							end
						end
					else
						add_fmc_msg(INVALID_INPUT, 1)
					end
				else
					if B738DR_capt_map_mode == 3 then
						legs_step = legs_step + 1
						if legs_step > legs_num2 or legs_step < offset then
							legs_step = offset
						end
						if legs_step > legs_num2 then
							legs_step = legs_num2
						end
						page_legs_step = math.floor((legs_step - offset) / 5) + 1
						act_page = page_legs_step
					else
						-- RTE DATA
						page_rte_legs = 1
						page_legs = 0
					end
				end
			else
				if exec_load_fpln == 1 then
					exec_load_fpln = 2
					-- ACTIVATE Flight plan
					rte_exec = 1
				elseif legs_num > 1 then
					if B738DR_capt_map_mode == 3 then
						-- STEP
						-- legs_step = legs_step + 1
						-- if legs_step > legs_num or legs_step < offset then
							-- legs_step = offset
						-- end
						-- if legs_step > legs_num then
							-- legs_step = legs_num
						-- end
						-- page_legs_step = math.floor((legs_step - offset) / 5) + 1
						-- act_page = page_legs_step
						
						-- STEP
						legs_step = legs_step + 1
						if legs_step > legs_num2 or legs_step < offset then
							legs_step = offset
						end
						if legs_step > legs_num2 then
							legs_step = legs_num2
						end
						page_legs_step = math.floor((legs_step - offset) / 5) + 1
						act_page = page_legs_step
					else
						if new_hold == 0 then
							-- RTE DATA
							page_rte_legs = 1
							page_legs = 0
							--act_page = 1
						else
							if in_flight_mode == 1 then
								-- HOLD at PPOS
								item_sel = 0
								item_sel_via = 0
								new_hold_wpt = "PPOS"
								entry = ""
								hold_exec = 1
								page_hold = 1
								page_legs = 0
								act_page = 1
							end
						end
					end
				else
					if legs_num == 1 and legs_num2 > 1 then
						-- ACTIVATE Flight plan
						rte_exec = 1
					else
						if B738DR_capt_map_mode == 3 then
							legs_step = legs_step + 1
							if legs_step > legs_num2 or legs_step < offset then
								legs_step = offset
							end
							if legs_step > legs_num2 then
								legs_step = legs_num2
							end
							page_legs_step = math.floor((legs_step - offset) / 5) + 1
							act_page = page_legs_step
							
							-- legs_step = legs_step + 1
							-- if legs_step > legs_num or legs_step < offset then
								-- legs_step = offset
							-- end
							-- if legs_step > legs_num then
								-- legs_step = legs_num
							-- end
							-- page_legs_step = math.floor((legs_step - offset) / 5) + 1
							-- act_page = page_legs_step
							
						else
							-- if legs_num > 0 and legs_num2 > 1 then
								-- -- ACTIVATE Flight plan
								-- rte_exec = 1
							-- end
							
							-- RTA DATA
							page_rte_legs = 1
							page_legs = 0
							--act_page = 1
						end
					end
				end
			end
		elseif page_hold == 1 then
			if hold_offset_idx == offset and hold_term == 0 then
				hold_exec = 1
				hold_term = 1
			end
		elseif page_takeoff == 1 then
			-- set QRH on / off
			if qrh == " ON" then
				qrh = "OFF"
			else
				qrh = " ON"
			end
			display_update = 1
		elseif page_n1_limit == 1 and disable_N1_6R == 0 then
			if in_flight_mode == 0 then
				-- go to Takeoff page
				page_n1_limit = 0
				page_takeoff = 1
				display_update = 1
			else
				-- select / deselect CLB-2
				if clb_2 == "<SEL>" then
					clb = "<SEL>"
					clb_1 = "     "
					clb_2 = "     "
				else
					clb = "     "
					clb_1 = "     "
					clb_2 = "<SEL>"
				end
				sel_clb_thr = 1
			end
		elseif page_descent_forecast == 1 then
			-- ERASE
			trans_lvl = "-----"
			tai_on_alt = "-----"
			tai_off_alt = "-----"
			forec_isa_dev = "---"
			forec_qnh = "------"
			forec_alt_1 = "-----"
			forec_dir_1 = "---"
			forec_spd_1 = "---"
			forec_alt_2 = "-----"
			forec_dir_2 = "---"
			forec_spd_2 = "---"
			forec_alt_3 = "-----"
			forec_dir_3 = "---"
			forec_spd_3 = "---"
			page_descent_forecast = 0
			page_descent = 1
		elseif page_perf == 1 then
			-- go to N1 limit page
			page_perf = 0
			page_n1_limit = 1
			display_update = 1
		elseif page_perf == 2 then
			-- go to RTA progress page
			-- page_perf = 0
			-- page_rta = 1
		elseif page_pos_init == 1 then
			-- go to Route page
			page_pos_init = 0
			page_rte_init = 1
		elseif page_ident == 1 then
			-- go to Pos init page
			page_ident = 0
			page_pos_init = 1
			display_update = 1
		elseif page_cruise == 1 then
			-- ERASE change cruise alt and spd
			if crz_exec ~= 0 then
				crz_alt = crz_alt_old
				crz_exec = 0
				exec1_light = 0
				crz_alt_num2 = 0
				crz_alt_old = "     "
			end
		elseif page_descent == 1 then
			local delta_alt_crz = B738DR_fmc_cruise_alt - simDR_ap_altitude_dial_ft
			if B738DR_fms_descent_now < 2 and delta_alt_crz > 1000 and des_now_enable == 1 then
				if B738DR_fms_descent_now == 0 then
					B738DR_fms_descent_now = 1
					--exec1_light = 1
				else
					B738DR_fms_descent_now = 0
					--exec1_light = 0
				end
			end
		elseif page_xtras == 1 then
			-- go to MENU
			page_xtras = 0
			page_menu = 1
			act_page = 1
		elseif page_xtras_fmod > 0 then
			-- go to BACK
			page_xtras_fmod = 0
			page_xtras = 1
			act_page = 1
		elseif page_fmod_features > 0 then
			-- go to BACK
			page_fmod_features = 0
			page_xtras_fmod = 1
			act_page = 1
		elseif page_fmod_volumes > 0 then
			-- go to BACK
			page_fmod_volumes = 0
			page_xtras_fmod = 1
			act_page = 1
		elseif page_fmod_announ > 0 then
			-- go to BACK
			page_fmod_announ = 0
			page_xtras = 1
			--page_xtras_fmod = 1
			act_page = 1
		elseif page_fmod_eq > 0 then
			-- go to BACK
			page_fmod_eq = 0
			page_xtras_fmod = 1
			act_page = 1
		elseif page_fmod_flight_ctrl > 0 then
			-- go to BACK
			page_fmod_flight_ctrl = 0
			page_xtras = 1
			--page_xtras_fmod = 1
			act_page = 1
		elseif page_xtras_others > 0 then
			-- go to BACK
			page_xtras_others = 0
			page_xtras = 1
			act_page = 1
		elseif page_xtras_fuel == 1 then
			-- go to BACK
			page_xtras_fuel = 0
			page_xtras = 1
			act_page = 1
		elseif page_rte_legs > 0 then
			-- go to LEGS
			page_rte_legs = 0
			page_legs = 1
		elseif page_ref_nav_data == 1 then
			local strlen = string.len(entry)
			if ref_nav_wpt == "-----" and ref_nav_navaid == "----" and ref_nav_apt == "----" then
				if ref_nav_new == "*****" then
					if strlen == 0 or strlen > 5 then
						add_fmc_msg(INVALID_INPUT, 1)
					else
						ref_nav_new = entry
						nav_data_idx2 = 0
						entry = ""
					end
				else
					-- go to NAV OPTIONS
					page_ref_nav_data = 0
					page_ref_nav_data_wpt = 1
					ref_nav_lat = 0
					ref_nav_lon = 0
					ref_nav_mag_var = ""
					ref_nav_id = "-----"
					ref_nav_rc = ""
					ref_nav_brg = "---"
					ref_nav_dist = "---"
					entry = ""
				end
			else
				-- go to NAV OPTIONS
				page_ref_nav_data = 0
				if ref_nav_wpt ~= "-----" then
					page_ref_nav_data_wpt = 1
				elseif ref_nav_navaid ~= "----" then
					page_ref_nav_data_navaid = 1
				elseif ref_nav_apt ~= "----" then
					page_ref_nav_data_apt = 1
				end
				ref_nav_lat = navaid_list[nav_data_idx][2]
				ref_nav_lon = navaid_list[nav_data_idx][3]
				if navaid_list[nav_data_idx][20] == ">" then
					ref_nav_mag_var = string.format("%3d",(mag_variation_deg(navaid_list[nav_data_idx][2], navaid_list[nav_data_idx][3])))
				else
					if navaid_list[nav_data_idx][20] == "x" then
						ref_nav_mag_var = ">" .. string.format("%3d",(mag_variation_deg(navaid_list[nav_data_idx][2], navaid_list[nav_data_idx][3])))
					else
						ref_nav_mag_var = navaid_list[nav_data_idx][20]
					end
				end
				if navaid_list[nav_data_idx][21] == "" then
					ref_nav_id = "-----"
				else
					ref_nav_id = navaid_list[nav_data_idx][21]
				end
				if navaid_list[nav_data_idx][22] == "" then
					ref_nav_brg = "---"
				else
					ref_nav_brg = navaid_list[nav_data_idx][22]
				end
				if navaid_list[nav_data_idx][23] == "" then
					ref_nav_dist = "---"
				else
					ref_nav_dist = navaid_list[nav_data_idx][23]
				end
				nav_data_idx2 = navaid_list[nav_data_idx][24]
				
				entry = ""
			end
			ref_nav_exec = 0
		end
		
		--end
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- FMC NUMBER BUTTON
function B738_fmc1_0_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "0")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_1_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "1")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_2_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "2")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_3_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "3")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_4_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "4")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_5_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "5")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_6_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "6")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_7_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "7")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_8_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "8")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_9_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "9")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_period_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. ".")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_minus_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "-")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_slash_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "/")
			display_update = 1
		end
		--item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- FMC BUTTON CLR (delete last)
function B738_fmc1_clr_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		local lenstr = string.len(entry)
		if fmc_message_num ~= 0 then
			fmc_message_num = fmc_message_num - 1
			display_update = 1
		else
			if lenstr == 1 then
				entry = ""
				display_update = 1
			elseif lenstr > 1 then
				if string.sub(entry, 1, 1) == ">" then
					entry = ""
				elseif fmc1_msg_alt == 0 then
					entry = string.sub(entry, 1, -2)
				end
				display_update = 1
			end
		end
		
		item_sel = 0
		item_sel_via = 0
		
		--fmc1_msg_alt_rst = 0
		fmc1_msg_alt = 0
		
	elseif phase == 1 then
		if duration > 1 then
			entry = ""
			fmc_message_num = 0
		end
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- FMC BUTTON DEL (delete all)
function B738_fmc1_del_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) > 1 then
				if string.sub(entry, 1, 1) == ">" then
					entry = ""
				else
					entry = ">DELETE"
				end
		else
			entry = ">DELETE"
		end
		item_sel = 0
		item_sel_via = 0
		display_update = 1
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- FMC BUTTON PREVIOUS and NEXT PAGE
function B738_fmc1_prev_page_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		-- if act_page > 1 then
			local act_page_bck = act_page
			act_page = act_page - 1
			if act_page < 1 then
				act_page = max_page
			end
			
			if page_init ~= 0 then
				page_init = act_page
			elseif page_ident ~= 0 then
				page_ident = act_page
			elseif page_takeoff ~= 0 then
				page_takeoff = act_page
			elseif page_approach ~= 0 then
				page_approach = act_page
			elseif page_perf ~= 0 then
				page_perf = act_page
			elseif page_n1_limit~= 0 then
				page_n1_limit = act_page
			elseif page_pos_init ~= 0 then
				page_pos_init = act_page
			elseif page_progress ~= 0 then
				page_progress = act_page
			elseif page_xtras_fmod ~= 0 then
				page_xtras_fmod = act_page
			elseif page_fmod_features ~= 0 then
				page_fmod_features = act_page
			elseif page_fmod_volumes ~= 0 then
				page_fmod_volumes = act_page
			elseif page_fmod_announ ~= 0 then
				page_fmod_announ = act_page
			elseif page_fmod_eq ~= 0 then
				page_fmod_eq = act_page
			elseif page_fmod_flight_ctrl ~= 0 then
				page_fmod_flight_ctrl = act_page
			elseif page_xtras_others ~= 0 then
				page_xtras_others = act_page
			elseif page_xtras ~= 0 then
				page_xtras = act_page
			elseif page_legs == 1 then
				-- if act_page < 1 then
					-- act_page = max_page
				-- end
				if B738DR_capt_map_mode == 3 then
					legs_step = offset + (5 * (act_page - 1))
				end
			elseif page_offset ~= 0 then
				-- if act_page < 1 then
					-- act_page = max_page
				-- end
				page_offset = act_page
			elseif page_hold ~= 0 then
				if hold_exec ~= 0 then
					act_page = act_page_bck
				end
			end
		-- end
		-- if act_page < 1 then
			-- act_page = max_page
		-- end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_next_page_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		-- if act_page < max_page then
			local act_page_bck = act_page
			act_page = act_page + 1
			if act_page > max_page then
				act_page = 1
			end
			
			if page_init ~= 0 then
				page_init = act_page
			elseif page_ident ~= 0 then
				page_ident = act_page
			elseif page_takeoff ~= 0 then
				page_takeoff = act_page
			elseif page_approach ~= 0 then
				page_approach = act_page
			elseif page_perf ~= 0 then
				page_perf = act_page
			elseif page_n1_limit ~= 0 then
				page_n1_limit = act_page
			elseif page_pos_init ~= 0 then
				page_pos_init = act_page
			elseif page_xtras_fmod ~= 0 then
				page_xtras_fmod = act_page
			elseif page_fmod_features ~= 0 then
				page_fmod_features = act_page
			elseif page_fmod_volumes ~= 0 then
				page_fmod_volumes = act_page
			elseif page_fmod_announ ~= 0 then
				page_fmod_announ = act_page
			elseif page_fmod_eq ~= 0 then
				page_fmod_eq = act_page
			elseif page_fmod_flight_ctrl ~= 0 then
				page_fmod_flight_ctrl = act_page
			elseif page_xtras ~= 0 then
				page_xtras = act_page
			elseif page_xtras_others ~= 0 then
				page_xtras_others = act_page
			elseif page_progress ~= 0 then
				page_progress = act_page
			elseif page_legs == 1 then
				-- if act_page > max_page then
					-- act_page = 1
				-- end
				if B738DR_capt_map_mode == 3 then
					legs_step = offset + (5 * (act_page - 1))
				end
			elseif page_offset ~= 0 then
				-- if act_page > max_page then
					-- act_page = 1
				-- end
				page_offset = act_page
			elseif page_hold ~= 0 then
				if hold_exec ~= 0 then
					act_page = act_page_bck
				end
			end
			
		-- end
		-- if act_page > max_page then
			-- act_page = 1
		-- end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

function B738_fmc1_init_ref_CMDhandler(phase, duration)
	
	local qqq = 0
	
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		local irs_align_ok = 0
		if B738DR_irs_left_mode > 1 or B738DR_irs_right_mode > 1 then
			irs_align_ok = 1
		end
		local perf_init_complete = 1
		if gw == "***.*" or cost_index == "***" or reserves == "**.*" or crz_alt == "*****" then
			perf_init_complete = 0
		end
		if perf_exec < 2 then
			perf_init_complete = 0
		end
		
		local ref_des_icao = 1
		if ref_icao == "----" or des_icao == "****" then
			ref_des_icao = 0
		end
		
		local n1_oat = 1
		if oat == "****" then
			n1_oat = 0
		end
		
		reset_fmc_pages()
		if irs_align_ok == 0 then
			page_pos_init = 1
		elseif B738DR_flight_phase == 0 and simDR_on_ground_0 == 1 then
			if ref_des_icao == 0 then
				page_rte_init = 1
			elseif perf_init_complete == 0 then
				page_perf = 1
			elseif n1_oat == 0 then
				page_n1_limit = 1
			else
				page_takeoff = 1
			end
		elseif was_on_air == 1 then
			-- in fligt -> Approach page
			page_approach = 1
			-- gw_app = "***.*"
			-- gw_app_lbs = gw_app
			-- gw_app_kgs = gw_app
			-- gw_app_nul = 0
			-- if legs_num > 1 then
				-- if legs_data[legs_num][40] ~= 0 then
					-- qqq = tonumber(zfw_kgs)
					-- if qqq ~= nil then
						-- qqq = ((tonumber(zfw_kgs) * 1000) + legs_data[legs_num][40]) / 1000
						-- if qqq < 0 then
							-- qqq = 0
						-- end
						-- if units == 0 then
							-- gw_app = string.format("%5.1f", (qqq * 2.204))		-- to lbs
							-- gw_app_lbs = gw_app
							-- gw_app_kgs = string.format("%5.1f", (tonumber(gw_app) / 2.204))		-- to kgs
						-- else
							-- gw_app = string.format("%5.1f", qqq)		-- to kgs
							-- gw_app_kgs = gw_app
							-- gw_app_lbs = string.format("%5.1f", (tonumber(gw_app) * 2.204))		-- to lbs
						-- end
					-- end
				-- end
			-- end
			gw_app_nul = 0
			gw_app = gw
			gw_app_lbs = gw_lbs
			gw_app_kgs = gw_kgs
		else
			page_init = 1
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

function B738_fmc1_menu_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fmc_exec_lights == 0 then
		
			reset_fmc_pages()
			page_menu = 1
			--menu_tick = 0
			-- page_init = 0
			-- page_ident = 0
			-- page_takeoff = 0
			-- page_approach = 0
			-- page_perf = 0
			-- page_n1_limit = 0
			-- page_pos_init = 0
			-- page_climb = 0
			-- page_cruise = 0
			-- page_descent = 0
			-- page_route = 0
			-- page_legs = 0
			-- page_descent_forecast = 0
			-- page_rte_init = 0
			-- page_dep_arr = 0
			-- page_dep = 0
			-- page_arr = 0
			-- page_progress = 0
			-- page_hold = 0
			-- page_xtras_fmod = 0
			-- page_xtras = 0
			-- page_xtras_others = 0
			-- page_sel_wpt = 0
			-- page_sel_wpt2 = 0
			-- page_sel_wpt3 = 0
			-- page_sel_wpt4 = 0
			-- page_offset = 0

		
		--end
		menu_timer = 0
	elseif phase == 1 then
		--if menu_timer > 3 and menu_timer < 5 then
		if duration > 3 and menu_timer == 0 then
			B738_init2()
			entry = ">FMC RESET OK"
			B738DR_fmc_message_warn = 1
			fms_msg_sound = 1
			B738DR_lnav_disconnect = 1
			B738DR_vnav_disconnect = 1
			menu_timer = 1
			--menu_timer = 10
		-- else
			-- menu_timer = menu_timer + SIM_PERIOD
		end
	elseif phase == 2 then
		B738DR_fms_key = 0
		menu_timer = 0
	end
end
function B738_fmc1_n1_lim_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fmc_exec_lights == 0 then
		
			reset_fmc_pages()
			-- page_menu = 0
			-- page_init = 0
			-- page_ident = 0
			-- page_takeoff = 0
			-- page_approach = 0
			-- page_perf = 0
			page_n1_limit = 1
			-- page_pos_init = 0
			-- --page_clear = 0
			-- page_climb = 0
			-- page_cruise = 0
			-- page_descent = 0
			-- page_route = 0
			-- page_legs = 0
			-- page_descent_forecast = 0
			-- page_rte_init = 0
			-- page_dep_arr = 0
			-- page_dep = 0
			-- page_arr = 0
			-- page_progress = 0
			-- page_hold = 0
			-- page_xtras_fmod = 0
			-- page_xtras = 0
			-- page_xtras_others = 0
			-- page_sel_wpt = 0
			-- page_sel_wpt2 = 0
			-- page_sel_wpt3 = 0
			-- page_sel_wpt4 = 0
			-- page_offset = 0

		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_rte_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fmc_exec_lights == 0 then
		
			
			reset_fmc_pages()
			-- page_climb = 0
			-- page_menu = 0
			-- page_init = 0
			-- page_ident = 0
			-- page_takeoff = 0
			-- page_approach = 0
			-- page_perf = 0
			-- page_n1_limit = 0
			-- page_pos_init = 0
			-- page_cruise = 0
			-- page_descent = 0
			-- --page_clear = 0
			-- page_route = 0
			-- page_legs = 0
			-- page_descent_forecast = 0
			page_rte_init = 1
			-- page_dep_arr = 0
			-- page_dep = 0
			-- page_arr = 0
			-- page_progress = 0
			-- page_hold = 0
			-- page_xtras_fmod = 0
			-- page_xtras = 0
			-- page_xtras_others = 0
			-- page_sel_wpt = 0
			-- page_sel_wpt2 = 0
			-- page_sel_wpt3 = 0
			-- page_sel_wpt4 = 0
			-- page_offset = 0

			
			act_page = 1
		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

function B738_fmc1_legs_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fmc_exec_lights == 0 then
		
			reset_fmc_pages()
			-- page_dep_arr = 0
			-- page_climb = 0
			-- page_menu = 0
			-- page_init = 0
			-- page_ident = 0
			-- page_takeoff = 0
			-- page_approach = 0
			-- page_perf = 0
			-- page_n1_limit = 0
			-- page_pos_init = 0
			-- page_cruise = 0
			-- page_descent = 0
			-- --page_clear = 0
			-- page_route = 0
			-- page_descent_forecast = 0
			-- page_rte_init = 0
			-- page_dep = 0
			-- page_arr = 0
			-- page_progress = 0
			-- page_hold = 0
			-- page_xtras_fmod = 0
			-- page_xtras = 0
			-- page_xtras_others = 0
			-- page_sel_wpt = 0
			-- page_sel_wpt2 = 0
			-- page_sel_wpt3 = 0
			-- page_sel_wpt4 = 0
			-- page_offset = 0
			page_legs = 1
			new_hold = 0
			
			if B738DR_capt_map_mode == 3 then
				act_page = page_legs_step
			else
				act_page = 1
			end
		
		--end
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_fix_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		reset_fmc_pages()
		page_fix = 1
		act_page = 1

	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_clb_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fmc_exec_lights == 0 then
		
			reset_fmc_pages()
			page_climb = 1
			-- page_menu = 0
			-- page_init = 0
			-- page_ident = 0
			-- page_takeoff = 0
			-- page_approach = 0
			-- page_perf = 0
			-- page_n1_limit = 0
			-- page_pos_init = 0
			-- page_cruise = 0
			-- page_descent = 0
			-- --page_clear = 0
			-- page_route = 0
			-- page_legs = 0
			-- page_descent_forecast = 0
			-- page_rte_init = 0
			-- page_dep_arr = 0
			-- page_dep = 0
			-- page_arr = 0
			-- page_progress = 0
			-- page_hold = 0
			-- page_xtras_fmod = 0
			-- page_xtras = 0
			-- page_xtras_others = 0
			-- page_sel_wpt = 0
			-- page_sel_wpt2 = 0
			-- page_sel_wpt3 = 0
			-- page_sel_wpt4 = 0
			-- page_offset = 0

		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_crz_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fmc_exec_lights == 0 then
		
			reset_fmc_pages()
			-- page_climb = 0
			-- page_menu = 0
			-- page_init = 0
			-- page_ident = 0
			-- page_takeoff = 0
			-- page_approach = 0
			-- page_perf = 0
			-- page_n1_limit = 0
			-- page_pos_init = 0
			page_cruise = 1
			-- page_descent = 0
			-- --page_clear = 0
			-- page_route = 0
			-- page_legs = 0
			-- page_descent_forecast = 0
			-- page_rte_init = 0
			-- page_dep_arr = 0
			-- page_dep = 0
			-- page_arr = 0
			-- page_progress = 0
			-- page_hold = 0
			-- page_xtras_fmod = 0
			-- page_xtras = 0
			-- page_xtras_others = 0
			-- page_sel_wpt = 0
			-- page_sel_wpt2 = 0
			-- page_sel_wpt3 = 0
			-- page_sel_wpt4 = 0
			-- page_offset = 0

		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_des_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fmc_exec_lights == 0 then
		
			reset_fmc_pages()
			-- page_climb = 0
			-- page_menu = 0
			-- page_init = 0
			-- page_ident = 0
			-- page_takeoff = 0
			-- page_approach = 0
			-- page_perf = 0
			-- page_n1_limit = 0
			-- page_pos_init = 0
			-- page_cruise = 0
			page_descent = 1
			-- --page_clear = 0
			-- page_route = 0
			-- page_legs = 0
			-- page_descent_forecast = 0
			-- page_rte_init = 0
			-- page_dep_arr = 0
			-- page_dep = 0
			-- page_arr = 0
			-- page_progress = 0
			-- page_hold = 0
			-- page_xtras_fmod = 0
			-- page_xtras = 0
			-- page_xtras_others = 0
			-- page_sel_wpt = 0
			-- page_sel_wpt2 = 0
			-- page_sel_wpt3 = 0
			-- page_sel_wpt4 = 0
			-- page_offset = 0

		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_dep_app_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fmc_exec_lights == 0 then
		
			reset_fmc_pages()
			page_dep_arr = 1
			-- page_climb = 0
			-- page_menu = 0
			-- page_init = 0
			-- page_ident = 0
			-- page_takeoff = 0
			-- page_approach = 0
			-- page_perf = 0
			-- page_n1_limit = 0
			-- page_pos_init = 0
			-- page_cruise = 0
			-- page_descent = 0
			-- --page_clear = 0
			-- page_route = 0
			-- page_legs = 0
			-- page_descent_forecast = 0
			-- page_rte_init = 0
			-- page_dep = 0
			-- page_arr = 0
			-- page_progress = 0
			-- page_hold = 0
			-- page_xtras_fmod = 0
			-- page_xtras = 0
			-- page_xtras_others = 0
			-- page_sel_wpt = 0
			-- page_sel_wpt2 = 0
			-- page_sel_wpt3 = 0
			-- page_sel_wpt4 = 0
			-- page_offset = 0

			
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_hold_CMDhandler(phase, duration)
	if phase == 0 then
		local ww = 0
		
		B738DR_fms_key = 1
		
		if B738DR_fmc_exec_lights == 0 then
		
			reset_fmc_pages()
			-- page_dep_arr = 0
			-- page_climb = 0
			-- page_menu = 0
			-- page_init = 0
			-- page_ident = 0
			-- page_takeoff = 0
			-- page_approach = 0
			-- page_perf = 0
			-- page_n1_limit = 0
			-- page_pos_init = 0
			-- page_cruise = 0
			-- page_descent = 0
			-- --page_clear = 0
			-- page_route = 0
			-- --page_legs = 0
			-- page_descent_forecast = 0
			-- page_rte_init = 0
			-- page_dep = 0
			-- page_arr = 0
			-- page_progress = 0
			-- page_xtras_fmod = 0
			-- page_xtras = 0
			-- page_xtras_others = 0
			-- page_sel_wpt = 0
			-- page_sel_wpt2 = 0
			-- page_sel_wpt3 = 0
			-- page_sel_wpt4 = 0
			-- page_offset = 0
			
			--dump_fpln2()
			page_legs = 1
			act_page = 1
			hold_offset = 0
			if hold_data_num2 > 0 then
				for ww = 1, hold_data_num2 do
					if hold_data2[ww] >= offset then
						hold_offset = ww
						break
					end
				end
			end
			if hold_offset == 0 then
				page_hold = 0
				page_legs = 1
				new_hold = 1
			else
				page_hold = 1
				page_legs = 0
				new_hold = 0
			end
			new_hold_wpt = "*****"
			new_hold_inbd = "---"
			new_hold_turn = -1
			new_hold_time = "-.-"
			new_hold_dist = "--.-"
			new_hold_spd = 0
			new_hold_alt = 0
			new_hold_rc = ""
			new_hold_via = ""
			new_hold_lat = 0
			new_hold_lon = 0
			--new_hold_idx = 0
		
		end
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_prog_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		--if B738DR_fmc_exec_lights == 0 then
		
			reset_fmc_pages()
			-- page_dep_arr = 0
			-- page_climb = 0
			-- page_menu = 0
			-- page_init = 0
			-- page_ident = 0
			-- page_takeoff = 0
			-- page_approach = 0
			-- page_perf = 0
			-- page_n1_limit = 0
			-- page_pos_init = 0
			-- page_cruise = 0
			-- page_descent = 0
			-- --page_clear = 0
			-- page_route = 0
			-- page_legs = 0
			-- page_descent_forecast = 0
			-- page_rte_init = 0
			-- page_dep = 0
			-- page_arr = 0
			page_progress = 1
			-- page_hold = 0
			-- page_xtras_fmod = 0
			-- page_xtras = 0
			-- page_xtras_others = 0
			-- page_sel_wpt = 0
			-- page_sel_wpt2 = 0
			-- page_sel_wpt3 = 0
			-- page_sel_wpt4 = 0
			-- page_offset = 0

		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- EXECSK
function B738_fmc1_exec_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		local qq = 0
    local xy = 0
    local apt_ok = 0
	local exec_enable = 0
		--local flying_star = 0
		--local flying_app = 0
		--local change_star = 0
		--local change_app = 0
		
		if B738DR_fmc_exec_lights == 1 then
		
			if page_cruise == 1 then
			
				if B738DR_flight_phase == 3 or B738DR_flight_phase == 4 then
					if crz_alt_num2 > (simDR_altitude_pilot + 200)  then
						crz_exec = 1	-- CRZ CLB
						B738DR_flight_phase = 3
					else
						crz_exec = 2	-- CRZ DES
						B738DR_flight_phase = 4
					end
				end
				
				-- CRZ CLB
				if crz_exec == 1 then
					
					-- engage CRZ CLB
					crz_alt_num = crz_alt_num2
					B738DR_fmc_cruise_alt = crz_alt_num
					simDR_ap_altitude_dial_ft = crz_alt_num
					if B738DR_mcp_alt_dial >= crz_alt_num then
						if simDR_autopilot_altitude_mode ~= 5 then
							simCMD_autopilot_lvl_chg:once()
						end
						B738DR_flight_phase = 3
						B738DR_fms_descent_now = 0
					else
						add_fmc_msg(CHECK_ALT_TGT, 1)
						--B738DR_vnav_disconnect = 1
						B738DR_fmc_message_warn = 1
						B738DR_flight_phase = 1
						vnav_alt_mode = 1
					end
				
				-- CRZ DES
				elseif crz_exec == 2 then
					
					-- engage CRZ DES
					crz_alt_num = crz_alt_num2
					B738DR_fmc_cruise_alt = crz_alt_num
					simDR_ap_altitude_dial_ft = crz_alt_num
					if B738DR_mcp_alt_dial <= crz_alt_num then
						if simDR_autopilot_altitude_mode ~= 4 then
							simDR_ap_vvi_dial = -1000
							simCMD_autopilot_vs_sel:once()
						end
						B738DR_flight_phase = 4
						B738DR_fms_descent_now = 0
					else
						add_fmc_msg(CHECK_ALT_TGT, 1)
						--B738DR_vnav_disconnect = 1
						vnav_alt_mode = 1
					end
				end
				crz_exec = 0
				exec1_light = 0
				crz_alt_num2 = 0
				crz_alt_old = "     "
			end
			
			if page_descent == 1 then
				if B738DR_fms_descent_now == 1 then
					B738DR_fms_descent_now = 2
					if simDR_autopilot_altitude_mode ~= 4 then
						simDR_ap_vvi_dial = -1000
						simCMD_autopilot_vs_sel:once()
					end
					B738DR_flight_phase = 5
					switch_fmc_page(3)
				end
			end
			
			if rte_add_sid_act == 0 and rte_add_star_act == 0 and rte_add_app_act == 0 then
				exec_enable = 1
			end
			if exec_enable == 1 then
				if page_legs > 0 or page_dep > 0 or page_arr > 0 or page_rte_init > 0 or page_climb > 0 or page_rte_legs > 0 then
					if legs_delete == 1 or rte_exec == 1 then
						
						if exec_load_fpln == 2 then
							exec_load_fpln = 0
							ref_icao = ref_icao_x
							des_icao = des_icao_x
							ref_icao_lat = ref_icao_lat_x
							ref_icao_lon = ref_icao_lon_x
							ref_tns_alt = ref_tns_alt_x
							ref_tns_lvl = ref_tns_lvl_x
							ref_icao_alt = ref_icao_alt_x
							des_icao_lat = des_icao_lat_x
							des_icao_lon = des_icao_lon_x
							des_tns_alt = des_tns_alt_x
							des_tns_lvl = des_tns_lvl_x
							des_icao_alt = des_icao_alt_x
							trans_alt = trans_alt_x
							trans_lvl = trans_lvl_x
							ref_gate = ref_gate_x
							co_route = co_route_x
							offset_act = 0
							offset_start = 0
							offset_end = 0
							offset_dist = 0
							offset_side = 0
							crz_alt = "*****"
							crz_alt_num = 0
							crz_alt_num2 = 0
							offset = 0
						end
						
						flying_star = 0
						flying_app = 0
						change_star = 0
						change_app = 0
						
						if B738DR_missed_app_act == 0 and B738DR_flight_phase ~= 8 then
							if first_app_idx ~= 0 and offset >= first_app_idx then
								flying_app = 1
							elseif first_star_idx ~= 0 and offset >= first_star_idx then
								flying_star = 1
							end
							if des_star ~= des_star2 or des_star_trans ~= des_star_trans2 then
								change_star = 1
							end
							if des_app ~= des_app2 or des_app_tns ~= des_app_tns2 then
								change_app = 1
							end
						end
						
						if rte_exec == 1 then
							ref_rwy = ref_rwy2
							ref_sid = ref_sid2
							ref_sid_tns = ref_sid_tns2
							des_app = des_app2
							des_app_tns = des_app_tns2
							des_star = des_star2
							des_star_trans = des_star_trans2
							copy_to_legsdata()
							copy_to_fpln()
						else
							if legs_num > 1 then
								copy_to_legsdata()
								copy_to_fpln()
								
								--- new ---
								ref_rwy = ref_rwy2
								ref_sid = ref_sid2
								ref_sid_tns = ref_sid_tns2
								des_app = des_app2
								des_app_tns = des_app_tns2
								des_star = des_star2
								des_star_trans = des_star_trans2
							end
						end
						legs_delete = 0
						rte_exec = 0
						if offset > legs_num then
							offset = legs_num
						end
						--dump_leg4()
					end
				end
			end
			
			if page_perf == 1 then
				if perf_exec == 1 then
					perf_exec = 2
					B738_calc_vnav_spd()
					vnav_update = 1
				end
			end
			
			
			if page_offset == 1 then
				if offset_act == 2 then
					offset_act = 3
					--dump_leg()
					offset_create()
					copy_to_legsdata()
					--copy_to_legsdata2()
					if offset > legs_num then
						offset = legs_num
					end
				end
			end
			
			if page_legs > 0 then
				if legs_intdir == 1 then
					-- take current position
					last_lat = math.rad(simDR_latitude)
					last_lon = math.rad(simDR_longitude)
					if legs_intdir_crs2 < 0 then
						legs_intdir_crs = -1
					else
						legs_intdir_crs = legs_intdir_crs_mod
					end
					legs_intdir = 0
					legs_intdir_act = 1
					legs_intdir_crs2 = -1
					B738DR_hold_phase = 0
					hold_term = 0
					nav_mode = 0
				end
			end
			
			if exec_enable == 1 then
				if ref_sid_exec == 1 or ref_rwy_exec == 1 or ref_tns_exec == 1 
				or des_star_exec == 1 or des_star_tns_exec == 1 or des_app_exec == 1 or des_app_tns_exec == 1 then
					
					flying_star = 0
					flying_app = 0
					change_star = 0
					change_app = 0
					
					if B738DR_missed_app_act == 0 and B738DR_flight_phase ~= 8 then
						if first_app_idx ~= 0 and offset >= first_app_idx then
							flying_app = 1
						elseif first_star_idx ~= 0 and offset >= first_star_idx then
							flying_star = 1
						end
						if des_star ~= des_star2 or des_star_trans ~= des_star_trans2 then
							change_star = 1
						end
						if des_app ~= des_app2 or des_app_tns ~= des_app_tns2 then
							change_app = 1
						end
					end
					
					if legs_num > 1 then -- flight plan active
						ref_rwy = ref_rwy2
						ref_sid = ref_sid2
						ref_sid_tns = ref_sid_tns2
						des_app = des_app2
						des_app_tns = des_app_tns2
						des_star = des_star2
						des_star_trans = des_star_trans2
					end
					act_page = 1
					
					if ref_sid_exec == 1 or ref_rwy_exec == 1 or ref_tns_exec == 1 then
						offset_act = 0
						offset_start = 0
						offset_end = 0
						offset_dist = 0
						offset_side = 0
						-- add SID
						--rte_add_sid()
						rte_add_sid_act = 1
					end
					if des_star_exec == 1 or des_star_tns_exec == 1 then
						-- rte_add_star()
						-- rte_add_app()
						rte_add_star_act = 1
						rte_add_app_act = 1
					end
					if des_app_exec == 1 or des_app_tns_exec == 1 then
						-- rte_add_star()
						-- rte_add_app()
						rte_add_star_act = 1
						rte_add_app_act = 1
					end
					
					ref_sid_exec = 0
					ref_rwy_exec = 0
					ref_tns_exec = 0
					ref_app_tns_exec = 0
					des_star_exec = 0
					des_star_tns_exec = 0
					des_app_exec = 0
					des_app_tns_exec = 0
					
					if arr_data == 1 then
						--arr_data = 0
						--page_arr = 0
						--page_dep_arr = 1
						if des_icao ~= ref_icao then
							des_icao = ref_icao
							des_icao_x = des_icao
							des_icao_lat = ref_icao_lat
							des_icao_lon = ref_icao_lon
							des_tns_alt = ref_tns_alt
							des_tns_lvl = ref_tns_lvl
							des_icao_alt = ref_icao_alt
							if des_tns_lvl == 0 then
								trans_lvl = "-----"
							else
								qq = des_tns_lvl / 100
								trans_lvl = "FL" .. string.format("%03d", qq)
							end
							legs_num2 = legs_num2 + 1
							legs_data2[legs_num2] = {}
							legs_data2[legs_num2][1] = des_icao
							legs_data2[legs_num2][2] = 0		-- brg
							legs_data2[legs_num2][3] = 0		-- distance
							legs_data2[legs_num2][4] = 0		-- speed
							legs_data2[legs_num2][5] = 0		-- altitude
							legs_data2[legs_num2][6] = 0	-- altitude type
							legs_data2[legs_num2][7] = des_icao_lat		-- latitude
							legs_data2[legs_num2][8] = des_icao_lon		-- longitude
							legs_data2[legs_num2][9] = ""			-- via id
							legs_data2[legs_num2][10] = 0		-- calc speed
							legs_data2[legs_num2][11] = 0		-- calc altitude
							legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
							legs_data2[legs_num2][13] = 0
							legs_data2[legs_num2][14] = 0		-- rest alt
							legs_data2[legs_num2][15] = 0		-- last fuel
							legs_data2[legs_num2][16] = ""
							legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
							legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
							legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR, 3-APP
							legs_data2[legs_num2][20] = 0
							legs_data2[legs_num2][21] = -1
							legs_data2[legs_num2][22] = ""
							legs_data2[legs_num2][23] = 0
							legs_data2[legs_num2][24] = 0
							legs_data2[legs_num2][25] = 0
							legs_data2[legs_num2][26] = 0
							legs_data2[legs_num2][27] = ""
							legs_data2[legs_num2][28] = ""
							legs_data2[legs_num2][29] = ""
							legs_data2[legs_num2][30] = ""
							legs_data2[legs_num2][31] = ""
							legs_data2[legs_num2][32] = 0
							legs_data2[legs_num2][33] = ""
							legs_data2[legs_num2][34] = ""
							legs_data2[legs_num2][35] = ""
							legs_data2[legs_num2][36] = 9
							legs_data2[legs_num2][37] = 0
							legs_data2[legs_num2][38] = ""
							legs_data2[legs_num2][39] = ""
							legs_data2[legs_num2][40] = 0
							legs_num2 = legs_num2 - 1
						end
					end
					
					if legs_num > 1 then -- flight plan active
						copy_to_legsdata()
						
						if des_app == "------" then
							B738DR_missed_app_alt = 0
						else
							B738DR_missed_app_alt = legs_data[legs_num][5]
						end
					else
						calc_rte_enable2 = 1
					end
					--dump_leg4()
					--dump_leg()
					if offset > legs_num then
						offset = legs_num
					end
				end
			end
			
			if ref_exec == 1 then
				ref_exec = 0
				legs_num2 = 0
				perf_exec = 0
				
				ref_icao = ref_icao_x
				des_icao = "****"
				des_icao_x = "****"
				ref_gate = "-----"
				co_route = "------------"
				co_route_x = co_route
				trans_alt = "-----"
				ref_rwy = "-----"
				ref_sid = "------"
				ref_sid_tns = "------"
				des_app = "------"
				des_app_tns = "------"
				des_star = "------"
				des_star_trans = "------"
				----
				ref_rwy2 = "-----"
				ref_sid2 = "------"
				ref_sid_tns2 = "------"
				des_app2 = "------"
				des_app_tns2 = "------"
				des_star2 = "------"
				des_star_trans2 = "------"
				----
				crz_alt = "*****"
				crz_alt_num = 0
				crz_alt_num2 = 0
				offset = 0
				legs_num = 0
				hold_data_num2 = 0
				
				offset_act = 0
				offset_start = 0
				offset_end = 0
				offset_dist = 0
				offset_side = 0
				
				
				if apt_exist(ref_icao) == true then
					ref_icao_lat = icao_latitude
					ref_icao_lon = icao_longitude
					ref_tns_alt = icao_tns_alt
					ref_tns_lvl = icao_tns_lvl
					ref_icao_alt = 0
					if rwy_num > 0 then
						xy = tonumber(ref_data[1][2])
						if xy ~= nil then
							ref_icao_alt = xy
						end
					end
				else
					ref_tns_alt = 0
					ref_tns_lvl = 0
				end
				if ref_tns_alt == 0 then
					trans_alt = "-----"
				else
					trans_alt = string.format("%5d", ref_tns_alt)
				end
				
				arr_data = 0
				airport_pos()
				create_rnw_list()
				create_sid_list()
				
				-- copy_to_legsdata()
				
				B738DR_climb_mode = 3		-- xxxKT/M.xxx CLB
				B738DR_cruise_mode = 2		-- xxxKT/M.xxx CRZ
				B738DR_descent_mode = 2		-- xxxKT/M.xxx SPD DES
				B738DR_flight_phase = 0
				B738DR_fms_descent_now = 0
				des_now_enable = 0
				
			
			end
			
			if des_exec == 1 then
				--offset = 1
				
				des_icao = des_icao_x
				des_exec = 0
				
				if apt_exist(des_icao) == true then
					des_icao_lat = icao_latitude
					des_icao_lon = icao_longitude
					des_tns_alt = icao_tns_alt
					des_tns_lvl = icao_tns_lvl
					des_icao_alt = 2500
					if des_rwy_num > 0 then
						xy = tonumber(des_data[1][5])
						if xy ~= nil then
							des_icao_alt = xy
						end
					end
				else
					des_tns_alt = 0
					des_tns_lvl = 0
				end
				if des_tns_lvl == 0 then
					trans_lvl = "-----"
				else
					apt_ok = des_tns_lvl / 100
					trans_lvl = "FL" .. string.format("%03d", apt_ok)
				end
				
				des_app = "------"
				des_app_tns = "------"
				des_star = "------"
				des_star_trans = "------"
				----
				des_app2 = "------"
				des_app_tns2 = "------"
				des_star2 = "------"
				des_star_trans2 = "------"
				----
				if in_flight_mode == 1 then
					if legs_num2 > 1 then
						for qq = 2, legs_num2 do
							-- change STAR,APP to route
							if legs_data2[qq][19] == 2 or legs_data2[qq][19] == 4
							or legs_data2[qq][19] == 7 or legs_data2[qq][19] == 8 
							or legs_data2[qq][19] == 9 then
								legs_data2[qq][19] = 0	-- wpt type STAR, APP
								legs_data2[qq][4] = 0	-- spd rest
								legs_data2[qq][5] = 0	-- alt rest
								legs_data2[qq][6] = 0	-- alt type rest
							end
							-- clear FAF,FixMA
							legs_data2[qq][17] = 0
							
						end
						last_sid_idx_mod = legs_num2
						id_ed_mod = ""
						idx_ed_mod = 0
						rnav_idx_first_mod = 0
						rnav_idx_last_mod = 0
						-- first_miss_app_idx = 0
						-- last_miss_app_idx = 0
						-- missed_app_via = ""
						-- B738DR_missed_app_act = 0
						rnav_alt_mod = 0
						rnav_vpa_mod = 0
					end
					if B738DR_flight_phase > 4 and B738DR_flight_phase < 8 then	--descent, approach, goaround arm
						B738DR_flight_phase = 1
						B738DR_fms_descent_now = 0
						if B738DR_mcp_alt_dial <= simDR_altitude_pilot and B738DR_altitude_mode == 5 then
							vnav_alt_mode = 1
						end
					end
					altitude_last = simDR_altitude_pilot
				else
					co_route = "------------"
					co_route_x = co_route
					legs_num2 = 1
					hold_data_num2 = 0
					
					offset_act = 0
					offset_start = 0
					offset_end = 0
					offset_dist = 0
					offset_side = 0
					
					ref_rwy = "-----"
					ref_sid = "------"
					ref_sid_tns = "------"
					----
					ref_rwy2 = "-----"
					ref_sid2 = "------"
					ref_sid_tns2 = "------"
					
					-- arr_data = 0
					-- create_rnw_list()
					-- create_star_list()
					-- create_des_app_list()
				end
				
				-- DES ICAO
				legs_num2 = legs_num2 + 1
				legs_data2[legs_num2] = {}
				legs_data2[legs_num2][1] = des_icao
				legs_data2[legs_num2][2] = 0		-- brg
				legs_data2[legs_num2][3] = 0		-- distance
				legs_data2[legs_num2][4] = 0		-- speed
				legs_data2[legs_num2][5] = 0		-- altitude
				legs_data2[legs_num2][6] = 0	-- altitude type
				legs_data2[legs_num2][7] = des_icao_lat		-- latitude
				legs_data2[legs_num2][8] = des_icao_lon		-- longitude
				legs_data2[legs_num2][9] = ""			-- via id
				legs_data2[legs_num2][10] = 0		-- calc speed
				legs_data2[legs_num2][11] = 0		-- calc altitude
				legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
				legs_data2[legs_num2][13] = 0
				legs_data2[legs_num2][14] = 0		-- rest alt
				legs_data2[legs_num2][15] = 0		-- last fuel
				legs_data2[legs_num2][16] = ""
				legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR, 3-APP
				legs_data2[legs_num2][20] = 0
				legs_data2[legs_num2][21] = -1
				legs_data2[legs_num2][22] = ""
				legs_data2[legs_num2][23] = 0
				legs_data2[legs_num2][24] = 0
				legs_data2[legs_num2][25] = 0
				legs_data2[legs_num2][26] = 0
				legs_data2[legs_num2][27] = ""
				legs_data2[legs_num2][28] = ""
				legs_data2[legs_num2][29] = ""
				legs_data2[legs_num2][30] = ""
				legs_data2[legs_num2][31] = ""
				legs_data2[legs_num2][32] = 0
				legs_data2[legs_num2][33] = ""
				legs_data2[legs_num2][34] = ""
				legs_data2[legs_num2][35] = ""
				legs_data2[legs_num2][36] = 9
				legs_data2[legs_num2][37] = 0
				legs_data2[legs_num2][38] = ""
				legs_data2[legs_num2][39] = ""
				legs_data2[legs_num2][40] = 0
				legs_num2 = legs_num2 - 1
				----
				arr_data = 0
				create_rnw_list()
				create_star_list()
				create_des_app_list()
				
				
				copy_to_legsdata()
				--copy_to_legsdata3()
				if offset > legs_num then
					offset = legs_num
				end
			end
			
			-- if rte_exec == 1 then
				-- copy_to_fpln()
				-- rte_exec = 0
			-- end
			
			if page_hold > 0 then
				if hold_exec == 1 then
					
					if hold_term == 0 then
					
						-- if new_hold_inbd == "---" then
							-- add_fmc_msg(INVALID_INPUT, 1)
						-- else
							-- if new_hold == 0 then
								-- rte_edit_hold(hold_idx)
							-- else
								-- if new_hold_idx > 0 then
									-- rte_add_hold(new_hold_idx)
								-- end
							-- end
							copy_to_legsdata()
							--legs_delete = 0
							copy_to_fpln()
							--dump_fpln2()
							
							-- if new_hold == 1 and legs_data[offset][1] == "PPOS" then
								-- nav_mode = 3
								-- B738DR_hold_phase = 1
								-- hold_timer = 0
								-- hold_time_set = 90	-- default time
								-- hold_dist_set = 0
								-- if string.len(legs_data[offset][30]) == 4 then
									-- if string.sub(legs_data[offset][30], 1, 1) == "T" then
										-- hold_time_set = tonumber(string.sub(legs_data[offset][30], 2, -1)) / 1 * 6	-- in secs
										-- if hold_time_set == 0 then
											-- hold_time_set = 90
										-- end
									-- else
										-- hold_dist_set = tonumber(legs_data[offset][30])
										-- if hold_dist_set == nil then
											-- hold_dist_set = 0
										-- else
											-- hold_dist_set = hold_dist_set / 10
										-- end
									-- end
								-- end
							-- end
							entry = ""
							hold_exec = 0
							new_hold = 0
							new_hold_idx = 0
							hold_offset = 0
							if hold_data_num2 > 0 then
								for qq = 1, hold_data_num2 do
									if hold_data2[qq] >= offset then
										hold_offset = qq
										break
									end
								end
							end
						--end
					
					else
						hold_term = 2
						hold_exec = 0
						new_hold_idx = 0
					end
					
				end
			end
			
			if page_ref_nav_data_wpt == 1 then
				if ref_nav_exec == 1 then
					local ref_nav_new_act = 0
					local ii = 0
					
					if nav_data_idx2 == 0 then
						wptx_n = wptx_n + 1
						wptx[wptx_n] = {}
						nav_data_idx2 = wptx_n
					end
					ref_nav_new_act = nav_data_idx2
					
					if ref_nav_new == "*****" then
						wptx[ref_nav_new_act][1] = ref_nav_wpt
					else
						wptx[ref_nav_new_act][1] = ref_nav_new
					end
					wptx[ref_nav_new_act][2] = ref_nav_lat
					wptx[ref_nav_new_act][3] = ref_nav_lon
					if ref_nav_id == "" then
						wptx[ref_nav_new_act][4] = " "
					else
						wptx[ref_nav_new_act][4] = ref_nav_id
					end
					if ref_nav_rc == "" then
						wptx[ref_nav_new_act][5] = " "
					else
						wptx[ref_nav_new_act][5] = ref_nav_rc
					end
					wptx[ref_nav_new_act][6] = ref_nav_brg
					wptx[ref_nav_new_act][7] = ref_nav_dist
					if ref_nav_mag_var == "" then
						wptx[ref_nav_new_act][8] = "x"
					elseif string.sub(ref_nav_mag_var, 1, 1) == ">" then
						wptx[ref_nav_new_act][8] = "x"
					else
						wptx[ref_nav_new_act][8] = ref_nav_mag_var
					end
					save_cust_wpt()
					ref_nav_exec = 0
				end
			end
			
		end
	
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

function B738_fmc1_A_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "A")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_B_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "B")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_C_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "C")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_D_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "D")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_E_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "E")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_F_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "F")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_G_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "G")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_H_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "H")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_I_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "I")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_J_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "J")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_K_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "K")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_L_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "L")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_M_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "M")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_N_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "N")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_O_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "O")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_P_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "P")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_Q_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "Q")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_R_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "R")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_S_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "S")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_T_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "T")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_U_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "U")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_V_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "V")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_W_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "W")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_X_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "X")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_Y_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "Y")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_Z_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. "Z")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc1_SP_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry) < 24 then
			entry = (entry .. " ")
		end
		item_sel = 0
		item_sel_via = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

function B738_autopilot_alt_interv_CMDhandler(phase, duration)
	
	local n = 0
	local nn = 0
	local nnn = 0
	local end_idx = 0
	local temp_spd_rest = 0
	local temp_page = 0
	local temp_key = 0
	local temp_spd_txt = ""
	local restrict_deleted = 0
	local delete_enabled = 0
	
	if phase == 0 then
		B738DR_autopilot_alt_interv_pos = 1
		
		if B738DR_autopilot_vnav_status == 1 then
		
		
			if vnav_alt_mode == 0 then
				if B738DR_flight_phase == 2 or B738DR_flight_phase == 3 or B738DR_flight_phase == 4 then --and desc_enable == 0 then
					if crz_alt_num ~= B738DR_mcp_alt_dial then
						crz_alt_num2 = B738DR_mcp_alt_dial
						-- n = crz_alt_num
						-- if n >= B738DR_trans_alt then
							-- n = n / 100
							-- crz_alt_old = "FL" .. string.format("%03d", n)
						-- else
							-- crz_alt_old = string.format("%5d", n)
						-- end
						-- n = crz_alt_num2
						-- if n >= B738DR_trans_alt then
							-- n = n / 100
							-- crz_alt = "FL" .. string.format("%03d", n)
						-- else
							-- crz_alt = string.format("%5d", n)
						-- end
						if B738DR_flight_phase == 2 then
							if crz_alt_num2 > crz_alt_num then
								--crz_exec = 1	-- CRZ CLB
								if simDR_autopilot_altitude_mode ~= 5 then
									simCMD_autopilot_lvl_chg:once()
								end
								B738DR_flight_phase = 3
								crz_alt_num = crz_alt_num2
								B738DR_fmc_cruise_alt = crz_alt_num
								n = crz_alt_num
								if n >= B738DR_trans_alt then
									n = n / 100
									crz_alt = "FL" .. string.format("%03d", n)
								else
									crz_alt = string.format("%5d", n)
								end
								crz_alt_num2 = 0
								crz_alt_old = "     "
								-- display Cruise page
								page_dep_arr = 0
								page_climb = 0
								page_menu = 0
								page_init = 0
								page_ident = 0
								page_takeoff = 0
								page_approach = 0
								page_perf = 0
								page_n1_limit = 0
								page_pos_init = 0
								page_cruise = 1
								page_descent = 0
								--page_clear = 0
								page_route = 0
								page_legs = 0
								page_descent_forecast = 0
								page_rte_init = 0
								page_dep = 0
								page_arr = 0
								page_progress = 0
								page_hold = 0
								page_xtras_fmod = 0
								page_fmod_features = 0
								page_fmod_volumes = 0
								page_fmod_announ = 0
								page_fmod_eq = 0
								page_fmod_flight_ctrl = 0
								page_xtras = 0
								page_xtras_others = 0
								page_offset = 0
							else
								--crz_exec = 2	-- CRZ DES
								if B738DR_fms_descent_now == 0 then
									B738DR_fms_descent_now = 2
									if simDR_autopilot_altitude_mode ~= 4 then
										simDR_ap_vvi_dial = -1000
										simCMD_autopilot_vs_sel:once()
									end
									B738DR_flight_phase = 5
								end
								--crz_alt_num2 = crz_alt_num
								crz_alt_num2 = 0
								crz_alt_old = "     "
							end
						else
							n = crz_alt_num
							if n >= B738DR_trans_alt then
								n = n / 100
								crz_alt_old = "FL" .. string.format("%03d", n)
							else
								crz_alt_old = string.format("%5d", n)
							end
							n = crz_alt_num2
							if n >= B738DR_trans_alt then
								n = n / 100
								crz_alt = "FL" .. string.format("%03d", n)
							else
								crz_alt = string.format("%5d", n)
							end
							if crz_alt_num2 > simDR_altitude_pilot then
								crz_exec = 1	-- CRZ CLB
							else
								crz_exec = 2	-- CRZ DES
							end
							exec1_light = 1
							-- display Cruise page
							page_dep_arr = 0
							page_climb = 0
							page_menu = 0
							page_init = 0
							page_ident = 0
							page_takeoff = 0
							page_approach = 0
							page_perf = 0
							page_n1_limit = 0
							page_pos_init = 0
							page_cruise = 1
							page_descent = 0
							--page_clear = 0
							page_route = 0
							page_legs = 0
							page_descent_forecast = 0
							page_rte_init = 0
							page_dep = 0
							page_arr = 0
							page_progress = 0
							page_hold = 0
							page_xtras_fmod = 0
							page_fmod_features = 0
							page_fmod_volumes = 0
							page_fmod_announ = 0
							page_fmod_eq = 0
							page_fmod_flight_ctrl = 0
							page_xtras = 0
							page_xtras_others = 0
							page_offset = 0
						end
						--exec1_light = 1
					end
				else
					-- climb
					if B738DR_flight_phase < 2 then
						if B738DR_mcp_alt_dial > crz_alt_num then
							crz_alt_num = B738DR_mcp_alt_dial
							B738DR_fmc_cruise_alt = crz_alt_num
							n = crz_alt_num
							if n >= B738DR_trans_alt then
								n = n / 100
								crz_alt = "FL" .. string.format("%03d", n)
							else
								crz_alt = string.format("%5d", n)
							end
						end
						crz_alt_num2 = 0
						crz_alt_old = "     "
					end
				end
			else
				if B738DR_flight_phase < 2 and B738DR_mcp_alt_dial > (simDR_altitude_pilot + 300) then
					vnav_alt_mode = 0
					if simDR_autopilot_altitude_mode ~= 5 then
						simCMD_autopilot_lvl_chg:once()
					end
					if B738DR_mcp_alt_dial > crz_alt_num then
						crz_alt_num = B738DR_mcp_alt_dial
						B738DR_fmc_cruise_alt = crz_alt_num
						n = crz_alt_num
						if n >= B738DR_trans_alt then
							n = n / 100
							crz_alt = "FL" .. string.format("%03d", n)
						else
							crz_alt = string.format("%5d", n)
						end
					end
					crz_alt_num2 = 0
					crz_alt_old = "     "
				end
				if B738DR_flight_phase == 2 and B738DR_mcp_alt_dial < (simDR_altitude_pilot - 300) then
					vnav_alt_mode = 0
					B738DR_fms_descent_now = 2
					if simDR_autopilot_altitude_mode ~= 4 then
						simDR_ap_vvi_dial = -1000
						simCMD_autopilot_vs_sel:once()
					end
					B738DR_flight_phase = 5
				end
				if B738DR_flight_phase > 4 and B738DR_flight_phase < 8 and B738DR_mcp_alt_dial < (simDR_altitude_pilot - 300) then
					vnav_alt_mode = 0
					B738DR_fms_descent_now = 3
					if simDR_autopilot_altitude_mode ~= 4 then
						simDR_ap_vvi_dial = -1000
						simCMD_autopilot_vs_sel:once()
					end
				end
				-- if B738DR_flight_phase > 1 and B738DR_flight_phase < 5 then
					-- vnav_alt_mode = 0
				-- end
			end
			
			-- once/twice ALT INTV
			if del_all_rest_intv == 0 then
				del_all_rest_intv = 1
				if is_timer_scheduled(del_alt_intv) == false then
					run_after_time(del_alt_intv, 5)	-- 5 seconds
				end
			else
				del_all_rest_intv = 3
				if is_timer_scheduled(del_alt_intv) == true then
					stop_timer(del_alt_intv)
				end
			end
			
			if B738DR_flight_phase < 2 then
				if B738DR_mcp_alt_dial <= crz_alt_num and B738DR_mcp_alt_dial > (simDR_altitude_pilot + 300) then
				-- delete alt restricts to MCP alt
					end_idx = tc_idx - 1
					if end_idx > offset then
						for n = offset, end_idx do
							-- find alt restrict
							if legs_restr_alt_n > 0 then	-- if exist alt restricts
								for nn = 1, legs_restr_alt_n do
									if legs_restr_alt[nn][2] > end_idx then
										-- no alt restricts to T/C
										break
									end
									delete_enabled = 0
									if legs_restr_alt[nn][2] == n and legs_restr_alt[nn][3] < B738DR_mcp_alt_dial then	-- alt restrict found
										delete_enabled = 1
									end
									if legs_restr_alt[nn][2] == n and legs_restr_alt[nn][3] == B738DR_mcp_alt_dial and legs_restr_alt[nn][4] == 45 then	-- B alt restrict found
										delete_enabled = 1
									end
									if delete_enabled == 1 then
										-- exist spd restrict
										temp_spd_rest = 0
										if legs_restr_spd_n > 0 then
											for nnn = 1, legs_restr_spd_n do
												if legs_restr_spd[nnn][2] == n then
													temp_spd_rest = legs_restr_spd[nnn][3]
													break
												end
											end
										end
										legs_data[n][5] = 0
										legs_data[n][6] = 0
										if temp_spd_rest > 0 then
											legs_data[n][4] = temp_spd_rest
										end
										-- once ALT INTV
										if del_all_rest_intv == 1 then
											del_all_rest_intv = 2
											break
										end
									end
								end
							end
							-- once ALT INTV
							if del_all_rest_intv == 2 then
								break
							end
						end
					end
				end
			elseif B738DR_flight_phase > 4 and B738DR_flight_phase < 8 then
			--elseif desc_enable == 1 then
				if B738DR_mcp_alt_dial < (simDR_altitude_pilot - 300) then
				-- delete alt restricts to MCP alt
					end_idx = legs_num
					if end_idx > offset then
						for n = offset, end_idx do
							-- find alt restrict
							if legs_restr_alt_n > 0 then	-- if exist alt restricts
								for nn = 1, legs_restr_alt_n do
									if legs_restr_alt[nn][2] > end_idx then
										-- no alt restricts to END of ROUTE
										break
									end
									delete_enabled = 0
									if legs_restr_alt[nn][2] == n and legs_restr_alt[nn][3] > B738DR_mcp_alt_dial then	-- alt restrict found
										delete_enabled = 1
									end
									if legs_restr_alt[nn][2] == n and legs_restr_alt[nn][3] == B738DR_mcp_alt_dial and legs_restr_alt[nn][4] == 43 then	-- A alt restrict found
										delete_enabled = 1
									end
									if delete_enabled == 1 then
										-- exist spd restrict
										temp_spd_rest = 0
										if legs_restr_spd_n > 0 then
											for nnn = 1, legs_restr_spd_n do
												if legs_restr_spd[nnn][2] == n then
													temp_spd_rest = legs_restr_spd[nnn][3]
													break
												end
											end
										end
										-- not write to default FMC
										legs_data[n][5] = 0
										legs_data[n][6] = 0
										if temp_spd_rest > 0 then
											legs_data[n][4] = temp_spd_rest
										end
										-- once ALT INTV
										if del_all_rest_intv == 1 then
											del_all_rest_intv = 2
											break
										end
									end
								end
							end
							-- once ALT INTV
							if del_all_rest_intv == 2 then
								break
							end
						end
					end
				end
			end
			if del_all_rest_intv == 3 then
				del_all_rest_intv = 0
			end
		
		end	-- vnav status == 1
		
	elseif phase == 2 then
		B738DR_autopilot_alt_interv_pos = 0
	end
end







--*************************************************************************************--
--** 				                 FMC FIRST OFFICER                   	    	 **--
--*************************************************************************************--
--fmcsk
function B738_fmc2_A_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "A")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_B_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "B")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_C_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "C")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_D_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "D")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_E_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "E")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_F_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "F")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_G_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "G")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_H_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "H")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_I_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "I")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_J_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "J")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_K_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "K")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_L_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "L")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_M_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "M")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_N_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "N")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_O_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "O")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_P_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "P")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_Q_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "Q")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_R_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "R")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_S_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "S")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_T_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "T")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_U_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "U")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_V_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "V")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_W_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "W")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_X_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "X")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_Y_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "Y")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_Z_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "Z")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_SP_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. " ")
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

function B738_fmc2_0_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "0")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_1_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "1")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_2_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "2")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_3_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "3")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_4_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "4")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_5_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "5")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_6_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "6")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_7_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "7")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_8_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "8")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_9_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "9")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_period_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. ".")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_minus_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "-")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_slash_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) < 24 then
			entry2 = (entry2 .. "/")
			display_update = 1
		end
		item_sel2 = 0
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- FMC BUTTON CLR (delete last)
function B738_fmc2_clr_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		local lenstr = string.len(entry2)
		-- if fmc_message_num2 ~= 0 then
			-- fmc_message_num2 = fmc_message_num2 - 1
			-- display_update = 1
		if fmc_message_num ~= 0 then
			fmc_message_num = fmc_message_num - 1
			display_update = 1
		else
			if lenstr == 1 then
				entry2 = ""
				display_update = 1
			elseif lenstr > 1 then
				if string.sub(entry2, 1, 1) == ">" then
					entry2 = ""
				else
					entry2 = string.sub(entry2, 1, -2)
				end
				display_update = 1
			end
		end
		
		item_sel2 = 0
		
		
		--fmc2_msg_alt_rst = 0
		fmc2_msg_alt = 0
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- FMC BUTTON DEL (delete all)
function B738_fmc2_del_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		if string.len(entry2) > 1 then
				if string.sub(entry2, 1, 1) == ">" then
					entry2 = ""
				else
					entry2 = ">DELETE"
				end
		else
			entry2 = ">DELETE"
		end
		item_sel2 = 0
		display_update = 1
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end


-- FMC BUTTON PREVIOUS and NEXT PAGE
function B738_fmc2_prev_page_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		if act_page2 > 1 then
			act_page2 = act_page2 - 1
			if page_init2 ~= 0 then
				page_init2 = act_page2
			elseif page_ident2 ~= 0 then
				page_ident2 = act_page2
			elseif page_takeoff2 ~= 0 then
				page_takeoff2 = act_page2
			elseif page_approach2 ~= 0 then
				page_approach2 = act_page2
			elseif page_perf2 ~= 0 then
				page_perf2 = act_page2
			elseif page_n1_limit2~= 0 then
				page_n1_limit2 = act_page2
			elseif page_pos_init2 ~= 0 then
				page_pos_init2 = act_page2
			elseif page_progress2 ~= 0 then
				page_progress2 = act_page2
			elseif page_xtras_fmod2 ~= 0 then
				page_xtras_fmod2 = act_page2
			elseif page_xtras_others2 ~= 0 then
				page_xtras_others2 = act_page2
			elseif page_xtras2 ~= 0 then
				page_xtras2 = act_page2
			elseif page_legs2 == 1 then
				if B738DR_fo_map_mode == 3 then
					legs_step2 = offset + (5 * (act_page2 - 1))
				end
			elseif page_offset2 ~= 0 then
				page_offset2 = act_page2
			end
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_next_page_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		if act_page2 < max_page2 then
			act_page2 = act_page2 + 1
			if page_init2 ~= 0 then
				page_init2 = act_page2
			elseif page_ident2 ~= 0 then
				page_ident2 = act_page2
			elseif page_takeoff2 ~= 0 then
				page_takeoff2 = act_page2
			elseif page_approach2 ~= 0 then
				page_approach2 = act_page2
			elseif page_perf2 ~= 0 then
				page_perf2 = act_page2
			elseif page_n1_limit2 ~= 0 then
				page_n1_limit2 = act_page2
			elseif page_pos_init2 ~= 0 then
				page_pos_init2 = act_page2
			elseif page_xtras_fmod2 ~= 0 then
				page_xtras_fmod2 = act_page2
			elseif page_xtras2 ~= 0 then
				page_xtras2 = act_page2
			elseif page_xtras_others2 ~= 0 then
				page_xtras_others2 = act_page2
			elseif page_progress2 ~= 0 then
				page_progress2 = act_page2
			elseif page_legs2 == 1 then
				if B738DR_fo_map_mode == 3 then
					legs_step2 = offset + (5 * (act_page2 - 1))
				end
			elseif page_offset2 ~= 0 then
				page_offset2 = act_page2
			end
			
		end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end


function B738_fmc2_1L_CMDhandler(phase, duration)
end
function B738_fmc2_2L_CMDhandler(phase, duration)
end
function B738_fmc2_3L_CMDhandler(phase, duration)
end
function B738_fmc2_4L_CMDhandler(phase, duration)
end
function B738_fmc2_5L_CMDhandler(phase, duration)
end
function B738_fmc2_6L_CMDhandler(phase, duration)
end

function B738_fmc2_1R_CMDhandler(phase, duration)
end
function B738_fmc2_2R_CMDhandler(phase, duration)
end
function B738_fmc2_3R_CMDhandler(phase, duration)
end
function B738_fmc2_4R_CMDhandler(phase, duration)
end
function B738_fmc2_5R_CMDhandler(phase, duration)
end
function B738_fmc2_6R_CMDhandler(phase, duration)
	
	if phase == 0 then
		B738DR_fms_key = 1
		
		if page_legs2 == 1 then
			local strlen = string.len(entry)
			local n = tonumber(entry)
			
			if B738DR_fmc_exec_lights == 1 then --and legs_intdir == 1 then
				if legs_intdir == 1 then
				-----
				else
					if B738DR_fo_map_mode == 3 then
						legs_step2 = legs_step2 + 1
						if legs_step2 > legs_num2 or legs_step2 < offset then
							legs_step2 = offset
						end
						if legs_step2 > legs_num2 then
							legs_step2 = legs_num2
						end
						page_legs_step2 = math.floor((legs_step2 - offset) / 5) + 1
						act_page2 = page_legs_step2
					end
				end
			else
				if exec_load_fpln == 1 then
					exec_load_fpln = 2
					-- ACTIVATE Flight plan
					rte_exec = 1
				elseif legs_num > 1 then
					if B738DR_fo_map_mode == 3 then
						legs_step2 = legs_step2 + 1
						if legs_step2 > legs_num2 or legs_step2 < offset then
							legs_step2 = offset
						end
						if legs_step2 > legs_num2 then
							legs_step2 = legs_num2
						end
						page_legs_step2 = math.floor((legs_step2 - offset) / 5) + 1
						act_page2 = page_legs_step2
					-- else
						-- if new_hold == 0 then
							-- -- RTA DATA
						-- else
							-- if in_flight_mode == 1 then
								-- -- HOLD at PPOS
								-- item_sel = 0
								-- item_sel_via = 0
								-- new_hold_wpt = "PPOS"
								-- entry = ""
								-- hold_exec = 1
								-- page_hold = 1
								-- page_legs = 0
								-- act_page = 1
							-- end
						-- end
					end
				else
					if legs_num == 1 and legs_num2 > 1 then
						-- ACTIVATE Flight plan
						rte_exec = 1
					else
						if B738DR_fo_map_mode == 3 then
							legs_step2 = legs_step2 + 1
							if legs_step2 > legs_num2 or legs_step2 < offset then
								legs_step2 = offset
							end
							if legs_step2 > legs_num2 then
								legs_step2 = legs_num2
							end
							page_legs_step2 = math.floor((legs_step2 - offset) / 5) + 1
							act_page2 = page_legs_step2
							
						else
							-- RTA DATA
						end
					end
				end
			end
		end
		
		
		
		-- if legs_num2 > 1 then
			-- if B738DR_fo_map_mode == 3 then
				-- -- STEP
				-- legs_step2 = legs_step2 + 1
				-- if legs_step2 > legs_num2 or legs_step2 < offset then
					-- legs_step2 = offset
				-- end
				-- if legs_step2 > legs_num2 then
					-- legs_step2 = legs_num2
				-- end
				-- page_legs_step2 = math.floor((legs_step2 - offset) / 5) + 1
				-- act_page2 = page_legs_step2
			-- end
		-- else
			-- if legs_num2 > 0 and legs_num2 > 1 then
				-- -- ACTIVATE Flight plan
				-- -- rte_exec = 1
			-- else
				-- if B738DR_fo_map_mode == 3 then
					-- legs_step2 = legs_step2 + 1
					-- if legs_step2 > legs_num2 or legs_step2 < offset then
						-- legs_step2 = offset
					-- end
					-- if legs_step2 > legs_num2 then
						-- legs_step2 = legs_num2
					-- end
					-- page_legs_step2 = math.floor((legs_step2 - offset) / 5) + 1
					-- act_page2 = page_legs_step2
				-- else
					-- -- RTA DATA
				-- end
			-- end
		-- end
	
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end


function B738_fmc2_init_ref_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fms_exec_light_copilot == 0 then
		
			local irs_align_ok = 0
			if B738DR_irs_left_mode > 1 or B738DR_irs_right_mode > 1 then
				irs_align_ok = 1
			end
			local perf_init_complete = 1
			if gw == "***.*" or cost_index == "***" or reserves == "**.*" or crz_alt == "*****" then
				perf_init_complete = 0
			end
			if perf_exec < 2 then
				perf_init_complete = 0
			end
			
			local ref_des_icao = 1
			if ref_icao == "----" or des_icao == "****" then
				ref_des_icao = 0
			end
			if irs_align_ok == 0 then
				-- Pos Init (index) page
				-- page_menu2 = 0
				-- page_init2 = 0
				-- page_ident2 = 0
				-- page_takeoff2 = 0
				-- page_approach2 = 0
				-- page_perf2 = 0
				-- page_n1_limit2 = 0
				-- page_pos_init2 = 1
				-- page_climb2 = 0
				-- page_cruise2 = 0
				-- page_descent2 = 0
				-- page_descent_forecast2 = 0
				-- page_rte_init2 = 0
				-- page_dep_arr2 = 0
				-- page_dep2 = 0
				-- page_arr2 = 0
				reset_fmc_pages_fo()
				page_pos_init2 = 1
			elseif B738DR_flight_phase == 0 and simDR_on_ground_0 == 1 then
				if ref_des_icao == 0 then
					-- page_menu2 = 0
					-- page_init2 = 0
					-- page_ident2 = 0
					-- page_takeoff2 = 0
					-- page_approach2 = 0
					-- page_perf2 = 0
					-- page_n1_limit2 = 0
					-- page_pos_init2 = 0
					-- page_climb2 = 0
					-- page_cruise2 = 0
					-- page_descent2 = 0
					-- page_descent_forecast2 = 0
					-- page_rte_init2 = 1
					-- page_dep_arr2 = 0
					-- page_dep2 = 0
					-- page_arr2 = 0
					reset_fmc_pages_fo()
					page_rte_init2 = 1
				elseif perf_init_complete == 0 then
					-- On the graound -> Perf Init page
					-- page_menu2 = 0
					-- page_init2 = 0
					-- page_ident2 = 0
					-- page_takeoff2 = 0
					-- page_approach2 = 0
					-- page_perf2 = 1
					-- page_n1_limit2 = 0
					-- page_pos_init2 = 0
					-- page_climb2 = 0
					-- page_cruise2 = 0
					-- page_descent2 = 0
					-- page_descent_forecast2 = 0
					-- page_rte_init2 = 0
					-- page_dep_arr2 = 0
					-- page_dep2 = 0
					-- page_arr2 = 0
					reset_fmc_pages_fo()
					page_perf2 = 1
				else
					-- On the graound -> Takeoff page
					-- page_menu2 = 0
					-- page_init2 = 0
					-- page_ident2 = 0
					-- page_takeoff2 = 1
					-- page_approach2 = 0
					-- page_perf2 = 0
					-- page_n1_limit2 = 0
					-- page_pos_init2 = 0
					-- page_climb2 = 0
					-- page_cruise2 = 0
					-- page_descent2 = 0
					-- page_descent_forecast2 = 0
					-- page_rte_init2 = 0
					-- page_dep_arr2 = 0
					-- page_dep2 = 0
					-- page_arr2 = 0
					reset_fmc_pages_fo()
					page_takeoff2 = 1
				end
			elseif was_on_air == 1 then
				-- in fligt -> Approach page
				-- page_menu2 = 0
				-- page_init2 = 0
				-- page_ident2 = 0
				-- page_takeoff2 = 0
				-- page_approach2 = 1
				-- page_perf2 = 0
				-- page_n1_limit2 = 0
				-- page_pos_init2 = 0
				-- page_climb2 = 0
				-- page_cruise2 = 0
				-- page_descent2 = 0
				-- page_descent_forecast2 = 0
				-- page_rte_init2 = 0
				-- page_dep_arr2 = 0
				-- page_dep2 = 0
				-- page_arr2 = 0
				reset_fmc_pages_fo()
				page_approach2 = 1
			else
				-- Pos Init page
				-- page_menu2 = 0
				-- page_init2 = 1
				-- page_ident2 = 0
				-- page_takeoff2 = 0
				-- page_approach2 = 0
				-- page_perf2 = 0
				-- page_n1_limit2 = 0
				-- page_pos_init2 = 0
				-- page_climb2 = 0
				-- page_cruise2 = 0
				-- page_descent2 = 0
				-- page_descent_forecast2 = 0
				-- page_rte_init2 = 0
				-- page_dep_arr2 = 0
				-- page_dep2 = 0
				-- page_arr2 = 0
				reset_fmc_pages_fo()
				page_init2 = 1
			end
			-- page_progress2 = 0
			-- page_route2 = 0
			-- page_legs2 = 0
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0

			
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_menu_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fms_exec_light_copilot == 0 then
			--menu_tick = 0
			-- page_menu2 = 1
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 0
			-- page_pos_init2 = 0
			-- page_climb2 = 0
			-- page_cruise2 = 0
			-- page_descent2 = 0
			-- page_route2 = 0
			-- page_legs2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 0
			-- page_dep_arr2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 0
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0
			
			reset_fmc_pages_fo()
			page_menu2 = 1
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_n1_lim_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fms_exec_light_copilot == 0 then
		
			-- page_menu2 = 0
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 1
			-- page_pos_init2 = 0
			-- page_climb2 = 0
			-- page_cruise2 = 0
			-- page_descent2 = 0
			-- page_route2 = 0
			-- page_legs2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 0
			-- page_dep_arr2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 0
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0

			reset_fmc_pages_fo()
			page_n1_limit2 = 1
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_rte_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fms_exec_light_copilot == 0 then
		
			-- page_climb2 = 0
			-- page_menu2 = 0
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 0
			-- page_pos_init2 = 0
			-- page_cruise2 = 0
			-- page_descent2 = 0
			-- page_route2 = 0
			-- page_legs2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 1
			-- page_dep_arr2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 0
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0

			reset_fmc_pages_fo()
			page_rte_init2 = 1
			
			act_page = 1
		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

function B738_fmc2_legs_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fms_exec_light_copilot == 0 then
		
			-- page_dep_arr2 = 0
			-- page_climb2 = 0
			-- page_menu2 = 0
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 0
			-- page_pos_init2 = 0
			-- page_cruise2 = 0
			-- page_descent2 = 0
			-- page_route2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 0
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0
			
			
			reset_fmc_pages_fo()
			page_legs2 = 1
			new_hold = 0
			
			if B738DR_fo_map_mode == 3 then
				act_page2 = page_legs_step2
			else
				act_page2 = 1
			end
		
		--end
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_fix_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
			-- page_climb2 = 0
			-- page_menu2 = 0
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 0
			-- page_pos_init2 = 0
			-- page_cruise2 = 0
			-- page_descent2 = 0
			-- page_route2 = 0
			-- page_legs2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 0
			-- page_dep_arr2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 0
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0
			
			reset_fmc_pages_fo()
			page_fix2 = 1
			act_page2 = 1
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_clb_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fms_exec_light_copilot == 0 then
		
			-- page_climb2 = 1
			-- page_menu2 = 0
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 0
			-- page_pos_init2 = 0
			-- page_cruise2 = 0
			-- page_descent2 = 0
			-- page_route2 = 0
			-- page_legs2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 0
			-- page_dep_arr2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 0
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0

			reset_fmc_pages_fo()
			page_climb2 = 1
		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_crz_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fms_exec_light_copilot == 0 then
		
			-- page_climb2 = 0
			-- page_menu2 = 0
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 0
			-- page_pos_init2 = 0
			-- page_cruise2 = 1
			-- page_descent2 = 0
			-- page_route2 = 0
			-- page_legs2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 0
			-- page_dep_arr2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 0
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0

			reset_fmc_pages_fo()
			page_cruise2 = 1
		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_des_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fms_exec_light_copilot == 0 then
		
			-- page_climb2 = 0
			-- page_menu2 = 0
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 0
			-- page_pos_init2 = 0
			-- page_cruise2 = 0
			-- page_descent2 = 1
			-- page_route2 = 0
			-- page_legs2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 0
			-- page_dep_arr2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 0
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0

			reset_fmc_pages_fo()
			page_descent2 = 1
		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_dep_app_CMDhandler(phase, duration)
	if phase == 0 then
		
		B738DR_fms_key = 1
		
		--if B738DR_fms_exec_light_copilot == 0 then
		
			-- page_dep_arr2 = 1
			-- page_climb2 = 0
			-- page_menu2 = 0
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 0
			-- page_pos_init2 = 0
			-- page_cruise2 = 0
			-- page_descent2 = 0
			-- page_route2 = 0
			-- page_legs2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 0
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0

			reset_fmc_pages_fo()
			page_dep_arr2 = 1
			
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_hold_CMDhandler(phase, duration)
	if phase == 0 then
		local ww = 0
		
		B738DR_fms_key = 1
		
		--if B738DR_fms_exec_light_copilot == 0 then
		
			-- page_dep_arr2 = 0
			-- page_climb2 = 0
			-- page_menu2 = 0
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 0
			-- page_pos_init2 = 0
			-- page_cruise2 = 0
			-- page_descent2 = 0
			-- page_route2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0
			
			reset_fmc_pages_fo()
			act_page2 = 1
			-- -- hold_offset = 0
			-- -- if hold_data_num2 > 0 then
				-- -- for ww = 1, hold_data_num2 do
					-- -- if hold_data2[ww] >= offset then
						-- -- hold_offset = ww
						-- -- break
					-- -- end
				-- -- end
			-- -- end
			-- -- if hold_offset == 0 then
				-- -- page_hold2 = 0
				-- -- page_legs2 = 1
				-- -- new_hold = 1
			-- -- else
				-- -- page_hold2 = 1
				-- -- page_legs2 = 0
				-- -- new_hold = 0
			-- -- end
			-- new_hold_wpt = "*****"
			-- new_hold_inbd = "---"
			-- new_hold_turn = -1
			-- new_hold_time = "-.-"
			-- new_hold_dist = "--.-"
			-- new_hold_spd = 0
			-- new_hold_alt = 0
			-- new_hold_rc = ""
			-- new_hold_via = ""
			-- new_hold_lat = 0
			-- new_hold_lon = 0
			-- new_hold_idx = 0
		
		--end
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end
function B738_fmc2_prog_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		
		--if B738DR_fmc_exec_lights == 0 then
		
			-- page_dep_arr2 = 0
			-- page_climb2 = 0
			-- page_menu2 = 0
			-- page_init2 = 0
			-- page_ident2 = 0
			-- page_takeoff2 = 0
			-- page_approach2 = 0
			-- page_perf2 = 0
			-- page_n1_limit2 = 0
			-- page_pos_init2 = 0
			-- page_cruise2 = 0
			-- page_descent2 = 0
			-- page_route2 = 0
			-- page_legs2 = 0
			-- page_descent_forecast2 = 0
			-- page_rte_init2 = 0
			-- page_dep2 = 0
			-- page_arr2 = 0
			-- page_progress2 = 1
			-- page_hold2 = 0
			-- page_xtras_fmod2 = 0
			-- page_xtras2 = 0
			-- page_xtras_others2 = 0
			-- page_sel_wpt_2 = 0
			-- page_sel_wpt2_2 = 0
			-- page_sel_wpt3_2 = 0
			-- page_sel_wpt4_2 = 0
			-- page_offset2 = 0

			reset_fmc_pages_fo()
			page_progress2 = 1
		
		--end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end

-- EXECSK2
function B738_fmc2_exec_CMDhandler(phase, duration)
	if phase == 0 then
		B738DR_fms_key = 1
		-- local qq = 0
		-- --local flying_star = 0
		-- --local flying_app = 0
		-- --local change_star = 0
		-- --local change_app = 0
		
		-- if B738DR_fms_exec_light_pilot == 1 then
		
			-- if B738DR_flight_phase == 3 or B738DR_flight_phase == 4 then
				-- if crz_alt_num2 > (simDR_altitude_pilot + 200)  then
					-- crz_exec = 1	-- CRZ CLB
					-- B738DR_flight_phase = 3
				-- else
					-- crz_exec = 2	-- CRZ DES
					-- B738DR_flight_phase = 4
				-- end
			-- end
			
			-- -- CRZ CLB
			-- if crz_exec == 1 then
				
				-- -- engage CRZ CLB
				-- crz_alt_num = crz_alt_num2
				-- B738DR_fmc_cruise_alt = crz_alt_num
				-- simDR_ap_altitude_dial_ft = crz_alt_num
				-- if B738DR_mcp_alt_dial >= crz_alt_num then
					-- if simDR_autopilot_altitude_mode ~= 5 then
						-- simCMD_autopilot_lvl_chg:once()
					-- end
					-- B738DR_flight_phase = 3
				-- else
					-- -- fmc_message_num = fmc_message_num + 1
					-- -- fmc_message[fmc_message_num] = CHECK_ALT_TGT
					-- -- fms_msg_sound = 1
					-- add_fmc_msg(CHECK_ALT_TGT, 1)
					-- --B738DR_vnav_disconnect = 1
					-- B738DR_fmc_message_warn = 1
					-- B738DR_flight_phase = 1
					-- vnav_alt_mode = 1
				-- end
			
			-- -- CRZ DES
			-- elseif crz_exec == 2 then
				
				-- -- engage CRZ DES
				-- crz_alt_num = crz_alt_num2
				-- B738DR_fmc_cruise_alt = crz_alt_num
				-- simDR_ap_altitude_dial_ft = crz_alt_num
				-- if B738DR_mcp_alt_dial <= crz_alt_num then
					-- if simDR_autopilot_altitude_mode ~= 4 then
						-- simDR_ap_vvi_dial = -1000
						-- simCMD_autopilot_vs_sel:once()
					-- end
					-- B738DR_flight_phase = 4
				-- else
					-- -- fmc_message_num = fmc_message_num + 1
					-- -- fmc_message[fmc_message_num] = CHECK_ALT_TGT
					-- -- fms_msg_sound = 1
					-- add_fmc_msg(CHECK_ALT_TGT, 1)
					-- --B738DR_vnav_disconnect = 1
					-- vnav_alt_mode = 1
				-- end
			-- end
			
			-- if B738DR_fms_descent_now == 1 then
				-- B738DR_fms_descent_now = 2
				-- if simDR_autopilot_altitude_mode ~= 4 then
					-- simDR_ap_vvi_dial = -1000
					-- simCMD_autopilot_vs_sel:once()
				-- end
				-- B738DR_flight_phase = 5
			-- end
			
			
			-- if legs_delete == 1 or rte_exec == 1 then
				-- copy_to_legsdata()
				-- legs_delete = 0
				-- copy_to_fpln()
				-- rte_exec = 0
			-- end
			
			-- if offset_act == 2 then
				-- offset_act = 3
				-- --dump_leg()
				-- offset_create()
				-- copy_to_legsdata()
				-- --copy_to_legsdata2()
			-- end
			
			-- if legs_intdir == 1 then
				-- -- take current position
				-- last_lat = math.rad(simDR_latitude)
				-- last_lon = math.rad(simDR_longitude)
				-- legs_intdir = 0
				-- legs_intdir_act = 1
				-- legs_intdir_crs2 = -1
				-- B738DR_hold_phase = 0
				-- nav_mode = 0
			-- end
			
			
			-- if ref_sid_exec == 1 or ref_rwy_exec == 1 or ref_tns_exec == 1 
			-- or des_star_exec == 1 or des_star_tns_exec == 1 or des_app_exec == 1 or des_app_tns_exec == 1 then
				
				-- flying_star = 0
				-- flying_app = 0
				-- change_star = 0
				-- change_app = 0
				
				-- if first_app_idx ~= 0 and offset >= first_app_idx then
					-- flying_app = 1
				-- elseif first_star_idx ~= 0 and offset >= first_star_idx then
					-- flying_star = 1
				-- end
				-- if des_star ~= des_star2 or des_star_trans ~= des_star_trans2 then
					-- change_star = 1
				-- end
				-- if des_app ~= des_app2 or des_app_tns ~= des_app_tns2 then
					-- change_app = 1
				-- end
				
				-- ref_rwy = ref_rwy2
				-- ref_sid = ref_sid2
				-- ref_sid_tns = ref_sid_tns2
				-- des_app = des_app2
				-- des_app_tns = des_app_tns2
				-- des_star = des_star2
				-- des_star_trans = des_star_trans2
				-- act_page = 1
				
				-- if ref_sid_exec == 1 or ref_rwy_exec == 1 or ref_tns_exec == 1 then
					-- offset_act = 0
					-- offset_start = 0
					-- offset_end = 0
					-- offset_dist = 0
					-- offset_side = 0
					-- -- add SID
					-- rte_add_sid()
				-- end
				
				
				-- -- -- add SID
				-- -- rte_add_sid()
				-- -- add STAR and APP
				-- --rte_add_star_app()
				-- if des_star_exec == 1 or des_star_tns_exec == 1 then
					-- rte_add_star()
					-- rte_add_app()
				-- end
				-- if des_app_exec == 1 or des_app_tns_exec == 1 then
					-- rte_add_star()
					-- rte_add_app()
				-- end
				
				-- ref_sid_exec = 0
				-- ref_rwy_exec = 0
				-- ref_tns_exec = 0
				-- ref_app_tns_exec = 0
				-- des_star_exec = 0
				-- des_star_tns_exec = 0
				-- des_app_exec = 0
				-- des_app_tns_exec = 0
				
				-- if arr_data == 1 then
					-- --arr_data = 0
					-- --page_arr = 0
					-- --page_dep_arr = 1
					-- if des_icao ~= ref_icao then
						-- des_icao = ref_icao
						-- des_icao_x = des_icao
						-- des_icao_lat = ref_icao_lat
						-- des_icao_lon = ref_icao_lon
						-- des_tns_alt = ref_tns_alt
						-- des_tns_lvl = ref_tns_lvl
						-- des_icao_alt = ref_icao_alt
						-- if des_tns_lvl == 0 then
							-- trans_lvl = "-----"
						-- else
							-- qq = des_tns_lvl / 100
							-- trans_lvl = "FL" .. string.format("%03d", qq)
						-- end
						-- legs_num2 = legs_num2 + 1
						-- legs_data2[legs_num2] = {}
						-- legs_data2[legs_num2][1] = des_icao
						-- legs_data2[legs_num2][2] = 0		-- brg
						-- legs_data2[legs_num2][3] = 0		-- distance
						-- legs_data2[legs_num2][4] = 0		-- speed
						-- legs_data2[legs_num2][5] = 0		-- altitude
						-- legs_data2[legs_num2][6] = 0	-- altitude type
						-- legs_data2[legs_num2][7] = des_icao_lat		-- latitude
						-- legs_data2[legs_num2][8] = des_icao_lon		-- longitude
						-- legs_data2[legs_num2][9] = ""			-- via id
						-- legs_data2[legs_num2][10] = 0		-- calc speed
						-- legs_data2[legs_num2][11] = 0		-- calc altitude
						-- legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
						-- legs_data2[legs_num2][13] = 0
						-- legs_data2[legs_num2][14] = 0		-- rest alt
						-- legs_data2[legs_num2][15] = 0		-- last fuel
						-- legs_data2[legs_num2][16] = ""
						-- legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
						-- legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
						-- legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR, 3-APP
						-- legs_data2[legs_num2][20] = 0
						-- legs_data2[legs_num2][21] = -1
						-- legs_data2[legs_num2][22] = ""
						-- legs_data2[legs_num2][23] = 0
						-- legs_data2[legs_num2][24] = 0
						-- legs_data2[legs_num2][25] = 0
						-- legs_data2[legs_num2][26] = 0
						-- legs_data2[legs_num2][27] = ""
						-- legs_data2[legs_num2][28] = ""
						-- legs_data2[legs_num2][29] = ""
						-- legs_data2[legs_num2][30] = ""
						-- legs_data2[legs_num2][31] = ""
						-- legs_data2[legs_num2][32] = 0
						-- legs_data2[legs_num2][33] = ""
						-- legs_data2[legs_num2][34] = ""
						-- legs_num2 = legs_num2 - 1
					-- end
				-- end
				-- copy_to_legsdata()
				
				-- if des_app == "------" then
					-- B738DR_missed_app_alt = 0
				-- else
					-- B738DR_missed_app_alt = legs_data[legs_num][5]
				-- end
				-- --copy_to_legsdata3()
				-- --copy_to_legsdata3_1()
				-- --B738_legs_num = rte_sid_num	--legs_num
			-- end
			
			-- if des_exec == 1 then
				-- --offset = 1
				-- des_app = "------"
				-- des_app_tns = "------"
				-- des_star = "------"
				-- des_star_trans = "------"
				-- ----
				-- des_app2 = "------"
				-- des_app_tns2 = "------"
				-- des_star2 = "------"
				-- des_star_trans2 = "------"
				-- ----
				-- co_route = "------------"
				-- legs_num2 = 0
				-- hold_data_num2 = 0
				
				-- offset_act = 0
				-- offset_start = 0
				-- offset_end = 0
				-- offset_dist = 0
				-- offset_side = 0
				
				-- des_icao = des_icao_x
				
				-- -- REF ICAO
				-- des_exec = 0
				-- legs_num2 = 1
				-- legs_data2[legs_num2] = {}
				-- legs_data2[legs_num2][1] = ref_icao
				-- legs_data2[legs_num2][2] = 0		-- brg
				-- legs_data2[legs_num2][3] = 0		-- distance
				-- legs_data2[legs_num2][4] = 0		-- speed
				-- legs_data2[legs_num2][5] = 0		-- altitude
				-- legs_data2[legs_num2][6] = 0	-- altitude type
				-- legs_data2[legs_num2][7] = ref_icao_lat		-- latitude
				-- legs_data2[legs_num2][8] = ref_icao_lon		-- longitude
				-- legs_data2[legs_num2][9] = ""			-- via id
				-- legs_data2[legs_num2][10] = 0		-- calc speed
				-- legs_data2[legs_num2][11] = 0		-- calc altitude
				-- legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
				-- legs_data2[legs_num2][13] = 0
				-- legs_data2[legs_num2][14] = 0		-- rest alt
				-- legs_data2[legs_num2][15] = 0		-- last fuel
				-- legs_data2[legs_num2][16] = ""
				-- legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				-- legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				-- legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR, 3-APP
				-- legs_data2[legs_num2][20] = 0
				-- legs_data2[legs_num2][21] = -1
				-- legs_data2[legs_num2][22] = ""
				-- legs_data2[legs_num2][23] = 0
				-- legs_data2[legs_num2][24] = 0
				-- legs_data2[legs_num2][25] = 0
				-- legs_data2[legs_num2][26] = 0
				-- legs_data2[legs_num2][27] = ""
				-- legs_data2[legs_num2][28] = ""
				-- legs_data2[legs_num2][29] = ""
				-- legs_data2[legs_num2][30] = ""
				-- legs_data2[legs_num2][31] = ""
				-- legs_data2[legs_num2][32] = 0
				-- legs_data2[legs_num2][33] = ""
				-- legs_data2[legs_num2][34] = ""
				
				-- -- DES ICAO
				-- legs_num2 = legs_num2 + 1
				-- legs_data2[legs_num2] = {}
				-- legs_data2[legs_num2][1] = des_icao
				-- legs_data2[legs_num2][2] = 0		-- brg
				-- legs_data2[legs_num2][3] = 0		-- distance
				-- legs_data2[legs_num2][4] = 0		-- speed
				-- legs_data2[legs_num2][5] = 0		-- altitude
				-- legs_data2[legs_num2][6] = 0	-- altitude type
				-- legs_data2[legs_num2][7] = des_icao_lat		-- latitude
				-- legs_data2[legs_num2][8] = des_icao_lon		-- longitude
				-- legs_data2[legs_num2][9] = ""			-- via id
				-- legs_data2[legs_num2][10] = 0		-- calc speed
				-- legs_data2[legs_num2][11] = 0		-- calc altitude
				-- legs_data2[legs_num2][12] = 0		-- calc altitude vnav pth
				-- legs_data2[legs_num2][13] = 0
				-- legs_data2[legs_num2][14] = 0		-- rest alt
				-- legs_data2[legs_num2][15] = 0		-- last fuel
				-- legs_data2[legs_num2][16] = ""
				-- legs_data2[legs_num2][17] = 0		-- spd flag 0-default restrict, 1-custom restrict
				-- legs_data2[legs_num2][18] = 0		-- alt flag 0-default restrict, 1-custom restrict
				-- legs_data2[legs_num2][19] = 0		-- 0-none, 1-SID, 2-STAR, 3-APP
				-- legs_data2[legs_num2][20] = 0
				-- legs_data2[legs_num2][21] = -1
				-- legs_data2[legs_num2][22] = ""
				-- legs_data2[legs_num2][23] = 0
				-- legs_data2[legs_num2][24] = 0
				-- legs_data2[legs_num2][25] = 0
				-- legs_data2[legs_num2][26] = 0
				-- legs_data2[legs_num2][27] = ""
				-- legs_data2[legs_num2][28] = ""
				-- legs_data2[legs_num2][29] = ""
				-- legs_data2[legs_num2][30] = ""
				-- legs_data2[legs_num2][31] = ""
				-- legs_data2[legs_num2][32] = 0
				-- legs_data2[legs_num2][33] = ""
				-- legs_data2[legs_num2][34] = ""
				-- legs_num2 = legs_num2 - 1
				-- ----
				-- copy_to_legsdata()
				-- --copy_to_legsdata3()
			-- end
			
			-- if rte_exec == 1 then
				-- copy_to_fpln()
				-- rte_exec = 0
			-- end
			
			-- if hold_exec == 1 then
				
				-- if new_hold_inbd == "---" then
					-- add_fmc_msg(INVALID_INPUT, 1)
				-- else
					-- if new_hold == 0 then
						-- rte_edit_hold(hold_idx)
					-- else
						-- if new_hold_idx > 0 then
							-- rte_add_hold(new_hold_idx)
						-- end
					-- end
					-- copy_to_legsdata()
					-- --legs_delete = 0
					-- copy_to_fpln()
					-- --dump_fpln2()
					
					-- if new_hold == 1 and legs_data[offset][1] == "PPOS" then
						-- nav_mode = 3
						-- B738DR_hold_phase = 1
						-- hold_timer = 0
						-- hold_time_set = 90	-- default time
						-- hold_dist_set = 0
						-- if string.len(legs_data[offset][30]) == 4 then
							-- if string.sub(legs_data[offset][30], 1, 1) == "T" then
								-- hold_time_set = tonumber(string.sub(legs_data[offset][30], 2, -1)) / 1 * 6	-- in secs
								-- if hold_time_set == 0 then
									-- hold_time_set = 90
								-- end
							-- else
								-- hold_dist_set = tonumber(legs_data[offset][30])
								-- if hold_dist_set == nil then
									-- hold_dist_set = 0
								-- else
									-- hold_dist_set = hold_dist_set / 10
								-- end
							-- end
						-- end
					-- end
					-- entry = ""
					-- hold_exec = 0
					-- new_hold = 0
					-- hold_offset = 0
					-- if hold_data_num2 > 0 then
						-- for qq = 1, hold_data_num2 do
							-- if hold_data2[qq] >= offset then
								-- hold_offset = qq
								-- break
							-- end
						-- end
					-- end
				-- end
				
			-- end
			
			-- crz_exec = 0
			-- exec1_light = 0
			-- crz_alt_num2 = 0
			-- crz_alt_old = "     "
			
			-- item_sel = 0
		
		-- end
		
	elseif phase == 2 then
		B738DR_fms_key = 0
	end
end


-- entry2
-- item_sel2
-- legs_step2
-- act_page2
-- max_page2

--*************************************************************************************--
--** 				                 X-PLANE COMMANDS                   	    	 **--
--*************************************************************************************--

-- FMC CAPTAIN
B738CMD_fmc1_1L = create_command("laminar/B738/button/fmc1_1L", "FMC capt 1L", B738_fmc1_1L_CMDhandler)
B738CMD_fmc1_2L = create_command("laminar/B738/button/fmc1_2L", "FMC capt 2L", B738_fmc1_2L_CMDhandler)
B738CMD_fmc1_3L = create_command("laminar/B738/button/fmc1_3L", "FMC capt 3L", B738_fmc1_3L_CMDhandler)
B738CMD_fmc1_4L = create_command("laminar/B738/button/fmc1_4L", "FMC capt 4L", B738_fmc1_4L_CMDhandler)
B738CMD_fmc1_5L = create_command("laminar/B738/button/fmc1_5L", "FMC capt 5L", B738_fmc1_5L_CMDhandler)
B738CMD_fmc1_6L = create_command("laminar/B738/button/fmc1_6L", "FMC capt 6L", B738_fmc1_6L_CMDhandler)

B738CMD_fmc1_1R = create_command("laminar/B738/button/fmc1_1R", "FMC capt 1R", B738_fmc1_1R_CMDhandler)
B738CMD_fmc1_2R = create_command("laminar/B738/button/fmc1_2R", "FMC capt 2R", B738_fmc1_2R_CMDhandler)
B738CMD_fmc1_3R = create_command("laminar/B738/button/fmc1_3R", "FMC capt 3R", B738_fmc1_3R_CMDhandler)
B738CMD_fmc1_4R = create_command("laminar/B738/button/fmc1_4R", "FMC capt 4R", B738_fmc1_4R_CMDhandler)
B738CMD_fmc1_5R = create_command("laminar/B738/button/fmc1_5R", "FMC capt 5R", B738_fmc1_5R_CMDhandler)
B738CMD_fmc1_6R = create_command("laminar/B738/button/fmc1_6R", "FMC capt 6R", B738_fmc1_6R_CMDhandler)

B738CMD_fmc1_0 = create_command("laminar/B738/button/fmc1_0", "FMC capt 0", B738_fmc1_0_CMDhandler)
B738CMD_fmc1_1 = create_command("laminar/B738/button/fmc1_1", "FMC capt 1", B738_fmc1_1_CMDhandler)
B738CMD_fmc1_2 = create_command("laminar/B738/button/fmc1_2", "FMC capt 2", B738_fmc1_2_CMDhandler)
B738CMD_fmc1_3 = create_command("laminar/B738/button/fmc1_3", "FMC capt 3", B738_fmc1_3_CMDhandler)
B738CMD_fmc1_4 = create_command("laminar/B738/button/fmc1_4", "FMC capt 4", B738_fmc1_4_CMDhandler)
B738CMD_fmc1_5 = create_command("laminar/B738/button/fmc1_5", "FMC capt 5", B738_fmc1_5_CMDhandler)
B738CMD_fmc1_6 = create_command("laminar/B738/button/fmc1_6", "FMC capt 6", B738_fmc1_6_CMDhandler)
B738CMD_fmc1_7 = create_command("laminar/B738/button/fmc1_7", "FMC capt 7", B738_fmc1_7_CMDhandler)
B738CMD_fmc1_8 = create_command("laminar/B738/button/fmc1_8", "FMC capt 8", B738_fmc1_8_CMDhandler)
B738CMD_fmc1_9 = create_command("laminar/B738/button/fmc1_9", "FMC capt 9", B738_fmc1_9_CMDhandler)

B738CMD_fmc1_period = create_command("laminar/B738/button/fmc1_period", "FMC capt .", B738_fmc1_period_CMDhandler)
B738CMD_fmc1_minus = create_command("laminar/B738/button/fmc1_minus", "FMC capt -", B738_fmc1_minus_CMDhandler)
B738CMD_fmc1_slash = create_command("laminar/B738/button/fmc1_slash", "FMC capt SLASH", B738_fmc1_slash_CMDhandler)

B738CMD_fmc1_A = create_command("laminar/B738/button/fmc1_A", "FMC capt A", B738_fmc1_A_CMDhandler)
B738CMD_fmc1_B = create_command("laminar/B738/button/fmc1_B", "FMC capt B", B738_fmc1_B_CMDhandler)
B738CMD_fmc1_C = create_command("laminar/B738/button/fmc1_C", "FMC capt C", B738_fmc1_C_CMDhandler)
B738CMD_fmc1_D = create_command("laminar/B738/button/fmc1_D", "FMC capt D", B738_fmc1_D_CMDhandler)
B738CMD_fmc1_E = create_command("laminar/B738/button/fmc1_E", "FMC capt E", B738_fmc1_E_CMDhandler)
B738CMD_fmc1_F = create_command("laminar/B738/button/fmc1_F", "FMC capt F", B738_fmc1_F_CMDhandler)
B738CMD_fmc1_G = create_command("laminar/B738/button/fmc1_G", "FMC capt G", B738_fmc1_G_CMDhandler)
B738CMD_fmc1_H = create_command("laminar/B738/button/fmc1_H", "FMC capt H", B738_fmc1_H_CMDhandler)
B738CMD_fmc1_I = create_command("laminar/B738/button/fmc1_I", "FMC capt I", B738_fmc1_I_CMDhandler)
B738CMD_fmc1_J = create_command("laminar/B738/button/fmc1_J", "FMC capt J", B738_fmc1_J_CMDhandler)
B738CMD_fmc1_K = create_command("laminar/B738/button/fmc1_K", "FMC capt K", B738_fmc1_K_CMDhandler)
B738CMD_fmc1_L = create_command("laminar/B738/button/fmc1_L", "FMC capt L", B738_fmc1_L_CMDhandler)
B738CMD_fmc1_M = create_command("laminar/B738/button/fmc1_M", "FMC capt M", B738_fmc1_M_CMDhandler)
B738CMD_fmc1_N = create_command("laminar/B738/button/fmc1_N", "FMC capt N", B738_fmc1_N_CMDhandler)
B738CMD_fmc1_O = create_command("laminar/B738/button/fmc1_O", "FMC capt O", B738_fmc1_O_CMDhandler)
B738CMD_fmc1_P = create_command("laminar/B738/button/fmc1_P", "FMC capt P", B738_fmc1_P_CMDhandler)
B738CMD_fmc1_Q = create_command("laminar/B738/button/fmc1_Q", "FMC capt Q", B738_fmc1_Q_CMDhandler)
B738CMD_fmc1_R = create_command("laminar/B738/button/fmc1_R", "FMC capt R", B738_fmc1_R_CMDhandler)
B738CMD_fmc1_S = create_command("laminar/B738/button/fmc1_S", "FMC capt S", B738_fmc1_S_CMDhandler)
B738CMD_fmc1_T = create_command("laminar/B738/button/fmc1_T", "FMC capt T", B738_fmc1_T_CMDhandler)
B738CMD_fmc1_U = create_command("laminar/B738/button/fmc1_U", "FMC capt U", B738_fmc1_U_CMDhandler)
B738CMD_fmc1_V = create_command("laminar/B738/button/fmc1_V", "FMC capt V", B738_fmc1_V_CMDhandler)
B738CMD_fmc1_W = create_command("laminar/B738/button/fmc1_W", "FMC capt W", B738_fmc1_W_CMDhandler)
B738CMD_fmc1_X = create_command("laminar/B738/button/fmc1_X", "FMC capt X", B738_fmc1_X_CMDhandler)
B738CMD_fmc1_Y = create_command("laminar/B738/button/fmc1_Y", "FMC capt Y", B738_fmc1_Y_CMDhandler)
B738CMD_fmc1_Z = create_command("laminar/B738/button/fmc1_Z", "FMC capt Z", B738_fmc1_Z_CMDhandler)
B738CMD_fmc1_SP = create_command("laminar/B738/button/fmc1_SP", "FMC capt Z", B738_fmc1_SP_CMDhandler)



B738CMD_fmc1_clr = create_command("laminar/B738/button/fmc1_clr", "FMC capt CLR", B738_fmc1_clr_CMDhandler)
B738CMD_fmc1_del = create_command("laminar/B738/button/fmc1_del", "FMC capt DEL", B738_fmc1_del_CMDhandler)

B738CMD_fmc1_prev_page = create_command("laminar/B738/button/fmc1_prev_page", "FMC capt PREV PAGE", B738_fmc1_prev_page_CMDhandler)
B738CMD_fmc1_next_page = create_command("laminar/B738/button/fmc1_next_page", "FMC capt NEXT PAGE", B738_fmc1_next_page_CMDhandler)

B738CMD_fmc1_init_ref = create_command("laminar/B738/button/fmc1_init_ref", "FMC capt INIT REF", B738_fmc1_init_ref_CMDhandler)
B738CMD_fmc1_menu = create_command("laminar/B738/button/fmc1_menu", "FMC capt MENU", B738_fmc1_menu_CMDhandler)
B738CMD_fmc1_n1_lim = create_command("laminar/B738/button/fmc1_n1_lim", "FMC capt N1 LIMIT", B738_fmc1_n1_lim_CMDhandler)
B738CMD_fmc1_rte = create_command("laminar/B738/button/fmc1_rte", "FMC capt RTE", B738_fmc1_rte_CMDhandler)
B738CMD_fmc1_legs = create_command("laminar/B738/button/fmc1_legs", "FMC capt LEGS", B738_fmc1_legs_CMDhandler)
B738CMD_fmc1_fix = create_command("laminar/B738/button/fmc1_fix", "FMC capt FIX", B738_fmc1_fix_CMDhandler)
B738CMD_fmc1_clb = create_command("laminar/B738/button/fmc1_clb", "FMC capt CLB", B738_fmc1_clb_CMDhandler)
B738CMD_fmc1_crz = create_command("laminar/B738/button/fmc1_crz", "FMC capt CRZ", B738_fmc1_crz_CMDhandler)
B738CMD_fmc1_des = create_command("laminar/B738/button/fmc1_des", "FMC capt DES", B738_fmc1_des_CMDhandler)
B738CMD_fmc1_dep_app = create_command("laminar/B738/button/fmc1_dep_app", "FMC capt DEP/APP", B738_fmc1_dep_app_CMDhandler)
B738CMD_fmc1_hold = create_command("laminar/B738/button/fmc1_hold", "FMC capt HOLD", B738_fmc1_hold_CMDhandler)
B738CMD_fmc1_prog = create_command("laminar/B738/button/fmc1_prog", "FMC capt PROG", B738_fmc1_prog_CMDhandler)
B738CMD_fmc1_exec = create_command("laminar/B738/button/fmc1_exec", "FMC capt EXEC", B738_fmc1_exec_CMDhandler)


-- FMC FIRST OFFICER
B738CMD_fmc2_1L = create_command("laminar/B738/button/fmc2_1L", "FMC2 capt 1L", B738_fmc2_1L_CMDhandler)
B738CMD_fmc2_2L = create_command("laminar/B738/button/fmc2_2L", "FMC2 capt 2L", B738_fmc2_2L_CMDhandler)
B738CMD_fmc2_3L = create_command("laminar/B738/button/fmc2_3L", "FMC2 capt 3L", B738_fmc2_3L_CMDhandler)
B738CMD_fmc2_4L = create_command("laminar/B738/button/fmc2_4L", "FMC2 capt 4L", B738_fmc2_4L_CMDhandler)
B738CMD_fmc2_5L = create_command("laminar/B738/button/fmc2_5L", "FMC2 capt 5L", B738_fmc2_5L_CMDhandler)
B738CMD_fmc2_6L = create_command("laminar/B738/button/fmc2_6L", "FMC2 capt 6L", B738_fmc2_6L_CMDhandler)

B738CMD_fmc2_1R = create_command("laminar/B738/button/fmc2_1R", "FMC2 capt 1R", B738_fmc2_1R_CMDhandler)
B738CMD_fmc2_2R = create_command("laminar/B738/button/fmc2_2R", "FMC2 capt 2R", B738_fmc2_2R_CMDhandler)
B738CMD_fmc2_3R = create_command("laminar/B738/button/fmc2_3R", "FMC2 capt 3R", B738_fmc2_3R_CMDhandler)
B738CMD_fmc2_4R = create_command("laminar/B738/button/fmc2_4R", "FMC2 capt 4R", B738_fmc2_4R_CMDhandler)
B738CMD_fmc2_5R = create_command("laminar/B738/button/fmc2_5R", "FMC2 capt 5R", B738_fmc2_5R_CMDhandler)
B738CMD_fmc2_6R = create_command("laminar/B738/button/fmc2_6R", "FMC2 capt 6R", B738_fmc2_6R_CMDhandler)

B738CMD_fmc2_0 = create_command("laminar/B738/button/fmc2_0", "FMC2 capt 0", B738_fmc2_0_CMDhandler)
B738CMD_fmc2_1 = create_command("laminar/B738/button/fmc2_1", "FMC2 capt 1", B738_fmc2_1_CMDhandler)
B738CMD_fmc2_2 = create_command("laminar/B738/button/fmc2_2", "FMC2 capt 2", B738_fmc2_2_CMDhandler)
B738CMD_fmc2_3 = create_command("laminar/B738/button/fmc2_3", "FMC2 capt 3", B738_fmc2_3_CMDhandler)
B738CMD_fmc2_4 = create_command("laminar/B738/button/fmc2_4", "FMC2 capt 4", B738_fmc2_4_CMDhandler)
B738CMD_fmc2_5 = create_command("laminar/B738/button/fmc2_5", "FMC2 capt 5", B738_fmc2_5_CMDhandler)
B738CMD_fmc2_6 = create_command("laminar/B738/button/fmc2_6", "FMC2 capt 6", B738_fmc2_6_CMDhandler)
B738CMD_fmc2_7 = create_command("laminar/B738/button/fmc2_7", "FMC2 capt 7", B738_fmc2_7_CMDhandler)
B738CMD_fmc2_8 = create_command("laminar/B738/button/fmc2_8", "FMC2 capt 8", B738_fmc2_8_CMDhandler)
B738CMD_fmc2_9 = create_command("laminar/B738/button/fmc2_9", "FMC2 capt 9", B738_fmc2_9_CMDhandler)

B738CMD_fmc2_period = create_command("laminar/B738/button/fmc2_period", "FMC2 capt .", B738_fmc2_period_CMDhandler)
B738CMD_fmc2_minus = create_command("laminar/B738/button/fmc2_minus", "FMC2 capt -", B738_fmc2_minus_CMDhandler)
B738CMD_fmc2_slash = create_command("laminar/B738/button/fmc2_slash", "FMC2 capt SLASH", B738_fmc2_slash_CMDhandler)

B738CMD_fmc2_A = create_command("laminar/B738/button/fmc2_A", "FMC2 capt A", B738_fmc2_A_CMDhandler)
B738CMD_fmc2_B = create_command("laminar/B738/button/fmc2_B", "FMC2 capt B", B738_fmc2_B_CMDhandler)
B738CMD_fmc2_C = create_command("laminar/B738/button/fmc2_C", "FMC2 capt C", B738_fmc2_C_CMDhandler)
B738CMD_fmc2_D = create_command("laminar/B738/button/fmc2_D", "FMC2 capt D", B738_fmc2_D_CMDhandler)
B738CMD_fmc2_E = create_command("laminar/B738/button/fmc2_E", "FMC2 capt E", B738_fmc2_E_CMDhandler)
B738CMD_fmc2_F = create_command("laminar/B738/button/fmc2_F", "FMC2 capt F", B738_fmc2_F_CMDhandler)
B738CMD_fmc2_G = create_command("laminar/B738/button/fmc2_G", "FMC2 capt G", B738_fmc2_G_CMDhandler)
B738CMD_fmc2_H = create_command("laminar/B738/button/fmc2_H", "FMC2 capt H", B738_fmc2_H_CMDhandler)
B738CMD_fmc2_I = create_command("laminar/B738/button/fmc2_I", "FMC2 capt I", B738_fmc2_I_CMDhandler)
B738CMD_fmc2_J = create_command("laminar/B738/button/fmc2_J", "FMC2 capt J", B738_fmc2_J_CMDhandler)
B738CMD_fmc2_K = create_command("laminar/B738/button/fmc2_K", "FMC2 capt K", B738_fmc2_K_CMDhandler)
B738CMD_fmc2_L = create_command("laminar/B738/button/fmc2_L", "FMC2 capt L", B738_fmc2_L_CMDhandler)
B738CMD_fmc2_M = create_command("laminar/B738/button/fmc2_M", "FMC2 capt M", B738_fmc2_M_CMDhandler)
B738CMD_fmc2_N = create_command("laminar/B738/button/fmc2_N", "FMC2 capt N", B738_fmc2_N_CMDhandler)
B738CMD_fmc2_O = create_command("laminar/B738/button/fmc2_O", "FMC2 capt O", B738_fmc2_O_CMDhandler)
B738CMD_fmc2_P = create_command("laminar/B738/button/fmc2_P", "FMC2 capt P", B738_fmc2_P_CMDhandler)
B738CMD_fmc2_Q = create_command("laminar/B738/button/fmc2_Q", "FMC2 capt Q", B738_fmc2_Q_CMDhandler)
B738CMD_fmc2_R = create_command("laminar/B738/button/fmc2_R", "FMC2 capt R", B738_fmc2_R_CMDhandler)
B738CMD_fmc2_S = create_command("laminar/B738/button/fmc2_S", "FMC2 capt S", B738_fmc2_S_CMDhandler)
B738CMD_fmc2_T = create_command("laminar/B738/button/fmc2_T", "FMC2 capt T", B738_fmc2_T_CMDhandler)
B738CMD_fmc2_U = create_command("laminar/B738/button/fmc2_U", "FMC2 capt U", B738_fmc2_U_CMDhandler)
B738CMD_fmc2_V = create_command("laminar/B738/button/fmc2_V", "FMC2 capt V", B738_fmc2_V_CMDhandler)
B738CMD_fmc2_W = create_command("laminar/B738/button/fmc2_W", "FMC2 capt W", B738_fmc2_W_CMDhandler)
B738CMD_fmc2_X = create_command("laminar/B738/button/fmc2_X", "FMC2 capt X", B738_fmc2_X_CMDhandler)
B738CMD_fmc2_Y = create_command("laminar/B738/button/fmc2_Y", "FMC2 capt Y", B738_fmc2_Y_CMDhandler)
B738CMD_fmc2_Z = create_command("laminar/B738/button/fmc2_Z", "FMC2 capt Z", B738_fmc2_Z_CMDhandler)
B738CMD_fmc2_SP = create_command("laminar/B738/button/fmc2_SP", "FMC2 capt Z", B738_fmc2_SP_CMDhandler)



B738CMD_fmc2_clr = create_command("laminar/B738/button/fmc2_clr", "FMC2 capt CLR", B738_fmc2_clr_CMDhandler)
B738CMD_fmc2_del = create_command("laminar/B738/button/fmc2_del", "FMC2 capt DEL", B738_fmc2_del_CMDhandler)

B738CMD_fmc2_prev_page = create_command("laminar/B738/button/fmc2_prev_page", "FMC2 capt PREV PAGE", B738_fmc2_prev_page_CMDhandler)
B738CMD_fmc2_next_page = create_command("laminar/B738/button/fmc2_next_page", "FMC2 capt NEXT PAGE", B738_fmc2_next_page_CMDhandler)

B738CMD_fmc2_init_ref = create_command("laminar/B738/button/fmc2_init_ref", "FMC2 capt INIT REF", B738_fmc2_init_ref_CMDhandler)
B738CMD_fmc2_menu = create_command("laminar/B738/button/fmc2_menu", "FMC2 capt MENU", B738_fmc2_menu_CMDhandler)
B738CMD_fmc2_n1_lim = create_command("laminar/B738/button/fmc2_n1_lim", "FMC2 capt N1 LIMIT", B738_fmc2_n1_lim_CMDhandler)
B738CMD_fmc2_rte = create_command("laminar/B738/button/fmc2_rte", "FMC2 capt RTE", B738_fmc2_rte_CMDhandler)
B738CMD_fmc2_legs = create_command("laminar/B738/button/fmc2_legs", "FMC2 capt LEGS", B738_fmc2_legs_CMDhandler)
B738CMD_fmc2_fix = create_command("laminar/B738/button/fmc2_fix", "FMC2 capt FIX", B738_fmc2_fix_CMDhandler)
B738CMD_fmc2_clb = create_command("laminar/B738/button/fmc2_clb", "FMC2 capt CLB", B738_fmc2_clb_CMDhandler)
B738CMD_fmc2_crz = create_command("laminar/B738/button/fmc2_crz", "FMC2 capt CRZ", B738_fmc2_crz_CMDhandler)
B738CMD_fmc2_des = create_command("laminar/B738/button/fmc2_des", "FMC2 capt DES", B738_fmc2_des_CMDhandler)
B738CMD_fmc2_dep_app = create_command("laminar/B738/button/fmc2_dep_app", "FMC2 capt DEP/APP", B738_fmc2_dep_app_CMDhandler)
B738CMD_fmc2_hold = create_command("laminar/B738/button/fmc2_hold", "FMC2 capt HOLD", B738_fmc2_hold_CMDhandler)
B738CMD_fmc2_prog = create_command("laminar/B738/button/fmc2_prog", "FMC2 capt PROG", B738_fmc2_prog_CMDhandler)
B738CMD_fmc2_exec = create_command("laminar/B738/button/fmc2_exec", "FMC2 capt EXEC", B738_fmc2_exec_CMDhandler)




B738CMD_autopilot_alt_interv		= create_command("laminar/B738/autopilot/alt_interv", "ALT intervention", B738_autopilot_alt_interv_CMDhandler)


--*************************************************************************************--
--** 				              CREATE CUSTOM COMMANDS              			     **--
--*************************************************************************************--



--*************************************************************************************--
--** 					            OBJECT CONSTRUCTORS         		    		 **--
--*************************************************************************************--



--*************************************************************************************--
--** 				               CREATE SYSTEM OBJECTS            				 **--
--*************************************************************************************--



--*************************************************************************************--
--** 				                  SYSTEM FUNCTIONS           	    			 **--
--*************************************************************************************--

----- ANIMATION UTILITY -----------------------------------------------------------------
function B738_set_animation_position(current_value, target, min, max, speed)

    if target >= (max - 0.001) and current_value >= (max - 0.01) then
        return max
    elseif target <= (min + 0.001) and current_value <= (min + 0.01) then
        return min
    else
        return current_value + ((target - current_value) * (speed * SIM_PERIOD))
    end

end

------------------------------------------


----------------------------------------------------------------------------------------------------



function B738_fmc_menu()

	if page_menu == 1 then
		act_page = 1
		max_page = 1
		local units_str_l = "   /KGS>"
		local units_str_s = "LBS     "
		if units == 0 then
			units_str_l = "LBS/   >"
			units_str_s = "    KGS "
		end
		line0_l = "         MENU           "
		-- line0_s = "                        "
		line1_x = "                  UNITS "
		line1_l = "<FMC            " .. units_str_l
		line1_s = "                " .. units_str_s
		-- line2_x = "                        "
		line2_l = "<ACARS         ADVANCED>"
		-- line2_s = "                        "
		---------------------------------------------------------
		-- line4_x = "                        "
		line4_l = "  Z I B O               "
		line4_s = "           M O D  " .. version
		if menu_tick < 5 then
			line5_x = "FLIGHT MODEL 4.4 TWKSTER"
			line5_l = "         A   S  D  G    "
			line5_s = "  AND BY  ERO IM EV ROUP"
			line6_x = "SOUND PACK "
			if string.len(fmod_version) > 13 then
				line6_x = line6_x .. string.sub(fmod_version, 1, 13)
			else
				line6_x = line6_x .. fmod_version
			end
			line6_l = "            A    B    XP"
			line6_s = "         BY  UDIO IRD   "
		else
			line5_x = "SPECIAL THANKS TO       "
			line5_l = "         F       T      "
			line5_s = "          AY AND  WKSTER"
			line6_x = "      FOR IMPROVED"
			line6_s = "FLIGHT MODEL AND SYSTEMS"
		end
		---------------------------------------------------------
		-- line3_x = "------------------------"
		-- line3_l = "  Z I B O               "
		-- line3_s = "           M O D  " .. version
		-- line4_x = "FLIGHT MODEL V3.0       "
		-- line4_l = "         A   S  D  G    "
		-- line4_s = "      BY  ERO IM EV ROUP"
		-- line5_x = "SOUND PACK "
		-- if string.len(fmod_version) > 13 then
			-- line5_x = line5_x .. string.sub(fmod_version, 1, 13)
		-- else
			-- line5_x = line5_x .. fmod_version
		-- end
		-- line5_l = "            A    B    XP"
		-- line5_s = "         BY  UDIO IRD   "
		-- line6_x = "RE-MODELED              "
		-- line6_l = "                  R     "
		-- line6_s = "               BY  ASHID"
		---------------------------------------------------------
	end

end

function B738_fmc_ref_nav_data()

	if page_ref_nav_data == 1 then
		act_page = 1
		max_page = 1
		
		line0_l = "   REF NAV DATA         "
		-- line0_s = "                        "
		line1_x = " WPT IDENT  NAVAID IDENT"
		--line1_l = "-----               ----"
		line1_l = spaces_after(ref_nav_wpt, 5) .. "               "
		line1_l = line1_l .. spaces_before(ref_nav_navaid, 4)
		-- line1_s = "                        "
		line2_x = " AIRPORT IDENT          "
		line2_l = spaces_after(ref_nav_apt, 4) .. "            SUMMARY>"
		-- line2_s = "                        "
		-- line3_x = "                        "
		-- line3_l = "                        "
		-- line3_s = "                        "
		-- line4_x = "                        "
		-- line4_l = "                        "
		-- line4_s = "                        "
		-- line5_x = "                        "
		-- line5_l = "                        "
		-- line5_s = "                        "
		line6_x = "------------            "
		--line6_l = "<INDEX      NAV OPTIONS>"
		if ref_nav_wpt == "-----" and ref_nav_navaid == "----" and ref_nav_apt == "----" then
			line6_l = "<INDEX            " .. spaces_before(ref_nav_new, 5) .. ">"
		else
			line6_l = "<INDEX      NAV OPTIONS>"
		end
		-- line6_s = "                        "
	end
end

function B738_fmc_ref_nav_data_wpt()

	if page_ref_nav_data_wpt == 1 then
		act_page = 1
		max_page = 1
		
		local pos_str = ""
		local ii = 0
		
		line0_l = "   REF NAV DATA         "
		-- line0_s = "                        "
		line1_x = " WPT IDENT              "
		if ref_nav_wpt == "-----" then
			line1_l = ref_nav_new
		else
			line1_l = ref_nav_wpt
		end
		-- line1_s = "                        "
		line3_x = " LATITUDE      LONGITUDE"
		
		if ref_nav_lat == 0 then
			line3_l = "---`--.-       "
		else
			pos_str = string_lat_pos(ref_nav_lat)
			line3_l = string.sub(pos_str, 1, 3) .. "`" .. string.sub(pos_str, 4, 7)
			line3_l = line3_l .. "       "
		end
		if ref_nav_lon == 0 then
			line3_l = line3_l .. "----`--.-"
		else
			pos_str = string_lon_pos(ref_nav_lon)
			line3_l = line3_l .. string.sub(pos_str, 1, 4) .. "`" .. string.sub(pos_str, 5, 8)
		end
		
		-- line3_s = "                        "
		line4_x = " MAG VAR                "
		--line4_l = "W 10`                   "
		if ref_nav_mag_var == "" then
			line4_l = "----`"
		elseif string.sub(ref_nav_mag_var, 1, 1) == ">" then
			ii = tonumber(string.sub(ref_nav_mag_var, 2, -1))
			if ii == nil then
				line4_l = "   0`"
			else
				if ii == 0 then
					line4_s = "   0`"
				elseif ii < 0 then
					line4_s = "W" .. string.format("%3d", -ii) .. "`"
				else
					line4_s = "E" .. string.format("%3d", ii) .. "`"
				end
			end
		else
			ii = tonumber(ref_nav_mag_var)
			if ii == nil then
				line4_l = "   0`"
			else
				if ii == 0 then
					line4_l = "   0`"
				elseif ii < 0 then
					line4_l = "W" .. string.format("%3d", -ii) .. "`"
				else
					line4_l = "E" .. string.format("%3d", ii) .. "`"
				end
			end
		end
		--line4_s = "                        "
		line5_x = " REF IDENT   RADIAL/DIST"
		--line5_l = "SAVNH         270`/150NM"
		--line5_l = "-----         ---`/---NM"
		line5_l = spaces_after(ref_nav_id, 5) .. "         "
		line5_l = line5_l .. ref_nav_brg .. "`/" .. ref_nav_dist .. "NM"
		-- line5_s = "                        "
		line6_x = "------------            "
		line6_l = "<INDEX"
		-- line6_s = "                        "
	end
end


function B738_fmc_ref_nav_data_navaid()

	if page_ref_nav_data_navaid == 1 then
		act_page = 1
		max_page = 1
		local pos_str = ""
		local ii = 0
		
		line0_l = "   REF NAV DATA         "
		line1_x = " NAVAID IDENT           "
		line1_l = ref_nav_navaid
		line3_x = " LATITUDE      LONGITUDE"
		
		if ref_nav_lat == 0 then
			line3_l = "---`--.-       "
		else
			pos_str = string_lat_pos(ref_nav_lat)
			line3_l = string.sub(pos_str, 1, 3) .. "`" .. string.sub(pos_str, 4, 7)
			line3_l = line3_l .. "       "
		end
		if ref_nav_lon == 0 then
			line3_l = line3_l .. "----`--.-"
		else
			pos_str = string_lon_pos(ref_nav_lon)
			line3_l = line3_l .. string.sub(pos_str, 1, 4) .. "`" .. string.sub(pos_str, 5, 8)
		end
		line4_x = " MAG VAR                "
		if ref_nav_mag_var == "" then
			line4_l = "----`"
		elseif string.sub(ref_nav_mag_var, 1, 1) == ">" then
			ii = tonumber(string.sub(ref_nav_mag_var, 2, -1))
			if ii == nil then
				line4_l = "   0`"
			else
				if ii == 0 then
					line4_s = "   0`"
				elseif ii < 0 then
					line4_s = "W" .. string.format("%3d", -ii) .. "`"
				else
					line4_s = "E" .. string.format("%3d", ii) .. "`"
				end
			end
		else
			ii = tonumber(ref_nav_mag_var)
			if ii == nil then
				line4_l = "   0`"
			else
				if ii == 0 then
					line4_l = "   0`"
				elseif ii < 0 then
					line4_l = "W" .. string.format("%3d", -ii) .. "`"
				else
					line4_l = "E" .. string.format("%3d", ii) .. "`"
				end
			end
		end
		
		--line3_l = line3_l .. "  ...IN DEVELOPMENT...  "
	end
end

function B738_fmc_ref_nav_data_apt()

	if page_ref_nav_data_apt == 1 then
		act_page = 1
		max_page = 1
		local pos_str = ""
		local ii = 0
		
		line0_l = "   REF NAV DATA         "
		line1_x = " AIRPORT IDENT          "
		line1_l = ref_nav_apt
		line3_x = " LATITUDE      LONGITUDE"
		
		if ref_nav_lat == 0 then
			line3_l = "---`--.-       "
		else
			pos_str = string_lat_pos(ref_nav_lat)
			line3_l = string.sub(pos_str, 1, 3) .. "`" .. string.sub(pos_str, 4, 7)
			line3_l = line3_l .. "       "
		end
		if ref_nav_lon == 0 then
			line3_l = line3_l .. "----`--.-"
		else
			pos_str = string_lon_pos(ref_nav_lon)
			line3_l = line3_l .. string.sub(pos_str, 1, 4) .. "`" .. string.sub(pos_str, 5, 8)
		end
		line4_x = " MAG VAR                "
		if ref_nav_mag_var == "" then
			line4_l = "----`"
		elseif string.sub(ref_nav_mag_var, 1, 1) == ">" then
			ii = tonumber(string.sub(ref_nav_mag_var, 2, -1))
			if ii == nil then
				line4_l = "   0`"
			else
				if ii == 0 then
					line4_s = "   0`"
				elseif ii < 0 then
					line4_s = "W" .. string.format("%3d", -ii) .. "`"
				else
					line4_s = "E" .. string.format("%3d", ii) .. "`"
				end
			end
		else
			ii = tonumber(ref_nav_mag_var)
			if ii == nil then
				line4_l = "   0`"
			else
				if ii == 0 then
					line4_l = "   0`"
				elseif ii < 0 then
					line4_l = "W" .. string.format("%3d", -ii) .. "`"
				else
					line4_l = "E" .. string.format("%3d", ii) .. "`"
				end
			end
		end
		--line3_l = line3_l .. "  ...IN DEVELOPMENT...  "
	end
end

function B738_ref_nav_sel()

	if page_ref_sel == 1 then
		
		local ii = 0
		local jj = 0
		local kk = 0
		local left_line = {}
		left_line[1] = ""
		left_line[2] = ""
		left_line[3] = ""
		left_line[4] = ""
		left_line[5] = ""
		local right_line = {}
		right_line[1] = ""
		right_line[2] = ""
		right_line[3] = ""
		right_line[4] = ""
		right_line[5] = ""
		local left_linex = {}
		left_linex[1] = ""
		left_linex[2] = ""
		left_linex[3] = ""
		left_linex[4] = ""
		left_linex[5] = ""
		
		local sid_len = 0
		local temp_str = ""
		local rw_tgt = ""
		local right_len = 0
		
		local max_page_wpt = 0
		
		jj = math.floor(navaid_list_n / 5)
		kk = navaid_list_n % 5
		
		if kk > 0 then
			max_page_wpt = jj + 1
		else
			max_page_wpt = jj
		end
		
		kk = (act_page - 1) * 5
		for ii = 1, 5 do
			jj = kk + ii
			if jj > navaid_list_n then
				left_linex[ii] = ""
				left_line[ii] = ""
				right_line[ii] = ""
			else
				sid_len = navaid_list[jj][1]
				if sid_len == 1 then
					left_linex[ii] = " VOR    " .. navaid_list[jj][7]
				elseif sid_len == 2 then
					left_linex[ii] = " VORDME " .. navaid_list[jj][7]
				elseif sid_len == 3 then
					left_linex[ii] = " NDB    " .. navaid_list[jj][7]
				elseif sid_len == 4 then
					left_linex[ii] = " WPT    " .. navaid_list[jj][7]
				elseif sid_len == 5 then
					left_linex[ii] = " DME    " .. navaid_list[jj][7]
				elseif sid_len == 9 then
					left_linex[ii] = " APT    " .. navaid_list[jj][7]
				end
				
				temp_str = navaid_list[jj][6]
				sid_len = string.len(temp_str)
				if sid_len == 3 then
					temp_str = navaid_list[jj][6]
				elseif sid_len == 4 then
					temp_str = string.sub(navaid_list[jj][6], 1, 3) .. "." .. string.sub(navaid_list[jj][6], -1, -1)
				elseif sid_len == 5 then
					temp_str = string.sub(navaid_list[jj][6], 1, 3) .. "." .. string.sub(navaid_list[jj][6], -2, -1)
				else
					temp_str = ""
				end
				left_line[ii] = temp_str
				right_line[ii] = string_pos(navaid_list[jj][2], navaid_list[jj][3])
			end
		end
		
		-- Type: VOR, VORTAC, VORDME, NDB, LOC, ILS, DME, ILSDME, LOCDME, APT, WPT
		
		-- Display engine
		for ii = 1, 5 do
			sid_len = string.len(left_line[ii])
			if sid_len < 7 then
				for jj = sid_len, 6 do
					left_line[ii] = left_line[ii] .. " "
				end
			end
			right_len = 24 - string.len(left_line[ii])
			sid_len = string.len(right_line[ii])
			if sid_len < right_len then
				for jj = sid_len, (right_len - 1) do
					right_line[ii] = " " .. right_line[ii]
				end
			end
		end
		
		line1_l = left_line[1] .. right_line[1]
		line2_l = left_line[2] .. right_line[2]
		line3_l = left_line[3] .. right_line[3]
		line4_l = left_line[4] .. right_line[4]
		line5_l = left_line[5] .. right_line[5]
		
		
		line1_x = left_linex[1] 
		line2_x = left_linex[2]
		line3_x = left_linex[3]
		line4_x = left_linex[4]
		line5_x = left_linex[5]
		
		
		max_page = math.max(1, max_page_wpt)
		
		temp_str = navaid_list[1][4]
		if string.len(temp_str) > 6 then
			temp_str = string.sub(temp_str, 1, 6)
		end
		line0_l = " SEL DESIRED " .. temp_str
		line0_s = "                    " .. string.format("%1d",act_page)
		line0_s = line0_s .. "/"
		line0_s = line0_s .. string.format("%1d",max_page)
		
	
	end

end


function B738_fmc_xtras()

	if page_xtras == 1 then
		-- act_page = 1
		-- max_page = 1
		
		-- line0_l = "    ADVANCED MENU       "
		-- line0_s = "                    1/1 "
		-- line1_l = "<SOUND                  "
		-- line2_l = "<OTHERS                 "
		-- line3_l = "<FUEL AND CG            "
		-- line6_l = "<SAVE              MENU>"
		
		act_page = 1
		max_page = 1
		line0_l = "    ADVANCED MENU       "
		line0_s = "                    1/1 "
		line1_l = "<FUEL AND CG            "
		line2_x = " ---------------------- "
		line2_l = "<ANNOUNCEMENTS          "
		line3_l = "<BOARD / TERMINATE      "
		line4_x = " ---------------------- "
		line4_l = "<AUDIO CONFIG           "
		line5_l = "<OTHER CONFIG           "
		line6_x = " ---------------------- "
		line6_l = "<SAVE              MENU>"
	end
end

function fmc_xtras_main(fmod_butt)
	
	if page_xtras == 1 then
		if fmod_butt == 1 then
			-- FUEL AND CG
			page_xtras = 0
			page_xtras_fuel = 1
			act_page = 1
			
			cg_set_m = simDR_cg
			cg_set_in = cg_set_m * 39.37
			mac = calc_mac(simDR_cg)
			mac_zfw = calc_zfw_mac(cg_set_m)
			
		elseif fmod_butt == 2 then
			-- ANNOUNCEMENTS
			page_xtras = 0
			page_fmod_announ = 1
			act_page = 1
		elseif fmod_butt == 3 then
			-- BOARD / TERMINATE
			page_xtras = 0
			page_fmod_flight_ctrl = 1
			act_page = 1
		elseif fmod_butt == 4 then
			-- AUDIO CONFIG
			page_xtras = 0
			page_xtras_fmod = 1
			act_page = 1
		elseif fmod_butt == 5 then
			-- OTHER CONFIG
			page_xtras = 0
			page_xtras_others = 1
			act_page = 1
		end
	end
end

function B738_fmc_fuel()
	if page_xtras_fuel == 1 then
		act_page = 1
		max_page = 1
		
		local left_fuel = simDR_fuel_tank_weight_kg[0] / 1000
		local center_fuel = simDR_fuel_tank_weight_kg[1] / 1000
		local right_fuel = simDR_fuel_tank_weight_kg[2] / 1000
		
		local total_fuel = left_fuel + center_fuel + right_fuel
		local payload_wgt = simDR_payload_weight / 1000
		local total_wgt = simDR_total_weight / 1000
		local zfw_wgt = 41.41 + payload_wgt
		local cg_str = ""
		local cg_shift = ""
		
		line0_l = "       FUEL AND CG      "
		line0_s = "                    1/1 "
		
		if units == 0 then
			total_fuel = total_fuel * 2.204
			payload_wgt = payload_wgt * 2.204
			total_wgt = total_wgt * 2.204
			zfw_wgt = zfw_wgt * 2.204
			cg_str = string.format("%5.1f", cg_set_in)
			cg_shift = "IN"
		else
			cg_str = string.format("%5.1f", (cg_set_m * 100))
			cg_shift = "CM"
		end
		
		line1_l = " PAYLOAD               >"
		line1_g = "                   " .. string.format("%4.1f", payload_wgt)
		line2_l = " ZFW              " .. string.format("%5.1f", zfw_wgt)
		line3_l = " FUEL                  >"
		line3_g = "                   " .. string.format("%4.1f", total_fuel)
		line4_l = " TOW              " .. string.format("%5.1f", total_wgt)
		line5_x = "------------------------"
		line5_l = " ZFW CG       TO CG    "
		line5_g = "        " .. string.format("%2d", mac_zfw) .. "%"
		line5_g = line5_g .. "         " .. string.format("%2d", mac) .. "%"
		line6_l = "<CG SHIFT          BACK>"
		line6_g = "          " .. cg_str
		line6_s = "               " .. cg_shift
	end
end


function B738_fmc_fmod_main()

	if page_xtras_fmod == 1 then
		act_page = 1
		max_page = 2
		
		line0_l = " AUDIO CONFIG           "
		line0_s = "                    1/2 "
		line1_l = "<FEATURES               "
		line2_l = "<VOLUMES                "
		line3_l = "<EQ                     "
		line6_l = "<DEFAULT           BACK>"
	elseif page_xtras_fmod == 2 then
		act_page = 2
		max_page = 2
		
		line0_l = " AUDIO PRESETS          "
		line0_s = "                    2/2 "
		line1_x = " LOAD              SAVE "
		line1_l = "<----   " .. spaces_after(fmod_preset[1][1], 8) .. "   ---->"
		line2_l = "<----   " .. spaces_after(fmod_preset[2][1], 8) .. "   ---->"
		line3_l = "<----   " .. spaces_after(fmod_preset[3][1], 8) .. "   ---->"
		line4_l = "<----   " .. spaces_after(fmod_preset[4][1], 8) .. "   ---->"
		line5_l = "<----   " .. spaces_after(fmod_preset[5][1], 8) .. "   ---->"
		line6_l = "<DEFAULT           BACK>"
	end
	
end

function B738_fmc_fmod_dspl()
	
	-- FEATURES
	if page_fmod_features == 1 then
		act_page = 1
		max_page = 2
		line0_l = " FMOD FEATURES          "
		line0_s = "                    1/2 "
		line1_x = " PAX BOARD              "
		if B738DR_enable_pax_boarding == 0 then
			line1_l = "<  /                    "
			line1_g = "    OFF                 "
			line1_s = " ON                     "
		else
			line1_l = "<  /                    "
			line1_g = " ON                     "
			line1_s = "    OFF                  "
		end
		line2_x = " PAX CHATTER            "
		if B738DR_enable_chatter == 0 then
			line2_l = "<  /                    "
			line2_g = "    OFF                 "
			line2_s = " ON                     "
		else
			line2_l = "<  /                    "
			line2_g = " ON                     "
			line2_s = "    OFF                  "
		end
		line3_x = " AIRPORT SET            "
		if B738DR_airport_set == 2 then
			line3_l = "<     /        /        "
			line3_g = "       REGIONAL         "
			line3_s = " BASIC          LARGE   "
		elseif B738DR_airport_set == 3 then
			line3_l = "<     /        /        "
			line3_g = "                LARGE   "
			line3_s = " BASIC REGIONAL         "
		else
			line3_l = "<     /        /        "
			line3_g = " BASIC                  "
			line3_s = "       REGIONAL LARGE   "
		end
		line4_x = " MUTE TRIMWHEEL         "
		if B738DR_enable_mutetrim == 0 then
			line4_l = "<  /                    "
			line4_g = "    OFF                 "
			line4_s = " ON                     "
		else
			line4_l = "<  /                    "
			line4_g = " ON                     "
			line4_s = "    OFF                  "
		end
		line5_x = " ANALOG GYRO            "
		if B738DR_enable_gyro == 0 then
			line5_l = "<  /                    "
			line5_g = "    OFF                 "
			line5_s = " ON                     "
		else
			line5_l = "<  /                    "
			line5_g = " ON                     "
			line5_s = "    OFF                  "
		end
		line6_l = "<DEFAULT           BACK>"
	elseif page_fmod_features == 2 then
		act_page = 2
		max_page = 2
		line0_l = " FMOD FEATURES          "
		line0_s = "                    2/2 "
		line1_x = " MUTE FMC               "
		if B738DR_enable_fmc_mute_on == 0 then
			line1_l = "<  /                    "
			line1_g = "    OFF                 "
			line1_s = " ON                     "
		else
			line1_l = "<  /                    "
			line1_g = " ON                     "
			line1_s = "    OFF                  "
		end
		line2_x = " PAX APPLAUSE           "
		if B738DR_vol_int_pax_applause == 0 then
			line2_l = "<  /                    "
			line2_g = "    OFF                 "
			line2_s = " ON                     "
		else
			line2_l = "<  /                    "
			line2_g = " ON                     "
			line2_s = "    OFF                  "
		end
		line6_l = "<DEFAULT           BACK>"
		
	-- VOLUMES
	elseif page_fmod_volumes == 1 then
		act_page = 1
		max_page = 3
		line0_l = " FMOD VOLUMES           "
		line0_s = "                    1/3 "
		line1_x = " PAX VOLUME             "
		line1_g = "  " .. string.format("%2d", B738DR_vol_int_pax)
		line1_l = "<     /0-10/"
		line2_x = " PM VOLUME              "
		line2_g = "  " .. string.format("%2d", B738DR_vol_PM)
		line2_l = "<     /0-10/"
		line3_x = " AIRPORT VOLUME         "
		line3_g = "  " .. string.format("%2d", B738DR_vol_airport)
		line3_l = "<     /0-10/"
		line4_x = " GYRO VOLUME            "
		line4_g = "  " .. string.format("%2d", B738DR_vol_int_gyro)
		line4_l = "<     /0-10/"
		line5_x = " ENGINE VOLUME          "
		line5_g = "  " .. string.format("%2d", B738DR_vol_int_eng)
		line5_l = "<     /0-10/"
		line6_l = "<DEFAULT           BACK>"
	elseif page_fmod_volumes == 2 then
		act_page = 2
		max_page = 3
		line0_l = " FMOD VOLUMES           "
		line0_s = "                    2/3 "
		line1_x = " AC VOLUME              "
		line1_g = "  " .. string.format("%2d", B738DR_vol_int_ac)
		line1_l = "<     /0-10/"
		line2_x = " WIND VOLUME            "
		line2_g = "  " .. string.format("%2d", B738DR_vol_int_wind_vol)
		line2_l = "<     /0-10/"
		line3_x = " ROLL/IMPACT VOL.       "
		line3_g = "  " .. string.format("%2d", B738DR_vol_int_roll)
		line3_l = "<     /0-10/"
		line4_x = " BUMPS VOLUME           "
		line4_g = "  " .. string.format("%2d", B738DR_vol_int_bump)
		line4_l = "<     /0-10/"
		line5_x = " GPWS TCAS VOLUME       "
		line5_g = "  " .. string.format("%2d", B738DR_vol_computer)
		line5_l = "<     /0-10/"
		line6_l = "<DEFAULT           BACK>"
	elseif page_fmod_volumes == 3 then
		act_page = 3
		max_page = 3
		line0_l = " FMOD VOLUMES           "
		line0_s = "                    3/3 "
		line1_x = " WEATHER VOLUME         "
		line1_g = "  " .. string.format("%2d", B738DR_vol_weather)
		line1_l = "<     /0-10/"
		line6_l = "<DEFAULT           BACK>"
	
	-- ANNOUNCEMENTS
	-- elseif page_fmod_announ == 1 then
		-- act_page = 1
		-- max_page = 2
		-- line0_l = " FMOD ANNOUNCEMENTS     "
		-- line0_s = "                    1/2 "
		-- line1_x = " ANNOUNC.VOL.           "
		-- line1_g = "  " .. string.format("%2d", B738DR_vol_crew)
		-- line1_l = "<     /0-10/"
		-- line2_x = " ANNOUNC.SET NR         "
		-- line2_g = "  " .. string.format("%2d", (B738DR_announcement_set+1))
		-- line2_l = "<     /1-16/"
		-- line3_x = " FA IN COCKPIT          "
		-- line3_g = "  " .. string.format("%2d", B738DR_vol_FAC)
		-- line3_l = "<     /0-10/"
		-- line4_x = " CAPT WELCOME           "
		-- line4_l = "< PLAY MESSAGE          "
		-- line5_x = " CAPT CRUISE            "
		-- line5_l = "< PLAY MESSAGE          "
		-- line6_l = "<DEFAULT           BACK>"
	-- elseif page_fmod_announ == 2 then
		-- act_page = 2
		-- max_page = 2
		-- line0_l = " FMOD ANNOUNCEMENTS     "
		-- line0_s = "                    2/2 "
		-- line1_x = " CAPT DESCENT           "
		-- line1_l = "< PLAY MESSAGE          "
		-- line2_x = " CAPT PRELAND           "
		-- line2_l = "< PLAY MESSAGE          "
		-- line3_x = " TURBULENCE             "
		-- line3_l = "< PLAY MESSAGE          "
		-- line6_l = "<DEFAULT           BACK>"
	
	-- ANNOUNCEMENTS
	elseif page_fmod_announ == 1 then
		act_page = 1
		max_page = 2
		line0_l = " FMOD ANNOUNCEMENTS     "
		line0_s = "                    1/2 "
		line1_x = " CAPT WELCOME           "
		line1_l = "< PLAY MESSAGE          "
		line2_x = " CAPT CRUISE            "
		line2_l = "< PLAY MESSAGE          "
		line3_x = " CAPT DESCENT           "
		line3_l = "< PLAY MESSAGE          "
		line4_x = " CAPT PRELAND           "
		line4_l = "< PLAY MESSAGE          "
		line5_x = " TURBULENCE             "
		line5_l = "< PLAY MESSAGE          "
		line6_l = "<DEFAULT           BACK>"
	elseif page_fmod_announ == 2 then
		act_page = 2
		max_page = 2
		line0_l = " FMOD ANNOUNCEMENTS     "
		line0_s = "                    2/2 "
		line1_x = " FA & CAPTAIN           "
		line1_g = "  " .. string.format("%2d", B738DR_vol_crew)
		line1_l = "<     /0-10/"
		line2_x = " FA IN COCKPIT          "
		line2_g = "  " .. string.format("%2d", B738DR_vol_FAC)
		line2_l = "<     /0-10/"
		line3_x = " ANNOUNC.SET NR         "
		line3_g = "  " .. string.format("%2d", (B738DR_announcement_set+1))
		line3_l = "<"	--     /1-16/"
		line6_l = "<DEFAULT           BACK>"
	
	-- EQ
	elseif page_fmod_eq == 1 then
		act_page = 1
		max_page = 1
		line0_l = " FMOD EQ                "
		line0_s = "                    1/1 "
		line1_x = " ADD LOWS               "
		line1_g = "  " .. string.format("%2d", eq_low)
		line1_l = "<     /0-10/"
		line2_x = " ADD MIDS               "
		line2_g = "  " .. string.format("%2d", eq_mid)
		line2_l = "<     /0-10/"
		line3_x = " ADD HIGHS              "
		line3_g = "  " .. string.format("%2d", eq_high)
		line3_l = "<     /0-10/"
		line6_l = "<DEFAULT           BACK>"
	
	-- FLIGHT CONTROL
	elseif page_fmod_flight_ctrl == 1 then
		act_page = 1
		max_page = 1
		line0_l = " FMOD FLIGHT CONTROL    "
		line0_s = "                    1/1 "
		line1_x = " FLIGHT LEG             "
		if start_leg == 0 then
			line1_l = "<     /                 "
			line1_g = "       END              "
			line1_s = " START                  "
		else
			line1_l = "<     /                 "
			line1_g = " START                  "
			line1_s = "       END               "
		end
		-- line2_x = " END FLIGHT LEG         "
		-- if end_leg == 0 then
			-- line2_l = "<  /                    "
			-- line2_g = "    OFF                 "
			-- line2_s = " ON                     "
		-- else
			-- line2_l = "<  /                    "
			-- line2_g = " ON                     "
			-- line2_s = "    OFF                  "
		-- end
		line2_x = " CARGO LOAD             "
		if play_cargo == 0 then
			line2_l = "<     /                 "
			line2_g = "       STOP             "
			line2_s = " START                  "
		else
			line2_l = "<     /                 "
			line2_g = " START                  "
			line2_s = "       STOP              "
		end
		line6_l = "<DEFAULT           BACK>"
	end
	
end

function fmc_fmod_main(fmod_butt, fmod_butt2)
	
	if page_xtras_fmod == 1 then
		if fmod_butt == 1 then
			-- FEATURES
			page_xtras_fmod = 0
			page_fmod_features = 1
			act_page = 1
		elseif fmod_butt == 2 then
			-- VOLUMES
			page_xtras_fmod = 0
			page_fmod_volumes = 1
			act_page = 1
		-- elseif fmod_butt == 3 then
			-- -- ANNOUNCEMENTS
			-- page_xtras_fmod = 0
			-- page_fmod_announ = 1
			-- act_page = 1
		elseif fmod_butt == 3 then
			-- EQ
			page_xtras_fmod = 0
			page_fmod_eq = 1
			act_page = 1
		-- elseif fmod_butt == 5 then
			-- -- FLIGHT CONTROL
			-- page_xtras_fmod = 0
			-- page_fmod_flight_ctrl = 1
			-- act_page = 1
		end
	elseif page_xtras_fmod == 2 then
		-- load preset
		if fmod_butt ~= 0 then
			B738_set_fmod_config(fmod_butt)
			add_fmc_msg(PRESET_LOADED, 1)
			entry = ""
		end
		-- save preset
		if fmod_butt2 ~= 0 then
			if entry ~= "" then
				if string.len(entry) > 8 then
					fmod_preset[fmod_butt2][1] = string.sub(entry, 1, -1)
				else
					fmod_preset[fmod_butt2][1] = entry
				end
			end
			B738_mod_fmod_config(fmod_butt2)
			B738_save_fmod_config()
			add_fmc_msg(PRESET_SAVED, 1)
			entry = ""
		end
	end
	
end

function fmc_fmod_features(fmod_butt)

	if page_fmod_features == 1 then
		if fmod_butt == 1 then
			-- BOARDING SOUNDS
			B738CMD_enable_pax_boarding:once()
		elseif fmod_butt == 2 then
			-- PASSENGERS CHAT
			B738CMD_enable_chatter:once()
		elseif fmod_butt == 3 then
			-- AIRPORT AMBIENCE
			B738CMD_airport_set:once()
		elseif fmod_butt == 4 then
			-- MUTE TRIMWHEEL
			B738CMD_enable_mutetrim:once()
		elseif fmod_butt == 5 then
			-- ANALOG GYROS
			B738CMD_enable_gyro:once()
		end
	elseif page_fmod_features == 2 then
		if fmod_butt == 1 then
			-- FMC SOUND
			B738CMD_enable_fmc_mute_on:once()
		elseif fmod_butt == 2 then
			-- PAX APPLAUSE VOLUME ON/OFF
			B738CMD_vol_int_pax_applause:once()
		end
	end

end

function fmc_fmod_volumes(fmod_butt)
	
	if page_fmod_volumes == 1 then
		if fmod_butt == 1 then
			-- PASSENGER VOLUME
			B738CMD_vol_int_pax:once()
		elseif fmod_butt == 2 then
			-- PILOT MON VOLUME
			B738CMD_vol_PM:once()
		elseif fmod_butt == 3 then
			-- AIRPORT VOLUME
			B738CMD_vol_airport:once()
		elseif fmod_butt == 4 then
			-- GYRO VOLUME
			B738CMD_vol_int_gyro:once()
		elseif fmod_butt == 5 then
			-- ENGINE VOLUME
			B738CMD_vol_int_eng:once()
		end
	elseif page_fmod_volumes == 2 then
		if fmod_butt == 1 then
			-- AC/FANS VOLUME
			B738CMD_vol_int_ac:once()
		elseif fmod_butt == 2 then
			-- WIND VOLUME
			B738CMD_vol_int_wind:once()
		elseif fmod_butt == 3 then
			-- ROLLING/IMPACT VOLUME
			B738CMD_vol_int_roll:once()
		elseif fmod_butt == 4 then
			-- BUMPS/THUDS
			B738CMD_vol_int_bump:once()
		elseif fmod_butt == 5 then
			-- COMPUTER VOLUME (TCAS/GPWS)
			B738CMD_vol_computer:once()
		end
	elseif page_fmod_volumes == 3 then
		if fmod_butt == 1 then
			-- WEATHER VOLUME
			B738CMD_vol_weather:once()
		end
	end
	
end

function fmc_fmod_announ(fmod_butt)

	if page_fmod_announ == 1 then
		if fmod_butt == 1 then
			-- WELCOME
			B738CMD_play_welcome:once()
		elseif fmod_butt == 2 then
			-- LEVEL OFF
			B738CMD_play_cruise:once()
		elseif fmod_butt == 3 then
			-- DESCENT
			B738CMD_play_descent:once()
		elseif fmod_butt == 4 then
			-- BEFORE LANDING
			B738CMD_play_preland:once()
		elseif fmod_butt == 5 then
			-- TURBULENCE WARNING
			B738CMD_play_turbulence:once()
		end
	elseif page_fmod_announ == 2 then
		if fmod_butt == 1 then
			-- FA & CAPTAIN
			B738CMD_vol_crew:once()
		elseif fmod_butt == 2 then
			-- FA IN COCKPIT
			B738CMD_vol_FAC:once()
		elseif fmod_butt == 3 then
			-- FLIGHT ATTEND SET
			B738CMD_announcement_set:once()
		end
	end

end

function fmc_fmod_eq(fmod_butt)

	if page_fmod_eq == 1 then
		if fmod_butt == 1 then
			-- LOW FREQUENCIES
			B738_eq_low:once()
		elseif fmod_butt == 2 then
			-- MID FREQUENCIES
			B738_eq_mid:once()
		elseif fmod_butt == 3 then
				-- HIGH FREQUENCIES
			B738_eq_high:once()
		end
	end
	
end

function fmc_fmod_flight_ctrl(fmod_butt)

	if page_fmod_flight_ctrl == 1 then
		if fmod_butt == 1 then
			-- START/END FLIGHT LEG
			if start_leg == 0 then
				B738_start_leg:once()
			else
				B738_end_leg:once()
			end
		elseif fmod_butt == 2 then
			-- CARGO/CLEAN/CATER
			B738CMD_play_cargo:once()
		end
	end
	
end

function B738_fmc_xtras_others()

	if page_xtras_others == 1 then
		act_page = 1
		max_page = 4
		
		line0_l = " OTHER CONFIG           "
		line0_s = "                    1/4 "
		line1_x = " ALIGN TIME             "
		if B738DR_align_time == 0 then
			line1_l = "<    /    /             "
			line1_g = " REAL                   "
			line1_s = "      LONG SHORT        "
		elseif B738DR_align_time == 1 then
			line1_l = "<    /    /             "
			line1_g = "      LONG              "
			line1_s = " REAL      SHORT        "
		else
			line1_l = "<    /    /             "
			line1_g = "           SHORT        "
			line1_s = " REAL LONG              "
		end
		line2_x = " HIDE YOKE              "
		if simDR_hide_yoke == 0 then
			line2_l = "<    /                  "
			line2_g = " HIDE                   "
			line2_s = "      SHOW              "
		else
			line2_l = "<    /                  "
			line2_g = "      SHOW              "
			line2_s = " HIDE                   "
		end
		line3_x = " CHOCK                  "
		if B738DR_chock_status == 0 then
			line3_l = "<   /                   "
			line3_g = " OFF                    "
			line3_s = "     ON                 "
		else
			line3_l = "<   /                   "
			line3_g = "     ON                 "
			line3_s = " OFF                    "
		end
		line4_x = " PAUSE AT T/D           "
		if B738DR_pause_td == 0 then
			line4_l = "<   /                   "
			line4_g = " OFF                    "
			line4_s = "     ON                 "
		else
			line4_l = "<   /                   "
			line4_g = "     ON                 "
			line4_s = " OFF                    "
		end
		line5_x = " TOE BRAKE AXIS         "
		if B738DR_toe_brakes_ovr == 0 then
			line5_l = "<   /                   "
			line5_g = "     ON                 "
			line5_s = " OFF                    "
		else
			line5_l = "<   /                   "
			line5_g = " OFF                    "
			line5_s = "     ON                 "
		end
		-- line6_x = "                        "
		line6_l = "<DEFAULT           BACK>"
		-- line6_s = "                        "
	elseif page_xtras_others == 2 then
		act_page = 2
		max_page = 4
		
		line0_l = " OTHER CONFIG           "
		line0_s = "                    2/4 "
		line1_x = " ENGINE NO RUNNING STATE"
		if B738DR_engine_no_running_state == 0 then
			line1_l = "<         /             "
			line1_g = " COLD-DARK              "
			line1_s = "           TURN AROUND  "
		else
			line1_l = "<         /             "
			line1_g = "           TURN AROUND  "
			line1_s = " COLD-DARK              "
		end
		line2_x = " PARKBRAKE REMOVE CHOCKS"
		if B738DR_parkbrake_remove_chock == 0 then
			line2_l = "<   /                   "
			line2_g = " OFF                    "
			line2_s = "     ON                 "
		else
			line2_l = "<   /                   "
			line2_g = "     ON                 "
			line2_s = " OFF                    "
		end
		line3_x = " THROTTLE NOISE LOCK    "
		if B738DR_throttle_noise == 0 then
			line3_g = " OFF"
		else
			line3_g = "  " .. string.format("%2d", B738DR_throttle_noise)
		end
		line3_l = "<     /OFF,1-10/"
		-- line3_s = "                        "
		line4_x = " FUEL GAUGE             "
		if B738DR_fuelgauge == 0 then
			line4_l = "<          /            "
			line4_g = " SIDEBYSIDE             "
			line4_s = "            OVERUNDER   "
		else
			line4_l = "<          /            "
			line4_g = "            OVERUNDER   "
			line4_s = " SIDEBYSIDE             "
		end
		line5_x = " NOSEWHEEL AXIS         "
		if B738DR_nosewheel == 0 then
			line5_l = "<  /   /                "
			line5_g = " ON                     "
			line5_s = "    YAW ROLL            "
		elseif B738DR_nosewheel == 1 then
			line5_l = "<  /   /                "
			line5_g = "    YAW                 "
			line5_s = " ON     ROLL            "
		else
			line5_l = "<  /   /                "
			line5_g = "        ROLL            "
			line5_s = " ON YAW                 "
		end
		-- line6_x = "                        "
		line6_l = "<DEFAULT           BACK>"
		-- line6_s = "                        "
	elseif page_xtras_others == 3 then
		act_page = 3
		max_page = 4
		
		line0_l = " OTHER CONFIG           "
		line0_s = "                    3/4 "
		line1_x = " FLIGHTPLAN SAVE FORMAT "
		if B738DR_fpln_format == 0 then
			line1_l = "<   /                   "
			line1_g = " FMX                    "
			line1_s = "     FMS                "
		else
			line1_l = "<   /                   "
			line1_g = "     FMS                "
			line1_s = " FMX                    "
		end
		line2_x = " ND DISPLAY             "
		if B738DR_track_up == 1 then
			line2_l = "<        /              "
			line2_g = " TRACK-UP               "
			line2_s = "          HEADING-UP    "
		else
			line2_l = "<        /              "
			line2_g = "          HEADING-UP    "
			line2_s = " TRACK-UP               "
		end
		line3_x = " SYNC BARO CPT->FO      "
		if B738DR_sync_baro == 1 then
			line3_l = "<  /                    "
			line3_g = " ON                     "
			line3_s = "    OFF                 "
		else
			line3_l = "<  /                    "
			line3_g = "    OFF                 "
			line3_s = " ON                     "
		end
		line4_x = " WINDSHIELD EFFECTS     "
		if B738DR_kill_effect == 0 then
			line4_l = "<  /  /                 "
			line4_g = " ON                     "
			line4_s = "    XE OFF              "
		elseif B738DR_kill_effect == 1 then
			line4_l = "<  /  /                 "
			line4_g = "    XE                  "
			line4_s = " ON    OFF              "
		else
			line4_l = "<  /  /                 "
			line4_g = "       OFF              "
			line4_s = " ON XE                  "
		end
		line6_l = "<DEFAULT           BACK>"
	elseif page_xtras_others == 4 then
		act_page = 4
		max_page = 4
		
		line0_l = " OTHER CONFIG           "
		line0_s = "                    4/4 "
		line1_x = " PITCH NULL ZONE        "
		line1_g = "      " .. string.format("%2d", simDR_pitch_nz * 100)
		line1_l = "<           /0-30/     >"
		line2_x = " ROLL NULL ZONE         "
		line2_g = "      " .. string.format("%2d", simDR_roll_nz * 100)
		line2_l = "<           /0-30/     >"
		line3_x = " YAW NULL ZONE          "
		line3_g = "      " .. string.format("%2d", simDR_yaw_nz * 100)
		line3_l = "<           /0-30/     >"
		line6_l = "<DEFAULT           BACK>"
	end
end

function B738_fmc_ident()

	if page_ident == 1 then
		act_page = 1
		max_page = 1
		line0_l = "      IDENT             "
		line0_s = "                    1/2 "
		line1_x = " MODEL        ENG RATING"
		line1_l = "737-800WL            26K"
		-- line1_s = "                        "
		line2_x = " NAV DATA         ACTIVE"
		line2_l = airac_navdata .. " "
		line2_l = line2_l .. airac_navdata_active
		--line2_l = "0428170103 APR28MAY28/17"
		-- line2_s = "                        "
		-- line3_x = "                        "
		-- line3_l = "                        "	--JAN02FEB01/17"
		-- line3_s = "                        "
		line4_x = " OP PROGRAM             "
		line4_l = "556909-001  (U11.0)     "
		-- line4_s = "                        "
		line5_x = "               SUPP DATA"
		-- line5_l = "                        "
		-- line5_s = "                        "
		-- line6_x = "                        "
		line6_l = "<INDEX         POS INIT>"
		-- line6_s = "                        "
	elseif page_ident == 2 then
		act_page = 2
		max_page = 2
		line0_l = "      IDENT             "
		line0_s = "                    2/2 "
		line1_x = " MODEL        ENG RATING"
		line1_l = "737-800WL            26K"
		-- line1_s = "                        "
		line2_x = " NAV DATA         ACTIVE"
		line2_l = "0402170101 FEB04MAR04/17"
		-- line2_s = "                        "
		-- line3_x = "                        "
		line3_l = "           JAN02FEB01/17"
		-- line3_s = "                        "
		line4_x = " OP PROGRAM             "
		line4_l = "556909-001  (U11.0)     "
		-- line4_s = "                        "
		line5_x = "               SUPP DATA"
		-- line5_l = "                        "
		-- line5_s = "                        "
		-- line6_x = "                        "
		line6_l = "<INDEX         POS INIT>"
		-- line6_s = "                        "
	end

end

function B738_fmc_offset()

	if page_offset == 1 then
		act_page = 1
		max_page = 1
		if offset_act == 0 then
			line0_l = "     LATERAL OFFSET     "
		elseif offset_act == 3 then
			line0_l = " ACT LATERAL OFFSET     "
		else
			line0_inv = " MOD"
			line0_l = "     LATERAL OFFSET     "
		end
		--line0_inv = " MOD"
		--line0_l = "     LATERAL OFFSET     "
		--line0_l = " ACT LATERAL OFFSET     "
		line0_s = "                    1/1 "
		-- line1_x = "                        "
		-- line1_l = "                        "
		-- line1_s = "                        "
		line2_x = " OFFSET DIST            "
		if offset_dist == 0 then
			line2_l = "-----"
		else
			if offset_side == 1 then
				line2_l = "L"
			else
				line2_l = "R"
			end
			line2_l = line2_l .. string.format("%04.1f", offset_dist)
		
			--line2_l = "L10.0                   "
			-- line2_s = "                        "
			
			line3_x = " START WAYPOINT         "
			if offset_start == 0 then
				line3_l = "------"
			else
				line3_l = legs_data3[offset_start][1]
			end
			--line3_l = "------                  "
			-- line3_s = "                        "
			
			line4_x = " END WAYPOINT           "
			if offset_end == 0 then
				line4_l = "------"
			else
				line4_l = legs_data3[offset_end][1]
			end
			--line4_l = "------                  "
			-- line4_s = "                        "
		end
		-- line5_x = "                        "
		-- line5_l = "                        "
		-- line5_s = "                        "
		-- line6_x = "                        "
		if offset_act == 1 then
			line6_l = "<ERASE                  "
		end
		-- line6_s = "                        "
	end

end


function pos_to_str(pos_pos)
	local position2 = pos_pos
	local pos_str2 = ""
	pos_str2 = string.sub(position2, 1, 3) .. "`"
	pos_str2 = pos_str2 .. string.sub(position2, 4, 7)
	pos_str2 = pos_str2 .. " "
	pos_str2 = pos_str2 .. string.sub(position2, 8, 11)
	pos_str2 = pos_str2 .. "`"
	pos_str2 = pos_str2 .. string.sub(position2, 12, 15)
	return pos_str2
end

function B738_fmc_pos_init()

	local pos_str = ""
	
	if page_pos_init == 1 then
		act_page = 1
		max_page = 2
		line0_l = "    POS INIT            "
		line0_s = "                    1/3 "
		pos_str = pos_to_str(last_pos)
		line1_x = "                LAST POS"
		line1_l = "      " .. pos_str
		-- line1_s = "                        "
		line2_x = "REF AIRPORT             "
		--line2_l = ref_icao .. "                    "
		line2_l = ref_icao2
		if ref_icao_pos ~= "               " then
			line2_l = line2_l .. "  ".. pos_to_str(ref_icao_pos)
		end
		-- line2_s = "                        "
		line3_x = "GATE                    "
		line3_l = (ref_gate .. "                   ")
		-- line3_s = "                        "
		local align_mode = 0
		
		if B738DR_irs_left_mode == 1 and B738DR_irs_left == 2 then
			align_mode = 1
		end
		if B738DR_irs_right_mode == 1 and B738DR_irs_right == 2 then
			align_mode = 1
		end
		if B738DR_irs_left_mode == 2 or B738DR_irs_right_mode == 2 then
			align_mode = 0
		end
		if align_mode == 1 then
			if irs_pos == "" then
				pos_str = pos_to_str("*****.*******.*")
			else
				pos_str = pos_to_str(irs_pos)
			end
			line4_x = "             SET IRS POS"
			line4_l = "      " .. pos_str
			disable_POS_4R = 0
		else
			-- line4_x = "                        "
			-- line4_l = "                        "
			-- if entry == ENTER_IRS_POS then
				-- entry = ""
			-- end
			disable_POS_4R = 1
			irs_pos = ""
			--irs_pos = "*****.*******.*"
		end
		
		-- line4_s = "                        "
		align_mode = 0
		if B738DR_irs_left_mode == 1 and B738DR_irs_left == 3 then
			align_mode = 1
		end
		if B738DR_irs_right_mode == 1 and B738DR_irs_right == 3 then
			align_mode = 1
		end
		if B738DR_irs_left_mode == 3 or B738DR_irs_right_mode == 3 then
			align_mode = 0
		end
		if align_mode == 1 then
			line5_x = "GMT-MON/DY   SET IRS HDG"
			line5_l = zulu_time .. "       "
			line5_l = line5_l .. irs_hdg
			disable_POS_5R = 0
		else
			line5_x = "GMT-MON/DY              "
			line5_l = zulu_time .. "           "
			-- if entry == ENTER_IRS_HDG then
				-- entry = ""
			-- end
			disable_POS_5R = 1
			irs_hdg = "---`"
		end
		-- line5_s = "                        "
		line6_x = "------------------------"
		line6_l = "<INDEX            ROUTE>"
		-- line6_s = "                        "
		if ref_icao2 == "----" then
			disable_POS_3L = 1
		else
			disable_POS_3L = 0
		end
	elseif page_pos_init == 2 then
		act_page = 2
		max_page = 2
		line0_l = "    POS REF             "
		line0_s = "                    2/3 "
		line1_x = " FMC POS              GS"
		line1_l = pos_to_str(fmc_pos) .. " "
		line1_l = line1_l .. fmc_gs
		line1_s = "                      KT"
		pos_str = pos_to_str(B738DR_irs_pos)
		line2_x = " IRS L                  "
		line2_l = pos_str .. " "
		line2_l = line2_l .. irs_gs
		line2_s = "                      KT"
		pos_str = pos_to_str(B738DR_irs2_pos)
		line3_x = " IRS R                  "
		line3_l = pos_str .. " "
		line3_l = line3_l .. irs2_gs
		line3_s = "                      KT"
		pos_str = pos_to_str(B738DR_gps_pos)
		line4_x = " GPS L                  "
		line4_l = pos_str .. "     "
		line4_s = "                        "
		pos_str = pos_to_str(B738DR_gps2_pos)
		line5_x = " GPS R                  "
		line5_l = pos_str .. "     "
		-- line5_s = "                        "
		line6_x = " RADIO                  "
		-- line6_l = "                        "
		-- line6_s = "                        "
	end

end

function B738_fmc_rte_init()

	if page_rte_init == 1 then
		--act_page = 1
		
		local ref_icao_disp = ""
		local fpln_len = 0
		
		local ii = 0
		local jj = 0
		local kk = 0
		local ll = 0
		
		local temp_str = ""
		local temp_num = 0
		local temp_num2 = 0
		local temp_string = ""
		
		local max_page_fpln = 0
		
		local left_line = {}
		left_line[1] = ""
		left_line[2] = ""
		left_line[3] = ""
		left_line[4] = ""
		left_line[5] = ""
		local right_line = {}
		right_line[1] = ""
		right_line[2] = ""
		right_line[3] = ""
		right_line[4] = ""
		right_line[5] = ""
		local left_line_x = {}
		left_line_x[1] = ""
		left_line_x[2] = ""
		left_line_x[3] = ""
		left_line_x[4] = ""
		left_line_x[5] = ""
		left_line_x[6] = "------------------------"
		
		local sid_len = 0
		local txt_dspl = ""
		
		-- if ref_icao == "----" then
			-- ref_icao_disp = "****"
		-- else
			-- -- if in_flight_mode == 1 then
				-- -- ref_icao_disp = "    "
			-- -- else
				-- ref_icao_disp = ref_icao
			-- -- end
		-- end
		if ref_icao_x == "----" then
			ref_icao_disp = "****"
		else
			ref_icao_disp  = ref_icao_x
		end
		
		-- Flight plan
		-- if ref_icao == "----" or des_icao == "****" then
			-- max_page_fpln = 0
		-- else
			-- jj = math.floor(fpln_num2 / 5)
			-- kk = fpln_num2 % 5
			-- max_page_fpln = jj + 2
		-- end
		if ref_icao_x == "----" or des_icao_x == "****" then
			max_page_fpln = 0
		else
			jj = math.floor(fpln_num2 / 5)
			kk = fpln_num2 % 5
			max_page_fpln = jj + 2
		end
		if act_page > max_page_fpln then
			act_page = max_page_fpln
			if act_page == 0 then
				act_page = 1
			end
		end
		
		if act_page == 1 then
			if B738DR_fmc_exec_lights == 1 then
				if legs_num > 1 then
					line0_inv = " MOD"
					line0_l   = "     "
				else
					line0_l = "     "
				end
			else
				if ref_icao == "----" or des_icao == "****" then
					line0_l = "     "
				else
					if legs_num > 1 then
						line0_l = " ACT "
					else
						line0_l = "     "
					end
				end
				line0_inv = ""
			end
			line1_x = " ORIGIN             DEST"
			line1_l = ref_icao_disp .. "                "
			line1_l = line1_l .. des_icao_x
			-- line1_s = "                        "
			line2_x = " CO ROUTE        FLT NO."
			--line2_l = "--------        --------"
			-- temp_str = co_route
			-- if co_route ~= "------------" then
			temp_str = co_route_x
			if co_route_x ~= "------------" then
				temp_num2 = string.len(temp_str)
				if temp_num2 < 12 then
					for temp_num = temp_num2, 11 do
						temp_str = temp_str .. " "
					end
				end
			end
			line2_l = temp_str .. "    "
			temp_str = flt_num
			if flt_num ~= "--------" then
				temp_num2 = string.len(temp_str)
				if temp_num2 < 8 then
					for temp_num = temp_num2, 7 do
						temp_str = " " .. temp_str
					end
				end
			end
			line2_l = line2_l .. temp_str
			-- line2_s = "                        "
			line3_x = " RUNWAY                 "
			if in_flight_mode == 1 or ref_icao == "----" then
				line3_x = ""
				line3_l = "             SAVE ROUTE>"
			else
				line3_x = " RUNWAY                 "
				txt_dspl = ref_rwy2
				sid_len = string.len(ref_rwy2)
				if sid_len < 13 then
					for jj = sid_len, 12 do
						txt_dspl = txt_dspl .. " "
					end
				end
				line3_l = txt_dspl .. "SAVE ROUTE>"
			end
			-- line3_s = "                        "
			line4_x = "------------------------"
			-- line4_l = "                        "
			-- line4_s = "                        "
		
		end
		
		
		if act_page > 1 then
			
			if B738DR_fmc_exec_lights == 1 then
				if legs_num > 1 then
					line0_inv = " MOD"
					line0_l   = "     "
				else
					line0_l = "     "
				end
			else
				-- if ref_icao == "----" or des_icao == "****" then
					-- line0_l = "     "
				-- else
					if legs_num > 1 then
						line0_l = " ACT "
					else
						line0_l = "     "
					end
				-- end
				line0_inv = ""
			end
			-- if B738DR_fms_exec_light_pilot == 1 then
				-- line0_inv = " MOD"
				-- line0_l   = "     "
			-- else
				-- line0_l = " ACT "
				-- line0_inv = ""
			-- end
			
			kk = (act_page - 2) * 5
			for ii = 1, 5 do
				jj = kk + ii --(ii * 2) + 1
				
				
				if jj > fpln_num2 then
					if jj == fpln_num2 + 1 then
						if fpln_num2 > 1 then
							if fpln_data2[fpln_num2][2] ~= "" and fpln_data2[fpln_num2][1] == "" then
								left_line[ii] = "-----"
								right_line[ii] = ""
							else
								left_line[ii] = "-----"
								right_line[ii] = "-----"
							end
						elseif fpln_num2 > 0 then
							if fpln_data2[fpln_num2][2] ~= "" and fpln_data2[fpln_num2][1] == "" then
								left_line[ii] = ""
								right_line[ii] = ""
							else
								left_line[ii] = "-----"
								right_line[ii] = "-----"
							end
						else
							left_line[ii] = "-----"
							right_line[ii] = "-----"
						end
					else
						left_line[ii] = ""
						right_line[ii] = ""
					end
				else
					if fpln_data2[jj][2] == "" and fpln_data2[jj][1] == "" then
						left_line[ii] = "*****"
						right_line[ii] = "*****"
						left_line_x[ii+1] = "---- DISCONTINUITY -----"
					elseif fpln_data2[jj][2] == "" and fpln_data2[jj][1] ~= "" then
						left_line[ii] = "DIRECT"
						right_line[ii] = fpln_data2[jj][1]
					else
						left_line[ii] = fpln_data2[jj][2]
						if fpln_data2[jj][1] == "" then
							right_line[ii] = "*****"
							-- create discontinuity to line_x
							left_line_x[ii+1] = "---- DISCONTINUITY -----"
						else
							right_line[ii] = fpln_data2[jj][1]
						end
					end
				end
			end
			
			-- display engine
			for ii = 1, 5 do
				sid_len = string.len(left_line[ii])
				if sid_len < 15 then
					for jj = sid_len, 14 do
						left_line[ii] = left_line[ii] .. " "
					end
				end
				sid_len = string.len(right_line[ii])
				if sid_len < 9 then
					for jj = sid_len, 8 do
						right_line[ii] = " " .. right_line[ii]
					end
				end
			end
			line1_x = " VIA                 TO "
			-- line2_x = "                        "
			-- line3_x = "                        "
			-- line4_x = "                        "
			-- line5_x = "                        "
			line2_x = left_line_x[2]
			line3_x = left_line_x[3]
			line4_x = left_line_x[4]
			line5_x = left_line_x[5]
			line6_x = left_line_x[6]
			line1_l = left_line[1] .. right_line[1]
			line2_l = left_line[2] .. right_line[2]
			line3_l = left_line[3] .. right_line[3]
			line4_l = left_line[4] .. right_line[4]
			line5_l = left_line[5] .. right_line[5]
		
		end
		
		max_page = math.max(max_page_fpln, 1)
		
		-- line0_s = "                    " .. string.format("%1d",act_page)
		-- line0_s = line0_s .. "/"
		-- line0_s = line0_s .. string.format("%1d",max_page)
		
		line0_s = string.format("%2d",act_page)
		line0_s = line0_s .. "/"
		if max_page > 9 then
			line0_s = line0_s .. string.format("%2d",max_page)
		else
			line0_s = line0_s .. string.format("%1d",max_page)
		end
		line0_s = spaces_before(line0_s, 23)
		
		-- line5_s = "                        "
		--line6_x = "------------------------"
		
		line0_l = line0_l .. "RTE                "
		
		if B738DR_fmc_exec_lights == 1 then
			if legs_num > 1 then
				line6_l = "<ERASE                  "
			end
		else
			if exec_load_fpln == 1 then
				if legs_num > 1 then
					line6_l = "<ERASE         ACTIVATE>"
				else
					line6_l = "               ACTIVATE>"
				end
			elseif legs_num > 1 then
				if in_flight_mode == 0 then
					if pre_flt_perf_init == 0 then
						line6_l = "              PERF INIT>"
					else
						line6_l = "                TAKEOFF>"
					end
				else
					line6_l = "                 OFFSET>"
				end
			else
				if legs_num > 0 and legs_num2 > 1 then
					line6_l = "               ACTIVATE>"
				else
					if in_flight_mode == 0 then
						if pre_flt_perf_init == 0 then
							line6_l = "              PERF INIT>"
						else
							line6_l = "                TAKEOFF>"
						end
					else
						line6_l = "                 OFFSET>"
					end
				end
			end
		end
		--line6_s = "                        "
	end

end

function B738_fmc_dep_arr()

	if page_dep_arr == 1 then
		act_page = 1
		max_page = 1
		line0_l = "      DEP/ARR INDEX     "
		line0_s = "                    1/1 "
		-- line1_x = "                        "
		--line1_l = "<DEP      XXXX      ARR>"
		if ref_icao == "-----" or exec_load_fpln > 0 then
			line1_l = ""
		else
			line1_l = "<DEP      " .. ref_icao
			line1_l = line1_l .. "      ARR>"
		end
		-- line1_s = "                        "
		-- line2_x = "                        "
		--line2_l = "          XXXX      ARR>"
		if des_icao == "****" or exec_load_fpln > 0 then
			line2_l = ""
		else
			line2_l = "          " .. des_icao
			line2_l = line2_l .. "      ARR>"
		end
		-- line2_s = "                        "
		-- line3_x = "                        "
		-- line3_l = "                        "
		-- line3_s = "                        "
		-- line4_x = "                        "
		-- line4_l = "                        "
		-- line4_s = "                        "
		-- line5_x = "                        "
		-- line5_l = "                        "
		-- line5_s = "                        "
		line6_x = " DEP                ARR "
		line6_l = "<----    OTHER     ---->"
		-- line6_s = "                        "
	end

end

function B738_fmc_fix()

	if page_fix == 1 then
		--act_page = 1
		max_page = math.min(fix_data_num + 1, 5)
		if act_page > max_page then
			act_page = max_page
		end
		
		local nd_lat = simDR_latitude
		local nd_lon = simDR_longitude
		local rd_from = ""
		local rd_from2 = ""
		local fix_tmp = 0
		
		
		
		line0_l = "      FIX INFO          "
		--line0_s = "                    1/1 "
		line0_s = "                    "
		line0_s = line0_s .. string.format("%1d", act_page) .. "/" .. string.format("%1d", max_page)
		
		if act_page <= fix_data_num then
			-- calculate radial/distance from fix
			fix_tmp = (nd_calc_brg(fix_data[act_page][3], fix_data[act_page][4], nd_lat, nd_lon) + simDR_mag_variation + 360) % 360
			rd_from = rd_from .. string.format("%03d", fix_tmp) .. "/"
			fix_tmp = nd_calc_dist2(fix_data[act_page][3], fix_data[act_page][4], nd_lat, nd_lon)
			if fix_tmp > 999 then
				rd_from = rd_from .. "---"
			elseif fix_tmp >= 100 then
				rd_from = rd_from .. string.format("%3d", fix_tmp)
			elseif fix_tmp >= 10 then
				rd_from = rd_from .. string.format("%2d", fix_tmp)
			else
				rd_from = rd_from .. string.format("%1d", fix_tmp)
			end
			line1_x = " FIX  RAD/DIS FR        "
			line1_l = spaces_after(fix_data[act_page][1], 5) .. "   " .. rd_from
			
			line2_x = "RAD/ DIS ETA   DTG   ALT"
			--line2_l = "130/24  2004.5  10 12000"
			rd_from = "---"
			if fix_data[act_page][6] ~= -1 then
				rd_from = string.format("%03d", fix_data[act_page][6])
				rd_from2 = "/"
				if fix_data[act_page][12] <= 0 then
					rd_from2 = rd_from2 .. "---"
				else
					fix_tmp = fix_data[act_page][16]
					if fix_tmp >= 100 then
						rd_from2 = rd_from2 .. string.format("%3d", fix_tmp)
					elseif fix_tmp >= 10 then
						rd_from2 = rd_from2 .. string.format("%2d", fix_tmp)
					else
						rd_from2 = rd_from2 .. string.format("%1d", fix_tmp)
					end
				end
				rd_from = rd_from .. rd_from2
			elseif fix_data[act_page][7] ~= -1 then
				rd_from = rd_from .. "/"
				if fix_data[act_page][7] >= 100 then
					rd_from = rd_from .. string.format("%3d", fix_data[act_page][7])
				elseif fix_data[act_page][7] >= 10 then
					rd_from = rd_from .. string.format("%2d", fix_data[act_page][7])
				else
					rd_from = rd_from .. string.format("%1d", fix_data[act_page][7])
				end
			end
			line2_l = rd_from
			
			rd_from = "---"
			if fix_data[act_page][8] ~= -1 then
				rd_from = string.format("%03d", fix_data[act_page][8])
				rd_from2 = "/"
				if fix_data[act_page][21] <= 0 then
					rd_from2 = rd_from2 .. "---"
				else
					fix_tmp = fix_data[act_page][25]
					if fix_tmp >= 100 then
						rd_from2 = rd_from2 .. string.format("%3d", fix_tmp)
					elseif fix_tmp >= 10 then
						rd_from2 = rd_from2 .. string.format("%2d", fix_tmp)
					else
						rd_from2 = rd_from2 .. string.format("%1d", fix_tmp)
					end
				end
				rd_from = rd_from .. rd_from2
			elseif fix_data[act_page][9] ~= -1 then
				rd_from = rd_from .. "/"
				if fix_data[act_page][9] >= 100 then
					rd_from = rd_from .. string.format("%3d", fix_data[act_page][9])
				elseif fix_data[act_page][9] >= 10 then
					rd_from = rd_from .. string.format("%2d", fix_data[act_page][9])
				else
					rd_from = rd_from .. string.format("%1d", fix_data[act_page][9])
				end
			end
			line3_l = rd_from
			
			rd_from = "---"
			if fix_data[act_page][10] ~= -1 then
				rd_from = string.format("%03d", fix_data[act_page][10])
				rd_from2 = "/"
				if fix_data[act_page][30] <= 0 then
					rd_from2 = rd_from2 .. "---"
				else
					fix_tmp = fix_data[act_page][34]
					if fix_tmp >= 100 then
						rd_from2 = rd_from2 .. string.format("%3d", fix_tmp)
					elseif fix_tmp >= 10 then
						rd_from2 = rd_from2 .. string.format("%2d", fix_tmp)
					else
						rd_from2 = rd_from2 .. string.format("%1d", fix_tmp)
					end
				end
				rd_from = rd_from .. rd_from2
			elseif fix_data[act_page][11] ~= -1 then
				rd_from = rd_from .. "/"
				if fix_data[act_page][11] >= 100 then
					rd_from = rd_from .. string.format("%3d", fix_data[act_page][11])
				elseif fix_data[act_page][11] >= 10 then
					rd_from = rd_from .. string.format("%2d", fix_data[act_page][11])
				else
					rd_from = rd_from .. string.format("%1d", fix_data[act_page][11])
				end
			end
			line4_l = rd_from
			
			line5_x = " ABEAM                  "
			--line5_l = "150/23  2006.5  18 15500"
			
			-- distance limited to 511 NM
			-- distance format /x, /x.x, /.x
			-- radial xxx, xxx/
		else
			line1_x = " FIX  RAD/DIS FR        "
			line1_l = "*****                   "
			line2_x = "RAD/ DIS ETA   DTG   ALT"
			line2_l = "---                     "
			line3_l = "---                     "
			line4_l = "---                     "
			line5_x = " ABEAM                  "
		end
	end

end


-- function create_rnw_list()

	-- local rnw_temp = ""
	-- local temp_str1 = ""
	-- local temp_str2 = ""
	-- local ii = 0
	-- local jj = 0
	
	-- ref_rnw_list = {}
	-- ref_rnw_list_num = 0
	-- ref_rnw_list2 = {}
	-- ref_rnw_list_num2 = 0
	-- des_rnw_list = {}
	-- des_rnw_list_num = 0
	
	-- if rnw_data_num > 0 then
		-- for ii = 1, rnw_data_num do
			-- if ref_icao == rnw_data[ii][1] then
				-- ref_rnw_list_num2 = ref_rnw_list_num2 + 1
				-- ref_rnw_list2[ref_rnw_list_num2] = {}
				-- ref_rnw_list2[ref_rnw_list_num2][1] = rnw_data[ii][1]
				-- ref_rnw_list2[ref_rnw_list_num2][2] = rnw_data[ii][2]
				-- ref_rnw_list2[ref_rnw_list_num2][3] = rnw_data[ii][3]
				-- ref_rnw_list2[ref_rnw_list_num2][4] = rnw_data[ii][4]
				-- ref_rnw_list2[ref_rnw_list_num2][5] = rnw_data[ii][5]
				-- ref_rnw_list2[ref_rnw_list_num2][6] = rnw_data[ii][6]
				-- ref_rnw_list2[ref_rnw_list_num2][7] = rnw_data[ii][7]
				-- ref_rnw_list2[ref_rnw_list_num2][8] = rnw_data[ii][8]
				-- if ref_sid2 == "------" then
					-- ref_rnw_list_num = ref_rnw_list_num + 1
					-- ref_rnw_list[ref_rnw_list_num] = {}
					-- ref_rnw_list[ref_rnw_list_num][1] = rnw_data[ii][1]
					-- ref_rnw_list[ref_rnw_list_num][2] = rnw_data[ii][2]
					-- ref_rnw_list[ref_rnw_list_num][3] = rnw_data[ii][3]
					-- ref_rnw_list[ref_rnw_list_num][4] = rnw_data[ii][4]
					-- ref_rnw_list[ref_rnw_list_num][5] = rnw_data[ii][5]
					-- ref_rnw_list[ref_rnw_list_num][6] = rnw_data[ii][6]
					-- ref_rnw_list[ref_rnw_list_num][7] = rnw_data[ii][7]
					-- ref_rnw_list[ref_rnw_list_num][8] = rnw_data[ii][8]
				-- else
					-- -- runways by SID
					-- rnw_temp = "RW" .. rnw_data[ii][2]
					-- for jj = 1, sid_num do
						-- if ref_data_sid[jj][1] == ref_sid2 then
							-- if string.sub(ref_data_sid[jj][2],-1,-1) == "B" then
								-- temp_str1 = string.sub(ref_data_sid[jj][2],1,-2)
								-- temp_str2 = string.sub(rnw_temp,1,-2)
							-- else
								-- temp_str1 = "A"
								-- temp_str2 = "B"
							-- end
							-- if rnw_temp == ref_data_sid[jj][2] or ref_data_sid[jj][2] == "ALL" or temp_str1 == temp_str2 then
								-- ref_rnw_list_num = ref_rnw_list_num + 1
								-- ref_rnw_list[ref_rnw_list_num] = {}
								-- ref_rnw_list[ref_rnw_list_num][1] = rnw_data[ii][1]
								-- ref_rnw_list[ref_rnw_list_num][2] = rnw_data[ii][2]
								-- ref_rnw_list[ref_rnw_list_num][3] = rnw_data[ii][3]
								-- ref_rnw_list[ref_rnw_list_num][4] = rnw_data[ii][4]
								-- ref_rnw_list[ref_rnw_list_num][5] = rnw_data[ii][5]
								-- ref_rnw_list[ref_rnw_list_num][6] = rnw_data[ii][6]
								-- ref_rnw_list[ref_rnw_list_num][7] = rnw_data[ii][7]
								-- ref_rnw_list[ref_rnw_list_num][8] = rnw_data[ii][8]
								-- break
							-- end
						-- end
					-- end
				-- end
			-- end
			
			-- if des_icao == rnw_data[ii][1] then
				-- --if des_star == "------" then
					-- des_rnw_list_num = des_rnw_list_num + 1
					-- des_rnw_list[des_rnw_list_num] = {}
					-- des_rnw_list[des_rnw_list_num][1] = rnw_data[ii][1]
					-- des_rnw_list[des_rnw_list_num][2] = rnw_data[ii][2]
					-- des_rnw_list[des_rnw_list_num][3] = rnw_data[ii][3]
					-- des_rnw_list[des_rnw_list_num][4] = rnw_data[ii][4]
					-- des_rnw_list[des_rnw_list_num][5] = rnw_data[ii][5]
					-- des_rnw_list[des_rnw_list_num][6] = rnw_data[ii][6]
					-- des_rnw_list[des_rnw_list_num][7] = rnw_data[ii][7]
					-- des_rnw_list[des_rnw_list_num][8] = rnw_data[ii][8]
				-- -- else
					-- -- -- runways by STAR
					-- -- rnw_temp = "RW" .. rnw_data[ii][2]
					-- -- for jj = 1, star_num do
						-- -- if data_des_star[jj][1] == des_star then
							-- -- if string.sub(data_des_star[jj][2],-1,-1) == "B" then
								-- -- temp_str1 = string.sub(data_des_star[jj][2],1,-2)
								-- -- temp_str2 = string.sub(rnw_temp,1,-2)
							-- -- else
								-- -- temp_str1 = "A"
								-- -- temp_str2 = "B"
							-- -- end
							-- -- if rnw_temp == data_des_star[jj][2] or data_des_star[jj][2] == "ALL" or temp_str1 == temp_str2 then
								-- -- des_rnw_list_num = des_rnw_list_num + 1
								-- -- des_rnw_list[des_rnw_list_num] = {}
								-- -- des_rnw_list[des_rnw_list_num][1] = rnw_data[ii][1]
								-- -- des_rnw_list[des_rnw_list_num][2] = rnw_data[ii][2]
								-- -- des_rnw_list[des_rnw_list_num][3] = rnw_data[ii][3]
								-- -- des_rnw_list[des_rnw_list_num][4] = rnw_data[ii][4]
								-- -- des_rnw_list[des_rnw_list_num][5] = rnw_data[ii][5]
								-- -- des_rnw_list[des_rnw_list_num][6] = rnw_data[ii][6]
								-- -- des_rnw_list[des_rnw_list_num][7] = rnw_data[ii][7]
								-- -- des_rnw_list[des_rnw_list_num][8] = rnw_data[ii][8]
								-- -- break
							-- -- end
						-- -- end
					-- -- end
				-- --end
			-- end
		-- end
	-- end

-- end


function create_rnw_list()

	local rnw_temp = ""
	local temp_str1 = ""
	local temp_str2 = ""
	local ii = 0
	local jj = 0
	local nd_x = 0
	local idx_rec = 0
	
	ref_rnw_list = {}
	ref_rnw_list_num = 0
	ref_rnw_list2 = {}
	ref_rnw_list_num2 = 0
	des_rnw_list = {}
	des_rnw_list_num = 0
	
	if rnw_data_num > 0 then
		nd_x = string.byte(string.sub(ref_icao, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_rnw[nd_x][99999] > 0 then
				for ii = 1, idx_rnw[nd_x][99999] do
					idx_rec = idx_rnw[nd_x][ii]
					if ref_icao == rnw_data[idx_rec][1] then
						ref_rnw_list_num2 = ref_rnw_list_num2 + 1
						ref_rnw_list2[ref_rnw_list_num2] = {}
						ref_rnw_list2[ref_rnw_list_num2][1] = rnw_data[idx_rec][1]
						ref_rnw_list2[ref_rnw_list_num2][2] = rnw_data[idx_rec][2]
						ref_rnw_list2[ref_rnw_list_num2][3] = rnw_data[idx_rec][3]
						ref_rnw_list2[ref_rnw_list_num2][4] = rnw_data[idx_rec][4]
						ref_rnw_list2[ref_rnw_list_num2][5] = rnw_data[idx_rec][5]
						ref_rnw_list2[ref_rnw_list_num2][6] = rnw_data[idx_rec][6]
						ref_rnw_list2[ref_rnw_list_num2][7] = rnw_data[idx_rec][7]
						ref_rnw_list2[ref_rnw_list_num2][8] = rnw_data[idx_rec][8]
						if ref_sid2 == "------" then
							ref_rnw_list_num = ref_rnw_list_num + 1
							ref_rnw_list[ref_rnw_list_num] = {}
							ref_rnw_list[ref_rnw_list_num][1] = rnw_data[idx_rec][1]
							ref_rnw_list[ref_rnw_list_num][2] = rnw_data[idx_rec][2]
							ref_rnw_list[ref_rnw_list_num][3] = rnw_data[idx_rec][3]
							ref_rnw_list[ref_rnw_list_num][4] = rnw_data[idx_rec][4]
							ref_rnw_list[ref_rnw_list_num][5] = rnw_data[idx_rec][5]
							ref_rnw_list[ref_rnw_list_num][6] = rnw_data[idx_rec][6]
							ref_rnw_list[ref_rnw_list_num][7] = rnw_data[idx_rec][7]
							ref_rnw_list[ref_rnw_list_num][8] = rnw_data[idx_rec][8]
						else
							-- runways by SID
							rnw_temp = "RW" .. rnw_data[idx_rec][2]
							for jj = 1, sid_num do
								if ref_data_sid[jj][1] == ref_sid2 then
									if string.sub(ref_data_sid[jj][2],-1,-1) == "B" then
										temp_str1 = string.sub(ref_data_sid[jj][2],1,-2)
										temp_str2 = string.sub(rnw_temp,1,-2)
									else
										temp_str1 = "A"
										temp_str2 = "B"
									end
									if rnw_temp == ref_data_sid[jj][2] or ref_data_sid[jj][2] == "ALL" or temp_str1 == temp_str2 then
										ref_rnw_list_num = ref_rnw_list_num + 1
										ref_rnw_list[ref_rnw_list_num] = {}
										ref_rnw_list[ref_rnw_list_num][1] = rnw_data[idx_rec][1]
										ref_rnw_list[ref_rnw_list_num][2] = rnw_data[idx_rec][2]
										ref_rnw_list[ref_rnw_list_num][3] = rnw_data[idx_rec][3]
										ref_rnw_list[ref_rnw_list_num][4] = rnw_data[idx_rec][4]
										ref_rnw_list[ref_rnw_list_num][5] = rnw_data[idx_rec][5]
										ref_rnw_list[ref_rnw_list_num][6] = rnw_data[idx_rec][6]
										ref_rnw_list[ref_rnw_list_num][7] = rnw_data[idx_rec][7]
										ref_rnw_list[ref_rnw_list_num][8] = rnw_data[idx_rec][8]
										break
									end
								end
							end
						end
					end
				end
			end
		end
		
		nd_x = string.byte(string.sub(des_icao, 1, 1))
		if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
			if idx_rnw[nd_x][99999] > 0 then
				for ii = 1, idx_rnw[nd_x][99999] do
					idx_rec = idx_rnw[nd_x][ii]
					if des_icao == rnw_data[idx_rec][1] then
						des_rnw_list_num = des_rnw_list_num + 1
						des_rnw_list[des_rnw_list_num] = {}
						des_rnw_list[des_rnw_list_num][1] = rnw_data[idx_rec][1]
						des_rnw_list[des_rnw_list_num][2] = rnw_data[idx_rec][2]
						des_rnw_list[des_rnw_list_num][3] = rnw_data[idx_rec][3]
						des_rnw_list[des_rnw_list_num][4] = rnw_data[idx_rec][4]
						des_rnw_list[des_rnw_list_num][5] = rnw_data[idx_rec][5]
						des_rnw_list[des_rnw_list_num][6] = rnw_data[idx_rec][6]
						des_rnw_list[des_rnw_list_num][7] = rnw_data[idx_rec][7]
						des_rnw_list[des_rnw_list_num][8] = rnw_data[idx_rec][8]
					end
				end
			end
		end
	end

end

function create_sid_list()
	
	local ii = 0
	local jj = 0
	local kk = 0
	local rnw_temp = ""
	local temp_str1 = ""
	local temp_str2 = ""
	local sid_len = 0
	
	sid_list = {}
	sid_list_num = 0
	
	if sid_num > 0 then
		-- Create list of SIDs
		for ii = 1, sid_num do
			if ref_rwy2 == "-----" then
				sid_list_num = sid_list_num + 1
				sid_list[sid_list_num] = {}
				sid_list[sid_list_num][1] = ref_data_sid[ii][1]
				sid_list[sid_list_num][2] = ref_data_sid[ii][2]
			else
			-- SIDs by runway
				rnw_temp = "RW" .. ref_rwy2
				if string.sub(ref_data_sid[ii][2],-1,-1) == "B" then
					temp_str1 = string.sub(ref_data_sid[ii][2],1,-2)
					temp_str2 = string.sub(rnw_temp,1,-2)
				else
					temp_str1 = "A"
					temp_str2 = "B"
				end
				if rnw_temp == ref_data_sid[ii][2] or ref_data_sid[ii][2] == "ALL" or temp_str1 == temp_str2 then
					sid_list_num = sid_list_num + 1
					sid_list[sid_list_num] = {}
					sid_list[sid_list_num][1] = ref_data_sid[ii][1]
					sid_list[sid_list_num][2] = ref_data_sid[ii][2]
				end
			end
		end
		
		-- Create the one SID for more runways
		if sid_list_num > 1 then
			
			temp_list = {}
			temp_list_num = 0
			
			temp_list_num = temp_list_num + 1
			temp_list[temp_list_num] = {}
			temp_list[temp_list_num][1] = sid_list[1][1]
			temp_list[temp_list_num][2] = sid_list[1][2]
			temp_str1 = sid_list[1][1]
			
			for ii = 2, sid_list_num do
				if sid_list[ii][1] ~= temp_str1 then
					temp_list_num = temp_list_num + 1
					temp_list[temp_list_num] = {}
					temp_list[temp_list_num][1] = sid_list[ii][1]
					temp_list[temp_list_num][2] = sid_list[ii][2]
					temp_str1 = sid_list[ii][1]
				end
			end
			
			sid_list = {}
			sid_list_num = 0
			for ii = 1, temp_list_num do
				sid_list_num = sid_list_num + 1
				sid_list[sid_list_num] = {}
				sid_list[sid_list_num][1] = temp_list[ii][1]
				sid_list[sid_list_num][2] = temp_list[ii][2]
			end
		end
	end
	
end

function create_tns_list()
	
	local ii = 0
	
	sid_tns_list = {}
	sid_tns_list_num = 0
	
	if tns_num > 0 then
		for ii = 1, tns_num do
			if ref_data_tns[ii][1] == ref_sid2 then
				sid_tns_list_num = sid_tns_list_num + 1
				sid_tns_list[sid_tns_list_num] = ref_data_tns[ii][2]
			end
		end
	end

end

function B738_fmc_dep99()
	if page_dep == 1 then
		
		clr_repeat = 1
		
		local ii = 0
		local jj = 0
		local kk = 0
		local ll = 0
		
		local max_page_rwy = 0
		local max_page_sid = 0
		local max_page_tns = 0
		
		local left_line = {}
		left_line[1] = ""
		left_line[2] = ""
		left_line[3] = ""
		left_line[4] = ""
		left_line[5] = ""
		local right_line = {}
		right_line[1] = ""
		right_line[2] = ""
		right_line[3] = ""
		right_line[4] = ""
		right_line[5] = ""
		
		local sid_len = 0
		
		local temp_str1 = ""
		local temp_str2 = ""
		
		local sel_act = ""
		
		if legs_num < 2 then
			sel_act = "<SEL>"
		else
			if legs_delete == 0 then
				sel_act= "<ACT>"
			else
				sel_act = "<SEL>"
			end
		end
		
		-- Create Runways
		jj = math.floor(ref_rnw_list_num / 5)
		kk = ref_rnw_list_num % 5
		if kk > 0 then
			max_page_rwy = jj + 1
		else
			max_page_rwy = jj
		end
		
		if ref_rwy2 == "-----" then
			kk = (act_page - 1) * 5
			for ii = 1, 5 do
				jj = kk + ii
				if jj > ref_rnw_list_num then
					right_line[ii] = ""
					ref_rwy_sel[ii] = "-----"
				else
					right_line[ii] = ref_rnw_list[jj][2]
					ref_rwy_sel[ii] = ref_rnw_list[jj][2]
				end
			end
		else
			-- if ref_rwy_exec == 1 then
				-- right_line[1] = "<SEL>   " .. ref_rwy2
			-- else
				-- right_line[1] = "<ACT>   " .. ref_rwy2
			-- end
			right_line[1] = sel_act .. "   " .. ref_rwy2
			max_page_rwy = 1
		end
		
		-- Create SIDs
		jj = math.floor(sid_list_num / 5)
		kk = sid_list_num % 5
		if kk > 0 then
			max_page_sid = jj + 1
		else
			max_page_sid = jj
		end
		if ref_sid2 == "------" then
			kk = (act_page - 1) * 5
			for ii = 1, 5 do
				jj = kk + ii
				if jj > sid_list_num then
					if sid_list_num == 0 and ii == 1 then
						left_line[ii] = "-NONE-"
					else
						left_line[ii] = ""
					end
					ref_sid_sel[ii] = "------"
				else
					left_line[ii] = sid_list[jj][1]
					ref_sid_sel[ii] = sid_list[jj][1]
				end
			end
		else
			-- if ref_sid_exec == 1 then
				-- left_line[1] = ref_sid2 .. " <SEL>"
			-- else
				-- left_line[1] = ref_sid2 .. " <ACT>"
			-- end
			left_line[1] = ref_sid2 .. " " .. sel_act
			max_page_sid = 1
		end
		
		-- Create Transitions
		if ref_sid2 ~= "------" then
			line2_x = " TRANS"
			if sid_tns_list_num == 0 then
				ref_tns_sel[1] = "------"
				ref_tns_sel[2] = "------"
				ref_tns_sel[3] = "------"
				ref_tns_sel[4] = "------"
				ref_tns_sel[5] = "------"
				left_line[2] = "-NONE-"
			else
				jj = math.floor(sid_tns_list_num / 4)
				kk = sid_tns_list_num % 4
				if kk > 0 then
					max_page_tns = jj + 1
				else
					max_page_tns = jj
				end
				if ref_sid_tns2 == "------" then
					kk = (act_page - 1) * 4
					for ii = 2, 5 do
						jj = kk + ii - 1
						if jj > sid_tns_list_num then
							left_line[ii] = ""
							ref_tns_sel[ii] = "------"
						else
							left_line[ii] = sid_tns_list[jj]
							ref_tns_sel[ii] = sid_tns_list[jj]
						end
					end
				else
					-- if ref_tns_exec == 1 then
						-- left_line[2] = ref_sid_tns2 .. " <SEL>"
					-- else
						-- left_line[2] = ref_sid_tns2 .. " <ACT>"
					-- end
					left_line[2] = ref_sid_tns2 .. " " .. sel_act
					max_page_tns = 1
				end
			end
		end
		
		-- Display engine
		for ii = 1, 5 do
			sid_len = string.len(left_line[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					left_line[ii] = left_line[ii] .. " "
				end
			end
			sid_len = string.len(right_line[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					right_line[ii] = " " .. right_line[ii]
				end
			end
		end
		
		line1_l = left_line[1] .. right_line[1]
		line2_l = left_line[2] .. right_line[2]
		line3_l = left_line[3] .. right_line[3]
		line4_l = left_line[4] .. right_line[4]
		line5_l = left_line[5] .. right_line[5]
		
		max_page = math.max(1, max_page_rwy, max_page_sid, max_page_tns)
		
		line0_l = "   " .. ref_icao
		line0_l = line0_l .. " DEPARTURES      "
		line0_s = "                    " .. string.format("%1d",act_page)
		line0_s = line0_s .. "/"
		line0_s = line0_s .. string.format("%1d",max_page)
		line1_x = " SIDS            RUNWAYS"
		--if ref_sid_exec == 1 or ref_rwy_exec == 1 or ref_tns_exec == 1 or ref_app_tns_exec == 1 then
		if B738DR_fmc_exec_lights == 1 and legs_num > 1 then
			line6_l = "<ERASE            ROUTE>"
		else
			line6_l = "                  ROUTE>"
		end
		-- line6_x = "------------------------"
	end
end



function create_star_list()
	
	local ii = 0
	local jj = 0
	local kk = 0
	local rnw_temp = ""
	local temp_str1 = ""
	local temp_str2 = ""
	local sid_len = 0
	
	star_list = {}
	star_list_num = 0
	
	if arr_data == 0 then	-- Des ICAO
	
		if data_des_star_n > 0 then
			-- Create list of STARs
			for ii = 1, data_des_star_n do
				if des_app2 == "------" then
					star_list_num = star_list_num + 1
					star_list[star_list_num] = {}
					star_list[star_list_num][1] = data_des_star[ii][1]
					star_list[star_list_num][2] = data_des_star[ii][2]
				else
				-- STARs by APP
					rnw_temp = ""
					if string.len(des_app2) > 4 then
						jj, kk = string.find(des_app2, "-")
						if jj == nil then
							rnw_temp = "RW" .. string.sub(des_app2, 2, -2)
						else
							rnw_temp = "RW" .. string.sub(des_app2, 2, jj-1)
						end
					else
						rnw_temp = "RW" .. string.sub(des_app2, 2, -1)
					end
					if string.sub(data_des_star[ii][2],-1,-1) == "B" then
						temp_str1 = string.sub(data_des_star[ii][2],1,-2)
						temp_str2 = string.sub(rnw_temp,1,-2)
					else
						temp_str1 = "A"
						temp_str2 = "B"
					end
					if rnw_temp == data_des_star[ii][2] or data_des_star[ii][2] == "ALL" or temp_str1 == temp_str2 then
						star_list_num = star_list_num + 1
						star_list[star_list_num] = {}
						star_list[star_list_num][1] = data_des_star[ii][1]
						star_list[star_list_num][2] = data_des_star[ii][2]
					end
				end
			end
		end
		
		-- Create the one SID for more runways
		if star_list_num > 1 then
			
			temp_list = {}
			temp_list_num = 0
			
			temp_list_num = temp_list_num + 1
			temp_list[temp_list_num] = {}
			temp_list[temp_list_num][1] = star_list[1][1]
			temp_list[temp_list_num][2] = star_list[1][2]
			temp_str1 = star_list[1][1]
			
			for ii = 2, star_list_num do
				if star_list[ii][1] ~= temp_str1 then
					temp_list_num = temp_list_num + 1
					temp_list[temp_list_num] = {}
					temp_list[temp_list_num][1] = star_list[ii][1]
					temp_list[temp_list_num][2] = star_list[ii][2]
					temp_str1 = star_list[ii][1]
				end
			end
			
			star_list = {}
			star_list_num = 0
			for ii = 1, temp_list_num do
				star_list_num = star_list_num + 1
				star_list[star_list_num] = {}
				star_list[star_list_num][1] = temp_list[ii][1]
				star_list[star_list_num][2] = temp_list[ii][2]
			end
		end
	
	elseif arr_data == 1 then	-- Ref ICAO
		
		if star_num > 0 then
			-- Create list of STARs
			for ii = 1, star_num do
				if des_app2 == "------" then
					star_list_num = star_list_num + 1
					star_list[star_list_num] = {}
					star_list[star_list_num][1] = ref_data_star[ii][1]
					star_list[star_list_num][2] = ref_data_star[ii][2]
				else
				-- STARs by APP
					rnw_temp = ""
					if string.len(des_app2) > 4 then
						jj, kk = string.find(des_app2, "-")
						if jj == nil then
							rnw_temp = "RW" .. string.sub(des_app2, 2, -2)
						else
							rnw_temp = "RW" .. string.sub(des_app2, 2, jj-1)
						end
					else
						rnw_temp = "RW" .. string.sub(des_app2, 2, -1)
					end
					if string.sub(ref_data_star[ii][2],-1,-1) == "B" then
						temp_str1 = string.sub(ref_data_star[ii][2],1,-2)
						temp_str2 = string.sub(rnw_temp,1,-2)
					else
						temp_str1 = "A"
						temp_str2 = "B"
					end
					if rnw_temp == ref_data_star[ii][2] or ref_data_star[ii][2] == "ALL" or temp_str1 == temp_str2 then
						star_list_num = star_list_num + 1
						star_list[star_list_num] = {}
						star_list[star_list_num][1] = ref_data_star[ii][1]
						star_list[star_list_num][2] = ref_data_star[ii][2]
					end
				end
			end
			
			-- Create the one SID for more runways
			if star_list_num > 1 then
				
				temp_list = {}
				temp_list_num = 0
				
				temp_list_num = temp_list_num + 1
				temp_list[temp_list_num] = {}
				temp_list[temp_list_num][1] = star_list[1][1]
				temp_list[temp_list_num][2] = star_list[1][2]
				temp_str1 = star_list[1][1]
				
				for ii = 2, star_list_num do
					if star_list[ii][1] ~= temp_str1 then
						temp_list_num = temp_list_num + 1
						temp_list[temp_list_num] = {}
						temp_list[temp_list_num][1] = star_list[ii][1]
						temp_list[temp_list_num][2] = star_list[ii][2]
						temp_str1 = star_list[ii][1]
					end
				end
				
				star_list = {}
				star_list_num = 0
				for ii = 1, temp_list_num do
					star_list_num = star_list_num + 1
					star_list[star_list_num] = {}
					star_list[star_list_num][1] = temp_list[ii][1]
					star_list[star_list_num][2] = temp_list[ii][2]
				end
			end
		end
	end
	
end


function create_star_tns_list()
	
	local ii = 0
	
	star_tns_list = {}
	star_tns_list_num = 0
	
	if arr_data == 0 then	-- Des ICAO
		if data_des_star_tns_n > 0 then
			for ii = 1, data_des_star_tns_n do
				if data_des_star_tns[ii][1] == des_star2 then
					star_tns_list_num = star_tns_list_num + 1
					star_tns_list[star_tns_list_num] = data_des_star_tns[ii][2]
				end
			end
		end
	
	elseif arr_data == 1 then	-- Ref ICAO
		if ref_data_star_tns_n > 0 then
			for ii = 1, ref_data_star_tns_n do
				if ref_data_star_tns[ii][1] == des_star2 then
					star_tns_list_num = star_tns_list_num + 1
					star_tns_list[star_tns_list_num] = ref_data_star_tns[ii][2]
				end
			end
		end
	end

end

function create_des_app_list()
	
	local ii = 0
	local jj = 0
	local kk = 0
	local rnw_temp = ""
	local rnw_temp2 = ""
	local temp_str1 = ""
	local temp_str2 = ""
	local sid_len = 0
	local rw_numeric = 0
	
	des_app_list = {}
	des_app_list_num = 0
	
	if arr_data == 0 then	-- Des ICAO
	
		if data_des_app_n > 0 then
			-- Create list of APPs
			for ii = 1, data_des_app_n do
				if des_star2 == "------" then
					des_app_list_num = des_app_list_num + 1
					des_app_list[des_app_list_num] = {}
					rnw_temp = ""
					if string.len(data_des_app[ii]) > 4 then
						jj, kk = string.find(data_des_app[ii], "-")
						if jj == nil then
							rnw_temp = "RW" .. string.sub(data_des_app[ii], 2, -2)
						else
							rnw_temp = "RW" .. string.sub(data_des_app[ii], 2, jj-1)
						end
					else
						rnw_temp = "RW" .. string.sub(data_des_app[ii], 2, -1)
					end
					des_app_list[des_app_list_num][1] = data_des_app[ii]
					des_app_list[des_app_list_num][2] = rnw_temp
					if string.len(rnw_temp) > 4 then
						temp_str1 = string.sub(rnw_temp, 3, -2)
					else
						temp_str1 = string.sub(rnw_temp, 3, -1)
					end
					rw_numeric = tonumber(temp_str1)
					if rw_numeric == nil then
						des_app_list[des_app_list_num][3] = 0
					else
						des_app_list[des_app_list_num][3] = rw_numeric
					end
				else
				-- APPs by STAR
					rnw_temp2 = ""
					rnw_temp = ""
					if string.len(data_des_app[ii]) > 4 then
						jj, kk = string.find(data_des_app[ii], "-")
						if jj == nil then
							rnw_temp = "RW" .. string.sub(data_des_app[ii], 2, -2)
						else
							rnw_temp = "RW" .. string.sub(data_des_app[ii], 2, jj-1)
						end
					else
						rnw_temp = "RW" .. string.sub(data_des_app[ii], 2, -1)
					end
					for jj = 1, data_des_star_n do
						if data_des_star[jj][1] == des_star2 then
							rnw_temp2 = data_des_star[jj][2]
							if string.sub(rnw_temp2,-1,-1) == "B" then
								temp_str1 = string.sub(rnw_temp2,1,-2)
								temp_str2 = string.sub(rnw_temp,1,-2)
							else
								temp_str1 = "A"
								temp_str2 = "B"
							end
							if rnw_temp == rnw_temp2 or rnw_temp2 == "ALL" or temp_str1 == temp_str2 then
								des_app_list_num = des_app_list_num + 1
								des_app_list[des_app_list_num] = {}
								des_app_list[des_app_list_num][1] = data_des_app[ii]
								des_app_list[des_app_list_num][2] = rnw_temp
								if string.len(rnw_temp) > 4 then
									temp_str1 = string.sub(rnw_temp, 3, -2)
								else
									temp_str1 = string.sub(rnw_temp, 3, -1)
								end
								rw_numeric = tonumber(temp_str1)
								if rw_numeric == nil then
									des_app_list[des_app_list_num][3] = 0
								else
									des_app_list[des_app_list_num][3] = rw_numeric
								end
							end
						end
					end
				end
			end
			
			-- order approach by runway
			if des_app_list_num > 1 then
				for ii = 1, des_app_list_num - 1 do
					for jj = ii + 1, des_app_list_num do
						if des_app_list[ii][3] > des_app_list[jj][3] then
							temp_str1 = des_app_list[ii][1]
							temp_str2 = des_app_list[ii][2]
							rw_numeric = des_app_list[ii][3]
							des_app_list[ii][1] = des_app_list[jj][1]
							des_app_list[ii][2] = des_app_list[jj][2]
							des_app_list[ii][3] = des_app_list[jj][3]
							des_app_list[jj][1] = temp_str1
							des_app_list[jj][2] = temp_str2
							des_app_list[jj][3] = rw_numeric
						end
					end
				end
			end
			
		else
			if des_rnw_list_num > 0 then
				for ii = 1, des_rnw_list_num do
					des_app_list_num = des_app_list_num + 1
					des_app_list[des_app_list_num] = {}
					des_app_list[des_app_list_num][1] = "RW" .. des_rnw_list[ii][2]
					des_app_list[des_app_list_num][2] = "RW" .. des_rnw_list[ii][2]
					if string.len(des_rnw_list[ii][2]) > 2 then
						temp_str1 = string.sub(des_rnw_list[ii][2], 1, -2)
					else
						temp_str1 = des_rnw_list[ii][2]
					end
					des_app_list[des_app_list_num][3] = tonumber(temp_str1)
				end
			end
		end

	elseif arr_data == 1 then	-- Ref ICAO
		if ref_data_app_n > 0 then
			-- Create list of APPs
			for ii = 1, ref_data_app_n do
				if des_star2 == "------" then
					des_app_list_num = des_app_list_num + 1
					des_app_list[des_app_list_num] = {}
					rnw_temp = ""
					if string.len(ref_data_app[ii]) > 4 then
						jj, kk = string.find(ref_data_app[ii], "-")
						if jj == nil then
							rnw_temp = "RW" .. string.sub(data_des_app[ii], 2, -2)
						else
							rnw_temp = "RW" .. string.sub(ref_data_app[ii], 2, jj-1)
						end
					else
						rnw_temp = "RW" .. string.sub(ref_data_app[ii], 2, -1)
					end
					des_app_list[des_app_list_num][1] = ref_data_app[ii]
					des_app_list[des_app_list_num][2] = rnw_temp
					if string.len(rnw_temp) > 4 then
						temp_str1 = string.sub(rnw_temp, 3, -2)
					else
						temp_str1 = string.sub(rnw_temp, 3, -1)
					end
					rw_numeric = tonumber(temp_str1)
					if rw_numeric == nil then
						des_app_list[des_app_list_num][3] = 0
					else
						des_app_list[des_app_list_num][3] = rw_numeric
					end
				else
				-- APPs by STAR
					rnw_temp2 = ""
					rnw_temp = ""
					if string.len(ref_data_app[ii]) > 4 then
						jj, kk = string.find(ref_data_app[ii], "-")
						if jj == nil then
							rnw_temp = "RW" .. string.sub(data_des_app[ii], 2, -2)
						else
							rnw_temp = "RW" .. string.sub(ref_data_app[ii], 2, jj-1)
						end
					else
						rnw_temp = "RW" .. string.sub(ref_data_app[ii], 2, -1)
					end
					for jj = 1, star_num do
						if ref_data_star[jj][1] == des_star2 then
							rnw_temp2 = ref_data_star[jj][2]
							if string.sub(rnw_temp2,-1,-1) == "B" then
								temp_str1 = string.sub(rnw_temp2,1,-2)
								temp_str2 = string.sub(rnw_temp,1,-2)
							else
								temp_str1 = "A"
								temp_str2 = "B"
							end
							if rnw_temp == rnw_temp2 or rnw_temp2 == "ALL" or temp_str1 == temp_str2 then
								des_app_list_num = des_app_list_num + 1
								des_app_list[des_app_list_num] = {}
								des_app_list[des_app_list_num][1] = ref_data_app[ii]
								des_app_list[des_app_list_num][2] = rnw_temp
								if string.len(rnw_temp) > 4 then
									temp_str1 = string.sub(rnw_temp, 3, -2)
								else
									temp_str1 = string.sub(rnw_temp, 3, -1)
								end
								rw_numeric = tonumber(temp_str1)
								if rw_numeric == nil then
									des_app_list[des_app_list_num][3] = 0
								else
									des_app_list[des_app_list_num][3] = rw_numeric
								end
							end
						end
					end
				end
			end
			
			-- order approach by runway
			if des_app_list_num > 1 then
				for ii = 1, des_app_list_num - 1 do
					for jj = ii + 1, des_app_list_num do
						if des_app_list[ii][3] > des_app_list[jj][3] then
							temp_str1 = des_app_list[ii][1]
							temp_str2 = des_app_list[ii][2]
							rw_numeric = des_app_list[ii][3]
							des_app_list[ii][1] = des_app_list[jj][1]
							des_app_list[ii][2] = des_app_list[jj][2]
							des_app_list[ii][3] = des_app_list[jj][3]
							des_app_list[jj][1] = temp_str1
							des_app_list[jj][2] = temp_str2
							des_app_list[jj][3] = rw_numeric
						end
					end
				end
			end
			
		else
			if ref_rnw_list_num2 > 0 then
				for ii = 1, ref_rnw_list_num2 do
					des_app_list_num = des_app_list_num + 1
					des_app_list[des_app_list_num] = {}
					des_app_list[des_app_list_num][1] = "RW" .. ref_rnw_list2[ii][2]
					des_app_list[des_app_list_num][2] = "RW" .. ref_rnw_list2[ii][2]
					if string.len(ref_rnw_list2[ii][2]) > 2 then
						temp_str1 = string.sub(ref_rnw_list2[ii][2], 1, -2)
					else
						temp_str1 = ref_rnw_list2[ii][2]
					end
					des_app_list[des_app_list_num][3] = tonumber(temp_str1)
				end
			end
		end
	
	end

end

function create_app_tns_list()
	
	local ii = 0
	
	des_app_tns_list = {}
	des_app_tns_list_num = 0
	
	if arr_data == 0 then	-- Des ICAO
		if data_des_app_tns_n > 0 then
			for ii = 1, data_des_app_tns_n do
				if data_des_app_tns[ii][1] == des_app2 then
					des_app_tns_list_num = des_app_tns_list_num + 1
					des_app_tns_list[des_app_tns_list_num] = data_des_app_tns[ii][2]
				end
			end
		end
	
	elseif arr_data == 1 then	-- Ref ICAO
		if ref_data_app_tns_n > 0 then
			for ii = 1, ref_data_app_tns_n do
				if ref_data_app_tns[ii][1] == des_app2 then
					des_app_tns_list_num = des_app_tns_list_num + 1
					des_app_tns_list[des_app_tns_list_num] = ref_data_app_tns[ii][2]
				end
			end
		end
	end

end


function B738_fmc_arr99()
	
	
	if page_arr == 1 then
		
		clr_repeat = 1
		
		local ii = 0
		local jj = 0
		local kk = 0
		local ll = 0
		
		local max_page_star = 0
		local max_page_star_tns = 0
		local max_page_app = 0
		local max_page_tns = 0
		
		local left_line = {}
		left_line[1] = ""
		left_line[2] = ""
		left_line[3] = ""
		left_line[4] = ""
		left_line[5] = ""
		local right_line = {}
		right_line[1] = ""
		right_line[2] = ""
		right_line[3] = ""
		right_line[4] = ""
		right_line[5] = ""
		
		local sid_len = 0
		local right_len = 0
		local temp_str = ""
		
		local sel_act = ""
		
		if legs_num < 2 then
			sel_act = "<SEL>"
		else
			if legs_delete == 0 then
				sel_act= "<ACT>"
			else
				sel_act = "<SEL>"
			end
		end
		
		-- Create STARs
		jj = math.floor(star_list_num / 5)
		kk = star_list_num % 5
		if kk > 0 then
			max_page_star = jj + 1
		else
			max_page_star = jj
		end
		
		if des_star2 == "------" then
			kk = (act_page - 1) * 5
			for ii = 1, 5 do
				jj = kk + ii
				if jj > star_list_num then
					left_line[ii] = ""
					des_star_sel[ii] = "------"
				else
					left_line[ii] = star_list[jj][1]
					des_star_sel[ii] = star_list[jj][1]
				end
			end
		else
			-- if des_star_exec == 1 then
				-- left_line[1] = des_star2 .. " <SEL>"
			-- else
				-- left_line[1] = des_star2 .. " <ACT>"
			-- end
			left_line[1] = des_star2 .. " " .. sel_act
			max_page_star = 1
		end
		
		-- Create STAR Transitions
		if des_star2 ~= "------" then
			line2_x = " TRANS      "
			if star_tns_list_num == 0 then
				des_star_tns_sel[1] = "------"
				des_star_tns_sel[2] = "------"
				des_star_tns_sel[3] = "------"
				des_star_tns_sel[4] = "------"
				des_star_tns_sel[5] = "------"
				left_line[2] = "-NONE-"
			else
				jj = math.floor(star_tns_list_num / 4)
				kk = star_tns_list_num % 4
				if kk > 0 then
					max_page_tns = jj + 1
				else
					max_page_tns = jj
				end
				if des_star_trans2 == "------" then
					kk = (act_page - 1) * 4
					for ii = 2, 5 do
						jj = kk + ii - 1
						if jj > star_tns_list_num then
							left_line[ii] = ""
							des_star_tns_sel[ii] = "------"
						else
							left_line[ii] = star_tns_list[jj]
							des_star_tns_sel[ii] = star_tns_list[jj]
						end
					end
				else
					-- if des_star_tns_exec == 1 then
						-- left_line[2] = des_star_trans2 .. " <SEL>"
					-- else
						-- left_line[2] = des_star_trans2 .. " <ACT>"
					-- end
					left_line[2] = des_star_trans2 .. " " .. sel_act
					max_page_tns = 1
				end
			end
		else
			line2_x = "            "
			max_page_tns = 1
		end
		
		-- Create APPs
		jj = math.floor(des_app_list_num / 5)
		kk = des_app_list_num % 5
		if kk > 0 then
			max_page_app = jj + 1
		else
			max_page_app = jj
		end
		
		if des_app2 == "------" then
			kk = (act_page - 1) * 5
			for ii = 1, 5 do
				jj = kk + ii
				if jj > des_app_list_num then
					right_line[ii] = ""
					des_app_sel[ii] = "------"
				else
					temp_str = string.sub(des_app_list[jj][1], 1, 1)
					right_line[ii] = "     "
					if string.sub(des_app_list[jj][1], 1, 2) == "RW" then
						right_line[ii] = right_line[ii] .. string.sub(des_app_list[jj][1], 3, -1)
					elseif temp_str == "I" then
						right_line[ii] = right_line[ii] .. "ILS"
						right_line[ii] = right_line[ii] .. string.sub(des_app_list[jj][1], 2, -1)
					elseif temp_str == "R" then
						right_line[ii] = right_line[ii] .. "RNV"
						right_line[ii] = right_line[ii] .. string.sub(des_app_list[jj][1], 2, -1)
					elseif temp_str == "D" then
						right_line[ii] = right_line[ii] .. "VDM"
						right_line[ii] = right_line[ii] .. string.sub(des_app_list[jj][1], 2, -1)
					elseif temp_str == "S" then
						right_line[ii] = right_line[ii] .. "VDM"
						right_line[ii] = right_line[ii] .. string.sub(des_app_list[jj][1], 2, -1)
					elseif temp_str == "L" then
						right_line[ii] = right_line[ii] .. "LOC"
						right_line[ii] = right_line[ii] .. string.sub(des_app_list[jj][1], 2, -1)
					elseif temp_str == "Q" then
						right_line[ii] = right_line[ii] .. "NDB"
						right_line[ii] = right_line[ii] .. string.sub(des_app_list[jj][1], 2, -1)
					elseif temp_str == "N" then
						right_line[ii] = right_line[ii] .. "NDB"
						right_line[ii] = right_line[ii] .. string.sub(des_app_list[jj][1], 2, -1)
					elseif temp_str == "J" then
						right_line[ii] = right_line[ii] .. "GLS"
						right_line[ii] = right_line[ii] .. string.sub(des_app_list[jj][1], 2, -1)
					elseif temp_str == "V" then
						right_line[ii] = right_line[ii] .. "VOR"
						right_line[ii] = right_line[ii] .. string.sub(des_app_list[jj][1], 2, -1)
					else
						right_line[ii] = right_line[ii] .. des_app_list[jj][1]
					end
					des_app_sel[ii] = des_app_list[jj][1]
				end
			end
		else
			if des_app_exec == 1 then
				temp_str = string.sub(des_app2, 1, 1)
				--right_line[1] = "<SEL>"
				right_line[1] = sel_act
				if string.sub(des_app2, 1, 2) == "RW" then
					right_line[1] = right_line[1] .. string.sub(des_app2, 3, -1)
				elseif temp_str == "I" then
					right_line[1] = right_line[1] .. "ILS"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "R" then
					right_line[1] = right_line[1] .. "RNV"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "D" then
					right_line[1] = right_line[1] .. "VDM"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "S" then
					right_line[1] = right_line[1] .. "VDM"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "L" then
					right_line[1] = right_line[1] .. "LOC"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "Q" then
					right_line[1] = right_line[1] .. "NDB"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "N" then
					right_line[1] = right_line[1] .. "NDB"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "J" then
					right_line[1] = right_line[1] .. "GLS"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "V" then
					right_line[1] = right_line[1] .. "VOR"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				else
					right_line[1] = right_line[1] .. des_app2
				end
			else
				temp_str = string.sub(des_app2, 1, 1)
				--right_line[1] = "<ACT>"
				right_line[1] = sel_act
				B738DR_rnav_enable = 0
				if string.sub(des_app2, 1, 2) == "RW" then
					right_line[1] = right_line[1] .. string.sub(des_app2, 3, -1)
				elseif temp_str == "I" then
					right_line[1] = right_line[1] .. "ILS"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "R" then
					right_line[1] = right_line[1] .. "RNV"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
					B738DR_rnav_enable = 2
				elseif temp_str == "D" then
					right_line[1] = right_line[1] .. "VDM"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "S" then
					right_line[1] = right_line[1] .. "VDM"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "L" then
					right_line[1] = right_line[1] .. "LOC"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
					B738DR_rnav_enable = 1
				elseif temp_str == "Q" then
					right_line[1] = right_line[1] .. "NDB"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "N" then
					right_line[1] = right_line[1] .. "NDB"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				elseif temp_str == "J" then
					right_line[1] = right_line[1] .. "GLS"
					right_line[1] = right_line[1] .. string.sub(des_app2, 2, -1)
				else
					right_line[1] = right_line[1] .. des_app2
				end
			end
			max_page_app = 1
		end
		
		-- Create APP Transitions
		if des_app2 ~= "------" then
			line2_x = line2_x .. "       TRANS"
			
			if des_app_tns_list_num == 0 then
				des_tns_sel[1] = "------"
				des_tns_sel[2] = "------"
				des_tns_sel[3] = "------"
				des_tns_sel[4] = "------"
				des_tns_sel[5] = "------"
				--line2_x = line2_x .. "       TRANS"
				right_line[2] = "-NONE-"
			else
				jj = math.floor(des_app_tns_list_num / 4)
				kk = des_app_tns_list_num % 4
				if kk > 0 then
					max_page_tns = jj + 1
				else
					max_page_tns = jj
				end
				
				if des_app_tns2 == "------" then
					des_tns_sel[1] = "------"
					kk = (act_page - 1) * 4
					
					des_tns_sel[1] = "------"
					
					for ii = 2, 5 do
						jj = kk + ii - 1
						if jj > des_app_tns_list_num then
							right_line[ii] = ""
							des_tns_sel[ii] = "------"
						else
							right_line[ii] = des_app_tns_list[jj]
							des_tns_sel[ii] = des_app_tns_list[jj]
						end
					end
				else
					-- if des_app_tns_exec == 1 then
						-- right_line[2] = "<SEL>" .. des_app_tns2
					-- else
						-- right_line[2] = "<ACT>" .. des_app_tns2
					-- end
					right_line[2] = sel_act .. des_app_tns2
					max_page_tns = 1
				end
			end
		else
			max_page_tns = 1
			--line2_x = line2_x .. "            "
		end
		
		if des_app2 ~= "------" then
			if set_ils == 0 then
				set_ils = 1
				if string.sub(des_app2, 1, 1) == "I" then
					B738DR_fms_ils_disable = 0
				else
					B738DR_fms_ils_disable = 1
				end
			end
			if des_app_tns2 ~= "------" or des_app_tns_list_num == 0 then
				line3_x = "                    G/S "
				if B738DR_fms_ils_disable == 0 then
					right_line[3] = "  /   >"
					line3_g = "                 ON     "
					line3_s = "                    OFF "
				else
					right_line[3] = "  /   >"
					line3_g = "                    OFF "
					line3_s = "                 ON     "
				end
			-- else
				-- line3_x = "                        "
				-- line3_s = "                        "
			end
		else
			-- line3_x = "                        "
			-- line3_s = "                        "
			B738DR_fms_ils_disable = 0
			--found_ils = 0
			set_ils = 0
		end
		
		-- Display engine
		for ii = 1, 5 do
			sid_len = string.len(left_line[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					left_line[ii] = left_line[ii] .. " "
				end
			end
			right_len = 24 - string.len(left_line[ii])
			sid_len = string.len(right_line[ii])
			if sid_len < right_len then
				for jj = sid_len, (right_len - 1) do
					right_line[ii] = " " .. right_line[ii]
				end
			end
		end
		
		line1_l = left_line[1] .. right_line[1]
		line2_l = left_line[2] .. right_line[2]
		line3_l = left_line[3] .. right_line[3]
		line4_l = left_line[4] .. right_line[4]
		line5_l = left_line[5] .. right_line[5]
		
		
		max_page = math.max(1, max_page_star, max_page_app, max_page_tns, max_page_star_tns)
		
		if arr_data == 0 then
			line0_l = "   " .. des_icao
		elseif arr_data == 1 then
			line0_l = "   " .. ref_icao
		end
		line0_l = line0_l .. " ARRIVALS        "
		line0_s = "                    " .. string.format("%1d",act_page)
		line0_s = line0_s .. "/"
		line0_s = line0_s .. string.format("%1d",max_page)
		line1_x = " STARS        APPROACHES"
		
		-- line6_x = "------------------------"
		-- if des_star_exec == 1 or des_star_tns_exec == 1 or des_app_exec == 1 or des_app_tns_exec == 1 then
		if B738DR_fmc_exec_lights == 1 and legs_num > 1 then
			line6_l = "<ERASE            ROUTE>"
		else
			line6_l = "                  ROUTE>"
		end
	end

end





function string_pos(lat_pos, lon_pos)

	local position_min = ""
	local position_deg = ""
	local position = ""
	local temp_deg = 0
	local temp_min = 0
	local navaid_lat_deg = 0
	local navaid_lat_min = 0
	local navaid_lon_deg = 0
	local navaid_lon_min = 0
	local navaid_lat_ns = 0
	local navaid_lon_ew = 0
	
	local lat = (math.abs(lat_pos))
	local lat_min_dec = (math.fmod(lat,1.0)*600)
	navaid_lat_deg = (math.floor(lat))
	navaid_lat_min = (string.format("%06.3f",lat_min_dec))
	navaid_lat_ns = 0
	if lat_pos < 0 then
		navaid_lat_ns = 1
	end
	
	local lon = (math.abs(lon_pos))
	local lon_min_dec = (math.fmod(lon,1.0)*600)
	navaid_lon_deg = (math.floor(lon))
	navaid_lon_min = (string.format("%06.3f",lon_min_dec))
	navaid_lon_ew = 0
	if lon_pos < 0 then
		navaid_lon_ew = 1
	end
			
	temp_deg = string.format("%02d", navaid_lat_deg)
	temp_min = string.format("%05.1f", navaid_lat_min)
	if navaid_lat_ns == 1 then
		position = ("S" .. temp_deg)
	else
		position = ("N" .. temp_deg)
	end
	position = position .. string.sub(temp_min, 1, 2)
	position = position .. "."
	position = position .. string.sub(temp_min, 3, 3)
	temp_deg = string.format("%03d", navaid_lon_deg)
	temp_min = string.format("%05.1f", navaid_lon_min)
	if navaid_lon_ew == 1 then
		position = (position .. "W")
	else
		position = (position .. "E")
	end
	position = position .. temp_deg
	position = position .. string.sub(temp_min, 1, 2)
	position = position .. "."
	position = position .. string.sub(temp_min, 3, 3)
	
	return position

end

function B738_fmc_sel_wpt()

	if page_sel_wpt == 1 then
		
		--act_page = 1
		--max_page = 1
		
		local ii = 0
		local jj = 0
		local kk = 0
		local left_line = {}
		left_line[1] = ""
		left_line[2] = ""
		left_line[3] = ""
		left_line[4] = ""
		left_line[5] = ""
		local right_line = {}
		right_line[1] = ""
		right_line[2] = ""
		right_line[3] = ""
		right_line[4] = ""
		right_line[5] = ""
		local left_linex = {}
		left_linex[1] = ""
		left_linex[2] = ""
		left_linex[3] = ""
		left_linex[4] = ""
		left_linex[5] = ""
		-- local right_linex = {}
		-- right_linex[1] = ""
		-- right_linex[2] = ""
		-- right_linex[3] = ""
		-- right_linex[4] = ""
		-- right_linex[5] = ""
		
		local sid_len = 0
		local temp_str = ""
		local rw_tgt = ""
		local right_len = 0
		
		local max_page_wpt = 0
		
		jj = math.floor(navaid_list_n / 5)
		kk = navaid_list_n % 5
		
		if kk > 0 then
			max_page_wpt = jj + 1
		else
			max_page_wpt = jj
		end
		
		kk = (act_page - 1) * 5
		for ii = 1, 5 do
			jj = kk + ii
			if jj > navaid_list_n then
				left_linex[ii] = ""
				--right_linex[ii] = ""
				left_line[ii] = ""
				right_line[ii] = ""
			else
				sid_len = navaid_list[jj][1]
				if sid_len == 1 then
					left_linex[ii] = " VOR    " .. navaid_list[jj][7]
				elseif sid_len == 2 then
					left_linex[ii] = " VORDME " .. navaid_list[jj][7]
				elseif sid_len == 3 then
					left_linex[ii] = " NDB    " .. navaid_list[jj][7]
				elseif sid_len == 4 then
					left_linex[ii] = " WPT    " .. navaid_list[jj][7]
				elseif sid_len == 5 then
					left_linex[ii] = " DME    " .. navaid_list[jj][7]
				elseif sid_len == 9 then
					left_linex[ii] = " APT    " .. navaid_list[jj][7]
				end
				--right_linex[ii] = "" --name
				
				temp_str = navaid_list[jj][6]
				sid_len = string.len(temp_str)
				if sid_len == 3 then
					temp_str = navaid_list[jj][6]
				elseif sid_len == 4 then
					temp_str = string.sub(navaid_list[jj][6], 1, 3) .. "." .. string.sub(navaid_list[jj][6], -1, -1)
				elseif sid_len == 5 then
					temp_str = string.sub(navaid_list[jj][6], 1, 3) .. "." .. string.sub(navaid_list[jj][6], -2, -1)
				else
					temp_str = ""
				end
				left_line[ii] = temp_str
				right_line[ii] = string_pos(navaid_list[jj][2], navaid_list[jj][3])
			end
		end
		
		-- line1_x = " VORTAC SYMRNA          "
		-- line1_l = "114.80 N40`38.0W064`31.5"
		-- line1_s = "                        "
		-- line2_x = " VORDME ENODAK          "
		-- line2_l = "112.40 N44`27.4E101`15.7"
		-- line2_s = "                        "
		-- line3_x = " NDB    ENOREE          "
		-- line3_l = "278.0  N34`18.7W081`38.2"
		-- line3_s = "                        "
		-- line4_x = " WPT                    "
		-- line4_l = "       N13`43.2W120`52.7"
		-- line4_s = "                        "
		-- line5_x = "                        "
		-- line5_l = "<APPROACH               "
		-- line5_s = "                        "
		-- line6_x = "                        "
		-- line6_l = "<OFFSET      NAV STATUS>"
		-- line6_s = "                        "
		
		-- Type: VOR, VORTAC, VORDME, NDB, LOC, ILS, DME, ILSDME, LOCDME, APT, WPT
		
		-- Display engine
		for ii = 1, 5 do
			sid_len = string.len(left_line[ii])
			if sid_len < 7 then
				for jj = sid_len, 6 do
					left_line[ii] = left_line[ii] .. " "
				end
			end
			right_len = 24 - string.len(left_line[ii])
			sid_len = string.len(right_line[ii])
			if sid_len < right_len then
				for jj = sid_len, (right_len - 1) do
					right_line[ii] = " " .. right_line[ii]
				end
			end
		end
		
		line1_l = left_line[1] .. right_line[1]
		line2_l = left_line[2] .. right_line[2]
		line3_l = left_line[3] .. right_line[3]
		line4_l = left_line[4] .. right_line[4]
		line5_l = left_line[5] .. right_line[5]
		
		line1_x = left_linex[1] --.. right_linex[1] 
		line2_x = left_linex[2] --.. right_linex[2] 
		line3_x = left_linex[3] --.. right_linex[3] 
		line4_x = left_linex[4] --.. right_linex[4] 
		line5_x = left_linex[5] --.. right_linex[5] 
		
		
		max_page = math.max(1, max_page_wpt)
		
		temp_str = navaid_list[1][4]
		if string.len(temp_str) > 6 then
			temp_str = string.sub(temp_str, 1, 6)
		end
		line0_l = " SEL DESIRED " .. temp_str
		line0_s = "                    " .. string.format("%1d",act_page)
		line0_s = line0_s .. "/"
		line0_s = line0_s .. string.format("%1d",max_page)
		--line6_l = "<ERASE                  "
		
	
	end

end


function B738_fmc_sel_wpt2()

	if page_sel_wpt2 == 1 then
		
		local ii = 0
		local jj = 0
		local kk = 0
		local left_line = {}
		left_line[1] = ""
		left_line[2] = ""
		left_line[3] = ""
		left_line[4] = ""
		left_line[5] = ""
		local right_line = {}
		right_line[1] = ""
		right_line[2] = ""
		right_line[3] = ""
		right_line[4] = ""
		right_line[5] = ""
		local left_linex = {}
		left_linex[1] = ""
		left_linex[2] = ""
		left_linex[3] = ""
		left_linex[4] = ""
		left_linex[5] = ""
		
		local sid_len = 0
		local temp_str = ""
		local rw_tgt = ""
		local right_len = 0
		
		local max_page_wpt = 0
		
		jj = math.floor(navaid_list_n / 5)
		kk = navaid_list_n % 5
		
		if kk > 0 then
			max_page_wpt = jj + 1
		else
			max_page_wpt = jj
		end
		
		kk = (act_page - 1) * 5
		for ii = 1, 5 do
			jj = kk + ii
			if jj > navaid_list_n then
				left_linex[ii] = ""
				left_line[ii] = ""
				right_line[ii] = ""
			else
				sid_len = navaid_list[jj][1]
				if sid_len == 1 then
					left_linex[ii] = " VOR    " .. navaid_list[jj][7]
				elseif sid_len == 2 then
					left_linex[ii] = " VORDME " .. navaid_list[jj][7]
				elseif sid_len == 3 then
					left_linex[ii] = " NDB    " .. navaid_list[jj][7]
				elseif sid_len == 4 then
					left_linex[ii] = " WPT    " .. navaid_list[jj][7]
				elseif sid_len == 5 then
					left_linex[ii] = " DME    " .. navaid_list[jj][7]
				elseif sid_len == 9 then
					left_linex[ii] = " APT    " .. navaid_list[jj][7]
				end
				
				temp_str = navaid_list[jj][6]
				sid_len = string.len(temp_str)
				if sid_len == 3 then
					temp_str = navaid_list[jj][6]
				elseif sid_len == 4 then
					temp_str = string.sub(navaid_list[jj][6], 1, 3) .. "." .. string.sub(navaid_list[jj][6], -1, -1)
				elseif sid_len == 5 then
					temp_str = string.sub(navaid_list[jj][6], 1, 3) .. "." .. string.sub(navaid_list[jj][6], -2, -1)
				else
					temp_str = ""
				end
				left_line[ii] = temp_str
				right_line[ii] = string_pos(navaid_list[jj][2], navaid_list[jj][3])
			end
		end
		
		-- Type: VOR, VORTAC, VORDME, NDB, LOC, ILS, DME, ILSDME, LOCDME, APT, WPT
		
		-- Display engine
		for ii = 1, 5 do
			sid_len = string.len(left_line[ii])
			if sid_len < 7 then
				for jj = sid_len, 6 do
					left_line[ii] = left_line[ii] .. " "
				end
			end
			right_len = 24 - string.len(left_line[ii])
			sid_len = string.len(right_line[ii])
			if sid_len < right_len then
				for jj = sid_len, (right_len - 1) do
					right_line[ii] = " " .. right_line[ii]
				end
			end
		end
		
		line1_l = left_line[1] .. right_line[1]
		line2_l = left_line[2] .. right_line[2]
		line3_l = left_line[3] .. right_line[3]
		line4_l = left_line[4] .. right_line[4]
		line5_l = left_line[5] .. right_line[5]
		
		
		line1_x = left_linex[1] 
		line2_x = left_linex[2]
		line3_x = left_linex[3]
		line4_x = left_linex[4]
		line5_x = left_linex[5]
		
		
		max_page = math.max(1, max_page_wpt)
		
		temp_str = navaid_list[1][4]
		if string.len(temp_str) > 6 then
			temp_str = string.sub(temp_str, 1, 6)
		end
		line0_l = " SEL DESIRED " .. temp_str
		line0_s = "                    " .. string.format("%1d",act_page)
		line0_s = line0_s .. "/"
		line0_s = line0_s .. string.format("%1d",max_page)
		
	
	end

end

function B738_fmc_sel_wpt3()

	if page_sel_wpt3 == 1 then
		
		local ii = 0
		local jj = 0
		local kk = 0
		local left_line = {}
		left_line[1] = ""
		left_line[2] = ""
		left_line[3] = ""
		left_line[4] = ""
		left_line[5] = ""
		local right_line = {}
		right_line[1] = ""
		right_line[2] = ""
		right_line[3] = ""
		right_line[4] = ""
		right_line[5] = ""
		local left_linex = {}
		left_linex[1] = ""
		left_linex[2] = ""
		left_linex[3] = ""
		left_linex[4] = ""
		left_linex[5] = ""
		
		local sid_len = 0
		local temp_str = ""
		local rw_tgt = ""
		local right_len = 0
		
		local max_page_wpt = 0
		
		jj = math.floor(navaid_list_n / 5)
		kk = navaid_list_n % 5
		
		if kk > 0 then
			max_page_wpt = jj + 1
		else
			max_page_wpt = jj
		end
		
		kk = (act_page - 1) * 5
		for ii = 1, 5 do
			jj = kk + ii
			if jj > navaid_list_n then
				left_linex[ii] = ""
				left_line[ii] = ""
				right_line[ii] = ""
			else
				sid_len = navaid_list[jj][1]
				if sid_len == 1 then
					left_linex[ii] = " VOR    " .. navaid_list[jj][7]
				elseif sid_len == 2 then
					left_linex[ii] = " VORDME " .. navaid_list[jj][7]
				elseif sid_len == 3 then
					left_linex[ii] = " NDB    " .. navaid_list[jj][7]
				elseif sid_len == 4 then
					left_linex[ii] = " WPT    " .. navaid_list[jj][7]
				elseif sid_len == 5 then
					left_linex[ii] = " DME    " .. navaid_list[jj][7]
				elseif sid_len == 9 then
					left_linex[ii] = " APT    " .. navaid_list[jj][7]
				end
				
				temp_str = navaid_list[jj][6]
				sid_len = string.len(temp_str)
				if sid_len == 3 then
					temp_str = navaid_list[jj][6]
				elseif sid_len == 4 then
					temp_str = string.sub(navaid_list[jj][6], 1, 3) .. "." .. string.sub(navaid_list[jj][6], -1, -1)
				elseif sid_len == 5 then
					temp_str = string.sub(navaid_list[jj][6], 1, 3) .. "." .. string.sub(navaid_list[jj][6], -2, -1)
				else
					temp_str = ""
				end
				left_line[ii] = temp_str
				right_line[ii] = string_pos(navaid_list[jj][2], navaid_list[jj][3])
			end
		end
		
		-- Type: VOR, VORTAC, VORDME, NDB, LOC, ILS, DME, ILSDME, LOCDME, APT, WPT
		
		-- Display engine
		for ii = 1, 5 do
			sid_len = string.len(left_line[ii])
			if sid_len < 7 then
				for jj = sid_len, 6 do
					left_line[ii] = left_line[ii] .. " "
				end
			end
			right_len = 24 - string.len(left_line[ii])
			sid_len = string.len(right_line[ii])
			if sid_len < right_len then
				for jj = sid_len, (right_len - 1) do
					right_line[ii] = " " .. right_line[ii]
				end
			end
		end
		
		line1_l = left_line[1] .. right_line[1]
		line2_l = left_line[2] .. right_line[2]
		line3_l = left_line[3] .. right_line[3]
		line4_l = left_line[4] .. right_line[4]
		line5_l = left_line[5] .. right_line[5]
		
		
		line1_x = left_linex[1] 
		line2_x = left_linex[2]
		line3_x = left_linex[3]
		line4_x = left_linex[4]
		line5_x = left_linex[5]
		
		
		max_page = math.max(1, max_page_wpt)
		
		temp_str = navaid_list[1][4]
		if string.len(temp_str) > 6 then
			temp_str = string.sub(temp_str, 1, 6)
		end
		line0_l = " SEL DESIRED " .. temp_str
		line0_s = "                    " .. string.format("%1d",act_page)
		line0_s = line0_s .. "/"
		line0_s = line0_s .. string.format("%1d",max_page)
		
	
	end

end




function B738_fmc_legs()

	if page_legs == 1 then
		--act_page = 1
		--max_page = 1
		
		local ii = 0
		local jj = 0
		local kk = 0
		local ll = 0
		--local lll = 0
		
		local max_page_legs = 0
		
		local left_line = {}
		left_line[1] = ""
		left_line[2] = ""
		left_line[3] = ""
		left_line[4] = ""
		left_line[5] = ""
		local right_line = {}
		right_line[1] = ""
		right_line[2] = ""
		right_line[3] = ""
		right_line[4] = ""
		right_line[5] = ""
		local left_line_x = {}
		left_line_x[1] = ""
		left_line_x[2] = ""
		left_line_x[3] = ""
		left_line_x[4] = ""
		left_line_x[5] = ""
		local line_s = {}
		line_s[1] = ""
		line_s[2] = ""
		line_s[3] = ""
		line_s[4] = ""
		line_s[5] = ""
		local line_ml = {}
		line_ml[1] = ""
		line_ml[2] = ""
		line_ml[3] = ""
		line_ml[4] = ""
		line_ml[5] = ""
		local line_m = {}
		line_m[1] = ""
		line_m[2] = ""
		line_m[3] = ""
		line_m[4] = ""
		line_m[5] = ""
		local line_in = {}
		line_in[1] = ""
		line_in[2] = ""
		line_in[3] = ""
		line_in[4] = ""
		line_in[5] = ""
		
		local sid_len = 0
		local temp_string = ""
		local overwrite_disc = 0
		local discon_last = 0
		
		local allign_ok = 0
		
		local disable_page = 0
		
		-- line1_x = ""
		-- line2_x = ""
		-- line3_x = ""
		-- line4_x = ""
		-- line5_x = ""
		-- line6_x = "------------------------"
		
		if B738DR_irs_left_mode > 1 or B738DR_irs_right_mode > 1 then
			allign_ok = 1
		end
		
		local offset_temp = offset
		
		jj = math.floor((legs_num2 + 2 - offset_temp ) / 5)
		kk = (legs_num2 + 2 - offset_temp ) % 5
		if kk > 0 then
			max_page_legs = jj + 1
		else
			max_page_legs = jj
		end
		
		if legs_num2 == 0 then
			max_page_legs = 1
		end
		if act_page > max_page_legs then
			act_page = max_page_legs
			if act_page == 0 then
				act_page = 1
			end
		end
		if legs_step > legs_num2 then
			legs_step = legs_num2
		end
		
		if nav_mode == 1 then
			if legs_delete == 0 then
				disable_page = 1
			else
				offset_temp = offset + 1
				if offset_temp > legs_num2 then
					disable_page = 1
				end
			end
		end
		
		if legs_num2 > 0 and disable_page == 0 then
			
			if offset_temp > legs_num2 then
				offset_temp = legs_num2
			end
		
			if offset_temp == 0 then
				offset_temp = 1
			end
			
			if legs_step < offset_temp then
				legs_step = offset_temp
			end
			
			kk = (act_page - 1) * 5
			for ii = 1, 5 do
				jj = kk + ii + (offset_temp - 1) 	-- + lll
				-- if legs_select > 0 and jj >= legs_select then
					-- jj = jj + (legs_offset - legs_select)
				-- end
				if ii == 1 then
					line_m[1] = ""
				end
				if jj > legs_num2 or jj == 0 then
					left_line_x[ii] = ""
					left_line[ii] = ""
					right_line[ii] = ""
				else
					if act_page == 1 and ii == 1 then
						-- is HOLD ?
						if legs_data2[jj][21] == -1 or legs_data2[jj][21] > 1 then
							-- course
							if simDR_fmc_crs == nil then
								left_line_x[ii] = " " .. "---"
							else
								left_line_x[ii] = " " .. string.format("%03d",simDR_fmc_crs)
							end
							left_line_x[ii] = left_line_x[ii] .. "`     "
							-- distance
							if simDR_fmc_dist == nil then
								left_line_x[ii] = left_line_x[ii] .. "---"
							else
								if simDR_fmc_dist < 10 then
									left_line_x[ii] = left_line_x[ii] .. string.format("%3.1f",simDR_fmc_dist)
								else
									left_line_x[ii] = left_line_x[ii] .. string.format("%3d",simDR_fmc_dist)
								end
							end
							left_line_x[ii] = left_line_x[ii] .. "NM"
							-- id
							if legs_data2[jj][1] == "DISCONTINUITY" then
								left_line_x[ii] = " THEN"
								if allign_ok == 0 then
									line_ml[1] = ""
									left_line[ii] = "*****"
								else
									line_ml[1] = "*****"
									left_line[ii] = ""
								end
								right_line[ii] = ""
								left_line_x[ii+1] = "-- ROUTE DISCONTINUITY -"
								discon_last = 1
							else
								if allign_ok == 0 or offset_temp > legs_num2 then
									if legs_data2[jj][17] == 200 and legs_num > 1 then
										line_ml[1] = "     "
										left_line[ii] = "     "
										line_in[ii] = legs_data2[jj][1]
									else
										line_ml[1] = "     "
										left_line[ii] = legs_data2[jj][1]
									end
								else
									if legs_data2[jj][17] == 200 and legs_num > 1 then
										line_ml[1] = "     "
										left_line[ii] = "     "
										line_in[ii] = legs_data2[jj][1]
									else
										line_ml[1] = legs_data2[jj][1]
										left_line[ii] = "     "
									end
								end
								if B738DR_capt_map_mode == 3 and legs_step == jj then
									left_line[ii] = left_line[ii] .. "<CTR>"
								end
							end
						else
							left_line_x[ii] = " HOLD "
							if legs_data2[jj][21] == 0 then
								left_line_x[ii] = left_line_x[ii] .. "L"
							else
								left_line_x[ii] = left_line_x[ii] .. "R"
							end
							if allign_ok == 0 or offset_temp > legs_num2 then
								if legs_data2[jj][17] == 200 and legs_num > 1 then
									line_ml[1] = "     "
									left_line[ii] = "     "
									line_in[ii] = legs_data2[jj][1]
								else
									left_line[ii] = legs_data2[jj][1]
									line_ml[1] = "     "
								end
							else
								if legs_data2[jj][17] == 200 and legs_num > 1 then
									line_ml[1] = "     "
									left_line[ii] = "     "
									line_in[ii] = legs_data2[jj][1]
								else
									line_ml[1] = legs_data2[jj][1]
									left_line[ii] = "     "
								end
							end
							if B738DR_capt_map_mode == 3 and legs_step == jj then
								left_line[ii] = left_line[ii] .. "<CTR>"
							end
						end
						-- speed
						if legs_data2[jj][4] == 0 then
							if legs_data2[jj][10] == 0 then
								right_line[ii] = "----"
								line_s[ii] = "                 "
								line_m[ii] = "    "
							else
								if legs_data2[jj][10] < 1 then
									temp_string = string.format("%5.3f",legs_data2[jj][10])
									temp_string = string.sub(temp_string, -4, -1)
								else
									temp_string = string.format("%4d",legs_data2[jj][10])
								end
								line_s[ii] = "             " .. temp_string
								right_line[ii] = "    "
								line_m[ii] = "    "
							end
						else
							if jj ~= B738DR_rest_wpt_spd_idx then
								right_line[ii] = string.format("%4d",legs_data2[jj][4])
								line_s[ii] = "                 "
								line_m[ii] = "    "
							else
								right_line[ii] = "    "
								line_s[ii] = "                 "
								line_m[ii] = string.format("%4d",legs_data2[jj][4])
							end
						end
						-- altitude
						if legs_data2[jj][5] == 0 then
							if legs_data2[jj][11] == 0 then
								right_line[ii] = right_line[ii] .. "/----- "
								line_m[ii] = line_m[ii] .. "       "
							else
								if legs_data2[jj][11] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][11])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][11])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = " " .. string.format("%5d",legs_data2[jj][11])
								end
								line_s[ii] = line_s[ii] .. temp_string
								right_line[ii] = right_line[ii] .. "/      "
								line_m[ii] = line_m[ii] .. "       "
							end
						else
							if jj ~= B738DR_rest_wpt_alt_idx then
								if legs_data2[jj][5] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = "/FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = "/FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = "/" .. string.format("%5d",legs_data2[jj][5])
								end
								right_line[ii] = right_line[ii] .. temp_string
								if legs_data2[jj][6] == 43 then
									right_line[ii] = right_line[ii] .. "A"
								elseif legs_data2[jj][6] == 45 then
									right_line[ii] = right_line[ii] .. "B"
								else	-- 32 blank 
									right_line[ii] = right_line[ii] .. " "
								end
								line_m[ii] = line_m[ii] .. "       "
							else
								if legs_data2[jj][5] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = " " .. string.format("%5d",legs_data2[jj][5])
								end
								right_line[ii] = right_line[ii] .. "/      "
								line_m[ii] = line_m[ii] .. temp_string
								if legs_data2[jj][6] == 43 then
									line_m[ii] = line_m[ii] .. "A"
								elseif legs_data2[jj][6] == 45 then
									line_m[ii] = line_m[ii] .. "B"
								else	-- 32 blank 
									line_m[ii] = line_m[ii] .. " "
								end
							end
						end
						
						if ii < 5 then
							left_line_x[ii+1] = ""
						end
					else
						overwrite_disc = 0
						--if legs_delete == 1 and legs_delete_item == jj then
						--	overwrite_disc = 1
						--end
						-- if ii == 2 then
							-- line2_inv = ""
						-- end
						if legs_data2[jj][1] == "DISCONTINUITY" or overwrite_disc == 1 then
							--if legs_delete_item ~= legs_num2 then
								left_line_x[ii] = " THEN"
								left_line[ii] = "*****"
								right_line[ii] = ""
								if ii == 5 then
									line6_x = "-- ROUTE DISCONTINUITY -"
								else
									left_line_x[ii+1] = "-- ROUTE DISCONTINUITY -"
								end
							--end
							discon_last = 1
							-- if ii == 2 then
								-- line2_inv = ""
							-- end
						else
							-- id
							if legs_data2[jj][17] == 200 and legs_num > 1 then
								left_line[ii] = "     "
								line_in[ii] = legs_data2[jj][1]
							else
								left_line[ii] = legs_data2[jj][1]
							end
							if B738DR_capt_map_mode == 3 and legs_step == jj then
								left_line[ii] = left_line[ii] .. "<CTR>"
							end
							-- if ii == 2 then
								-- line2_inv = ""
							-- end
							if discon_last == 1 then
								discon_last = 0
							else
								-- is HOLD ?
								if legs_data2[jj][21] == -1 or legs_data2[jj][21] > 1 then
									-- course
									-- if simDR_mag_variation == nil then
										-- sid_len = 0
									-- else
										-- sid_len = (math.deg(legs_data2[jj][2]) + simDR_mag_variation) % 360
										-- if sid_len < 0 then
											-- sid_len = sid_len + 360
										-- end
									-- end
									
									sid_len = (math.deg(legs_data2[jj][18]) + 360 ) % 360
									
									left_line_x[ii] = " " .. string.format("%03d",sid_len)
									left_line_x[ii] = left_line_x[ii] .. "`     "
									-- distance
									if legs_data2[jj][3] > 0 then
										if legs_data2[jj][3] < 10 then
											left_line_x[ii] = left_line_x[ii] .. string.format("%3.1f",legs_data2[jj][3])
										else
											left_line_x[ii] = left_line_x[ii] .. string.format("%3d",legs_data2[jj][3])
										end
										left_line_x[ii] = left_line_x[ii] .. "NM"
									end
								else
									left_line_x[ii] = " HOLD "
									if legs_data2[jj][21] == 0 then
										left_line_x[ii] = left_line_x[ii] .. "L"
									else
										left_line_x[ii] = left_line_x[ii] .. "R"
									end
								end
							end
						
						
						-- speed
						if legs_data2[jj][4] == 0 then
							if legs_data2[jj][10] == 0 then
								right_line[ii] = "----"
								line_s[ii] = "                 "
								line_m[ii] = "    "
							else
								if legs_data2[jj][10] < 1 then
									temp_string = string.format("%5.3f",legs_data2[jj][10])
									temp_string = string.sub(temp_string, -4, -1)
								else
									temp_string = string.format("%4d",legs_data2[jj][10])
								end
								line_s[ii] = "             " .. temp_string
								right_line[ii] = "    "
								line_m[ii] = "    "
							end
						else
							if jj ~= B738DR_rest_wpt_spd_idx then
								right_line[ii] = string.format("%4d",legs_data2[jj][4])
								line_s[ii] = "                 "
								line_ml[ii] = "    "
							else
								right_line[ii] = "    "
								line_s[ii] = "                 "
								line_m[ii] = string.format("%4d",legs_data2[jj][4])
							end
						end
						-- altitude
						if legs_data2[jj][5] == 0 then
							if legs_data2[jj][11] == 0 then
								right_line[ii] = right_line[ii] .. "/----- "
								line_m[ii] = line_m[ii] .. "       "
							else
								if legs_data2[jj][11] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][11])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][11])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = " " .. string.format("%5d",legs_data2[jj][11])
								end
								line_s[ii] = line_s[ii] .. temp_string
								right_line[ii] = right_line[ii] .. "/      "
								line_m[ii] = line_m[ii] .. "       "
							end
						else
							if jj ~= B738DR_rest_wpt_alt_idx then
								if legs_data2[jj][5] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = "/FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = "/FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = "/" .. string.format("%5d",legs_data2[jj][5])
								end
								right_line[ii] = right_line[ii] .. temp_string
								if legs_data2[jj][6] == 43 then
									right_line[ii] = right_line[ii] .. "A"
								elseif legs_data2[jj][6] == 45 then
									right_line[ii] = right_line[ii] .. "B"
								else	-- 32 blank 
									right_line[ii] = right_line[ii] .. " "
								end
								line_m[ii] = line_m[ii] .. "       "
							else
								if legs_data2[jj][5] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = " " .. string.format("%5d",legs_data2[jj][5])
								end
								right_line[ii] = right_line[ii] .. "/      "
								line_m[ii] = line_m[ii] .. temp_string
								if legs_data2[jj][6] == 43 then
									line_m[ii] = line_m[ii] .. "A"
								elseif legs_data2[jj][6] == 45 then
									line_m[ii] = line_m[ii] .. "B"
								else	-- 32 blank 
									line_m[ii] = line_m[ii] .. " "
								end
							end
						end
							
							-- clear line
							if ii < 5 then
								left_line_x[ii+1] = ""
							end
						end
					end
				end
			end
		else
			max_page_legs = 1
			left_line[1] = " "
			left_line[2] = " "
			left_line[3] = " "
			left_line[4] = " "
			left_line[5] = " "
		end
		
		
		-- display engine
		for ii = 1, 5 do
			sid_len = string.len(left_line[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					left_line[ii] = left_line[ii] .. " "
				end
			end
			sid_len = string.len(right_line[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					right_line[ii] = " " .. right_line[ii]
				end
			end
		end
		
		for ii = 1, 5 do
			sid_len = string.len(line_ml[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					line_ml[ii] = line_ml[ii] .. " "
				end
			end
			sid_len = string.len(line_m[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					line_m[ii] = " " .. line_m[ii]
				end
			end
		end
		
		line1_l = left_line[1] .. right_line[1]
		line2_l = left_line[2] .. right_line[2]
		line3_l = left_line[3] .. right_line[3]
		line4_l = left_line[4] .. right_line[4]
		line5_l = left_line[5] .. right_line[5]
		
		line1_x = left_line_x[1]
		line2_x = left_line_x[2]
		line3_x = left_line_x[3]
		line4_x = left_line_x[4]
		line5_x = left_line_x[5]
		
		line1_s = line_s[1]
		line2_s = line_s[2]
		line3_s = line_s[3]
		line4_s = line_s[4]
		line5_s = line_s[5]
		
		line1_m = line_ml[1] .. line_m[1]
		line2_m = line_ml[2] .. line_m[2]
		line3_m = line_ml[3] .. line_m[3]
		line4_m = line_ml[4] .. line_m[4]
		line5_m = line_ml[5] .. line_m[5]
		
		line1_inv = line_in[1]
		line2_inv = line_in[2]
		line3_inv = line_in[3]
		line4_inv = line_in[4]
		line5_inv = line_in[5]
		
		max_page = max_page_legs
		
		if B738DR_fmc_exec_lights == 1 then
			if legs_num > 1 then
				line0_inv = " MOD"
				line0_l   = "     "
			else
				line0_l = "     "
			end
		else
			-- if ref_icao == "----" or des_icao == "****" then
				-- line0_l = "     "
			-- else
				if legs_num > 1 then
					line0_l = " ACT "
				else
					line0_l = "     "
				end
			-- end
			line0_inv = ""
		end
		
		line6_x = "------------------------"
		if B738DR_fmc_exec_lights == 1 then
			if legs_intdir == 0 then
				if legs_num > 1 then
					if B738DR_capt_map_mode == 3 then
						line6_l = "<ERASE             STEP>"
					else
						line6_l = "<ERASE         RTE DATA>"
					end
				else
					if B738DR_capt_map_mode == 3 then
						line6_l = "                   STEP>"
					end
				end
			else
				if legs_num > 1 then
					line6_l = "<ERASE               "
				end
				if legs_intdir_crs2 < 0 then
					line6_s = "                    "
					line6_s = line6_s .. string.format("%03d", legs_intdir_crs_mod) .. ">"
				else
					line6_l = line6_l .. string.format("%03d", legs_intdir_crs_mod)
				end
				line6_x = "----------------INTC CRS"
			end
		else
			if exec_load_fpln == 1 then
				if legs_num > 1 then
					line6_l = "<ERASE         ACTIVATE>"
				else
					line6_l = "               ACTIVATE>"
				end
			elseif legs_num > 1 then
				if B738DR_capt_map_mode == 3 then
					line6_l = "                   STEP>"
				else
					if new_hold == 0 then
						line6_l = "               RTE DATA>"
					else
						temp_string = spaces_after(new_hold_wpt, 5)
						line6_l = temp_string
						line6_x = "--------HOLD AT---------"
						if in_flight_mode == 1 then
							line6_l = line6_l .. "              PPOS>"
						end
					end
				end
			else
				if legs_num > 0 and legs_num2 > 1 then
					line6_l = "               ACTIVATE>"
				else
					if B738DR_capt_map_mode == 3 then
						line6_l = "                   STEP>"
					else
						-- if legs_num > 0 and legs_num2 > 1 then
							-- line6_l = "               ACTIVATE>"
						-- else
							line6_l = "               RTE DATA>"
						-- end
					end
				end
			end
		end
		line0_l = line0_l .. "RTE   LEGS        "
		-- line0_s = "                    " .. string.format("%1d",act_page)
		-- line0_s = line0_s .. "/"
		-- line0_s = line0_s .. string.format("%1d",max_page)
		
		line0_s = string.format("%2d",act_page)
		line0_s = line0_s .. "/"
		if max_page > 9 then
			line0_s = line0_s .. string.format("%2d",max_page)
		else
			line0_s = line0_s .. string.format("%1d",max_page)
		end
		line0_s = spaces_before(line0_s, 23)
		
		-- RNP
		if legs_num > 1 and string.sub(line6_l, 1, 1) == " " then
			
			line6_x = " RNP/ACTUAL-------------"
			--line6_s = string.format("%4.1f", B738DR_rnp) .. "/" .. string.format("%4.1f", B738DR_anp) .. "NM"
			--line6_s = string.format("%4.1f", B738DR_rnp) .. "/"
			if B738DR_rnp < 10 then
				line6_s = string.format("%4.2f", B738DR_rnp) .. "/"
			else
				line6_s = string.format("%4.1f", B738DR_rnp) .. "/"
			end
			if B738DR_anp < 9.995 then
				line6_s = line6_s .. string.format("%4.2f", B738DR_anp) .. "NM"
			else
				line6_s = line6_s .. "-.--NM"
				--line6_s = line6_s .. string.format("%4.1f", B738DR_anp) .. "NM"
			end
		end
		
	end

end

function B738_fmc_legs2()

	if page_legs == 1 then
		--act_page = 1
		--max_page = 1
		
		local ii = 0
		local jj = 0
		local kk = 0
		local ll = 0
		--local lll = 0
		
		local max_page_legs = 0
		
		local left_line = {}
		left_line[1] = ""
		left_line[2] = ""
		left_line[3] = ""
		left_line[4] = ""
		left_line[5] = ""
		local right_line = {}
		right_line[1] = ""
		right_line[2] = ""
		right_line[3] = ""
		right_line[4] = ""
		right_line[5] = ""
		local left_line_x = {}
		left_line_x[1] = ""
		left_line_x[2] = ""
		left_line_x[3] = ""
		left_line_x[4] = ""
		left_line_x[5] = ""
		local line_s = {}
		line_s[1] = ""
		line_s[2] = ""
		line_s[3] = ""
		line_s[4] = ""
		line_s[5] = ""
		local line_ml = {}
		line_ml[1] = ""
		line_ml[2] = ""
		line_ml[3] = ""
		line_ml[4] = ""
		line_ml[5] = ""
		local line_m = {}
		line_m[1] = ""
		line_m[2] = ""
		line_m[3] = ""
		line_m[4] = ""
		line_m[5] = ""
		
		local line_in = {}
		line_in[1] = ""
		line_in[2] = ""
		line_in[3] = ""
		line_in[4] = ""
		line_in[5] = ""
		
		local sid_len = 0
		local temp_string = ""
		local overwrite_disc = 0
		local discon_last = 0
		
		local allign_ok = 0
		local disable_page = 0
		
		line1_x = ""
		line2_x = ""
		line3_x = ""
		line4_x = ""
		line5_x = ""
		line6_x = "------------------------"
		
		if B738DR_irs_left_mode > 1 or B738DR_irs_right_mode > 1 then
			allign_ok = 1
		end
		
		local offset_temp = offset
		
		jj = math.floor((legs_num2 + 2 - offset_temp ) / 5)
		kk = (legs_num2 + 2 - offset_temp ) % 5
		if kk > 0 then
			max_page_legs = jj + 1
		else
			max_page_legs = jj
		end
		
		if legs_num2 == 0 then
			max_page_legs = 1
		end
		if act_page > max_page_legs then
			act_page = max_page_legs
			if act_page == 0 then
				act_page = 1
			end
		end
		if legs_step2 > legs_num2 then
			legs_step2 = legs_num2
		end
		
		if nav_mode == 1 then
			if legs_delete == 0 then
				disable_page = 1
			else
				offset_temp = offset + 1
				if offset_temp > legs_num2 then
					disable_page = 1
				end
			end
		end
		
		if legs_num2 > 0 and disable_page == 0 then
		-- if legs_num2 > 0 then
			
			if offset_temp > legs_num2 then
				offset_temp = legs_num2
			end
		
			if offset_temp == 0 then
				offset_temp = 1
			end
			
			if legs_step2 < offset_temp then
				legs_step2 = offset_temp
			end
			
			kk = (act_page - 1) * 5
			for ii = 1, 5 do
				jj = kk + ii + (offset_temp - 1) 	-- + lll
				-- if legs_select > 0 and jj >= legs_select then
					-- jj = jj + (legs_offset - legs_select)
				-- end
				if ii == 1 then
					--line1_inv = ""
					line_m[1] = ""
					-- if jj == (legs_num2 + 1) then
						-- jj = legs_num2
					-- end
					
				end
				if jj > legs_num2 or jj == 0 then
					left_line_x[ii] = ""
					left_line[ii] = ""
					right_line[ii] = ""
				else
					if act_page == 1 and ii == 1 then
						-- is HOLD ?
						if legs_data2[jj][21] == -1 or legs_data2[jj][21] > 1 then
							-- course
							if simDR_fmc_crs == nil then
								left_line_x[ii] = " " .. "---"
							else
								left_line_x[ii] = " " .. string.format("%03d",simDR_fmc_crs)
							end
							left_line_x[ii] = left_line_x[ii] .. "`     "
							-- distance
							if simDR_fmc_dist == nil then
								left_line_x[ii] = left_line_x[ii] .. "---"
							else
								if simDR_fmc_dist < 10 then
									left_line_x[ii] = left_line_x[ii] .. string.format("%3.1f",simDR_fmc_dist)
								else
									left_line_x[ii] = left_line_x[ii] .. string.format("%3d",simDR_fmc_dist)
								end
							end
							left_line_x[ii] = left_line_x[ii] .. "NM"
							-- id
							if legs_data2[jj][1] == "DISCONTINUITY" then
								left_line_x[ii] = " THEN"
								if allign_ok == 0 then
									line_ml[1] = ""
									left_line[ii] = "*****"
								else
									line_ml[1] = "*****"
									left_line[ii] = ""
								end
								right_line[ii] = ""
								left_line_x[ii+1] = "-- ROUTE DISCONTINUITY -"
								discon_last = 1
							else
								if allign_ok == 0 or offset_temp > legs_num2 then
									if legs_data2[jj][17] == 200 and legs_num > 1 then
										line_ml[1] = "     "
										left_line[ii] = "     "
										line_in[1] = legs_data2[jj][1]
									else
										line_ml[1] = "     "
										left_line[ii] = legs_data2[jj][1]
									end
								else
									if legs_data2[jj][17] == 200 and legs_num > 1 then
										line_ml[1] = "     "
										left_line[ii] = "     "
										line_in[1] = legs_data2[jj][1]
									else
										line_ml[1] = legs_data2[jj][1]
										left_line[ii] = "     "
									end
								end
								if B738DR_fo_map_mode == 3 and legs_step2 == jj then
									left_line[ii] = left_line[ii] .. "<CTR>"
								end
							end
						else
							left_line_x[ii] = " HOLD "
							if legs_data2[jj][21] == 0 then
								left_line_x[ii] = left_line_x[ii] .. "L"
							else
								left_line_x[ii] = left_line_x[ii] .. "R"
							end
							if allign_ok == 0 or offset_temp > legs_num2 then
								if legs_data2[jj][17] == 200 and legs_num > 1 then
									line_ml[ii] = "     "
									left_line[ii] = "     "
									line_in[ii] = legs_data2[jj][1]
								else
									left_line[ii] = legs_data2[jj][1]
									line_ml[1] = "     "
								end
							else
								if legs_data2[jj][17] == 200 and legs_num > 1 then
									line_ml[ii] = "     "
									left_line[ii] = "     "
									line_in[ii] = legs_data2[jj][1]
								else
									line_ml[1] = legs_data2[jj][1]
									left_line[ii] = "     "
								end
							end
							if B738DR_fo_map_mode == 3 and legs_step2 == jj then
								left_line[ii] = left_line[ii] .. "<CTR>"
							end
						end
						-- speed
						if legs_data2[jj][4] == 0 then
							if legs_data2[jj][10] == 0 then
								right_line[ii] = "----"
								line_s[ii] = "                 "
								line_m[ii] = "    "
							else
								if legs_data2[jj][10] < 1 then
									temp_string = string.format("%5.3f",legs_data2[jj][10])
									temp_string = string.sub(temp_string, -4, -1)
								else
									temp_string = string.format("%4d",legs_data2[jj][10])
								end
								line_s[ii] = "             " .. temp_string
								right_line[ii] = "    "
								line_m[ii] = "    "
							end
						else
							if jj ~= B738DR_rest_wpt_spd_idx then
								right_line[ii] = string.format("%4d",legs_data2[jj][4])
								line_s[ii] = "                 "
								line_m[ii] = "    "
							else
								right_line[ii] = "    "
								line_s[ii] = "                 "
								line_m[ii] = string.format("%4d",legs_data2[jj][4])
							end
						end
						-- altitude
						if legs_data2[jj][5] == 0 then
							if legs_data2[jj][11] == 0 then
								right_line[ii] = right_line[ii] .. "/----- "
								line_m[ii] = line_m[ii] .. "       "
							else
								if legs_data2[jj][11] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][11])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][11])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = " " .. string.format("%5d",legs_data2[jj][11])
								end
								line_s[ii] = line_s[ii] .. temp_string
								right_line[ii] = right_line[ii] .. "/      "
								line_m[ii] = line_m[ii] .. "       "
							end
						else
							if jj ~= B738DR_rest_wpt_alt_idx then
								if legs_data2[jj][5] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = "/FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = "/FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = "/" .. string.format("%5d",legs_data2[jj][5])
								end
								right_line[ii] = right_line[ii] .. temp_string
								if legs_data2[jj][6] == 43 then
									right_line[ii] = right_line[ii] .. "A"
								elseif legs_data2[jj][6] == 45 then
									right_line[ii] = right_line[ii] .. "B"
								else	-- 32 blank 
									right_line[ii] = right_line[ii] .. " "
								end
								line_m[ii] = line_m[ii] .. "       "
							else
								if legs_data2[jj][5] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = "/FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = " " .. string.format("%5d",legs_data2[jj][5])
								end
								right_line[ii] = right_line[ii] .. "/      "
								line_m[ii] = line_m[ii] .. temp_string
								if legs_data2[jj][6] == 43 then
									line_m[ii] = line_m[ii] .. "A"
								elseif legs_data2[jj][6] == 45 then
									line_m[ii] = line_m[ii] .. "B"
								else	-- 32 blank 
									line_m[ii] = line_m[ii] .. " "
								end
							end
						end
						
						if ii < 5 then
							left_line_x[ii+1] = ""
						end
					else
						overwrite_disc = 0
						--if legs_delete == 1 and legs_delete_item == jj then
						--	overwrite_disc = 1
						--end
						-- if ii == 2 then
							-- line2_inv = ""
						-- end
						if legs_data2[jj][1] == "DISCONTINUITY" or overwrite_disc == 1 then
							--if legs_delete_item ~= legs_num2 then
								left_line_x[ii] = " THEN"
								left_line[ii] = "*****"
								right_line[ii] = ""
								if ii == 5 then
									line6_x = "-- ROUTE DISCONTINUITY -"
								else
									left_line_x[ii+1] = "-- ROUTE DISCONTINUITY -"
								end
							--end
							discon_last = 1
							-- if ii == 2 then
								-- line2_inv = ""
							-- end
						else
							-- id
							if legs_data2[jj][17] == 200 and legs_num > 1 then
								left_line[ii] = "     "
								line_in[ii] = legs_data2[jj][1]
							else
								left_line[ii] = legs_data2[jj][1]
							end
							if B738DR_fo_map_mode == 3 and legs_step2 == jj then
								left_line[ii] = left_line[ii] .. "<CTR>"
							end
							-- if ii == 2 then
								-- line2_inv = ""
							-- end
							if discon_last == 1 then
								discon_last = 0
							else
								-- is HOLD ?
								if legs_data2[jj][21] == -1 or legs_data2[jj][21] > 1 then
									-- course
									-- if simDR_mag_variation == nil then
										-- sid_len = 0
									-- else
										-- sid_len = (math.deg(legs_data2[jj][2]) + simDR_mag_variation) % 360
										-- if sid_len < 0 then
											-- sid_len = sid_len + 360
										-- end
									-- end
									
									sid_len = (math.deg(legs_data2[jj][18]) + 360 ) % 360
									
									left_line_x[ii] = " " .. string.format("%03d",sid_len)
									left_line_x[ii] = left_line_x[ii] .. "`     "
									-- distance
									if legs_data2[jj][3] > 0 then
										if legs_data2[jj][3] < 10 then
											left_line_x[ii] = left_line_x[ii] .. string.format("%3.1f",legs_data2[jj][3])
										else
											left_line_x[ii] = left_line_x[ii] .. string.format("%3d",legs_data2[jj][3])
										end
										left_line_x[ii] = left_line_x[ii] .. "NM"
									end
								else
									left_line_x[ii] = " HOLD "
									if legs_data2[jj][21] == 0 then
										left_line_x[ii] = left_line_x[ii] .. "L"
									else
										left_line_x[ii] = left_line_x[ii] .. "R"
									end
								end
							end
						
						
						-- speed
						if legs_data2[jj][4] == 0 then
							if legs_data2[jj][10] == 0 then
								right_line[ii] = "----"
								line_s[ii] = "                 "
								line_m[ii] = "    "
							else
								if legs_data2[jj][10] < 1 then
									temp_string = string.format("%5.3f",legs_data2[jj][10])
									temp_string = string.sub(temp_string, -4, -1)
								else
									temp_string = string.format("%4d",legs_data2[jj][10])
								end
								line_s[ii] = "             " .. temp_string
								right_line[ii] = "    "
								line_m[ii] = "    "
							end
						else
							if jj ~= B738DR_rest_wpt_spd_idx then
								right_line[ii] = string.format("%4d",legs_data2[jj][4])
								line_s[ii] = "                 "
								line_ml[ii] = "    "
							else
								right_line[ii] = "    "
								line_s[ii] = "                 "
								line_m[ii] = string.format("%4d",legs_data2[jj][4])
							end
						end
						-- altitude
						if legs_data2[jj][5] == 0 then
							if legs_data2[jj][11] == 0 then
								right_line[ii] = right_line[ii] .. "/----- "
								line_m[ii] = line_m[ii] .. "       "
							else
								if legs_data2[jj][11] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][11])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][11])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = " " .. string.format("%5d",legs_data2[jj][11])
								end
								line_s[ii] = line_s[ii] .. temp_string
								right_line[ii] = right_line[ii] .. "/      "
								line_m[ii] = line_m[ii] .. "       "
							end
						else
							if jj ~= B738DR_rest_wpt_alt_idx then
								if legs_data2[jj][5] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = "/FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = "/FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = "/" .. string.format("%5d",legs_data2[jj][5])
								end
								right_line[ii] = right_line[ii] .. temp_string
								if legs_data2[jj][6] == 43 then
									right_line[ii] = right_line[ii] .. "A"
								elseif legs_data2[jj][6] == 45 then
									right_line[ii] = right_line[ii] .. "B"
								else	-- 32 blank 
									right_line[ii] = right_line[ii] .. " "
								end
								line_m[ii] = line_m[ii] .. "       "
							else
								if legs_data2[jj][5] > B738DR_trans_alt and jj <= td_idx then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = " FL" .. string.sub(temp_string, 1, 3)
								elseif legs_data2[jj][11] > B738DR_trans_lvl and jj >= td_idx and td_idx > 0 then
									temp_string = string.format("%05d",legs_data2[jj][5])
									temp_string = "/FL" .. string.sub(temp_string, 1, 3)
								else
									temp_string = " " .. string.format("%5d",legs_data2[jj][5])
								end
								right_line[ii] = right_line[ii] .. "/      "
								line_m[ii] = line_m[ii] .. temp_string
								if legs_data2[jj][6] == 43 then
									line_m[ii] = line_m[ii] .. "A"
								elseif legs_data2[jj][6] == 45 then
									line_m[ii] = line_m[ii] .. "B"
								else	-- 32 blank 
									line_m[ii] = line_m[ii] .. " "
								end
							end
						end
							
							-- clear line
							if ii < 5 then
								left_line_x[ii+1] = ""
							end
						end
					end
				end
			end
		else
			max_page_legs = 1
			left_line[1] = " "
			left_line[2] = " "
			left_line[3] = " "
			left_line[4] = " "
			left_line[5] = " "
		end
		
		
		-- display engine
		for ii = 1, 5 do
			sid_len = string.len(left_line[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					left_line[ii] = left_line[ii] .. " "
				end
			end
			sid_len = string.len(right_line[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					right_line[ii] = " " .. right_line[ii]
				end
			end
		end
		
		for ii = 1, 5 do
			sid_len = string.len(line_ml[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					line_ml[ii] = line_ml[ii] .. " "
				end
			end
			sid_len = string.len(line_m[ii])
			if sid_len < 12 then
				for jj = sid_len, 11 do
					line_m[ii] = " " .. line_m[ii]
				end
			end
		end
		
		line1_l = left_line[1] .. right_line[1]
		line2_l = left_line[2] .. right_line[2]
		line3_l = left_line[3] .. right_line[3]
		line4_l = left_line[4] .. right_line[4]
		line5_l = left_line[5] .. right_line[5]
		
		line1_x = left_line_x[1]
		line2_x = left_line_x[2]
		line3_x = left_line_x[3]
		line4_x = left_line_x[4]
		line5_x = left_line_x[5]
		
		line1_s = line_s[1]
		line2_s = line_s[2]
		line3_s = line_s[3]
		line4_s = line_s[4]
		line5_s = line_s[5]
		
		line1_m = line_ml[1] .. line_m[1]
		line2_m = line_ml[2] .. line_m[2]
		line3_m = line_ml[3] .. line_m[3]
		line4_m = line_ml[4] .. line_m[4]
		line5_m = line_ml[5] .. line_m[5]
		
		line1_inv = line_in[1]
		line2_inv = line_in[2]
		line3_inv = line_in[3]
		line4_inv = line_in[4]
		line5_inv = line_in[5]
		
		max_page = max_page_legs
		
		if B738DR_fmc_exec_lights == 1 then
			if legs_num > 1 then
				line0_inv = " MOD"
				line0_l   = "     "
			else
				line0_l = "     "
			end
		else
			if legs_num > 1 then
				line0_l = " ACT "
			else
				line0_l = "     "
			end
			line0_inv = ""
		end
		
		line6_x = "------------------------"
		if B738DR_fmc_exec_lights == 1 then
			if legs_intdir == 0 then
				if legs_num > 1 then
					if B738DR_fo_map_mode == 3 then
						line6_l = "<ERASE             STEP>"
					else
						line6_l = "<ERASE                  "
					end
				else
					if B738DR_fo_map_mode == 3 then
						line6_l = "                   STEP>"
					end
				end
			else
				if legs_num > 1 then
					line6_l = "<ERASE               "
				end
				if legs_intdir_crs2 < 0 then
					line6_s = "                    "
					line6_s = line6_s .. string.format("%03d", legs_intdir_crs_mod) .. ">"
				else
					line6_l = line6_l .. string.format("%03d", legs_intdir_crs_mod)
				end
				line6_x = "----------------INTC CRS"
			end
		else
			if exec_load_fpln == 1 then
				if legs_num > 1 then
					line6_l = "<ERASE         ACTIVATE>"
				else
					line6_l = "               ACTIVATE>"
				end
			elseif legs_num > 1 then
				if B738DR_fo_map_mode == 3 then
					line6_l = "                   STEP>"
				else
					if new_hold == 0 then
						line6_l = "               RTE DATA>"
					else
						temp_string = spaces_after(new_hold_wpt, 5)
						line6_l = temp_string
						line6_x = "--------HOLD AT---------"
						if in_flight_mode == 1 then
							line6_l = line6_l .. "              PPOS>"
						end
					end
				end
			else
				if legs_num > 0 and legs_num2 > 1 then
					line6_l = "               ACTIVATE>"
				else
					if B738DR_fo_map_mode == 3 then
						line6_l = "                   STEP>"
					else
						line6_l = "               RTE DATA>"
					end
				end
			end
		end
		line0_l = line0_l .. "RTE   LEGS        "
		--line0_s = "                    " .. string.format("%1d",act_page)
		line0_s = string.format("%2d",act_page)
		line0_s = line0_s .. "/"
		if max_page > 9 then
			line0_s = line0_s .. string.format("%2d",max_page)
		else
			line0_s = line0_s .. string.format("%1d",max_page)
		end
		line0_s = spaces_before(line0_s, 23)
		
		-- RNP
		if legs_num > 1 and string.sub(line6_l, 1, 1) == " " then
			line6_x = " RNP/ACTUAL-------------"
			if B738DR_rnp < 10 then
				line6_s = string.format("%4.2f", B738DR_rnp) .. "/"
			else
				line6_s = string.format("%4.1f", B738DR_rnp) .. "/"
			end
			if B738DR_anp < 9.995 then
				line6_s = line6_s .. string.format("%4.2f", B738DR_anp) .. "NM"
			else
				line6_s = line6_s .. "-.--NM"
				--line6_s = line6_s .. string.format("%4.1f", B738DR_anp) .. "NM"
			end
		end
		
	end

end

function time_string(time_num)
	
	local tmp_wpt_eta2 = math.floor(time_num)
	local tmp_wpt_eta3 = (time_num - tmp_wpt_eta2) * 60
	local result = string.format("%02d", tmp_wpt_eta2) .. string.format("%04.1f", tmp_wpt_eta3)
	return result
end

function B738_rte_data()

	if page_rte_legs == 1 then
		--act_page = 1
		--max_page = 1
		
		local ii = 0
		local jj = 0
		local kk = 0
		local ll = 0
		--local lll = 0
		
		local max_page_legs = 0
		
		local left_line = {}
		left_line[1] = ""
		left_line[2] = ""
		left_line[3] = ""
		left_line[4] = ""
		left_line[5] = ""
		local right_line = {}
		right_line[1] = ""
		right_line[2] = ""
		right_line[3] = ""
		right_line[4] = ""
		right_line[5] = ""
		local left_line_x = {}
		left_line_x[1] = ""
		left_line_x[2] = ""
		left_line_x[3] = ""
		left_line_x[4] = ""
		left_line_x[5] = ""
		local line_s = {}
		line_s[1] = ""
		line_s[2] = ""
		line_s[3] = ""
		line_s[4] = ""
		line_s[5] = ""
		local line_ml = {}
		line_ml[1] = ""
		line_ml[2] = ""
		line_ml[3] = ""
		line_ml[4] = ""
		line_ml[5] = ""
		local line_m = {}
		line_m[1] = ""
		line_m[2] = ""
		line_m[3] = ""
		line_m[4] = ""
		line_m[5] = ""
		local line_in = {}
		line_in[1] = ""
		line_in[2] = ""
		line_in[3] = ""
		line_in[4] = ""
		line_in[5] = ""
		
		local sid_len = 0
		local temp_string = ""
		local overwrite_disc = 0
		local discon_last = 0
		
		local allign_ok = 0
		
		local disable_page = 0
						
						

		-- line1_x = ""
		-- line2_x = ""
		-- line3_x = ""
		-- line4_x = ""
		-- line5_x = ""
		-- line6_x = "------------------------"
		
		if B738DR_irs_left_mode > 1 or B738DR_irs_right_mode > 1 then
			allign_ok = 1
		end
		
		local offset_temp = offset
		
		jj = math.floor((legs_num2 + 2 - offset_temp ) / 5)
		kk = (legs_num2 + 2 - offset_temp ) % 5
		if kk > 0 then
			max_page_legs = jj + 1
		else
			max_page_legs = jj
		end
		
		if legs_num2 == 0 then
			max_page_legs = 1
		end
		if act_page > max_page_legs then
			act_page = max_page_legs
			if act_page == 0 then
				act_page = 1
			end
		end
		-- if legs_step > legs_num2 then
			-- legs_step = legs_num2
		-- end
		
		if nav_mode == 1 then
			if legs_delete == 0 then
				disable_page = 1
			else
				offset_temp = offset + 1
				if offset_temp > legs_num2 then
					disable_page = 1
				end
			end
		end
		
		if legs_num2 > 0 and disable_page == 0 then
			
			if offset_temp > legs_num2 then
				offset_temp = legs_num2
			end
		
			if offset_temp == 0 then
				offset_temp = 1
			end
			
			-- if legs_step < offset_temp then
				-- legs_step = offset_temp
			-- end
			
			kk = (act_page - 1) * 5
			for ii = 1, 5 do
				jj = kk + ii + (offset_temp - 1) 	-- + lll
				-- if legs_select > 0 and jj >= legs_select then
					-- jj = jj + (legs_offset - legs_select)
				-- end
				if ii == 1 then
					line_m[1] = ""
				end
				if jj > legs_num2 or jj == 0 then
					left_line_x[ii] = ""
					left_line[ii] = ""
					right_line[ii] = ""
				else
					if act_page == 1 and ii == 1 then
						-- is HOLD ?
						if legs_data2[jj][21] == -1 or legs_data2[jj][21] > 1 then
							-- id
							if legs_data2[jj][1] == "DISCONTINUITY" then
								left_line_x[ii] = " THEN"
								if allign_ok == 0 then
									line_ml[1] = ""
									left_line[ii] = "*****"
								else
									line_ml[1] = "*****"
									left_line[ii] = ""
								end
								right_line[ii] = ""
								left_line_x[ii+1] = "-- ROUTE DISCONTINUITY -"
								discon_last = 1
							else
								if allign_ok == 0 or offset_temp > legs_num2 then
									if legs_data2[jj][17] == 200 and legs_num > 1 then
										line_ml[1] = "     "
										left_line[ii] = "     "
										line_in[ii] = legs_data2[jj][1]
									else
										line_ml[1] = "     "
										left_line[ii] = legs_data2[jj][1]
									end
								else
									if legs_data2[jj][17] == 200 and legs_num > 1 then
										line_ml[1] = "     "
										left_line[ii] = "     "
										line_in[ii] = legs_data2[jj][1]
									else
										line_ml[1] = legs_data2[jj][1]
										left_line[ii] = "     "
									end
								end
							end
						else
							left_line_x[ii] = " HOLD "
							if legs_data2[jj][21] == 0 then
								left_line_x[ii] = left_line_x[ii] .. "L"
							else
								left_line_x[ii] = left_line_x[ii] .. "R"
							end
							if allign_ok == 0 or offset_temp > legs_num2 then
								if legs_data2[jj][17] == 200 and legs_num > 1 then
									line_ml[1] = "     "
									left_line[ii] = "     "
									line_in[ii] = legs_data2[jj][1]
								else
									left_line[ii] = legs_data2[jj][1]
									line_ml[1] = "     "
								end
							else
								if legs_data2[jj][17] == 200 and legs_num > 1 then
									line_ml[1] = "     "
									left_line[ii] = "     "
									line_in[ii] = legs_data2[jj][1]
								else
									line_ml[1] = legs_data2[jj][1]
									left_line[ii] = "     "
								end
							end
						end
						
						-- eta
						line_s[ii] = "             z  "
						if legs_data2[jj][13] == 0 then
							right_line[ii] = "----   "
							--line_s[ii] = "                "
						else
							right_line[ii] = string.sub(time_string(legs_data2[jj][13]), 1, 4) .. "   "
							--line_s[ii] = "             z  "
						end
						
						-- wind
						if legs_data2[jj][39] == "" then
							if legs_data2[jj][38] ~= "" then
								line_s[ii] = line_s[ii] .. legs_data2[jj][38]
							end
						else
							right_line[ii] = right_line[ii] .. legs_data2[jj][39]
						end
						
						if ii < 5 then
							left_line_x[ii+1] = ""
						end
					else
						overwrite_disc = 0
						if legs_data2[jj][1] == "DISCONTINUITY" or overwrite_disc == 1 then
							left_line_x[ii] = " THEN"
							left_line[ii] = "*****"
							right_line[ii] = ""
							if ii == 5 then
								line6_x = "-- ROUTE DISCONTINUITY -"
							else
								left_line_x[ii+1] = "-- ROUTE DISCONTINUITY -"
							end
							discon_last = 1
						else
							-- id
							if legs_data2[jj][17] == 200 and legs_num > 1 then
								left_line[ii] = "     "
								line_in[ii] = legs_data2[jj][1]
							else
								left_line[ii] = legs_data2[jj][1]
							end
							if B738DR_capt_map_mode == 3 and legs_step == jj then
								left_line[ii] = left_line[ii] .. "<CTR>"
							end
							if discon_last == 1 then
								discon_last = 0
							else
								-- is HOLD ?
								if legs_data2[jj][21] == -1 or legs_data2[jj][21] > 1 then
									left_line_x[ii] = "      "
								else
									left_line_x[ii] = " HOLD "
									if legs_data2[jj][21] == 0 then
										left_line_x[ii] = left_line_x[ii] .. "L"
									else
										left_line_x[ii] = left_line_x[ii] .. "R"
									end
								end
							end
							
							-- eta
							line_s[ii] = "             z  "
							if legs_data2[jj][13] == 0 then
								right_line[ii] = "----   "
								--line_s[ii] = "                "
							else
								right_line[ii] = string.sub(time_string(legs_data2[jj][13]), 1, 4) .. "   "
								--line_s[ii] = "             z  "
							end
							
							-- wind
							if legs_data2[jj][39] == "" then
								if legs_data2[jj][38] ~= "" then
									line_s[ii] = line_s[ii] .. legs_data2[jj][38]
								end
							else
								right_line[ii] = right_line[ii] .. legs_data2[jj][39]
							end
							
							-- clear line
							if ii < 5 then
								left_line_x[ii+1] = ""
							end
						end
					end
				end
			end
		else
			max_page_legs = 1
			left_line[1] = " "
			left_line[2] = " "
			left_line[3] = " "
			left_line[4] = " "
			left_line[5] = " "
		end
		
		
		-- display engine
		for ii = 1, 5 do
			sid_len = string.len(left_line[ii])
			if sid_len < 9 then
				for jj = sid_len, 8 do
					left_line[ii] = left_line[ii] .. " "
				end
			end
			-- sid_len = string.len(right_line[ii])
			-- if sid_len < 12 then
				-- for jj = sid_len, 11 do
					-- right_line[ii] = " " .. right_line[ii]
				-- end
			-- end
		end
		
		for ii = 1, 5 do
			sid_len = string.len(line_ml[ii])
			if sid_len < 9 then
				for jj = sid_len, 8 do
					line_ml[ii] = line_ml[ii] .. " "
				end
			end
			-- sid_len = string.len(line_m[ii])
			-- if sid_len < 12 then
				-- for jj = sid_len, 11 do
					-- line_m[ii] = " " .. line_m[ii]
				-- end
			-- end
		end
		
		line1_l = left_line[1] .. right_line[1]
		line2_l = left_line[2] .. right_line[2]
		line3_l = left_line[3] .. right_line[3]
		line4_l = left_line[4] .. right_line[4]
		line5_l = left_line[5] .. right_line[5]
		
		line1_x = left_line_x[1]
		line2_x = left_line_x[2]
		line3_x = left_line_x[3]
		line4_x = left_line_x[4]
		line5_x = left_line_x[5]
		
		line1_s = line_s[1]
		line2_s = line_s[2]
		line3_s = line_s[3]
		line4_s = line_s[4]
		line5_s = line_s[5]
		
		line1_m = line_ml[1] --.. line_m[1]
		line2_m = line_ml[2] --.. line_m[2]
		line3_m = line_ml[3] --.. line_m[3]
		line4_m = line_ml[4] --.. line_m[4]
		line5_m = line_ml[5] --.. line_m[5]
		
		line1_inv = line_in[1]
		line2_inv = line_in[2]
		line3_inv = line_in[3]
		line4_inv = line_in[4]
		line5_inv = line_in[5]
		
		max_page = max_page_legs
		
		if B738DR_fmc_exec_lights == 1 then
			if legs_num > 1 then
				line0_inv = "  MOD"
				line0_l   = "      "
			else
				line0_l = "      "
			end
		else
			if legs_num > 1 then
				line0_l = "  ACT "
			else
				line0_l = "      "
			end
			line0_inv = ""
		end
		
		-- -- line0_l =   "  ACT RTE   DATA        "
		-- -- line0_s =   "                    1/2 "
		-- -- line1_x =   "          ETA       WIND"
		-- -- line1_inv = "VERNO                   "
		-- -- line1_l   = "         1315           "
		line0_l = line0_l .. "RTE   DATA       "
		line0_s = "                    " .. string.format("%1d",act_page)
		line0_s = line0_s .. "/"
		line0_s = line0_s .. string.format("%1d",max_page)
		line1_x = "          ETA       WIND"
		line6_x = "------------------------"
		if B738DR_fmc_exec_lights == 1 then
			line6_l = "<ERASE             LEGS>"
		else
			line6_l = "                   LEGS>"
		end
	end

end

-- function B7338_rte_data()
	
		-- -- line0_l =   "  ACT RTE   DATA        "
		-- -- line0_s =   "                    1/2 "
		-- -- line1_x =   "          ETA       WIND"
		-- -- line1_inv = "VERNO                   "
		-- -- line1_l   = "         1315           "
		-- -- line1_s =   "             z  070`/ 40"
		-- -- line2_x =   "                        "
		-- -- line2_l =   "ABC      1328   080`/140"
		-- -- line2_s =   "             z          "
		-- -- line3_x =   "                        "
		-- -- line3_l =   "DEF      1333           "
		-- -- line3_s =   "             z  080`/140"
		-- -- line4_x =   "                        "
		-- -- line4_l =   "                        "
		-- -- line4_s =   "                        "
		-- -- line5_x =   "                        "
		-- -- line5_l =   "                        "
		-- -- line5_s =   "                        "
		-- -- line6_x =   "------------------------"
		-- -- line6_l =   "<LEGS                   "
		
		
-- end

function edit_hold()
	
	local x_temp = 0
	local y_temp = 0
	
	new_hold_inbd = "---"
	new_hold_turn = -1
	new_hold_time = "-.-"
	new_hold_dist = "--.-"
	new_hold_lat = 0
	new_hold_lon = 0
	new_hold_idx = 0
	new_hold_wpt = legs_data2[hold_idx][1]
	-- hold_quad = hold_data[hold_idx][2]
	-- hold_radial = hold_data[hold_idx][3]
	x_temp = legs_data2[hold_idx][29] / 10
	new_hold_inbd = string.format("%3d", x_temp)
	new_hold_turn = legs_data2[hold_idx][21]
	if string.len(legs_data2[hold_idx][30]) == 4 then
		if string.sub(legs_data2[hold_idx][30], 1, 1) == "T" then
			-- Time
			x_temp = tonumber(string.sub(legs_data2[hold_idx][30], 3, 3))
			y_temp = tonumber(string.sub(legs_data2[hold_idx][30], 4, 4))
			if x_temp ~= nil and y_temp ~= nil then
				new_hold_time = tostring(x_temp) .. "." .. tostring(y_temp)
			end
		else
			-- Distance
			x_temp = tonumber(legs_data2[hold_idx][30])
			if x_temp ~= nil then
				x_temp = x_temp / 10
				new_hold_dist = string.format("%4.1f", x_temp)
			end
		end
	end
	new_hold_spd = legs_data2[hold_idx][4]
	new_hold_alt = legs_data2[hold_idx][5]
	
end


function B738_fmc_hold()

	if page_hold == 1 then
		
		local x_temp = 0
		local y_temp = 0
		local qq = 0
		local hold_page_offset = 0
		
		-- find hold offset
		hold_offset = 0
		hold_offset_idx = 0
		if hold_data_num2 > 0 then
			for qq = 1, hold_data_num2 do
				if hold_data2[qq] >= offset then
					hold_offset = qq
					break
				end
			end
		end
		
		if hold_offset > 0 then
		
			if new_hold_idx ~= 0 then
				act_page = new_hold_idx
			end
			
			max_page = hold_data_num2 - hold_offset + 1
			if act_page > max_page then
				act_page = max_page
			end
			hold_page_offset = act_page + hold_offset - 1
			
			hold_offset_idx = hold_data2[hold_page_offset]
			local hold_fix = legs_data2[hold_offset_idx][1]
			local hold_quad = "-"
			local hold_radial = "---"
			local hold_inbd = "---"
			x_temp = tonumber(legs_data2[hold_offset_idx][29]) / 10
			if x_temp ~= nil then
				hold_inbd = string.format("%03d", x_temp)
			end
			local hold_turn = legs_data2[hold_offset_idx][21]
			
			-- default 1.5 mins
			local hold_time = "-.-"
			local hold_dist = "--.-"
			if string.len(legs_data2[hold_offset_idx][30]) == 4 then
				if string.sub(legs_data2[hold_offset_idx][30], 1, 1) == "T" then
					-- Time
					x_temp = tonumber(string.sub(legs_data2[hold_offset_idx][30], 3, 3))
					y_temp = tonumber(string.sub(legs_data2[hold_offset_idx][30], 4, 4))
					if x_temp ~= nil and y_temp ~= nil then
						hold_time = tostring(x_temp) .. "." .. tostring(y_temp)
					end
				else
					-- Distance
					x_temp = tonumber(legs_data2[hold_offset_idx][30])
					if x_temp ~= nil then
						x_temp = x_temp / 10
						hold_dist = string.format("%4.1f", x_temp)
					end
				end
			end
			
			local hold_spd = legs_data2[hold_offset_idx][4]
			if hold_spd == 0 then
				hold_spd = legs_data2[hold_offset_idx][10]
			end
			local hold_alt = legs_data2[hold_offset_idx][5]
			local hold_alt_rest = " "
			if legs_data2[hold_offset_idx][6] == 43 then
				hold_alt_rest = "A"
			elseif legs_data2[hold_offset_idx][6] == 45 then
				hold_alt_rest = "B"
			end
			
			local hold_eta = 0
			local hold_efc = 0
			local hold_avail = 0
			local hold_best_spd = 0
				
			
			local hold_active = 0
			if legs_num > 1 and hold_offset_idx == offset then
				hold_active = 1
			end
			if hold_active == 0 then
				if B738DR_fmc_exec_lights == 1 then
					if legs_num2 > 1 then
						line0_inv = " MOD"
						line0_l   = "     "
					else
						line0_l = "     "
					end
				else
					line0_l = "     "
				end
			else
				line0_l = " ACT "
			end
			
			if hold_active == 0 then
				line1_x   = " FIX         SPD/TGT ALT"
				line1_l = spaces_after(hold_fix, 5) .. "         "
				if hold_spd == 0 then
					hold_spd = legs_data2[hold_offset_idx][10]
					if hold_spd == 0 then
						line1_l = line1_l .. "---/"
					else
						line1_l = line1_l .. "   /"
						line1_s = "              " .. string.format("%3d", hold_spd) .. "/"
					end
				else
					line1_l = line1_l .. string.format("%3d", hold_spd) .. "/"
				end
				if hold_alt == 0 then
					line1_l = line1_l .. "-----"
				else
					line1_l = line1_l .. string.format("%5d", hold_alt) .. hold_alt_rest
				end
				
				line2_x   = " QUAD/RADIAL     FIX ETA"
				line2_l   = "--/---`          ----.- "
				line2_s   = "                       Z"
				
				line3_x   = " INBD CRS/DIR   EFC TIME"
				--line3_l   = "---`/R TURN        ---- "
				line3_l = hold_inbd .. "`/"
				if hold_turn == -1 then
					line3_l = line3_l .. "      "
					line3_s = "     R TURN"
				elseif hold_turn == 0 then
					line3_l = line3_l .. "L TURN"
					line3_s = "           "
				else
					line3_l = line3_l .. "R TURN"
					line3_s = "           "
				end
				line3_l = line3_l .. "        ---- "
				line3_s   = line3_s .. "            Z"
				
				line4_x   = " LEG TIME     HOLD AVAIL"
				--line4_l   = "-.-                 ----"
				if hold_time == "-.-" and hold_dist == "--.-" then
					line4_l = "                    ----"
					line4_s = "1.5"		-- default time
				else
					line4_l = hold_time .. "                 ----"
					line4_s = "   "
				end
				line4_s   = line4_s .. "MIN                  "
				
				line5_x   = " LEG DIST     BEST SPEED"
				--line5_l   = "--.-               ---  "
				line5_l = hold_dist .. "               ---  "
				line5_s   = "    NM                KT"
			else
				line1_x   = " FIX         SPD/TGT ALT"
				line1_l = "              "
				line1_m = spaces_after(hold_fix, 5) .. "         "
				if hold_spd == 0 then
					hold_spd = legs_data2[hold_offset_idx][10]
				end
				if hold_spd == 0 then
					line1_l = line1_l .. "---/"
					line1_m = line1_m .. "    "
				else
					line1_l = line1_l .. "   /"
					line1_m = line1_m .. string.format("%3d", hold_spd) .. " "
				end
				if hold_alt == 0 then
					line1_l = line1_l .. "-----"
				else
					line1_m = line1_m .. string.format("%5d", hold_alt) .. hold_alt_rest
				end
				
				line2_x   = " QUAD/RADIAL     FIX ETA"
				line2_l   = "--/---`          ----.- "
				line2_s   = "                       Z"
				
				line3_x   = " INBD CRS/DIR   EFC TIME"
				--line3_l   = "---`/R TURN        ---- "
				line3_l = "    /"
				line3_m = hold_inbd .. "` "
				if hold_turn == -1 then
					line3_l = line3_l .. "      "
					line3_m = line3_m .. "R TURN"
					line3_s = "           "
				elseif hold_turn == 0 then
					line3_l = line3_l .. "      "
					line3_m = line3_m .. "L TURN"
					line3_s = "           "
				else
					line3_l = line3_l .. "      "
					line3_m = line3_m .. "R TURN"
					line3_s = "           "
				end
				line3_l = line3_l .. "        ---- "
				line3_s = line3_s .. "            Z"
				
				line4_x   = " LEG TIME     HOLD AVAIL"
				local res_fuel = tonumber(reserves_kgs)
				local ff_time = 0
				local ff_time2 = 0
				local ff_time_str = ""
				if res_fuel == nil then
					res_fuel = 0
				else
					res_fuel = res_fuel * 1000
				end
				if legs_num > 1 then
					if legs_data[legs_num][40] ~= 0 and ff_approx > 0 then
						ff_time = legs_data[legs_num][40] - res_fuel + 200
						ff_time = ff_time / ff_approx
					end
				end
				if ff_time <= 0 then
					ff_time_str = "----"
				else
					ff_time2 = math.floor(ff_time)
					ff_time = (ff_time - ff_time2) * 60
					if ff_time2 > 9 then
						ff_time2 = 9
					end
					if ff_time > 59.49 then
						ff_time = 59
					end
					ff_time_str = string.format("%1d", ff_time2)
					ff_time_str = ff_time_str .. "+" .. string.format("%02d", ff_time)
				end
				--line4_l   = "-.-                 ----"
				if hold_time == "-.-" and hold_dist == "--.-" then
					line4_l = "                    " .. ff_time_str
					line4_m = "1.5"		-- default time
					line4_s = "   "
				else
					if hold_time == "-.-" then
						line4_l = hold_time .. "                 "
						line4_l = line4_l .. ff_time_str
						line4_s = "   "
					else
						line4_l = "                    "
						line4_l = line4_l .. ff_time_str
						line4_m = hold_time
						line4_s = "   "
					end
				end
				line4_s   = line4_s .. "MIN                  "
				
				line5_x   = " LEG DIST     BEST SPEED"
				--line5_l   = "--.-               ---  "
				if hold_dist == "--.-" then
					line5_l = hold_dist .. "               ---  "
				else
					line5_l = "                   ---  "
					line5_m = hold_dist
				end
				line5_s   = "    NM                KT"
			end
			-------------------------------------------------------
			
			if B738DR_fmc_exec_lights == 1 then
				if hold_term == 0 then
					line6_l = "<ERASE                  "
				elseif hold_term == 1 then
					-- HOLD active EXIT ARMED confirm
					line6_l = "<ERASE                  "
					line6_inv = "              EXIT.ARMED"
				else
					-- HOLD active EXIT ARMED
					line6_l = "<NEXT HOLD              "
					line6_m = "              EXIT ARMED"
				end
			else
				if hold_offset_idx == offset then
					-- HOLD active
					if hold_term == 0 then
						line6_l = "<NEXT HOLD    EXIT HOLD>"
					elseif hold_term == 1 then
						-- HOLD active EXIT ARMED confirm
						line6_l   = "<NEXT HOLD              "
						line6_inv = "              EXIT.ARMED"
					else
						-- HOLD active EXIT ARMED
						line6_l = "<NEXT HOLD              "
						line6_m = "              EXIT ARMED"
					end
				else
				-- HOLD inactive
					line6_l = "<NEXT HOLD              "
				end
			end
		
			line0_l = line0_l .. "RTE   HOLD        "
			line0_s = "                    " .. string.format("%1d",act_page)
			line0_s = line0_s .. "/"
			line0_s = line0_s .. string.format("%1d",max_page)
			-- line6_x = "------------------------"
		
		else
			--max_page = 1
			act_page = 1
			page_hold = 0
			page_legs = 1
			new_hold = 1
		end
		
	end

end

function B738_fmc_init()

	if page_init == 1 then
		act_page = 1
		max_page = 1
		line0_l = "    INIT/REF INDEX      "
		line0_s = "                    1/1 "
		-- line1_x = "                        "
		line1_l = "<IDENT         NAV DATA>"
		-- line1_s = "                        "
		-- line2_x = "                        "
		line2_l = "<POS                    "
		-- line2_s = "                        "
		-- line3_x = "                        "
		line3_l = "<PERF                   "
		-- line3_s = "                        "
		-- line4_x = "                        "
		line4_l = "<TAKEOFF                "
		-- line4_s = "                        "
		-- line5_x = "                        "
		line5_l = "<APPROACH               "
		-- line5_s = "                        "
		-- line6_x = "                        "
		line6_l = "<OFFSET      NAV STATUS>"
		-- line6_s = "                        "
	end

end


function B738_fmc_takeoff()

	if page_takeoff == 1 then
		act_page = 1
		max_page = 2
		local gw_str = ""
		local rnw_len_temp = 0
		local rnw_len = ""
		
		if gw == "***.*" then
			gw_str = "---.-"
		else
			gw_str = gw
		end
		local trim_str = "TRIM"
		if trim == "    " then
			trim_str = "    "
		end
		line0_l = "     TAKEOFF REF        "
		line0_s = "                    1/2 "
		line1_x = " FLAPS          QRH   V1"
		line1_l = (flaps .. "`                  ")
		line1_l = (line1_l .. v1_set)
		if qrh == "OFF" then
			line1_s = "                " .. v1
			line1_s = line1_s .. ">"
			line2_s = "                " .. vr
			line2_s = line2_s .. ">"
			line3_s = "                " .. v2
			line3_s = line3_s .. ">"
		else	-- QRH on
			line1_s = ""
			line2_s = ""
			line3_s = ""
		end
--		line1_s = (line1_s .. "     ")
		local thr_dspl = ""
		local thr_num = 0
		if sel_temp == "----" then
			if to == "<ACT>" then
				line2_x = "    26K N1            VR"
				thr_num = B738DR_thr_takeoff_N1 * 100
				if thr_num == 0 then
					thr_dspl = "---.-"
				else
					thr_dspl = string.format("%5.1f", thr_num)
				end
			elseif to_1 == "<ACT>" then
				line2_x = "    24K N1            VR"
				thr_num = B738DR_thr_takeoff_N1 * 100
				if thr_num == 0 then
					thr_dspl = "---.-"
				else
					thr_dspl = string.format("%5.1f", thr_num)
				end
			elseif to_2 == "<ACT>" then
				line2_x = "    22K N1            VR"
				thr_num = B738DR_thr_takeoff_N1 * 100
				if thr_num == 0 then
					thr_dspl = "---.-"
				else
					thr_dspl = string.format("%5.1f", thr_num)
				end
			end
		else
			if to == "<ACT>" then
				line2_x = "RED 26K N1            VR"
				thr_num = B738DR_thr_takeoff_N1 * 100
				if thr_num == 0 then
					thr_dspl = "---.-"
				else
					thr_dspl = string.format("%5.1f", thr_num)
				end
			elseif to_1 == "<ACT>" then
				line2_x = "RED 24K N1            VR"
				thr_num = B738DR_thr_takeoff_N1 * 100
				if thr_num == 0 then
					thr_dspl = "---.-"
				else
					thr_dspl = string.format("%5.1f", thr_num)
				end
			elseif to_2 == "<ACT>" then
				line2_x = "RED 22K N1            VR"
				thr_num = B738DR_thr_takeoff_N1 * 100
				if thr_num == 0 then
					thr_dspl = "---.-"
				else
					thr_dspl = string.format("%5.1f", thr_num)
				end
			end
		end
		line2_l = thr_dspl .. "/"
		line2_l = line2_l .. thr_dspl
		line2_l = line2_l .. "          "
		line2_l = line2_l .. vr_set
--		line2_s = "                " .. vr
--		line2_s = line2_s .. "     "
		line3_x = " CG    " .. trim_str
		line3_x = line3_x .. "           V2"
		line3_l = cg .. "%  "
		line3_l = line3_l .. trim
		line3_l = line3_l .."          "
		line3_l = line3_l .. v2_set
--		line3_s = "                " .. v2
--		line3_s = line3_s .. "     "
		line4_x = "               GW  / TOW"
		line4_l = "              " .. gw_str
		line4_l = line4_l .. "/     "
		line4_s = "                        "
		line5_x = " RUNWAY                 "
		if ref_icao == "----" or ref_rwy == "-----" then
			line5_l = "                        "
			line5_s = "                        "
		else
			line5_l = "RW" .. ref_rwy
			rnw_len_temp = (ref_runway_lenght * 3.280839995) + 0.5
			rnw_len_temp = math.floor(rnw_len_temp)
			if rnw_len_temp == 0 then
				rnw_len = "-----"
			elseif rnw_len_temp > 99999 then
				rnw_len = "99999"
			else
				rnw_len = string.format("%5d",rnw_len_temp)
			end
			line5_l = line5_l .. "/" .. rnw_len .. "F "
			if string.len(ref_rwy) == 2 then
				line5_s = "           T           "
			else
				line5_s = "            T          "
			end
			
			if ref_runway_lenght == 0 then
				rnw_len = "----"
			elseif ref_runway_lenght > 9999 then
				rnw_len = "9999"
			else
				rnw_len = string.format("%4d",ref_runway_lenght)
			end
			line5_l = line5_l .. rnw_len .. "M"
		end
		--line5_s = "                        "
		line6_x = "------------------SELECT"
		
		if pre_flt_pos_init == 0 then
			line6_l = "<POS INIT "
		elseif pre_flt_rte == 0 then
			line6_l = "<ROUTE    "
		elseif pre_flt_dep == 0 then
			line6_l = "<DEPARTURE"
		elseif pre_flt_perf_init == 0 then
			line6_l = "<PERF INIT"
		else
			line6_l = "<INDEX    "
		end
		
		line6_l = line6_l .. "      QRH " .. qrh
		
		line6_l = line6_l .. ">"
		-- line6_s = "                        "
	
	elseif page_takeoff == 2 then
		act_page = 2
		max_page = 2
		local rw_str_l = ""
		local rw_str_s = ""
		if rw_cond == 0 then
			rw_str_l = "DRY/         "
			rw_str_s = "    WET/SK-R>"
		elseif rw_cond == 1 then
			rw_str_l = "    WET/     "
			rw_str_s = "DRY/    SK-R>"
		elseif rw_cond == 2 then
			rw_str_l = "        SK-R "
			rw_str_s = "DRY/WET/    >"
		end
		line0_l = "     TAKEOFF REF        "
		line0_s = "                    2/2 "
		line1_x = " RW WIND        RW COND "
		line1_l = rw_wind_dir .. "`/"
		line1_l = line1_l .. rw_wind_spd
--		line1_l = line1_l .. "   "
--		line1_l = line1_l .. rw_str_l
		line1_inv = "           " .. rw_str_l
		line1_s = "           " .. rw_str_s
		line2_x = " RW SLOPE/HDG           "
		line2_l = rw_slope .. "%/"
		line2_l = line2_l .. rw_hdg
		line2_s = "                        "
		--line3_x = "                        "
		--line3_l = "                        "
		--line3_s = "                        "
--		line4_x = " SEL/OAT          26K N1"
--		line4_l = "---/ +15`C   94.6/ 94.6%"
--		line4_s = "                        "
		line3_x = "                ACCEL HT"
		if accel_alt == "----" then
			line3_s = "                 1000AGL"
			line3_l = "                        "
		else
			line3_l = "                 " .. accel_alt
			line3_s = "                     AGL"
		end
		
		local thr_dspl = ""
		local thr_num = 0
		local sel_temp_dspl = ""
		local oat_dspl = ""
		--local oat_sim_dspl = ""
		
		if oat_unit == "`C" then
			sel_temp_dspl = sel_temp
			oat_dspl = oat
			--oat_sim_dspl = oat_sim
		else
			sel_temp_dspl = sel_temp_f
			oat_dspl = oat_f
			--oat_sim_dspl = oat_sim_f
		end
		line4_x = " SEL/OAT      "
		if fms_N1_to_mode_sel == 1 then
			line4_x = line4_x .. "    26K N1"
			thr_num = B738DR_thr_takeoff_N1 * 100
			if thr_num == 0 then
				thr_dspl = "---.-"
			else
				thr_dspl = string.format("%5.1f", thr_num)
			end
		elseif fms_N1_to_mode_sel == 2 then
			line4_x = line4_x .. "    24K N1"
			thr_num = B738DR_thr_takeoff_N1 * 100
			if thr_num == 0 then
				thr_dspl = "---.-"
			else
				thr_dspl = string.format("%5.1f", thr_num)
			end
		elseif fms_N1_to_mode_sel == 3 then
			line4_x = line4_x .. "    22K N1"
			thr_num = B738DR_thr_takeoff_N1 * 100
			if thr_num == 0 then
				thr_dspl = "---.-"
			else
				thr_dspl = string.format("%5.1f", thr_num)
			end
		elseif fms_N1_to_mode_sel == 4 then
			line4_x = line4_x .. "RED 24K N1"
			thr_num = B738DR_thr_takeoff_N1 * 100
			if thr_num == 0 then
				thr_dspl = "---.-"
			else
				thr_dspl = string.format("%5.1f", thr_num)
			end
		elseif fms_N1_to_mode_sel == 5 then
			line4_x = line4_x .. "RED 22K N1"
			thr_num = B738DR_thr_takeoff_N1 * 100
			if thr_num == 0 then
				thr_dspl = "---.-"
			else
				thr_dspl = string.format("%5.1f", thr_num)
			end
		elseif fms_N1_to_mode_sel == 6 then
			line4_x = line4_x .. "RED 20K N1"
			thr_num = B738DR_thr_takeoff_N1 * 100
			if thr_num == 0 then
				thr_dspl = "---.-"
			else
				thr_dspl = string.format("%5.1f", thr_num)
			end
		end
		line4_l = sel_temp_dspl .. "/"
		line4_l = line4_l .. oat_dspl
		line4_l = line4_l .."   "
		line4_l = line4_l .. thr_dspl
		line4_l = line4_l .. "/"
		line4_l = line4_l .. thr_dspl
		line4_l = line4_l .. "%"
		
		line4_s = "         " .. oat_unit
		
		line5_x = "           THR REDUCTION"
		line5_l = "           CLB          "
		if clb == "<SEL>" then
			line5_l = "           CLB   "
		elseif clb_1 == "<SEL>" then
			line5_l = "           CLB-1 "
		elseif clb_2 == "<SEL>" then
			line5_l = "           CLB-2 "
		end
		if clb_alt == "----" then
			line5_s = "                 1500AGL"
		else
			line5_l = line5_l .. clb_alt
			line5_s = "                     AGL"
		end
		line6_x = "------------------------"
		line6_l = "<INDEX                  "
		-- line6_s = "                        "
	end

end

function B738_fmc_approach()

	if page_approach == 1 then
		act_page = 1
		max_page = 1
		local thr_dspl = ""
		local thr_num = 0
		local temp_ils = ""
		local temp_ils2 = ""
		-- local temp_ils3 = ""
		-- local temp_ils4 = ""
		local temp_ils5 = ""
		local temp_ils6 = 0
		local i_ils = 0
		local rw_ils = ""
		local app_ils = ""
		local rnw_len = ""
		local rnw_len_temp = 0
		
		line0_l = "     APPROACH REF       "
		line0_s = "                    1/1 "
		line1_x = " GROSS WT   FLAPS   VREF"
		--line1_l = " " .. gw
		if gw_app == "***.*" then
			line1_l = gw_app
			line1_s = "                   "
		elseif gw_app_nul == 0 then
			line1_l = "     "
			line1_s = gw_app .. "              "
		else
			line1_l = gw_app
			line1_s = "                   "
		end
		line1_l = line1_l .. "        15`   "
		if flaps_app == "15" then
			line1_l = (line1_l .. vref_15)
			line1_l = (line1_l .. "KT")
			--line1_s = "                        "
		else
			line1_l = (line1_l .. "     ")
			--line1_s = ("                   " .. vref_15)
			line1_s = line1_s .. vref_15
			line1_s = (line1_s .. "KT")
		end
		line2_x = " GA N1                  "
		thr_num = fmc_ga_thrust * 100
		if thr_num == 0 then
			thr_dspl = "---.-"
		else
			thr_dspl = string.format("%5.1f", thr_num)
		end
		line2_l = thr_dspl
		line2_l = line2_l .. "/"
		line2_l = line2_l .. thr_dspl
		line2_l = line2_l .. "% 30`   "
		if flaps_app == "30" then
			line2_l = line2_l .. vref_30
			line2_l = line2_l .. "KT"
			-- line2_s = "                        "
		else
			line2_l = (line2_l .. "     ")
			line2_s = ("                   " .. vref_30)
			line2_s = (line2_s .. "KT")
		end
		--line3_l = "             40`   "
		if des_app ~= "------" then
			rnw_len_temp = (des_runway_lenght * 3.280839995) + 0.5
			rnw_len_temp = math.floor(rnw_len_temp)
			if rnw_len_temp == 0 then
				rnw_len = "-----"
			elseif rnw_len_temp > 99999 then
				rnw_len = "99999"
			else
				rnw_len = string.format("%5d",rnw_len_temp)
			end
			line3_l = rnw_len .. "F "
			
			if des_runway_lenght == 0 then
				rnw_len = "----"
			elseif des_runway_lenght > 9999 then
				rnw_len = "9999"
			else
				rnw_len = string.format("%4d",des_runway_lenght)
			end
			line3_l = line3_l .. rnw_len .. "M 40`   "
			
			--line3_l = "-----FT----M 40`   "
		else
			line3_l = "             40`   "
		end
		if flaps_app == "40" then
			line3_l = (line3_l .. vref_40)
			line3_l = (line3_l .. "KT")
			if des_app ~= "------" then
				line3_s = "      T                 "
			else
				-- line3_s = "                        "
			end
		else
			line3_l = (line3_l .. "     ")
			if des_app ~= "------" then
				line3_s = ("      T            " .. vref_40)
			else
				line3_s = ("                   " .. vref_40)
			end
			line3_s = (line3_s .. "KT")
		end
		
		if des_app ~= "------" then
			rw_ils = string.sub(des_app, 2, -1)
			if string.len(rw_ils) > 3 then
				rw_ils = string.sub(rw_ils, 1, 3)
			end
			if string.len(rw_ils) > 2 then
				if string.sub(rw_ils, -1, -1) ~= "L" and string.sub(rw_ils, -1, -1) ~= "R" and string.sub(rw_ils, -1, -1) ~= "C" then
					rw_ils = string.sub(rw_ils, 1, 2) .. " "
				end
			else
				rw_ils = rw_ils .. " "
			end
			app_ils = string.sub(des_app, 2, -1)
			
			if ils_freq ~= 0 then
				temp_ils3 = string.format("%5d", ils_freq)
				temp_ils3 = string.sub(temp_ils3, 1, 3) .. "." .. string.sub(temp_ils3, 4, 5)
				--temp_ils6 = (ils_course + simDR_mag_variation) % 360
				temp_ils6 = ils_course
				if temp_ils6 < 0 then
					temp_ils6 = temp_ils6 + 360
				end
				temp_ils4 = string.format("%03d", (temp_ils6)) .. "`"
			end
			
			--line3_x = " " .. des_icao .. rw_ils
			line3_x = " " .. des_icao .. des_rnw
			
			line4_s = "                  "
			if string.sub(des_app, 1, 1) == "I" then 	-- ILS
				temp_ils = " ILS " .. app_ils .. "/CRS"
				if string.len(app_ils) == 4 then
					temp_ils = temp_ils .. "   "
				elseif string.len(app_ils) == 2 then
					temp_ils = temp_ils .. "     "
				else
					temp_ils = temp_ils .. "    "
				end
				line4_s = "      " .. ils_id
				if ils_freq ~= 0 then
					line4_l = temp_ils3 .. "    /" .. temp_ils4 .. "   "
				else
					line4_l = "                  "
				end
			elseif string.sub(des_app, 1, 1) == "L" then 	-- LOC
				temp_ils = " LOC " .. app_ils .. "/CRS"
				if string.len(app_ils) == 4 then
					temp_ils = temp_ils .. "   "
				elseif string.len(app_ils) == 2 then
					temp_ils = temp_ils .. "     "
				else
					temp_ils = temp_ils .. "    "
				end
				line4_s = "      " .. ils_id
				if ils_freq ~= 0 then
					line4_l = temp_ils3 .. "    /" .. temp_ils4 .. "   "
				else
					line4_l = "                  "
				end
			elseif string.sub(des_app, 1, 1) == "J" then 	-- GLS
				temp_ils = " GLS " .. app_ils .. "/CRS"
				if string.len(app_ils) == 4 then
					temp_ils = temp_ils .. "   "
				elseif string.len(app_ils) == 2 then
					temp_ils = temp_ils .. "     "
				else
					temp_ils = temp_ils .. "    "
				end
				line4_s = "      " .. ils_id
				
				if ils_freq ~= 0 then
					line4_l = temp_ils3 .. "    /" .. temp_ils4 .. "   "
				else
					line4_l = "                  "
				end
			else
				temp_ils = "                "
				-- line4_s = "                  "
				line5_x = "               WIND CORR"
				line5_l = "       "
				line5_s = "       "
				line4_l = "                  "
			end
			line5_x = " G/S           WIND CORR"
			if B738DR_fms_ils_disable == 0 then
				line5_l = "<  /   "
				line5_g = " ON    "
				line5_s = "    OFF"
			else
				line5_l = "<  /   "
				line5_g = "    OFF"
				line5_s = " ON    "
			end
		else
			line3_x = ""
			temp_ils = "                "
			line4_s = "                  "
			line5_x = "               WIND CORR"
			line5_l = "       "
			line5_s = "       "
			line4_l = "                  "
			--found_ils = 0
		end
		
		--line5_l = "       "
		line4_x = temp_ils .. "FLAP/SPD"
		
		
		line4_l = line4_l .. app_flap
		line4_l = line4_l .. "/"
		line4_l = line4_l .. app_spd
		--line4_s = "                    /   "
		--line4_s = ""
		
		--line5_x = "               WIND CORR"
		if wind_corr == "--" then
			line5_l = line5_l .. ""
			line5_s = line5_s .. "            +05KT"
		else
			line5_l = line5_l .. "            +"
			line5_l = line5_l .. wind_corr
			--line5_l = line5_l
			--line5_s = "                      KT"
			line5_s = line5_s .. "               KT"
		end
		-- line6_x = "------------------------"
		line6_l = "<INDEX                  "
		-- line6_s = "                        "
	end

end

function B738_fmc_perf()

	if page_perf == 1 then
		act_page = 1
		max_page = 2
		clr_repeat = 1
		local trip = "     "
		if B738DR_cruise_opt_alt > 0 then
			trip = "FL" .. string.format("%03d", (B738DR_cruise_opt_alt/100))
		end
		
		if perf_exec == 2 then
			line0_l = " ACT "
		else
			line0_l = "     "
		end
		line0_l = line0_l .. "PERF INIT          "
		line0_s = "                    1/2 "
		line1_x = " GW/CRZ CG  TRIP/CRZ ALT"
		if cg == "--.-" then
			-- default CG
			line1_l = gw .. "/ 8.0%"
		else
			line1_l = gw .. "/"
			line1_l = line1_l .. cg
			line1_l = line1_l .. "%"
		end
		if gw == "**.*" then
			line1_l = line1_l .."        "
			line1_l = line1_l .. crz_alt
		else
			line1_l = line1_l .."  "
			line1_l = line1_l .. trip
			line1_l = line1_l .. "/"
			line1_l = line1_l .. crz_alt
		end
		if crz_alt == "*****" then
			--line1_x = " GW/CRZ CG  TRIP/CRZ ALT"
			line1_l = line1_l .."  "
			line1_l = line1_l .. trip
			line1_l = line1_l .. "/"
			line1_l = line1_l .. crz_alt
		else
			--line1_x = " GW/CRZ CG       CRZ ALT"
			line1_l = line1_l .."        "
			line1_l = line1_l .. crz_alt
		end
		-- line1_s = "                        "
		line2_x = " PLAN/FUEL      CRZ WIND"
		if simDR_flaps_ratio > 0.624 or was_on_air == 1 then
			line2_l = "     /"
		else
			line2_l = plan_weight .. "/"
		end
		line2_l = line2_l .. fuel_weight
		line2_l = line2_l .. "      "
		line2_l = line2_l .. crz_wind_dir
		line2_l = line2_l .. "`/"
		line2_l = line2_l .. crz_wind_spd
		-- line2_s = "                        "
		line3_x = " ZFW             "
		line3_l = zfw .. "        "
		if crz_alt == "*****" then
			isa_dev_f = "---"
			isa_dev_c = "---"
			disable_PERF_3R = 1
			-- line3_s =   "                        "
		else
			line3_x = line3_x .. "ISA DEV"
			line3_l = line3_l .. isa_dev_f
			line3_l = line3_l .. "   "
			line3_l = line3_l .. isa_dev_c
			line3_s =   "                `F    `C"
			disable_PERF_3R = 0
		end
		line4_x = " RESERVES        "
		line4_l = reserves .. "         "
		if crz_alt == "*****" then
			tc_oat_f = "---"
			tc_oat_c = "---"
			disable_PERF_4R = 1
			-- line4_s =   "                        "
		else
			line4_x = line4_x .. "T/C OAT"
			line4_l = line4_l .. tc_oat_f
			line4_l = line4_l .. "   "
			line4_l = line4_l .. tc_oat_c
			line4_s = "                `F    `C"
			disable_PERF_4R = 0
		end
		line5_x = " COST INDEX    TRANS ALT"
		line5_l = cost_index .. "                "
		if trans_alt == "-----" then
			line5_l = line5_l .. "18000"
		else
			line5_l = line5_l .. trans_alt
		end
		-- line5_s = "                        "
		line6_x = "------------------------"
		line6_l = "<INDEX         N1 LIMIT>"
		-- line6_s = "                        "
	elseif page_perf == 2 then
		act_page = 2
		max_page = 2
		line0_l = "      PERF LIMITS       "
		line0_s = "                    2/2 "
		line1_x = " TIME ERROR TOLERANCE   "
		line1_l = "  " .. time_err
		if time_err == "  " then
			line1_s = "  30 SEC AT RTA WPT     "
		else
			line1_s = "     SEC AT RTA WPT     "
		end
		line2_x = " MIN SPD --CLB-- MAX SPD"
		line2_l = clb_min_kts .. "/."
		line2_l = line2_l .. clb_min_mach
		line2_l = line2_l .. "        "
		line2_l = line2_l .. clb_max_kts
		line2_l = line2_l .. "/."
		line2_l = line2_l .. clb_max_mach
		if clb_min_kts == "   " then
			line2_s = "100  "
		else
			line2_s = "     "
		end
		if clb_min_mach == "   " then
			line2_s = line2_s .. "400        "
		else
			line2_s = line2_s .. "           "
		end
		if clb_max_kts == "   " then
			line2_s = line2_s .. "340  "
		else
			line2_s = line2_s .. "     "
		end
		if clb_max_mach == "   " then
			line2_s = line2_s .. "820"
		end
		line3_x = "         --CRZ--        "
		line3_l = crz_min_kts .. "/."
		line3_l = line3_l .. crz_min_mach
		line3_l = line3_l .. "        "
		line3_l = line3_l .. crz_max_kts
		line3_l = line3_l .. "/."
		line3_l = line3_l .. crz_max_mach
		if crz_min_kts == "   " then
			line3_s = "100  "
		else
			line3_s = "     "
		end
		if crz_min_mach == "   " then
			line3_s = line3_s .. "400        "
		else
			line3_s = line3_s .. "           "
		end
		if crz_max_kts == "   " then
			line3_s = line3_s .. "340  "
		else
			line3_s = line3_s .. "     "
		end
		if crz_max_mach == "   " then
			line3_s = line3_s .. "820"
		end
		line4_x = "         --DES--        "
		line4_l = des_min_kts .. "/."
		line4_l = line4_l .. des_min_mach
		line4_l = line4_l .. "        "
		line4_l = line4_l .. des_max_kts
		line4_l = line4_l .. "/."
		line4_l = line4_l .. des_max_mach
		if des_min_kts == "   " then
			line4_s = "100  "
		else
			line4_s = "     "
		end
		if des_min_mach == "   " then
			line4_s = line4_s .. "400        "
		else
			line4_s = line4_s .. "           "
		end
		if des_max_kts == "   " then
			line4_s = line4_s .. "340  "
		else
			line4_s = line4_s .. "     "
		end
		if des_max_mach == "   " then
			line4_s = line4_s .. "820"
		end
		-- line5_x = "                        "
		-- line5_l = "                        "
		-- line5_s = "                        "
		-- line6_x = "                        "
		line6_l = "<INDEX              RTA>"
		-- line6_s = "                        "
	end

end



function B738_fmc_n1_limit()

	if page_n1_limit == 1 then
		act_page = 1
		max_page = 1
		local thr_dspl = ""
		local thr_num = 0
		
		if in_flight_mode == 0 then
			local sel_temp_dspl = ""
			local oat_dspl = ""
			--local oat_sim_dspl = ""
			
			if oat_unit == "`C" then
				sel_temp_dspl = sel_temp
				oat_dspl = oat
				--oat_sim_dspl = oat_sim
			else
				sel_temp_dspl = sel_temp_f
				oat_dspl = oat_f
				--oat_sim_dspl = oat_sim_f
			end
			
			line0_l = "      N1 LIMIT          "
			line0_s = "                    1/1 "
			line1_x = " SEL/OAT      "
			if sel_temp == "----" then
				if to == "<ACT>" then
					line1_x = line1_x .. "    26K N1"
					thr_num = B738DR_thr_takeoff_N1 * 100
					if thr_num == 0 then
						thr_dspl = "---.-"
					else
						thr_dspl = string.format("%5.1f", thr_num)
					end
				elseif to_1 == "<ACT>" then
					line1_x = line1_x .. "    24K N1"
					thr_num = B738DR_thr_takeoff_N1 * 100
					if thr_num == 0 then
						thr_dspl = "---.-"
					else
						thr_dspl = string.format("%5.1f", thr_num)
					end
				elseif to_2 == "<ACT>" then
					line1_x = line1_x .. "    22K N1"
					thr_num = B738DR_thr_takeoff_N1 * 100
					if thr_num == 0 then
						thr_dspl = "---.-"
					else
						thr_dspl = string.format("%5.1f", thr_num)
					end
				end
			else
				if to == "<ACT>" then
					line1_x = line1_x .. "RED 26K N1"
					thr_num = B738DR_thr_takeoff_N1 * 100
					if thr_num == 0 then
						thr_dspl = "---.-"
					else
						thr_dspl = string.format("%5.1f", thr_num)
					end
				elseif to_1 == "<ACT>" then
					line1_x = line1_x .. "RED 24K N1"
					thr_num = B738DR_thr_takeoff_N1 * 100
					if thr_num == 0 then
						thr_dspl = "---.-"
					else
						thr_dspl = string.format("%5.1f", thr_num)
					end
				elseif to_2 == "<ACT>" then
					line1_x = line1_x .. "RED 22K N1"
					thr_num = B738DR_thr_takeoff_N1 * 100
					if thr_num == 0 then
						thr_dspl = "---.-"
					else
						thr_dspl = string.format("%5.1f", thr_num)
					end
				end
			end
			line1_l = sel_temp_dspl .. "/"
			line1_l = line1_l .. oat_dspl
			line1_l = line1_l .."    "
			line1_l = line1_l .. thr_dspl
			line1_l = line1_l .. "/"
			line1_l = line1_l .. thr_dspl
			line1_s = "         " .. oat_unit
			line2_x = " 26K"
			line3_x = " 24K DERATE"
			line4_x = " 22K DERATE"
---			end
			line2_l = "<TO   " .. to
			line2_l = line2_l .. " "
			line2_l = line2_l .. clb
			line2_l = line2_l .. "   CLB>"
			line2_s = "                        "
			line3_l = "<TO-1 " .. to_1
			line3_l = line3_l .. " "
			line3_l = line3_l .. clb_1
			line3_l = line3_l .. " CLB-1>"
			line3_s = "                        "
			line4_l = "<TO-2 " .. to_2
			line4_l = line4_l .." "
			line4_l = line4_l .. clb_2
			line4_l = line4_l .. " CLB-2>"
			-- line4_s = "                        "
			-- line5_x = "                        "
			-- line5_l = "                        "
			-- line5_s = "                        "
			line6_x = "------------------------"
			if ground_air == 0 then
				line6_l = "<PERF INIT      TAKEOFF>"
				disable_N1_6R = 0
			else
				line6_l = "<PERF INIT"
				disable_N1_6R = 1
			end
			-- line6_s = "                        "
			disable_N1_6L = 0
		
		elseif in_flight_mode == 1 then
			line0_l = "      N1 LIMIT          "
			line0_s = "                    1/1 "
			-- line1_x = "                        "
			line1_l = "<AUTO " .. auto_act
			line1_s = "                        "
			line2_x = "                        "
			line2_l = "<GA   " .. ga_act
			line2_l = line2_l .. "  " 
			thr_num = fmc_ga_thrust * 100
			if thr_num == 0 then
				thr_dspl = "---.-"
			else
				thr_dspl = string.format("%5.1f", thr_num)
			end
			line2_l = line2_l .. thr_dspl
			line2_l = line2_l .. "/"
			line2_l = line2_l .. thr_dspl
			-- line2_s = "                        "
			-- line3_x = "                        "
--			line3_l = "<CON  <ACT>   90.5/ 90.5"
			line3_l = "<CON  " .. con_act
			line3_l = line3_l .. "  " 
			thr_num = fmc_con_thrust * 100
			if thr_num == 0 then
				thr_dspl = "---.-"
			else
				thr_dspl = string.format("%5.1f", thr_num)
			end
			line3_l = line3_l .. thr_dspl
			line3_l = line3_l .. "/"
			line3_l = line3_l .. thr_dspl
			-- line3_s = "                        "
			-- line4_x = "                        "
--			line4_l = "<CLB  <ACT>   90.5/ 90.5"
			line4_l = "<CLB  " .. clb_act
			line4_l = line4_l .. "  " 
			thr_num = fmc_clb_thrust * 100
			if thr_num == 0 then
				thr_dspl = "---.-"
			else
				thr_dspl = string.format("%5.1f", thr_num)
			end
			line4_l = line4_l .. thr_dspl
			line4_l = line4_l .. "/"
			line4_l = line4_l .. thr_dspl
			-- line4_s = "                        "
			-- line5_x = "                        "
--			line5_l = "<CRZ  <ACT>   86.8/ 86.8"
			line5_l = "<CRZ  " .. crz_act
			line5_l = line5_l .. "  " 
			thr_num = fmc_crz_thrust * 100
			if thr_num == 0 then
				thr_dspl = "---.-"
			else
				thr_dspl = string.format("%5.1f", thr_num)
			end
			line5_l = line5_l .. thr_dspl
			line5_l = line5_l .. "/"
			line5_l = line5_l .. thr_dspl
			-- line5_s = "                        "
			line6_x = "------REDUCED CLB-------"
			if clb == "<SEL>" then
				line6_l = "<CLB-1            CLB-2>"
			elseif clb_1 == "<SEL>" then
				line6_l = "<CLB-1 <SEL>      CLB-2>"
			elseif clb_2 == "<SEL>" then
				line6_l = "<CLB-1      <SEL> CLB-2>"
			end
			-- line6_s = "                        "
			if simDR_altitude_pilot > 15000 then
				disable_N1_6L = 1
				disable_N1_6R = 1
			end
			if simDR_altitude_pilot < 14900 then
				disable_N1_6L = 0
				disable_N1_6R = 0
			end
		end
	end

end

function B738_fmc_climb()

	if page_climb == 1 then
		act_page = 1
		max_page = 1
		local thrust = 0
		local v11 = 0
		local v21 = 0
		local clb_100 = 0
		local time_TOD = 0
		local time_TOD_h = 0
		local time_TOD_m = 0
		local time_TOD_s = 0
		local time1_TOD_h = 0
		local time1_TOD_m = 0
		local time1_TOD_s = 0
		local delta_alt = 0
		local nav_id = ""
		local rest_alt_id = ""
		local rest_alt = ""
		local ii = 0
		local tmp_wpt_eta = ""
		local tmp_wpt_eta2 = 0
		local tmp_wpt_eta3 = 0
		
		if B738DR_flight_phase < 2 and B738DR_autopilot_vnav_status == 1 then	-- phase climb
			line0_l = "  ACT "
		else
			line0_l = "      "
		end
		if B738DR_fmc_climb_speed_l == 340 
		or B738DR_fmc_climb_speed_l == 0 then
			if B738DR_climb_mode == 0 then
				line0_l = line0_l .. "ECON CLB          "
			elseif B738DR_climb_mode == 1 then
				line0_l = line0_l .. "MAX RATE CLB      "
			elseif B738DR_climb_mode == 2 then
				line0_l = line0_l .. "MAX ANGLE CLB     "
			elseif B738DR_climb_mode == 3 then
				if simDR_airspeed_is_mach == 0 then
					line0_l = line0_l .. string.format("%3d", B738DR_fmc_climb_speed)
					line0_l = line0_l .. "KT CLB         "
				else
					line0_l = line0_l .. "M."
					line0_l = line0_l .. string.format("%3d", (B738DR_fmc_climb_speed_mach * 1000))
					line0_l = line0_l .. " CLB         "
				end
			end
			if B738DR_fmc_climb_speed_l == B738DR_fmc_climb_r_speed1 and simDR_altitude_pilot < B738DR_fmc_climb_r_alt1 
			and B738DR_fmc_climb_speed_l ~= 0 then
				line3_l = "   /" .. fmc_climb_r_alt1 .. "          ---  "
				line3_m = string.format("%03d", B738DR_fmc_climb_r_speed1)
			else
				if B738DR_fmc_climb_r_speed1 == 0 then
					line3_l = "---/-----          ---  "
					line3_m = ""
				else
					line3_l = string.format("%03d", B738DR_fmc_climb_r_speed1) .. "/" .. fmc_climb_r_alt1 .. "          ---  "
					line3_m = ""
				end
			end
			-- line3_l = "---/-----          ---  "
			-- line3_inv = ""
			if B738DR_flight_phase < 2 and B738DR_autopilot_vnav_status == 1 then
				if simDR_airspeed_is_mach == 0 then
					if B738DR_ap_spd_interv_status == 0 then
						line2_m = string.format("%3d", B738DR_fmc_climb_speed)
						line2_l = "   /" .. string.sub(string.format("%5.3f", B738DR_fmc_climb_speed_mach), 2, 5)
					else
						line2_m = string.format("%3d", B738DR_mcp_speed_dial)	--simDR_airspeed_dial)
						line2_l = "   /MCP "
					end
				else
					if B738DR_ap_spd_interv_status == 0 then
						line2_l = string.format("%3d", B738DR_fmc_climb_speed) .. "/    "
						line2_m = "    " .. string.sub(string.format("%5.3f", B738DR_fmc_climb_speed_mach), 2, 5)
					else
						line2_m = string.sub(string.format("%5.3f", B738DR_mcp_speed_dial), 2, 5)	--simDR_airspeed_dial), 2, 5)
						line2_l = "   /MCP "
					end
				end
			else
				line2_l = string.format("%3d", B738DR_fmc_climb_speed) .. "/"
				line2_l = line2_l .. string.sub(string.format("%5.3f", B738DR_fmc_climb_speed_mach), 2, 5)
				line2_m = ""
			end
		else
			line0_l = line0_l .. string.format("%3d", B738DR_fmc_climb_speed_l)
			line0_l = line0_l .. "KT LIM CLB     "
			if flaps_speed == B738DR_fmc_climb_speed_l or flaps_speed < vnav_speed then
				if flaps_speed == B738DR_fmc_climb_speed_l then
					line3_m = string.format("%3d", B738DR_fmc_climb_speed_l)
					line3_l = "   /FLAPS          ---  "
				else
					line3_l = string.format("%3d", B738DR_fmc_climb_speed_l) .. "/FLAPS          ---  "
					line3_m = ""
				end
			elseif vnav_speed == B738DR_fmc_climb_speed_l then
				nav_id = B738DR_rest_wpt_spd_id
				if string.len(nav_id) > 5 then
					nav_id = string.sub(nav_id, 1, 5)
				end
				line3_m = string.format("%3d", B738DR_fmc_climb_speed_l)
				line3_l = "   /"
				line3_l = line3_l .. nav_id
				line3_l = line3_l .. "          ---  "
			elseif B738DR_fmc_climb_speed_l == B738DR_fmc_climb_r_speed1 and simDR_altitude_pilot < B738DR_fmc_climb_r_alt1 
			and B738DR_fmc_climb_speed_l ~= 0 then
				line3_l = "   /" .. fmc_climb_r_alt1 .. "          ---  "
				line3_m = string.format("%03d", B738DR_fmc_climb_r_speed1)
			else
				-- if B738DR_fmc_climb_speed_l == 250 then
					-- line3_m = "250"
					-- line3_l = "   /10000          ---  "
				-- else
					if B738DR_fmc_climb_r_speed1 == 0 then
						line3_l = "---/-----          ---  "
						--line3_l = "250/10000          ---  "
						line3_m = ""
					else
						line3_l = string.format("%03d", B738DR_fmc_climb_r_speed1) .. "/" .. fmc_climb_r_alt1 .. "          ---  "
						line3_m = ""
					end
				-- end
			end
			if B738DR_ap_spd_interv_status == 1 and B738DR_flight_phase < 2 then
				line2_m = string.format("%3d", B738DR_mcp_speed_dial)	--simDR_airspeed_dial)
				line2_l = "   /MCP "
			else
				line2_l = string.format("%3d", B738DR_fmc_climb_speed) .. "/"
				line2_l = line2_l .. string.sub(string.format("%5.3f", B738DR_fmc_climb_speed_mach), 2, 5)
				line2_m = ""
			end
		end
		line0_s = "                    1/1 "
		-- line1_s = "                        "
		--line1_x = " CRZ ALT        AT -----"
			
			--rest_alt_id == ""
		if B738DR_flight_phase > 1 then
				rest_alt_id = ""
				rest_alt = ""
		else
			if B738DR_rest_wpt_alt == 0 or legs_delete == 1 then
				if crz_alt == "*****" then
					rest_alt_id = ""
					rest_alt = ""
				else
					rest_alt_id = "T/C"
					rest_alt = crz_alt
				end
			else
				if string.len(B738DR_rest_wpt_alt_id) > 5 then
					rest_alt_id = string.sub(B738DR_rest_wpt_alt_id, 1, 5)
				else
					rest_alt_id = B738DR_rest_wpt_alt_id
				end
				
				if B738DR_rest_wpt_alt > B738DR_trans_alt then
					rest_alt = "FL" .. string.format("%03d", B738DR_rest_wpt_alt/100)
				else
					rest_alt = string.format("%5d",B738DR_rest_wpt_alt)
				end
				if B738DR_rest_wpt_alt_t == 43 then
					rest_alt = rest_alt .. "A"
				elseif B738DR_rest_wpt_alt_t == 45 then
					rest_alt = rest_alt .. "B"
				end
				--B738DR_rest_wpt_alt_idx
			end
		end
		line1_x = " CRZ ALT        AT " .. rest_alt_id
		line2_x = " TGT SPD        TO " .. rest_alt_id
		
		
		if B738DR_flight_phase < 2 and B738DR_autopilot_vnav_status == 1 then
			if rest_alt_id == "T/C" then
				line1_m = crz_alt
				line1_l = "                  " .. rest_alt
			else
				line1_m = crz_alt .. "             " .. rest_alt
				line1_l = ""
			end
		else
			line1_m = ""
			line1_l = crz_alt .. "             " .. rest_alt
		end
		
		if B738DR_flight_phase < 2 then
			
			if B738DR_rest_wpt_alt == 0 then
			
				if time_tc == 0 then
					line2_l = line2_l .. "   ----.- /---NM"
				else
					tmp_wpt_eta2 = math.floor(time_tc)
					tmp_wpt_eta3 = (time_tc - tmp_wpt_eta2) * 60
					tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.format("%04.1f", tmp_wpt_eta3)
					line2_l = line2_l .. "   "
					line2_l = line2_l .. tmp_wpt_eta .. " /"
					line2_l = line2_l .. string.format("%3d", dist_tc)
					line2_l = line2_l .. "NM"
				end
			else
				if legs_num > 1 then				
					if B738DR_rest_wpt_alt_idx == 0 then
						line2_l = line2_l .. "   ----.- /---NM"
					else
						if B738DR_rest_wpt_alt_idx == offset then
							time_TOD = simDR_fmc_dist
						else
							time_TOD = simDR_fmc_dist
							for ii = offset + 1, B738DR_rest_wpt_alt_idx do
								time_TOD = time_TOD + legs_data[ii][3]	-- to wpt idx
							end
						end
						tmp_wpt_eta2 = math.floor(legs_data[B738DR_rest_wpt_alt_idx][13])
						tmp_wpt_eta3 = (legs_data[B738DR_rest_wpt_alt_idx][13] - tmp_wpt_eta2) * 60
						tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.format("%04.1f", tmp_wpt_eta3)
						line2_l = line2_l .. "   " 
						line2_l = line2_l .. tmp_wpt_eta
						line2_l = line2_l .. " /"
						line2_l = line2_l .. string.format("%3d", time_TOD)
						line2_l = line2_l .. "NM"
					end
					
				else
					line2_l = line2_l .. "   ----.- /---NM"
				end
			end
		else
			line2_l = line2_l .. "   ----.- /---NM"
		end
--		line2_l = line2_l .. "   ----.- /---NM"
		line2_s = "                 Z      "
		line3_x = " SPD REST      ERR -----"
--		line3_l = "250/10000          ---  "
		line3_s = "                      LO"
		line4_x = "------------    "
		line4_l = "<ECON       "
		if clb == "<SEL>" then
			line4_x = line4_x .. "CLB   N1"
			thrust = B738DR_thr_climb_N1 * 100
		elseif clb_1 == "<SEL>" then
			line4_x = line4_x .. "CLB-1 N1"
			thrust = B738DR_thr_climb_N1 * 97
		elseif clb_2 == "<SEL>" then
			line4_x = line4_x .. "CLB-2 N1"
			thrust = B738DR_thr_climb_N1 * 94
		end
		if thrust == 0 then
			line4_l = line4_l .. "---.-/---.-%"
		else
			line4_l = line4_l .. string.format("%5.1f", thrust)
			line4_l = line4_l .. "/"
			line4_l = line4_l .. string.format("%5.1f", thrust)
			line4_l = line4_l .. "%"
		end
		-- line4_s = "                        "
		line5_x = "            ------------"
		-- if  not prompt ENG OUT
		if eng_out_prompt == 0 then
			line5_l = "<MAX RATE       ENG OUT>"
			-- line5_s = "                        "
		else
		-- if prompt ENG OUT
			line5_l = "<                      >"
			line5_s = " LT ENG OUT  RT ENG OUT "
		end
		-- line6_x = "                        "
		line6_l = "<MAX ANGLE          RTA>"
		-- line6_s = "                        "
	end

end

-- function B738_fmc_climb_rta()

	-- if page_climb_rta == 1 then
		-- act_page = 1
		-- max_page = 1
		-- line0_l = "  ACT RTA CLB           "
		-- line0_s = "                        "
		-- line1_x = " CRZ ALT        AT MACEY"
		-- line1_l = "FL350              6000A"
		-- line1_s = "                        "
		-- line2_x = " TGT SPD      TIME ERROR"
		-- line2_l = "280/.720         ON TIME"
		-- line2_s = "                 Z      "
		-- line3_x = " SPD REST               "
		-- line3_l = "250/10000               "
		-- line3_s = "                        "
		-- -- if  not prompt ENG OUT
		-- line4_x = "------------            "
		-- line4_l = "<ECON                   "
		-- line4_s = "                        "
		-- line5_x = "            ------------"
		-- line5_l = "<MAX RATE       ENG OUT>"
		-- line5_s = "                        "
		-- line6_x = "                        "
		-- line6_l = "<MAX ANGLE          RTA>"
		-- line6_s = "                        "
		-- -- if prompt ENG OUT
		-- -- line4_x = "                        "
		-- -- line4_l = "                        "
		-- -- line4_s = "                        "
		-- -- line5_x = "------------------------"
		-- -- line5_l = "<                      >"
		-- -- line5_s = " LT ENG OUT  RT ENG OUT "
		-- -- line6_x = "                        "
		-- -- line6_l = "                        "
		-- -- line6_s = "                        "
	-- end

-- end

-- function B738_fmc_climb_eng_out()

	-- if page_climb_eng_out == 1 then
		-- act_page = 1
		-- max_page = 1
		-- line0_l = "  ENG OUT CLB           "
		-- line0_s = "                        "
		-- line1_x = " CRZ ALT         MAX ALT"
		-- line1_l = "FL350              FL185"
		-- line1_s = "                        "
		-- line2_x = " ENG OUT SPD      CON N1"
		-- line2_l = "210KT              92.6%"
		-- line2_s = "                        "
		-- line3_x = "                        "
		-- line3_l = "                        "
		-- line3_s = "                        "
		-- line4_x = "------------------------"
		-- -- Left engine out
		-- line4_l = "<LT ENG OUT            >"
		-- line4_s = "             RT ENG OUT "
		-- -- Right engine out
		-- -- line4_l = "<            RT ENG OUT>"
		-- -- line4_s = " LT ENG OUT             "
		-- -- fix
		-- line5_x = "                        "
		-- line5_l = "                        "
		-- line5_s = "                        "
		-- line6_x = "                        "
		-- line6_l = "                        "
		-- line6_s = "                        "
	-- end

-- end

function B738_fmc_cruise()

	if page_cruise == 1 then
		act_page = 1
		max_page = 1
		local thrust = 0
		local trip = "     "
		local max_alt = "     "
		local time_TOD = 0
		local time_TOD_h = 0
		local time_TOD_m = 0
		local time_TOD_s = 0
		local delta_alt = 0
		local tmp_wpt_eta = ""
		local tmp_wpt_eta2 = 0
		local tmp_wpt_eta3 = 0
		
		if B738DR_cruise_opt_alt > 0 then
			trip = "FL" .. string.format("%03d", (B738DR_cruise_opt_alt/100))
		end
		if B738DR_cruise_max_alt > 0 then
			max_alt = "FL" .. string.format("%03d", (B738DR_cruise_max_alt/100))
		end
		if crz_exec == 0 and B738DR_flight_phase ~= 3 and B738DR_flight_phase ~= 4 then
			if B738DR_flight_phase == 2 and B738DR_autopilot_vnav_status == 1 then	-- phase cruise
				line0_l = "  ACT "
			else
				line0_l = "      "
			end
			if B738DR_cruise_mode == 0 then
				line0_l = line0_l .. "ECON CRZ          "
			elseif B738DR_cruise_mode == 1 then
				line0_l = line0_l .. "LRC CRZ           "
			elseif B738DR_cruise_mode == 2 then
				if simDR_airspeed_is_mach == 0 then
					line0_l = line0_l .. string.format("%3d", B738DR_fmc_cruise_speed)
					line0_l = line0_l .. "KT CRZ         "
				else
					line0_l = line0_l .. "M."
					line0_l = line0_l .. string.format("%3d", (B738DR_fmc_cruise_speed_mach * 1000))
					line0_l = line0_l .. " CRZ         "
				end
			end
			line0_s = "                    1/1 "
			line1_x = " CRZ ALT  OPT/MAX       "
			if B738DR_flight_phase == 2 and B738DR_autopilot_vnav_status == 1 then
				line1_m = crz_alt
				line1_l = "        " .. trip
				line1_l = line1_l .. "/"
				line1_l = line1_l .. max_alt
			else
				line1_m = ""
				line1_l = crz_alt .. "   "
				line1_l = line1_l .. trip
				line1_l = line1_l .. "/"
				line1_l = line1_l .. max_alt
			end
			
			-- line1_s = "                        "
			line2_x = " TGT SPD          TO T/D"
			if B738DR_flight_phase == 2 then
				if simDR_airspeed_is_mach == 0 then
					if B738DR_ap_spd_interv_status == 0 then
						line2_m = string.format("%3d", B738DR_fmc_cruise_speed)
						line2_l = "   /" .. string.sub(string.format("%5.3f", B738DR_fmc_cruise_speed_mach), 2, 5)
					else
						line2_m = string.format("%3d", B738DR_mcp_speed_dial)	--simDR_airspeed_dial)
						line2_l = "   /MCP "
					end
				else
					if B738DR_ap_spd_interv_status == 0 then
						line2_l = string.format("%3d", B738DR_fmc_cruise_speed) .. "/    "
						line2_m = "    " .. string.sub(string.format("%5.3f", B738DR_fmc_cruise_speed_mach), 2, 5)
					else
						line2_m = string.sub(string.format("%5.3f", B738DR_mcp_speed_dial), 2, 5)	--simDR_airspeed_dial), 2, 5)
						line2_l = "   /MCP "
					end
				end
			else
				line2_l = string.format("%3d", B738DR_fmc_cruise_speed) .. "/"
				line2_l = line2_l .. string.sub(string.format("%5.3f", B738DR_fmc_cruise_speed_mach), 2, 5)
				line2_m = ""
			end
			if B738DR_vnav_td_dist <= 0 then
				line2_l = line2_l .. " "
				line2_s = " "
			else
				line2_s = "                 Z      "
				if time_td == 0 then
					line2_l = line2_l .. " "
					line2_s = " "
				else
					tmp_wpt_eta2 = math.floor(time_td)
					tmp_wpt_eta3 = (time_td - tmp_wpt_eta2) * 60
					tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.format("%04.1f", tmp_wpt_eta3)
					line2_l = line2_l .. "   "
					line2_l = line2_l .. tmp_wpt_eta .. " /"
					line2_l = line2_l .. string.format("%3d", dist_td)
					line2_l = line2_l .. "NM"
				end
			end
			line3_x = " TURB N1     ACTUAL WIND"
			thrust = B738DR_thr_cruise_N1 * 100
			if thrust == 0 then
				line3_l = "---.-/---.-%    "
			else
				line3_l = string.format("%5.1f", thrust) .. "/"
				line3_l = line3_l .. string.format("%5.1f", thrust)
				line3_l = line3_l .. "%    "
			end
			if simDR_wind_spd > 0.5 then
				line3_l = line3_l .. string.format("%03d", simDR_wind_hdg)
				line3_l = line3_l .. "`/"
				line3_l = line3_l .. string.format("%03d", simDR_wind_spd)
			else
				line3_l = line3_l .. "---`/---"
			end
			-- line3_s = "                        "
			line4_x = " FUEL AT ----           "
			line4_l = "         --.-           "
			-- line4_s = "                        "
			line5_x = "------------------------"
			line5_l = "<ECON           ENG OUT>"
			-- line5_s = "                        "
			-- line6_x = "                        "
			line6_l = "<LRC                RTA>"
			-- line6_s = "                        "
		
		-- CRZ CLB
		elseif crz_exec == 1 or B738DR_flight_phase == 3 then
			if B738DR_flight_phase == 3 and crz_exec == 0 then
				line0_l = "  ACT CRZ CLB           "
				line0_inv = ""
				line1_l = crz_alt .. "   "
				line1_inv = ""
				line6_l = "<MAX ANGLE          RTA>"
			else
				line0_l = "      CRZ CLB           "
				line0_inv = "  MOD"
				line1_l = "        "
				line1_inv = crz_alt
				line6_l = "<MAX ANGLE        ERASE>"
			end
			line0_s = "                    1/1 "
			line1_x = " CRZ ALT  OPT/MAX       "
--			line1_l = crz_alt .. "   "
			line1_l = line1_l .. trip
			line1_l = line1_l .. "/"
			line1_l = line1_l .. max_alt
			line1_s = "                        "
			line2_x = " TGT SPD        TO " .. crz_alt
			if simDR_airspeed_is_mach == 0 then
				if B738DR_ap_spd_interv_status == 0 then
					line2_m = string.format("%3d", B738DR_fmc_cruise_speed)
					line2_l = "   /" .. string.sub(string.format("%5.3f", B738DR_fmc_cruise_speed_mach), 2, 5)
				else
					line2_m = string.format("%3d", B738DR_mcp_speed_dial)	--simDR_airspeed_dial)
					line2_l = "   /MCP "
				end
			else
				if B738DR_ap_spd_interv_status == 0 then
					line2_l = string.format("%3d", B738DR_fmc_cruise_speed) .. "/    "
					line2_m = "    " .. string.sub(string.format("%5.3f", B738DR_fmc_cruise_speed_mach), 2, 5)
				else
					line2_m = string.sub(string.format("%5.3f", B738DR_mcp_speed_dial), 2, 5)	--simDR_airspeed_dial), 2, 5)
					line2_l = "   /MCP "
				end
			end
			if simDR_vvi_fpm_pilot > 800 then
					delta_alt = crz_alt_num - simDR_altitude_pilot
					time_TOD = delta_alt / (simDR_vvi_fpm_pilot / 60)
					delta_alt = time_TOD
					--DR_test = time_TOD
					time_TOD_h = math.floor((time_TOD / 3600))
					time_TOD = time_TOD - (time_TOD_h * 3600)
					time_TOD_m = math.floor((time_TOD / 60))
					time_TOD = time_TOD - (time_TOD_m * 60)
					time_TOD_s = math.floor(time_TOD)
					time_TOD_s = simDR_zulu_seconds + time_TOD_s
					if time_TOD_s > 59 then
						time_TOD_s = time_TOD_s - 60
						time_TOD_m = time_TOD_m + 1
					end
					time_TOD_m = time_TOD_m + simDR_zulu_minutes
					if time_TOD_m > 59 then
						time_TOD_m = time_TOD_m - 60
						time_TOD_h = time_TOD_h + 1
					end
					time_TOD_h = time_TOD_h + simDR_zulu_hours
					if time_TOD_h > 23 then
						time_TOD_h = time_TOD_h - 24
					end
					line2_l = line2_l .. "   "
					line2_l = line2_l .. string.format("%02d", time_TOD_h)
					line2_l = line2_l .. string.format("%02d", time_TOD_m)
					line2_l = line2_l .. "." 
					line2_l = line2_l .. string.sub(string.format("%02d", time_TOD_s), 1, 1)
					line2_l = line2_l .. " /"
					time_TOD = simDR_ground_spd * delta_alt * 0.00054
					line2_l = line2_l .. string.format("%3d", time_TOD)
					line2_l = line2_l .. "NM"
			else
				line2_l = line2_l .. "   ----.- /---NM"
			end
			line2_s = "                 Z      "
			line3_x = " SPD REST       EST WIND"
			line3_l = "250/10000       "
			if simDR_wind_spd > 0.5 then
				line3_l = line3_l .. string.format("%03d", simDR_wind_hdg)
				line3_l = line3_l .. "`/"
				line3_l = line3_l .. string.format("%03d", simDR_wind_spd)
			else
				line3_l = line3_l .. "---`/---"
			end
			-- line3_s = "                        "
			line4_x = "------------            "
			line4_l = "<ECON                   "
			-- line4_s = "                        "
			-- line5_x = "            ------------"
			line5_l = "<MAX RATE       ENG OUT>"
			-- line5_s = "                        "
			-- line6_x = "                        "
			-- line6_s = "                        "
		-- CRZ DES
		elseif crz_exec == 2 or B738DR_flight_phase == 4 then
			if B738DR_flight_phase == 4 and crz_exec == 0 then
				line0_l = "  ACT CRZ DES           "
				line0_inv = ""
				line1_l = crz_alt .. "   "
				line1_inv = ""
				line6_l = "<MAX ANGLE          RTA>"
			else
--				line0_l = "  MOD CRZ DES           "
				line0_l = "      CRZ DES           "
				line0_inv = "  MOD"
				line1_l = "        "
				line1_inv = crz_alt
				line6_l = "<MAX ANGLE        ERASE>"
			end
			line0_s = "                    1/1 "
			line1_x = " CRZ ALT  OPT/MAX       "
--			line1_l = crz_alt .. "   "
			line1_l = line1_l .. trip
			line1_l = line1_l .. "/"
			line1_l = line1_l .. max_alt
			-- line1_s = "                        "
			line2_x = " TGT SPD        TO " .. crz_alt
			if simDR_airspeed_is_mach == 0 then
				if B738DR_ap_spd_interv_status == 0 then
					line2_m = string.format("%3d", B738DR_fmc_cruise_speed)
					line2_l = "   /" .. string.sub(string.format("%5.3f", B738DR_fmc_cruise_speed_mach), 2, 5)
				else
					line2_m = string.format("%3d", B738DR_mcp_speed_dial)	--simDR_airspeed_dial)
					line2_l = "   /MCP "
				end
			else
				if B738DR_ap_spd_interv_status == 0 then
					line2_l = string.format("%3d", B738DR_fmc_cruise_speed) .. "/    "
					line2_m = "    " .. string.sub(string.format("%5.3f", B738DR_fmc_cruise_speed_mach), 2, 5)
				else
					line2_m = string.sub(string.format("%5.3f", B738DR_mcp_speed_dial), 2, 5)	--simDR_airspeed_dial), 2, 5)
					line2_l = "   /MCP "
				end
			end
--			line2_l = crz_spd .. "/"
--			line2_l = line2_l .. crz_spd_mach
			if simDR_vvi_fpm_pilot < -800 then
					delta_alt = simDR_altitude_pilot - crz_alt_num
					time_TOD = delta_alt / 16.66666 	--- 1000 ft/min = simDR_vvi_fpm_pilot / 60
					delta_alt = time_TOD
					--DR_test = time_TOD
					time_TOD_h = math.floor((time_TOD / 3600))
					time_TOD = time_TOD - (time_TOD_h * 3600)
					time_TOD_m = math.floor((time_TOD / 60))
					time_TOD = time_TOD - (time_TOD_m * 60)
					time_TOD_s = math.floor(time_TOD)
					time_TOD_s = simDR_zulu_seconds + time_TOD_s
					if time_TOD_s > 59 then
						time_TOD_s = time_TOD_s - 60
						time_TOD_m = time_TOD_m + 1
					end
					time_TOD_m = time_TOD_m + simDR_zulu_minutes
					if time_TOD_m > 59 then
						time_TOD_m = time_TOD_m - 60
						time_TOD_h = time_TOD_h + 1
					end
					time_TOD_h = time_TOD_h + simDR_zulu_hours
					if time_TOD_h > 23 then
						time_TOD_h = time_TOD_h - 24
					end
					line2_l = line2_l .. "   "
					line2_l = line2_l .. string.format("%02d", time_TOD_h)
					line2_l = line2_l .. string.format("%02d", time_TOD_m)
					line2_l = line2_l .. "." 
					line2_l = line2_l .. string.sub(string.format("%02d", time_TOD_s), 1, 1)
					line2_l = line2_l .. " /"
					time_TOD = simDR_ground_spd * delta_alt * 0.00054
					line2_l = line2_l .. string.format("%3d", time_TOD)
					line2_l = line2_l .. "NM"
			else
				line2_l = line2_l .. "   ----.- /---NM"
			end
			line2_s = "                 Z      "
			line3_x = " SPD REST       EST WIND"
			line3_l = "250/10000       "
			if simDR_wind_spd > 0.5 then
				line3_l = line3_l .. string.format("%03d", simDR_wind_hdg)
				line3_l = line3_l .. "`/"
				line3_l = line3_l .. string.format("%03d", simDR_wind_spd)
			else
				line3_l = line3_l .. "---`/---"
			end
			-- line3_s = "                        "
			line4_x = "------------            "
			line4_l = "<ECON                   "
			-- line4_s = "                        "
			line5_x = "            ------------"
			line5_l = "<MAX RATE       ENG OUT>"
			-- line5_s = "                        "
			-- line6_x = "                        "
			-- line6_s = "                        "
		end
	end

end

-- function B738_fmc_cruise_rta()

	-- if page_cruise_rta == 1 then
		-- act_page = 1
		-- max_page = 1
		-- line0_l = "  ACT RTA CRZ           "
		-- line0_s = "                    1/1 "
		-- line1_x = " CRZ ALT  OPT/MAX       "
		-- line1_l = "FL350   FL340/361       "
		-- line1_s = "                        "
		-- line2_x = " TGT SPD          TO T/D"
		-- line2_l = ".780       2004.3 /100NM"
		-- line2_s = "                 Z      "
		-- line3_x = " TIME ERROR  ACTUAL WIND"
		-- line3_l = "EARLY 05:31     129`/ 14"
		-- line3_s = "                        "
		-- line4_x = " FUEL AT KATL           "
		-- line4_l = "         12.5           "
		-- line4_s = "                        "
		-- line5_x = "------------------------"
		-- line5_l = "<ECON           ENG OUT>"
		-- line5_s = "                        "
		-- line6_x = "                        "
		-- line6_l = "<LRC                RTA>"
		-- line6_s = "                        "
	-- end

-- end

-- function B738_fmc_cruise_clb()

	-- if page_cruise_clb == 1 then
		-- act_page = 1
		-- max_page = 1
		-- line0_l = "  MOD CRZ CLB           "
		-- line0_s = "                    1/1 "
		-- line1_x = " CRZ ALT                "
		-- line1_l = "FL370                   "
		-- line1_s = "                        "
		-- line2_x = " TGT SPD        TO FL370"
		-- line2_l = ".780       2004.5 / 15NM"
		-- line2_s = "                 Z      "
		-- line3_x = " SPD REST       EST WIND"
		-- line3_l = "---/-----       129`/ 14"
		-- line3_s = "                        "
		-- line4_x = "------------     SAVINGS"
		-- line4_l = "<ECON               1.3%"
		-- line4_s = "                        "
		-- line5_x = "            ------------"
		-- line5_l = "<MAX RATE       ENG OUT>"
		-- line5_s = "                        "
		-- line6_x = "                        "
		-- line6_l = "<MAX ANGLE        ERASE>"
		-- line6_s = "                        "
	-- end

-- end

-- function B738_fmc_cruise_rta_clb()

	-- if page_cruise_rta_clb == 1 then
		-- act_page = 1
		-- max_page = 1
		-- line0_l = "  ACT RTA CRZ CLB       "
		-- line0_s = "                    1/1 "
		-- line1_x = " CRZ ALT      TIME ERROR"
		-- line1_l = "FL370        EARLY 01:22"
		-- line1_s = "                        "
		-- line2_x = " TGT SPD        TO FL370"
		-- line2_l = ".780       2004.5 / 15NM"
		-- line2_s = "                 Z      "
		-- line3_x = " SPD REST       EST WIND"
		-- line3_l = "---/-----       129`/ 14"
		-- line3_s = "                        "
		-- line4_x = "------------            "
		-- line4_l = "<ECON                   "
		-- line4_s = "                        "
		-- line5_x = "            ------------"
		-- line5_l = "<MAX RATE       ENG OUT>"
		-- line5_s = "                        "
		-- line6_x = "                        "
		-- line6_l = "<MAX ANGLE        ERASE>"
		-- line6_s = "                        "
	-- end

-- end

-- function B738_fmc_cruise_des()

	-- if page_cruise_des == 1 then
		-- act_page = 1
		-- max_page = 1
		-- line0_l = "  MOD CRZ DES           "
		-- line0_s = "                    1/1 "
		-- line1_x = " CRZ ALT                "
		-- line1_l = "FL370                   "
		-- line1_s = "                        "
		-- line2_x = " TGT SPD        TO FL370"
		-- line2_l = ".780       2004.5 / 15NM"
		-- line2_s = "                 Z      "
		-- line3_x = " SPD REST       EST WIND"
		-- line3_l = "---/-----       129`/ 14"
		-- line3_s = "                        "
		-- line4_x = "                 PENALTY"
		-- line4_l = "                    1.3%"
		-- line4_s = "                        "
		-- line5_x = "------------------------"
		-- line5_l = "            PLANNED DES>"
		-- line5_s = "                        "
		-- line6_x = "                        "
		-- line6_l = "<FORECAST         ERASE>"
		-- line6_s = "                        "
	-- end

-- end

-- function B738_fmc_cruise_rta_des()

	-- if page_cruise_rta_des == 1 then
		-- act_page = 1
		-- max_page = 1
		-- line0_l = "  ACT RTA CRZ DES       "
		-- line0_s = "                    1/1 "
		-- line1_x = " CRZ ALT      TIME ERROR"
		-- line1_l = "FL280         LATE 10:54"
		-- line1_s = "                        "
		-- line2_x = " TGT SPD        TO FL280"
		-- line2_l = ".780       2004.5 / 15NM"
		-- line2_s = "                 Z      "
		-- line3_x = " SPD REST    ACTUAL WIND"
		-- line3_l = "250/10000       129`/ 14"
		-- line3_s = "                        "
		-- line4_x = "                        "
		-- line4_l = "                        "
		-- line4_s = "                        "
		-- line5_x = "------------------------"
		-- line5_l = "            PLANNED DES>"
		-- line5_s = "                        "
		-- line6_x = "                        "
		-- line6_l = "<FORECAST           RTA>"
		-- line6_s = "                        "
	-- end

-- end

-- function B738_fmc_cruise_eng_out()

	-- if page_cruise_eng_out == 1 then
		-- act_page = 1
		-- max_page = 1
		-- line0_l = "  ENG OUT CRZ           "
		-- line0_s = "                        "
		-- line1_x = " CRZ ALT         MAX ALT"
		-- line1_l = "FL350              FL185"
		-- line1_s = "                        "
		-- line2_x = " ENG OUT SPD      CON N1"
		-- line2_l = "210KT              92.6%"
		-- line2_s = "                        "
		-- line3_x = " CON N1                 "
		-- line3_l = " 91.9%                  "
		-- line3_s = "                        "
		-- line4_x = "------------------------"
		-- -- Left engine out
		-- line4_l = "<LT ENG OUT            >"
		-- line4_s = "             RT ENG OUT "
		-- -- Right engine out
		-- -- line4_l = "<            RT ENG OUT>"
		-- -- line4_s = " LT ENG OUT             "
		-- -- fix
		-- line5_x = "                        "
		-- line5_l = "                        "
		-- line5_s = "                        "
		-- line6_x = "                        "
		-- line6_l = "                        "
		-- line6_s = "                        "
	-- end

-- end

function B738_fmc_descent()

	if page_descent == 1 then
		act_page = 1
		max_page = 1
		local v_s = 0
		local vpa = 0
		local ap_mcp_spd = simDR_airspeed_dial
		local temp_speed = 0
		local temp_speed2 = 0
		local econ_on = 0
		local TOD_str = ""
		local time_TOD = 0
		local time_TOD_h = 0
		local time_TOD_m = 0
		local time_TOD_s = 0
		local delta_alt = 0
		local nav_id = ""
		local str_rest_alt = ""
		local tmp_wpt_eta = ""
		local tmp_wpt_eta2 = 0
		local tmp_wpt_eta3 = 0
		local phase_des_app = 0
		
			if B738DR_flight_phase == 5 or B738DR_flight_phase == 6 or B738DR_flight_phase == 7 then
				phase_des_app = 1
			end
			
			if phase_des_app == 1 and B738DR_autopilot_vnav_status == 1 then	-- phase descent
				line0_l = "  ACT "
				if B738DR_rest_wpt_alt_idx == 0 then
					TOD_str = "   ----.- /---NM"
				else
					tmp_wpt_eta2 = math.floor(legs_data[B738DR_rest_wpt_alt_idx][13])
					tmp_wpt_eta3 = (legs_data[B738DR_rest_wpt_alt_idx][13] - tmp_wpt_eta2) * 60
					tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.format("%04.1f", tmp_wpt_eta3)
					TOD_str = "   " .. tmp_wpt_eta
					TOD_str = TOD_str .. " /---NM"
				end
				line2_x = " TGT SPD        TO " .. B738DR_rest_wpt_alt_id
				TOD_str = "   ----.- /---NM"
			else
				line0_l = "      "
				if B738DR_vnav_td_dist > 0 and B738DR_vnav_td_dist < 1000 then
					if time_td == 0 then
						TOD_str = "   ----.- /---NM"
						line2_x = " TGT SPD        TO "
					else
						tmp_wpt_eta2 = math.floor(time_td)
						tmp_wpt_eta3 = (time_td - tmp_wpt_eta2) * 60
						tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.format("%04.1f", tmp_wpt_eta3)
						TOD_str = "   " .. tmp_wpt_eta .. " /"
						TOD_str = TOD_str .. string.format("%3d", dist_td)
						TOD_str = TOD_str .. "NM"
						line2_x = " TGT SPD          TO T/D"
					end
				else
					TOD_str = "   ----.- /---NM"
					line2_x = " TGT SPD        TO "
				end
			end
			if B738DR_descent_mode == 0 then
				line0_l = line0_l .. "ECON PATH DES      "
			elseif B738DR_descent_mode == 1 then
				line0_l = line0_l .. "ECON SPD DES       "
			elseif B738DR_descent_mode == 2 then
				if B738DR_flight_phase ~= 5 then
					if simDR_airspeed_is_mach == 0 then
						ap_mcp_spd = B738DR_fmc_descent_speed
					end
				end
				if simDR_airspeed_is_mach == 0 then
					line0_l = line0_l .. string.format("%3d", ap_mcp_spd)
					line0_l = line0_l .. "KT SPD DES     "
				else
					line0_l = line0_l .. "M."
					line0_l = line0_l .. string.format("%3d", (B738DR_fmc_descent_speed_mach * 1000))
					line0_l = line0_l .. " SPD DES     "
				end
			end
		line0_s = "                    1/1 "
		str_rest_alt = ""
		line1_s = ""
		if B738DR_rest_wpt_alt > 0 and phase_des_app == 1 then
			line1_x = " E/D ALT        AT " .. B738DR_rest_wpt_alt_id
			--line1_l = "2013           230/6000A"
			if B738DR_rest_wpt_alt_idx > 0 then
				if legs_data[B738DR_rest_wpt_alt_idx][4] == 0 then
					if legs_data[B738DR_rest_wpt_alt_idx][10] == 0 then
						str_rest_alt = "            "
						line1_s = "              ---"
					else
						str_rest_alt = "            "
						if legs_data[B738DR_rest_wpt_alt_idx][10] < 0 then
							-- calc spd is mach
							line1_s = "             " ..  string.sub(string.format("%5.1f",legs_data[B738DR_rest_wpt_alt_idx][10]), 2, -1)
						else
							-- calc spd is kts
							line1_s = "              " ..  string.format("%3d",legs_data[B738DR_rest_wpt_alt_idx][10])
						end
					end
				else
					str_rest_alt = "         " .. string.format("%3d", legs_data[B738DR_rest_wpt_alt_idx][4])
					line1_s = ""
				end
			else
				str_rest_alt = "            "
				line1_s = ""
			end
			str_rest_alt = str_rest_alt .. " "
			if B738DR_rest_wpt_alt > B738DR_trans_lvl then
				str_rest_alt = str_rest_alt .. "FL"
				str_rest_alt = str_rest_alt .. string.sub(string.format("%05d", B738DR_rest_wpt_alt), 1, 3)
			else
				str_rest_alt = str_rest_alt .. string.format("%5d", B738DR_rest_wpt_alt)
			end
			if B738DR_rest_wpt_alt_t == 43 then
				str_rest_alt = str_rest_alt .. "A"
			elseif B738DR_rest_wpt_alt_t == 45 then
				str_rest_alt = str_rest_alt .. "B"
			end
		else
			line1_x = " E/D ALT"
		end
		if ed_alt > 0 then
			if str_rest_alt == "" then
				line1_m = ""
				line1_l = string.format("%5d", ed_alt)
			else
				line1_m = "     " .. str_rest_alt
				line1_l = string.format("%5d", ed_alt) .. "            /"
			end
		else
			if str_rest_alt == "" then
				line1_m = ""
				line1_l = ""
			else
				line1_m = "     " .. str_rest_alt
				line1_l = "                 /"
			end
			--line1_l = "     " .. str_rest_alt
		end
		
		
		--		line2_x = " TGT SPD        TO -----"
--		line2_l = "280/.720   2004.5 / 15NM"
		if phase_des_app == 1 and B738DR_autopilot_vnav_status == 1 then
			if B738DR_ap_spd_interv_status == 0 then
				ap_mcp_spd = tonumber(string.format("%3d", simDR_airspeed_dial))
				temp_speed = tonumber(string.format("%3d", B738DR_fmc_descent_speed))
				if simDR_airspeed_is_mach == 0 then
					if ap_mcp_spd == temp_speed then
						line2_m = string.format("%3d", B738DR_fmc_descent_speed)
						line2_l = "   /" .. string.sub(string.format("%5.3f", B738DR_fmc_descent_speed_mach), 2, 5)
					else
						line2_l = string.format("%3d", B738DR_fmc_descent_speed) .. "/"
						line2_l = line2_l .. string.sub(string.format("%5.3f", B738DR_fmc_descent_speed_mach), 2, 5)
						line2_m = ""
					end
				else
					line2_l = string.format("%3d", B738DR_fmc_descent_speed) .. "/    "
					line2_m = "    " .. string.sub(string.format("%5.3f", B738DR_fmc_descent_speed_mach), 2, 5)
				end
			else
				if simDR_airspeed_is_mach == 0 then
					line2_m = string.format("%3d", B738DR_mcp_speed_dial)	--simDR_airspeed_dial)
					line2_l = "   /MCP "
				else
					line2_m = string.sub(string.format("%5.3f", B738DR_mcp_speed_dial), 2, 5)	--simDR_airspeed_dial), 2, 5)
					line2_l = "   /MCP "
				end
			end
			if B738DR_rest_wpt_alt_dist > 0 then
				tmp_wpt_eta2 = math.floor(legs_data[B738DR_rest_wpt_alt_idx][13])
				tmp_wpt_eta3 = (legs_data[B738DR_rest_wpt_alt_idx][13] - tmp_wpt_eta2) * 60
				tmp_wpt_eta = "   " .. string.format("%02d", tmp_wpt_eta2)
				tmp_wpt_eta = tmp_wpt_eta .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
				tmp_wpt_eta = tmp_wpt_eta .. ".0 /"
				TOD_str = tmp_wpt_eta
				--TOD_str = "   ----.- /"
				TOD_str = TOD_str .. string.format("%3d", B738DR_rest_wpt_alt_dist)
				TOD_str = TOD_str .. "NM"
			end
		else
			line2_l = string.format("%3d", B738DR_fmc_descent_speed) .. "/"
			line2_l = line2_l .. string.sub(string.format("%5.3f", B738DR_fmc_descent_speed_mach), 2, 5)
			line2_m = ""
		end
		line2_l = line2_l .. TOD_str	--"   ----.- /---NM"
		
		
		line2_s = "                 Z      "
		line3_x = " SPD REST        WPT/ALT"
		str_rest_alt = "-----/-----"
		if phase_des_app == 1 and B738DR_autopilot_vnav_status == 1 then
			if B738DR_rest_wpt_alt > 0 then
				str_rest_alt = B738DR_rest_wpt_alt_id .. "/"
				if legs_data[B738DR_rest_wpt_alt_idx][11] == 0 then
					str_rest_alt = str_rest_alt .. "-----"
				else
					if B738DR_rest_wpt_alt > B738DR_trans_lvl then
						str_rest_alt = str_rest_alt .. "FL"
						str_rest_alt = str_rest_alt .. string.sub(string.format("%05d", legs_data[B738DR_rest_wpt_alt_idx][11]), 1, 3)
					else
						str_rest_alt = str_rest_alt .. string.format("%5d", legs_data[B738DR_rest_wpt_alt_idx][11])
					end
				end
			end
			if B738DR_ap_spd_interv_status == 0 then
				ap_mcp_spd = tonumber(string.format("%3d", simDR_airspeed_dial))
				if simDR_airspeed_dial < B738DR_fmc_descent_speed then
					temp_speed = tonumber(string.format("%3d", flaps_speed))
					temp_speed2 = tonumber(string.format("%3d", B738DR_rest_wpt_spd))
					if ap_mcp_spd == temp_speed then
						line3_l = "   /FLAPS"
						line3_l = line3_l .. "    "
						line3_l = line3_l .. str_rest_alt
						line3_m = string.format("%3d", flaps_speed)
					elseif B738DR_rest_wpt_spd > 0 and ap_mcp_spd == temp_speed2 then
						line3_l = "   /" .. B738DR_rest_wpt_spd_id
						line3_l = line3_l .. "    "
						line3_l = line3_l .. str_rest_alt
						line3_m = string.format("%3d", B738DR_rest_wpt_spd)
					elseif ap_mcp_spd == B738DR_fmc_descent_r_speed1 and simDR_altitude_pilot < (B738DR_fmc_descent_r_alt1 + 900) then
						line3_l = "   /" .. fmc_descent_r_alt1 .. "    " .. str_rest_alt
						line3_m = string.format("%03d", B738DR_fmc_descent_r_speed1)
					elseif ap_mcp_spd == 240 and simDR_altitude_pilot < 10900 then
						line3_l = "   /10000    " .. str_rest_alt
						line3_m = "250"
					else
						if B738DR_fmc_descent_r_speed1 == 0 then
							line3_l = "---/-----    " .. str_rest_alt
							line3_m = ""
							-- line3_l = "250/10000    " .. str_rest_alt
							-- line3_m = ""
						else
							line3_l = string.format("%03d", B738DR_fmc_descent_r_speed1) .. "/".. fmc_descent_r_alt1 .. "    " .. str_rest_alt
							line3_m = ""
						end
					end
				else
					if B738DR_fmc_descent_r_speed1 == 0 then
						line3_l = "---/-----    " .. str_rest_alt
						line3_m = ""
					else
						line3_l = string.format("%03d", B738DR_fmc_descent_r_speed1) .. "/".. fmc_descent_r_alt1 .. "    " .. str_rest_alt
						line3_m = ""
					end
					-- line3_l = "250/10000    " .. str_rest_alt
					-- line3_m = ""
				end
			else
				if B738DR_fmc_descent_r_speed1 == 0 then
					line3_l = "---/-----    " .. str_rest_alt
					line3_m = ""
				else
					line3_l = string.format("%03d", B738DR_fmc_descent_r_speed1) .. "/".. fmc_descent_r_alt1 .. "    " .. str_rest_alt
					line3_m = ""
				end
				-- line3_l = "---/-----    " .. str_rest_alt
				-- line3_m = ""
			end
		else
			ap_mcp_spd = tonumber(string.format("%3d", simDR_airspeed_dial))
			if ap_mcp_spd == B738DR_fmc_descent_r_speed1 and simDR_altitude_pilot < (B738DR_fmc_descent_r_alt1 + 900) then
				line3_l = "   /" .. fmc_descent_r_alt1 .. "    -----/-----"
				line3_m = string.format("%03d", B738DR_fmc_descent_r_speed1)
			else
				if B738DR_fmc_descent_r_speed1 == 0 then
					line3_l = "---/-----    -----/-----"
					line3_m = ""
				else
					line3_l = string.format("%03d", B738DR_fmc_descent_r_speed1) .. "/".. fmc_descent_r_alt1 .. "    -----/-----"
					line3_m = ""
				end
			end
		end
		-- line3_s = "                        "
		if B738DR_nd_vert_path == 1 then
			line4_x = " VERT DEV   FPA V/B  V/S"
			--vpa = B738DR_vnav_err_pfd
			vpa = -B738DR_vnav_err_pfd
			if vpa < 0 then
				vpa = -vpa
				line4_s = "     LO"
			else
				line4_s = "     HI"
			end
			if vpa > 9999 then
				vpa = 9999
			end
			line4_l = string.format("%4d", vpa) .. "        "
			vpa = (simDR_vvi_fpm_pilot / 60) * 0.3048
			vpa = vpa / simDR_ground_spd
			vpa = -vpa
			if vpa < 0 then
				vpa = 0
			end
			vpa = math.atan(vpa)
			vpa = math.deg(vpa)
			--DR_test = vpa
			line4_l = line4_l .. string.format("%3.1f", vpa)
			line4_l = line4_l .. " "
			vpa = econ_des_vpa
			--vpa = -vpa
			if vpa > 0 then
				line4_l = line4_l .. string.format("%3.1f", vpa)
			else
				line4_l = line4_l .. "   "
			end
			line4_l = line4_l .. " "
			v_s = simDR_vvi_fpm_pilot
			v_s = -v_s
			v_s = roundUpToIncrement(v_s, 10)
			if v_s > 0 then
				line4_l = line4_l .. string.format("%4d", v_s)
			else
				line4_l = line4_l .. "    "
			end
		else
			line4_x = "            FPA V/B  V/S"
			-- line4_l = "                        "
			-- line4_s = "                        "
		end
		line5_x = "------------------------"
		if phase_des_app == 1 then
			line5_l = "                   PATH>"
			line6_l = "<FORECAST           RTA>"
			line6_inv = ""
		else
			line5_l = "<ECON              PATH>"
			if des_now_enable == 1 then
				if B738DR_fms_descent_now == 0 then
					line6_l = "<FORECAST       DES NOW>"
					line6_inv = ""
				else
					line6_l = "<FORECAST              >"
					line6_inv = "                DES.NOW"
				end
			else
				line6_l = "<FORECAST "
			end
		end
--		line5_l = "<ECON              PATH>"
		-- line5_s = "                        "
		-- line6_x = "                        "
--		line6_l = "<FORECAST       DES NOW>"
		-- line6_s = "                        "
	end

end

function B738_fmc_descent_forecast()

	if page_descent_forecast == 1 then
		act_page = 1
		max_page = 1
		line0_l = "  MOD DES FORECASTS     "
		line0_s = "                    1/1 "
		line1_x = " TRANS LVL    TAI ON/OFF"
		--line1_l = "FL180        -----/-----"
		if trans_lvl == "-----" then
			line1_l = "FL" .. string.format("%03d", (B738DR_trans_alt/100))
		else
			line1_l = trans_lvl
		end
		line1_l = line1_l .. "        "
		line1_l = line1_l .. tai_on_alt
		line1_l = line1_l .. "/"
		line1_l = line1_l .. tai_off_alt
		-- line1_s = "                        "
		line2_x = " CABIN RATE  ISA DEV/QNH"
--		line2_l = "---         ---` /------"
		line2_l = cabin_rate .. "         "
		line2_l = line2_l .. forec_isa_dev
		line2_l = line2_l .. "` /"
		line2_l = line2_l .. forec_qnh
		line2_s = "   FPM          C       "
		line3_x = " ALT-----WIND----DIR/SPD"
--		line3_l = "-----         ---`/---  "
		line3_l = forec_alt_1 .. "         "
		line3_l = line3_l .. forec_dir_1
		line3_l = line3_l .. "`/"
		line3_l = line3_l .. forec_spd_1
		line3_s = "                      KT"
		-- line4_x = "                        "
--		line4_l = "-----         ---`/---  "
		line4_l = forec_alt_2 .. "         "
		line4_l = line4_l .. forec_dir_2
		line4_l = line4_l .. "`/"
		line4_l = line4_l .. forec_spd_2
		line4_s = "                      KT"
		-- line5_x = "                        "
--		line5_l = "-----         ---`/---  "
		line5_l = forec_alt_3 .. "         "
		line5_l = line5_l .. forec_dir_3
		line5_l = line5_l .. "`/"
		line5_l = line5_l .. forec_spd_3
		line5_s = "                      KT"
		line6_x = "              ----------"
		line6_l = "                  ERASE>"
		-- line6_s = "                        "
	end

end

function B738_fmc_progress()

	local prev_idx = 0
	local temp_str = ""
	local tmp_wpt_eta = ""
	local tmp_wpt_eta2 = 0
	local tmp_wpt_eta3 = 0
	local temp_num = 0
	local temp_num2 = 0
	
	if page_progress == 1 then
		act_page = 1
		max_page = 2
		if flt_num == "--------" then
			temp_str = "        "
		else
			temp_str = spaces_before(flt_num, 8)
		end
		
		
		line0_l = "  " .. temp_str .. " PROGRESS     "
		--line0_l = "    FLT430 PROGRESS     "
		line0_s = "                    1/2 "
		
		line1_x = " FROM     ALT  ATA  FUEL"
		
		if legs_num > 0 then
			
			--PREV WAYPOINT
			if offset > 1 then
				-- nav id
				if offset > legs_num then
					offset = legs_num
				end
				prev_idx = offset - 1
				
				if legs_data[prev_idx][1] ~= "DISCONTINUITY" then
					line1_l = spaces_after(legs_data[prev_idx][1], 8)
					
					-- calc alt
					if legs_data[prev_idx][11] == 0 then
						line1_l = line1_l .. "      "
					else
						if legs_data[prev_idx][11] > B738DR_trans_alt then
							line1_l = line1_l .. "FL"
							line1_l = line1_l .. string.format("%03d", (legs_data[prev_idx][11]/100))
						else
							line1_l = line1_l .. string.format("%5d", legs_data[prev_idx][11])
						end
						line1_l = line1_l .. " "
					end
					-- calc time
					if legs_data[prev_idx][13] == 0 then
						tmp_wpt_eta = "    "
						line1_s = ""
					else
						tmp_wpt_eta2 = math.floor(legs_data[prev_idx][13])
						tmp_wpt_eta3 = (legs_data[prev_idx][13] - tmp_wpt_eta2) * 60
						tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
						line1_s = "                  Z     "
					end
					line1_l = line1_l .. tmp_wpt_eta
					-- fuel qty
					line1_l = line1_l .. "  "
					if legs_data[prev_idx][15] <= 0 then
						tmp_wpt_eta = "--.-"
					else
						if units == 0 then
							tmp_wpt_eta = string.format("%4.1f", (legs_data[prev_idx][15] / 1000) * 2.204)
						else
							tmp_wpt_eta = string.format("%4.1f", (legs_data[prev_idx][15] / 1000))
						end
					end
					line1_l = line1_l .. tmp_wpt_eta
					--line1_l = line1_l .. "  --.-"
				end
			-- else
				-- line1_l = ""
				-- line1_s = ""
			end
			
			-- ACTUAL WAYPOINT
			-- nav id
			--line2_x = " 249`     DTG  ETA  FUEL"
			if legs_data[offset][1] ~= "DISCONTINUITY" then
				line2_x = " " .. string.format("%03d", simDR_fmc_crs)
				line2_x = line2_x .. "`     DTG  ETA  FUEL"
				
				line2_l = spaces_after(legs_data[offset][1], 8) .. " "
				
				-- distance
				if simDR_fmc_dist > 9999 then
					line2_l = line2_l .. "9999"
				else
					line2_l = line2_l .. string.format("%4d", simDR_fmc_dist)
				end
				line2_l = line2_l .. " "
				-- calc time
				if legs_data[offset][13] == 0 then
					tmp_wpt_eta = "    "
					line2_s = ""
				else
					tmp_wpt_eta2 = math.floor(legs_data[offset][13])
					tmp_wpt_eta3 = (legs_data[offset][13] - tmp_wpt_eta2) * 60
					tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
					line2_s = "                  Z     "
				end
				line2_l = line2_l .. tmp_wpt_eta
				-- fuel qty
				if legs_data[offset][40] <= 0 then
					line2_l = line2_l .. "  --.-"
				else
					if units == 0 then
						line2_l = line2_l .. "  " .. string.format("%4.1f", (legs_data[offset][40] / 1000) * 2.204)
					else
						line2_l = line2_l .. "  " .. string.format("%4.1f", (legs_data[offset][40] / 1000))
					end
				end
			end
			
			-- NEXT WAYPOINT
			prev_idx = offset + 1
			if prev_idx <= legs_num then
				if legs_data[prev_idx][1] ~= "DISCONTINUITY" then
					--line3_x = " 252`                   "
					--line3_l = "GVE       192 1411  31.1"
					-- nav id
					--tmp_wpt_eta2 = (math.deg(legs_data[prev_idx][2]) + simDR_mag_variation) % 360
					tmp_wpt_eta2 = (math.deg(legs_data[prev_idx][18]) + 360) % 360
					if tmp_wpt_eta2 < 0 then
						tmp_wpt_eta2 = tmp_wpt_eta2 + 360
					end
					line3_x = " " .. string.format("%03d", tmp_wpt_eta2) .. "`"
					
					line3_l = spaces_after(legs_data[prev_idx][1], 8) .. " "
					
					-- distance
					if legs_data[prev_idx][3] == 0 then
						line3_l = line3_l .. "    "
					elseif legs_data[prev_idx][3] > 9999 then
						line3_l = line3_l .. "9999"
					else
						line3_l = line3_l .. string.format("%4d", legs_data[prev_idx][3])
					end
					line3_l = line3_l .. " "
					-- calc time
					if legs_data[prev_idx][13] == 0 then
						tmp_wpt_eta = "    "
						line3_s = ""
					else
						tmp_wpt_eta2 = math.floor(legs_data[prev_idx][13])
						tmp_wpt_eta3 = (legs_data[prev_idx][13] - tmp_wpt_eta2) * 60
						tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
						line3_s = "                  Z     "
					end
					line3_l = line3_l .. tmp_wpt_eta
					-- fuel qty
					if legs_data[prev_idx][40] <= 0 then
						line3_l = line3_l .. "  --.-"
					else
						if units == 0 then
							line3_l = line3_l .. "  " .. string.format("%4.1f", (legs_data[prev_idx][40] / 1000) * 2.204)
						else
							line3_l = line3_l .. "  " .. string.format("%4.1f", (legs_data[prev_idx][40] / 1000))
						end
					end
				end
			-- else
				-- line3_x = ""
				-- line3_l = ""
				-- line3_s = ""
			end
			
			-- DEST ICAO
			if des_icao ~= "****" then
				prev_idx = legs_num + 1
				if B738DR_fmc_exec_lights == 0 then
					line4_x = ""
				else
					line4_x = " MOD"
				end
				-- nav id
				line4_l = legs_data[prev_idx][1]
				if string.len(line4_l) == 3 then
					temp_str = "      "
				elseif string.len(line4_l) == 4 then
					temp_str = "     "
				else
					temp_str = "    "
				end
				line4_l = line4_l .. temp_str
				-- distance
				if dist_dest > 10000 then
					line4_l = line4_l .. "9999"
				else
					line4_l = line4_l .. string.format("%4d", dist_dest)
				end
				line4_l = line4_l .. " "
				-- calc time
				if legs_data[prev_idx][13] == 0 then
					tmp_wpt_eta = "    "
					line4_s = ""
				else
					tmp_wpt_eta2 = math.floor(legs_data[prev_idx][13])
					tmp_wpt_eta3 = (legs_data[prev_idx][13] - tmp_wpt_eta2) * 60
					tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
					line4_s = "                  Z     "
				end
				line4_l = line4_l .. tmp_wpt_eta
				-- fuel qty
				if legs_data[prev_idx][40] <= 0 then
					line4_l = line4_l .. "  --.-"
				else
					if units == 0 then
						line4_l = line4_l .. "  " .. string.format("%4.1f", (legs_data[prev_idx][40] / 1000) * 2.204)
					else
						line4_l = line4_l .. "  " .. string.format("%4.1f", (legs_data[prev_idx][40] / 1000))
					end
				end
			-- else
				-- line4_x = ""
				-- line4_l = ""
				-- line4_s = ""
			end
			
			if crz_alt_num > 0 and legs_num > 0 and offset > 0 and cost_index ~= "***" and ref_icao ~= "----" and des_icao ~= "****" then
				if B738DR_flight_phase < 2 and dist_tc > 0 then
					line5_x = " TO T/C         FUEL QTY"
					tmp_wpt_eta2 = math.floor(time_tc)
					tmp_wpt_eta3 = (time_tc - tmp_wpt_eta2) * 60
					tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
					line5_l = tmp_wpt_eta .. " /"
					line5_l = line5_l .. string.format("%4d", dist_tc)
					line5_l = line5_l .. "          "
					if fuel_tc <= 0 then
						line5_l = line5_l .. "--.-"
					else
						if units == 0 then
							line5_l = line5_l .. string.format("%4.1f", (fuel_tc / 1000) * 2.204)
						else
							line5_l = line5_l .. string.format("%4.1f", (fuel_tc / 1000))
						end
					end
					--line5_l = "1355 / 32           --.-"
					line5_s = "    Z     NM            "
				elseif B738DR_flight_phase < 5 then
					if B738DR_vnav_td_dist > 0 then
						line5_x = " TO T/D         FUEL QTY"
						tmp_wpt_eta2 = math.floor(time_td)
						tmp_wpt_eta3 = (time_td - tmp_wpt_eta2) * 60
						tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
						line5_l = tmp_wpt_eta .. " /"
						line5_l = line5_l .. string.format("%4d", dist_td)
						line5_l = line5_l .. "          "
						if fuel_td <= 0 then
							line5_l = line5_l .. "--.-"
						else
							if units == 0 then
								line5_l = line5_l .. string.format("%4.1f", (fuel_td / 1000) * 2.204)
							else
								line5_l = line5_l .. string.format("%4.1f", (fuel_td / 1000))
							end
						end
						--line5_l = "1355 / 32           --.-"
						line5_s = "    Z     NM            "
					-- else
						-- line5_x = ""
						-- line5_l = ""
						-- line5_s = ""
					end
				else
					if offset <= ed_found then
						line5_x = " TO E/D         FUEL QTY"
						tmp_wpt_eta2 = math.floor(time_ed)
						tmp_wpt_eta3 = (time_ed - tmp_wpt_eta2) * 60
						tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
						line5_l = tmp_wpt_eta .. " /"
						line5_l = line5_l .. string.format("%4d", dist_ed)
						line5_l = line5_l .. "          "
						if fuel_ed <= 0 then
							line5_l = line5_l .. "--.-"
						else
							if units == 0 then
								line5_l = line5_l .. string.format("%4.1f", (fuel_ed / 1000) * 2.204)
							else
								line5_l = line5_l .. string.format("%4.1f", (fuel_ed / 1000))
							end
						end
						--line5_l = "1355 / 32           --.-"
						line5_s = "    Z     NM            "
					-- else
						-- line5_x = ""
						-- line5_l = ""
						-- line5_s = ""
					end
				end
			-- else
				-- line5_x = ""
				-- line5_l = ""
				-- line5_s = ""
			end
			
		else
			-- line1_l = ""
			-- line1_s = ""
			-- line2_l = ""
			-- line2_s = ""
			line2_x = "          DTG  ETA  FUEL"
			-- line3_x = ""
			-- line3_l = ""
			-- line3_s = ""
			-- line4_l = ""
			-- line4_s = ""
			-- line4_x = ""
			-- line5_x = ""
			-- line5_l = ""
			-- line5_s = ""
		end
		
		-- WIND
		if simDR_wind_spd > 0.5 then
			line6_x = " WIND                   "
			line6_l = string.format("%03d", simDR_wind_hdg) .. "`/"
			line6_l = line6_l .. string.format("%3d", simDR_wind_spd)
			line6_s = "        KT              "
		else
			line6_l = "        "
			-- line6_x = ""
			-- line6_s = ""
		end
		line6_l = line6_l .. "     NAV STATUS>"
		
		--line2_x = " 249`     DTG  ETA  FUEL"
		--line2_l = "ENO        61 1355  32.9"
		--line2_s = "                  Z     "
		--line3_x = " 252`                   "
		--line3_l = "GVE       192 1411  31.1"
		--line3_s = "                  Z     "
		--line4_x = " MOD                    "
		--line4_l = "KATL      606 1510  17.6"
		--line4_s = "                  Z     "
		--line5_x = " TO T/C         FUEL QTY"
		--line5_l = "1355 / 32           34.0"
		--line5_s = "    Z    NM             "
		--line6_x = " WIND                   "
		--line6_l = "080`/ 23     NAV STATUS>"
		--line6_s = "        KT              "
		-- line0_inv = ""
		-- line1_inv = ""
		-- line2_inv = ""
		-- line3_inv = ""
		-- line4_inv = ""
		-- line5_inv = ""
		-- line6_inv = ""
	elseif page_progress == 2 then
		act_page = 2
		max_page = 2
		if flt_num == "--------" then
			temp_str = "        "
		else
			temp_str = spaces_before(flt_num, 8)
		end
		line0_l = "  " .. temp_str .. " PROGRESS     "
		line0_s = "                    2/2 "
		
		--line1_x = " TAILWIND      CROSSWIND"
		--line1_l = "27      L         R  3  "
		if head_wind < 0 then
			-- tailwind
			temp_num = -head_wind
			line1_x = " HEADWIND      CROSSWIND"
			line1_l = string.format("%3d", temp_num)
		else
			-- headwind
			line1_x = " TAILWIND      CROSSWIND"
			line1_l = string.format("%3d", head_wind)
		end
		line1_l = line1_l .. "               "
		if cross_wind < 0 then
			temp_num = -cross_wind
			line1_l = line1_l .. "R"
			line1_l = line1_l .. string.format("%3d", temp_num)
		else
			line1_l = line1_l .. "L"
			line1_l = line1_l .. string.format("%3d", cross_wind)
		end
		line1_s = "   KT                 KT"
		
		-- wind
		line2_x = " WIND        SAT/ISA DEV"
		if simDR_wind_spd > 0.5 then
			line2_l = string.format("%03d", simDR_wind_hdg) .. "`/"
			line2_l = line2_l .. string.format("%3d", simDR_wind_spd)
		else
			line2_l = "        "
		end
		line2_l = line2_l .. "     "
		
		-- ISA / DEV
		--line2_l = line2_l .. "-40` /  0` "
		--line2_l = "104`/ 27     -40` /  0` "
		temp_num = math.min(simDR_altitude_pilot, 37000)
		temp_num = simDR_OAT - B738_rescale(0, 15, 37000, -56.5, temp_num)
		-- n = tonumber(isa_dev_c)
		-- n = (n * 9 / 5) + 32
		-- isa_dev_f = string.format("%3d", n)
		--line2_l = line2_l .. "-40` /  0` "
		line2_l = line2_l .. string.format("%3d", simDR_OAT) .. "` /"
		line2_l = line2_l .. string.format("%3d", temp_num) .. "` "
		line2_l = line2_l .. "-40` /  0` "
		line2_s = "                 C     C"
		
		line3_x = " XTK ERROR      VERT DEV"
		--line3_l = "                  8812  "
		--line3_s = "                      HI"
		if legs_num > 0 then
			if B738DR_xtrack == 999 or B738DR_xtrack == -999 then
				line3_l = "--.--             "
			else
				line3_l = string.format("%5.2f", B738DR_xtrack)
				line3_l = line3_l .. "             "
			end
		else
			line3_l = "                  "
		end
		line3_s = ""
		if B738DR_nd_vert_path == 1 then
			temp_num = -B738DR_vnav_err_pfd
			--vpa = -B738DR_vnav_err_pfd
			if temp_num < 0 then
				temp_num = -temp_num
				line3_s = "                      LO"
			else
				line3_s = "                      HI"
			end
			if temp_num > 9999 then
				temp_num = 9999
			end
			line3_l = line3_l .. string.format("%4d", temp_num)
		end
		
		line4_x = " GPS-L TRK           TAS"
		--line4_l = "305`T              426  "
		line4_l = "---`T              "
		if simDR_TAS < 52 then
			line4_l = line4_l .. "---"
		else
			temp_num = 1.943844 * simDR_TAS
			line4_l = line4_l .. string.format("%3d", temp_num)
		end
		line4_s = "                      KT"
		
		-- line5_x = "                        "
		-- line5_l = "                        "
		-- line5_s = "                        "
		-- line6_x = "                        "
		-- line6_l = "                        "
		-- line6_s = "                        "
	end

end



function txt_trunc(txt_txt, txt_trunc2)
	
	local result_txt = txt_txt
	if string.len(txt_txt) > txt_trunc2 then
		result_txt = string.sub(txt_txt, 1, txt_trunc2)
	elseif string.len(txt_txt) == 0 then
		result_txt = " "
	end
	
	return result_txt
	
end

function B738_fmc_display()

	if display_update == 1 then
		--display_update = 0

		B738DR_fmc1_Line00_L = txt_trunc(line0_l, 24)
		B738DR_fmc1_Line01_L = txt_trunc(line1_l, 24)
		B738DR_fmc1_Line02_L = txt_trunc(line2_l, 24)
		B738DR_fmc1_Line03_L = txt_trunc(line3_l, 24)
		B738DR_fmc1_Line04_L = txt_trunc(line4_l, 24)
		B738DR_fmc1_Line05_L = txt_trunc(line5_l, 24)
		B738DR_fmc1_Line06_L = txt_trunc(line6_l, 24)
		
		B738DR_fmc1_Line00_S = txt_trunc(line0_s, 24)
		B738DR_fmc1_Line01_S = txt_trunc(line1_s, 24)
		B738DR_fmc1_Line02_S = txt_trunc(line2_s, 24)
		B738DR_fmc1_Line03_S = txt_trunc(line3_s, 24)
		B738DR_fmc1_Line04_S = txt_trunc(line4_s, 24)
		B738DR_fmc1_Line05_S = txt_trunc(line5_s, 24)
		B738DR_fmc1_Line06_S = txt_trunc(line6_s, 24)

		B738DR_fmc1_Line01_X = txt_trunc(line1_x, 24)
		B738DR_fmc1_Line02_X = txt_trunc(line2_x, 24)
		B738DR_fmc1_Line03_X = txt_trunc(line3_x, 24)
		B738DR_fmc1_Line04_X = txt_trunc(line4_x, 24)
		B738DR_fmc1_Line05_X = txt_trunc(line5_x, 24)
		B738DR_fmc1_Line06_X = txt_trunc(line6_x, 24)
		
		B738DR_fmc1_Line00_M = txt_trunc(line0_m, 24)
		B738DR_fmc1_Line01_M = txt_trunc(line1_m, 24)
		B738DR_fmc1_Line02_M = txt_trunc(line2_m, 24)
		B738DR_fmc1_Line03_M = txt_trunc(line3_m, 24)
		B738DR_fmc1_Line04_M = txt_trunc(line4_m, 24)
		B738DR_fmc1_Line05_M = txt_trunc(line5_m, 24)
		B738DR_fmc1_Line06_M = txt_trunc(line6_m, 24)
		
		B738DR_fmc1_Line00_G = txt_trunc(line0_g, 24)
		B738DR_fmc1_Line01_G = txt_trunc(line1_g, 24)
		B738DR_fmc1_Line02_G = txt_trunc(line2_g, 24)
		B738DR_fmc1_Line03_G = txt_trunc(line3_g, 24)
		B738DR_fmc1_Line04_G = txt_trunc(line4_g, 24)
		B738DR_fmc1_Line05_G = txt_trunc(line5_g, 24)
		B738DR_fmc1_Line06_G = txt_trunc(line6_g, 24)
		
		B738DR_fmc1_Line00_I = txt_trunc(line0_inv, 24)
		B738DR_fmc1_Line01_I = txt_trunc(line1_inv, 24)
		B738DR_fmc1_Line02_I = txt_trunc(line2_inv, 24)
		B738DR_fmc1_Line03_I = txt_trunc(line3_inv, 24)
		B738DR_fmc1_Line04_I = txt_trunc(line4_inv, 24)
		B738DR_fmc1_Line05_I = txt_trunc(line5_inv, 24)
		B738DR_fmc1_Line06_I = txt_trunc(line6_inv, 24)
	
		if fmc_message_num ~= 0 then
			B738DR_fmc1_Line_entry = fmc_message[fmc_message_num]
			if fmc_message_num > 1 then
				if fmc_message[fmc_message_num] == fmc_message[fmc_message_num-1] then
					fmc_message_num = fmc_message_num - 1
				end
			end
		else
			if string.len(entry) > 1 then
					if string.sub(entry, 1, 1) == ">" then
						B738DR_fmc1_Line_entry = string.sub(entry, 2,-1)
					else
						B738DR_fmc1_Line_entry = entry
					end
			else
				B738DR_fmc1_Line_entry = entry
			end
		end
		if string.len(B738DR_fmc1_Line_entry) == 0 then
			B738DR_fmc1_Line_entry = " "
		end

		line0_l = ""
		line0_s = ""
		line0_m = ""
		line0_g = ""
		line1_x = ""
		line1_l = ""
		line1_s = ""
		line1_m = ""
		line1_g = ""
		line2_x = ""
		line2_l = ""
		line2_s = ""
		line2_m = ""
		line2_g = ""
		line3_x = ""
		line3_l = ""
		line3_s = ""
		line3_m = ""
		line3_g = ""
		line4_x = ""
		line4_l = ""
		line4_s = ""
		line4_m = ""
		line4_g = ""
		line5_x = ""
		line5_l = ""
		line5_s = ""
		line5_m = ""
		line5_g = ""
		line6_x = ""
		line6_l = ""
		line6_s = ""
		line6_m = ""
		line6_g = ""
		line0_inv = ""
		line1_inv = ""
		line2_inv = ""
		line3_inv = ""
		line4_inv = ""
		line5_inv = ""
		line6_inv = ""
		
	end

end



function B738_fmc_display2()

	if display_update == 1 then
		--display_update = 0

		B738DR_fmc2_Line00_L = txt_trunc(line0_l, 24)
		B738DR_fmc2_Line01_L = txt_trunc(line1_l, 24)
		B738DR_fmc2_Line02_L = txt_trunc(line2_l, 24)
		B738DR_fmc2_Line03_L = txt_trunc(line3_l, 24)
		B738DR_fmc2_Line04_L = txt_trunc(line4_l, 24)
		B738DR_fmc2_Line05_L = txt_trunc(line5_l, 24)
		B738DR_fmc2_Line06_L = txt_trunc(line6_l, 24)

		B738DR_fmc2_Line00_S = txt_trunc(line0_s, 24)
		B738DR_fmc2_Line01_S = txt_trunc(line1_s, 24)
		B738DR_fmc2_Line02_S = txt_trunc(line2_s, 24)
		B738DR_fmc2_Line03_S = txt_trunc(line3_s, 24)
		B738DR_fmc2_Line04_S = txt_trunc(line4_s, 24)
		B738DR_fmc2_Line05_S = txt_trunc(line5_s, 24)
		B738DR_fmc2_Line06_S = txt_trunc(line6_s, 24)

		B738DR_fmc2_Line01_X = txt_trunc(line1_x, 24)
		B738DR_fmc2_Line02_X = txt_trunc(line2_x, 24)
		B738DR_fmc2_Line03_X = txt_trunc(line3_x, 24)
		B738DR_fmc2_Line04_X = txt_trunc(line4_x, 24)
		B738DR_fmc2_Line05_X = txt_trunc(line5_x, 24)
		B738DR_fmc2_Line06_X = txt_trunc(line6_x, 24)
		
		B738DR_fmc2_Line00_M = txt_trunc(line0_m, 24)
		B738DR_fmc2_Line01_M = txt_trunc(line1_m, 24)
		B738DR_fmc2_Line02_M = txt_trunc(line2_m, 24)
		B738DR_fmc2_Line03_M = txt_trunc(line3_m, 24)
		B738DR_fmc2_Line04_M = txt_trunc(line4_m, 24)
		B738DR_fmc2_Line05_M = txt_trunc(line5_m, 24)
		B738DR_fmc2_Line06_M = txt_trunc(line6_m, 24)
		
		B738DR_fmc2_Line00_G = txt_trunc(line0_g, 24)
		B738DR_fmc2_Line01_G = txt_trunc(line1_g, 24)
		B738DR_fmc2_Line02_G = txt_trunc(line2_g, 24)
		B738DR_fmc2_Line03_G = txt_trunc(line3_g, 24)
		B738DR_fmc2_Line04_G = txt_trunc(line4_g, 24)
		B738DR_fmc2_Line05_G = txt_trunc(line5_g, 24)
		B738DR_fmc2_Line06_G = txt_trunc(line6_g, 24)
		
		B738DR_fmc2_Line00_I = txt_trunc(line0_inv, 24)
		B738DR_fmc2_Line01_I = txt_trunc(line1_inv, 24)
		B738DR_fmc2_Line02_I = txt_trunc(line2_inv, 24)
		B738DR_fmc2_Line03_I = txt_trunc(line3_inv, 24)
		B738DR_fmc2_Line04_I = txt_trunc(line4_inv, 24)
		B738DR_fmc2_Line05_I = txt_trunc(line5_inv, 24)
		B738DR_fmc2_Line06_I = txt_trunc(line6_inv, 24)
	
		-- if fmc_message_num2 ~= 0 then
			-- B738DR_fmc2_Line_entry = fmc_message2[fmc_message_num2]
			-- if fmc_message_num2 > 1 then
				-- if fmc_message2[fmc_message_num2] == fmc_message2[fmc_message_num2-1] then
					-- fmc_message_num2 = fmc_message_num2 - 1
				-- end
			-- end
		if fmc_message_num ~= 0 then
			B738DR_fmc2_Line_entry = fmc_message[fmc_message_num]
			if fmc_message_num > 1 then
				if fmc_message[fmc_message_num] == fmc_message[fmc_message_num-1] then
					fmc_message_num = fmc_message_num - 1
				end
			end
		else
			if string.len(entry2) > 1 then
					if string.sub(entry2, 1, 1) == ">" then
						B738DR_fmc2_Line_entry = string.sub(entry2, 2,-1)
					else
						B738DR_fmc2_Line_entry = entry2
					end
			else
				B738DR_fmc2_Line_entry = entry2
			end
		end
		if string.len(B738DR_fmc2_Line_entry) == 0 then
			B738DR_fmc2_Line_entry = " "
		end

		line0_l = ""
		line0_s = ""
		line0_m = ""
		line0_g = ""
		line1_x = ""
		line1_l = ""
		line1_s = ""
		line1_m = ""
		line1_g = ""
		line2_x = ""
		line2_l = ""
		line2_s = ""
		line2_m = ""
		line2_g = ""
		line3_x = ""
		line3_l = ""
		line3_s = ""
		line3_m = ""
		line3_g = ""
		line4_x = ""
		line4_l = ""
		line4_s = ""
		line4_m = ""
		line4_g = ""
		line5_x = ""
		line5_l = ""
		line5_s = ""
		line5_m = ""
		line5_g = ""
		line6_x = ""
		line6_l = ""
		line6_s = ""
		line6_m = ""
		line6_g = ""
		line0_inv = ""
		line1_inv = ""
		line2_inv = ""
		line3_inv = ""
		line4_inv = ""
		line5_inv = ""
		line6_inv = ""
	
	end

end

function B738_fmc_disp_capt()
	
	if page_menu > 0 then
		B738_fmc_menu()
	elseif page_pos_init > 0 then
		B738_fmc_pos_init()
	elseif page_takeoff > 0 then
		B738_fmc_takeoff()
	elseif page_approach > 0 then
		B738_fmc_approach()
	elseif page_perf > 0 then
		B738_fmc_perf()
	elseif page_n1_limit > 0 then
		B738_fmc_n1_limit()
	elseif page_init > 0 then
		B738_fmc_init()
	elseif page_ident > 0 then
		B738_fmc_ident()
	elseif page_climb > 0 then
		B738_fmc_climb()
	elseif page_cruise > 0 then
		B738_fmc_cruise()
	elseif page_descent > 0 then
		B738_fmc_descent()
	elseif page_descent_forecast > 0 then
		B738_fmc_descent_forecast()
	elseif page_rte_init > 0 then
		B738_fmc_rte_init()
	elseif page_legs > 0 then
		B738_fmc_legs()
	elseif page_dep_arr > 0 then
		B738_fmc_dep_arr()
	elseif page_dep > 0 then
		B738_fmc_dep99()
	elseif page_arr > 0 then
		B738_fmc_arr99()
	elseif page_sel_wpt > 0 then
		B738_fmc_sel_wpt()
	elseif page_sel_wpt2 > 0 then
		B738_fmc_sel_wpt2()
	elseif page_sel_wpt3 > 0 then
		B738_fmc_sel_wpt3()
	elseif page_progress > 0 then
		B738_fmc_progress()
	elseif page_offset > 0 then
		B738_fmc_offset()
	elseif page_hold > 0 then
		B738_fmc_hold()
	elseif page_xtras > 0 then
		B738_fmc_xtras()
	elseif page_xtras_fmod > 0 then
		B738_fmc_fmod_main()
	-- elseif page_ident > 0 then
		-- B738_fmc_fmod_dspl()
	elseif page_xtras_others > 0 then
		B738_fmc_xtras_others()
	elseif page_xtras_fuel > 0 then
		B738_fmc_fuel()
	elseif page_ref_nav_data > 0 then
		B738_fmc_ref_nav_data()
	elseif page_ref_nav_data_wpt > 0 then
		B738_fmc_ref_nav_data_wpt()
	elseif page_ref_nav_data_navaid > 0 then
		B738_fmc_ref_nav_data_navaid()
	elseif page_ref_nav_data_apt > 0 then
		B738_fmc_ref_nav_data_apt()
	elseif page_ref_sel > 0 then
		B738_ref_nav_sel()
	elseif page_fix > 0 then
		B738_fmc_fix()
	elseif page_rte_legs > 0 then
		B738_rte_data()
	end
	
	B738_fmc_fmod_dspl()
	
	B738_fmc_display()
	
	menu_tick = menu_tick + SIM_PERIOD
	if menu_tick > 10 then
		menu_tick = 0
	end

end

function B738_fmc_disp_fo()
	
	local act_page_00 = act_page
	local max_page_00 = max_page
	--local legs_step_00 = legs_step
	
	local page_menu_00 = page_menu
	local page_dep_arr_00 = page_dep_arr
	local page_climb_00 = page_climb
	local page_init_00 = page_init
	local page_ident_00 = page_ident
	local page_takeoff_00 = page_takeoff
	local page_approach_00 = page_approach
	local page_perf_00 = page_perf
	local page_n1_limit_00 = page_n1_limit
	local page_pos_init_00 = page_pos_init
	local page_cruise_00 = page_cruise
	local page_descent_00 = page_descent
	local page_route_00 = page_route
	local page_legs_00 = page_legs
	local page_descent_forecast_00 = page_descent_forecast
	local page_rte_init_00 = page_rte_init
	local page_dep_00 = page_dep
	local page_arr_00 = page_arr
	local page_progress_00 = page_progress
	local page_hold_00 = page_hold
	local page_xtras_fmod_00 = page_xtras_fmod
	local page_fmod_features_00 = page_fmod_features
	local page_fmod_volumes_00 = page_fmod_volumes
	local page_fmod_announ_00 = page_fmod_announ
	local page_fmod_eq_00 = page_fmod_eq
	local page_fmod_flight_ctrl_00 = page_fmod_flight_ctrl
	local page_xtras_00 = page_xtras
	local page_xtras_others_00 = page_xtras_others
	local page_sel_wpt_00 = page_sel_wpt
	local page_sel_wpt2_00 = page_sel_wpt2
	local page_sel_wpt3_00 = page_sel_wpt3
	local page_sel_wpt4_00 = page_sel_wpt4
	local page_offset_00 = page_offset
	local page_xtras_fuel_00 = page_xtras_fuel
	local page_ref_nav_data_00 = page_ref_nav_data
	local page_ref_nav_data_wpt_00 = page_ref_nav_data_wpt
	local page_ref_nav_data_navaid_00 = page_ref_nav_data_navaid
	local page_ref_nav_data_apt_00 = page_ref_nav_data_apt
	local page_ref_sel_00 = page_ref_sel
	local page_fix_00 = page_fix
	local page_rte_legs_00 = page_rte_legs
	
	act_page = act_page2
	if (page_legs == 1 and page_legs2 == 1)
	or (page_route == 1 and page_route2 == 1)
	or (page_rte_init == 1 and page_rte_init2 == 1) then
		if act_page > max_page then
			act_page = max_page
		end
	end
	
	--legs_step = legs_step2
	
	page_menu = page_menu2
	page_dep_arr = page_dep_arr2
	page_climb = page_climb2
	page_init = page_init2
	page_ident = page_ident2
	page_takeoff = page_takeoff2
	page_approach = page_approach2
	page_perf = page_perf2
	page_n1_limit = page_n1_limit2
	page_pos_init = page_pos_init2
	page_cruise = page_cruise2
	page_descent = page_descent2
	page_route = page_route2
	page_legs = page_legs2
	page_descent_forecast = page_descent_forecast2
	page_rte_init = page_rte_init2
	page_dep = page_dep2
	page_arr = page_arr2
	page_progress = page_progress2
	page_hold = page_hold2
	page_xtras_fmod = page_xtras_fmod2
	page_fmod_features = page_fmod_features2
	page_fmod_volumes = page_fmod_volumes2
	page_fmod_announ = page_fmod_announ2
	page_fmod_eq = page_fmod_eq2
	page_fmod_flight_ctrl = page_fmod_flight_ctrl2
	page_xtras = page_xtras2
	page_xtras_others = page_xtras_others2
	page_sel_wpt = page_sel_wpt_2
	page_sel_wpt2 = page_sel_wpt2_2
	page_sel_wpt3 = page_sel_wpt3_2
	page_sel_wpt4 = page_sel_wpt4_2
	page_offset = page_offset2
	page_xtras_fuel = page_xtras_fuel2
	page_ref_nav_data = page_ref_nav_data2
	page_ref_nav_data_wpt = page_ref_nav_data_wpt2
	page_ref_nav_data_navaid = page_ref_nav_data_navaid2
	page_ref_nav_data_apt = page_ref_nav_data_apt2
	page_ref_sel = page_ref_sel2
	page_fix = page_fix2
	page_rte_legs = page_rte_legs2
	
	-- B738_fmc_menu()
	-- B738_fmc_pos_init()
	-- B738_fmc_takeoff()
	-- B738_fmc_approach()
	-- B738_fmc_perf()
	-- B738_fmc_n1_limit()
	-- B738_fmc_init()
	-- B738_fmc_ident()
	-- B738_fmc_climb()
	-- B738_fmc_cruise()
	-- B738_fmc_descent()
	-- B738_fmc_descent_forecast()
	-- B738_fmc_rte_init()
	-- B738_fmc_legs2()
	-- B738_fmc_dep_arr()
	-- B738_fmc_dep99()
	-- B738_fmc_arr99()
	-- B738_fmc_sel_wpt()
	-- B738_fmc_sel_wpt2()
	-- B738_fmc_sel_wpt3()
	-- B738_fmc_progress()
	-- B738_fmc_offset()
	-- B738_fmc_hold()
	-- B738_fmc_xtras()
	-- B738_fmc_fmod_main()
	-- B738_fmc_fmod_dspl()
	-- B738_fmc_xtras_others()
	
	-- B738_fmc_fuel()
	-- B738_fmc_ref_nav_data()
	-- B738_fmc_ref_nav_data_wpt()
	-- B738_fmc_ref_nav_data_navaid()
	-- B738_fmc_ref_nav_data_apt()
	-- B738_ref_nav_sel()
	-- B738_fmc_fix()
	
	
	if page_menu > 0 then
		B738_fmc_menu()
	elseif page_pos_init > 0 then
		B738_fmc_pos_init()
	elseif page_takeoff > 0 then
		B738_fmc_takeoff()
	elseif page_approach > 0 then
		B738_fmc_approach()
	elseif page_perf > 0 then
		B738_fmc_perf()
	elseif page_n1_limit > 0 then
		B738_fmc_n1_limit()
	elseif page_init > 0 then
		B738_fmc_init()
	elseif page_ident > 0 then
		B738_fmc_ident()
	elseif page_climb > 0 then
		B738_fmc_climb()
	elseif page_cruise > 0 then
		B738_fmc_cruise()
	elseif page_descent > 0 then
		B738_fmc_descent()
	elseif page_descent_forecast > 0 then
		B738_fmc_descent_forecast()
	elseif page_rte_init > 0 then
		B738_fmc_rte_init()
	elseif page_legs > 0 then
		B738_fmc_legs2()
	elseif page_dep_arr > 0 then
		B738_fmc_dep_arr()
	elseif page_dep > 0 then
		B738_fmc_dep99()
	elseif page_arr > 0 then
		B738_fmc_arr99()
	elseif page_sel_wpt > 0 then
		B738_fmc_sel_wpt()
	elseif page_sel_wpt2 > 0 then
		B738_fmc_sel_wpt2()
	elseif page_sel_wpt3 > 0 then
		B738_fmc_sel_wpt3()
	elseif page_progress > 0 then
		B738_fmc_progress()
	elseif page_offset > 0 then
		B738_fmc_offset()
	elseif page_hold > 0 then
		B738_fmc_hold()
	elseif page_xtras > 0 then
		B738_fmc_xtras()
	elseif page_xtras_fmod > 0 then
		B738_fmc_fmod_main()
	-- elseif page_ident > 0 then
		-- B738_fmc_fmod_dspl()
	elseif page_xtras_others > 0 then
		B738_fmc_xtras_others()
	elseif page_xtras_fuel > 0 then
		B738_fmc_fuel()
	elseif page_ref_nav_data > 0 then
		B738_fmc_ref_nav_data()
	elseif page_ref_nav_data_wpt > 0 then
		B738_fmc_ref_nav_data_wpt()
	elseif page_ref_nav_data_navaid > 0 then
		B738_fmc_ref_nav_data_navaid()
	elseif page_ref_nav_data_apt > 0 then
		B738_fmc_ref_nav_data_apt()
	elseif page_ref_sel > 0 then
		B738_ref_nav_sel()
	elseif page_fix > 0 then
		B738_fmc_fix()
	elseif page_rte_legs > 0 then
		B738_rte_data()
	end
	B738_fmc_fmod_dspl()
	
	act_page2 = act_page
	max_page2 = max_page
	
	act_page = act_page_00
	max_page = max_page_00
	--legs_step = legs_step_00
	
	page_menu = page_menu_00
	page_dep_arr = page_dep_arr_00
	page_climb = page_climb_00
	page_init = page_init_00
	page_ident = page_ident_00
	page_takeoff = page_takeoff_00
	page_approach = page_approach_00
	page_perf = page_perf_00
	page_n1_limit = page_n1_limit_00
	page_pos_init = page_pos_init_00
	page_cruise = page_cruise_00
	page_descent = page_descent_00
	page_route = page_route_00
	page_legs = page_legs_00
	page_descent_forecast = page_descent_forecast_00
	page_rte_init = page_rte_init_00
	page_dep = page_dep_00
	page_arr = page_arr_00
	page_progress = page_progress_00
	page_hold = page_hold_00
	page_xtras_fmod = page_xtras_fmod_00
	page_fmod_features = page_fmod_features_00
	page_fmod_volumes = page_fmod_volumes_00
	page_fmod_announ = page_fmod_announ_00
	page_fmod_eq = page_fmod_eq_00
	page_fmod_flight_ctrl = page_fmod_flight_ctrl_00
	page_xtras = page_xtras_00
	page_xtras_others = page_xtras_others_00
	page_sel_wpt = page_sel_wpt_00
	page_sel_wpt2 = page_sel_wpt2_00
	page_sel_wpt3 = page_sel_wpt3_00
	page_sel_wpt4 = page_sel_wpt4_00
	page_offset = page_offset_00
	page_xtras_fuel = page_xtras_fuel_00
	page_ref_nav_data = page_ref_nav_data_00
	page_ref_nav_data_wpt = page_ref_nav_data_wpt_00
	page_ref_nav_data_navaid = page_ref_nav_data_navaid_00
	page_ref_nav_data_apt = page_ref_nav_data_apt_00
	page_ref_sel = page_ref_sel_00
	page_fix = page_fix_00
	page_rte_legs = page_rte_legs_00
	
	B738_fmc_display2()

end



function B738_calc()
	
	local v = 0
	local pos_min = ""
	local pos_deg = ""
	local weight_lbs = 0
	
	if units_recalc == 1 then
		if units == 0 then
			zfw = zfw_lbs
			plan_weight = plan_weight_lbs
			reserves = reserves_lbs
		else
			zfw = zfw_kgs
			plan_weight = plan_weight_kgs
			reserves = reserves_kgs
		end
	end
	units_recalc = 0
	
	if B738DR_fms_v1_calc == 0 then
		v1 = "---"
		vr = "---"
		v2 = "---"
	else
		v1 = string.format("%3d", B738DR_fms_v1_calc)
		vr = string.format("%3d", B738DR_fms_vr_calc)
		v2 = string.format("%3d", B738DR_fms_v2_calc)
	end

	vref_15 = string.format("%3d", B738DR_fms_vref_15)
	vref_30 = string.format("%3d", B738DR_fms_vref_30)
	vref_40 = string.format("%3d", B738DR_fms_vref_40)
	
	if B738DR_trim_calc == 0 then
		trim = "    "
	else
		trim = string.format("%4.2f", B738DR_trim_calc)
	end

	weight_lbs = (simDR_total_weight / 1000) * 2.204			-- 1000 lbs
	gw_act = string.format("%5.1f", weight_lbs)
	
	-- Fuel_weight
	weight_lbs = (simDR_fuel_weight / 1000) * 2.204			-- 1000 lbs
	fuel_weight_lbs = string.format("%4.1f", weight_lbs)
	fuel_weight_kgs = string.format("%4.1f", (tonumber(fuel_weight_lbs) / 2.204))
	if units == 0 then
		fuel_weight = fuel_weight_lbs
	else
		fuel_weight = fuel_weight_kgs
	end
	
	-- ZFC calc
	v = ((simDR_total_weight / 1000) - (simDR_fuel_weight / 1000)) * 2.204		-- 1000 lbs
	zfw_calc_lbs = string.format("%5.1f", v)
	zfw_calc_kgs = string.format("%5.1f", (tonumber(zfw_calc_lbs) / 2.204))
	if units == 0 then
		zfw_calc = zfw_calc_lbs
	else
		zfw_calc = zfw_calc_kgs
	end
	
	-- CALC GW
	v = tonumber(zfw_lbs)
	if v == nil then
		gw = "***.*"
		gw_lbs = gw
		gw_kgs = gw
		v = ((simDR_total_weight / 1000) - (simDR_fuel_weight / 1000)) * 2.204		-- 1000 lbs
		v = v + tonumber(fuel_weight_lbs)
		if units == 0 then
			gw_calc = string.format("%5.1f", v)
		else
			gw_calc = string.format("%5.1f", (v / 2.204))
		end
		
	else
		v = v + tonumber(fuel_weight_lbs)
		gw_lbs = string.format("%5.1f", v)
		gw_kgs = string.format("%5.1f", (tonumber(gw_lbs) / 2.204))
		if units == 0 then
			gw = gw_lbs
		else
			gw = gw_kgs
		end
		gw_calc = gw
	end
	
	-- SET V SPEEDS
	v = tonumber(flaps)
	if v == nil then
		B738DR_fms_takeoff_flaps = 0
	else
		B738DR_fms_takeoff_flaps = v
	end
	
	v = tonumber(app_flap)
	if v == nil then
		B738DR_fms_approach_flaps = 0
	else
		B738DR_fms_approach_flaps = v
	end
	v = tonumber(app_spd)
	if v == nil then
		B738DR_fms_approach_speed = 0
	else
		B738DR_fms_approach_speed = v
	end
	v = tonumber(wind_corr)
	if v == nil then
		B738DR_fms_approach_wind_corr = 5
	else
		B738DR_fms_approach_wind_corr = v
	end
	
	
	v = tonumber(v1_set)
	if v == nil then
		B738DR_fms_v1_set = 0
	else
		B738DR_fms_v1_set = v
	end
	v = tonumber(vr_set)
	if v == nil then
		B738DR_fms_vr_set = 0
	else
		B738DR_fms_vr_set = v
	end
	v = tonumber(v2_set)
	if v == nil then
		B738DR_fms_v2_set = 0
	else
		B738DR_fms_v2_set = v
	end
	
	-- V Speed calculate enable
	if gw_lbs == "***.*" then
		-- vref_15 = "---"
		-- vref_30 = "---"
		-- vref_40 = "---"
		v1 = "---"
		vr = "---"
		v2 = "---"
		trim = "    "
		-- flaps_app = "  "
		B738DR_fmc_gw = 0
	else
		if flaps == "**" then
			B738DR_calc_spd_enable = 0
			v1 = "---"
			vr = "---"
			v2 = "---"
			trim = "    "
		end
		B738DR_calc_spd_enable = 1
		v = tonumber(gw_lbs)
		if v == nil then
			B738DR_fmc_gw = 0
		else
			B738DR_fmc_gw = v	-- GW lbs
		end
	end
	
	-- GW approach
	if gw_app == "***.*" then
		B738DR_fmc_gw_app = 0
		vref_15 = "---"
		vref_30 = "---"
		vref_40 = "---"
		flaps_app = "  "
	else
		v = tonumber(gw_app_lbs)
		if v == nil then
			B738DR_fmc_gw_app = 0
		else
			B738DR_fmc_gw_app = v	-- GW lbs
		end
	end
	
	-- CG
	v = tonumber(cg)
	if v == nil then
		B738DR_fmc_cg = 0
		trim = "    "
	else
		B738DR_fmc_cg = v	-- CG %MAC
	end
	
	
	-- RWY wind, slope, hdg
	v = tonumber(rw_wind_dir)
	if v == nil then
		B738DR_rw_wind_dir = -1
	else
		B738DR_rw_wind_dir = v
	end
	v = tonumber(rw_wind_spd)
	if v == nil then
		B738DR_rw_wind_spd = -1
	else
		B738DR_rw_wind_spd = v
	end
	v = tonumber(string.sub(rw_slope, 2, -1))
	if v == nil then
		B738DR_rw_slope = 0
	else
		if string.sub(rw_slope, 1, 1) == "D" then
			v = -v
		end
		B738DR_rw_slope = v
	end
	v = tonumber(rw_hdg)
	if v == nil then
		B738DR_rw_hdg = -1
	else
		B738DR_rw_hdg = v
	end
	
	-- UNITS
	B738DR_fmc_units = units
	if units == 0 then
		weight_min = 90
		weight_max = 180
	else
		weight_min = 40
		weight_max = 90
	end
	
	-- ZULU TIME
	if simDR_gps_fail == 0 or simDR_gps2_fail == 0 then
		zulu_time = string.format("%02d", simDR_zulu_hours) .. string.format("%02d", simDR_zulu_minutes)
		zulu_time = zulu_time .. "."
		zulu_time = zulu_time .. string.sub(string.format("%02d", simDR_zulu_seconds), 1, 1)
		zulu_time = zulu_time .. "z "
		zulu_time = zulu_time .. string.format("%02d", simDR_time_month)
		zulu_time = zulu_time .. "/"
		zulu_time = zulu_time .. string.format("%02d", simDR_time_day)
	else
		zulu_time = "0000.0z      "
	end
	
	-- SEL TEMP
	v = tonumber(sel_temp)
	if v == nil then
		B738DR_fmc_sel_temp = 99	-- no entry
	else
		B738DR_fmc_sel_temp = v
	end
	
	-- OUT TEMP manually
	v = tonumber(oat)
	if v == nil then
		B738DR_fmc_oat_temp = 99	-- no entry
	else
		B738DR_fmc_oat_temp = v
	end
	
	-- Runway condition
	B738DR_fmc_rw_cond = rw_cond
	
	-- Transition altitude
	if trans_alt == "-----" then
		B738DR_trans_alt = 18000
	else
		B738DR_trans_alt = tonumber(trans_alt)
	end
	
	-- Transition level
	v = tonumber(string.sub(trans_lvl, 3, 5))
	if v == nil then
		B738DR_trans_lvl = B738DR_trans_alt
	else
		B738DR_trans_lvl = v * 100
	end
	
	-- Throttle reduction alt
	B738DR_thr_red_alt = clb_alt_num
	B738DR_accel_alt = accel_alt_num
	
	-- on ground / air
	if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
		if was_on_air == 1 then
			was_on_air = 0
			-- on the ground
			ground_air = 0
		end
	end
	if simDR_radio_height_pilot_ft > 50 then
		if was_on_air == 0 then
			was_on_air = 1
			-- air
			ground_air = 1
		end
	end
	-- ISA DEV C
	if isa_dev_c ~= "---" then
		v = tonumber(isa_dev_c)
		if v == nil then
			B738DR_isa_dev_c = 10
		else
			B738DR_isa_dev_c = v
		end
	end

	
end


function pos_to_string(pos_lat_deg0, pos_lat_min0, pos_lat_NS0, pos_lon_deg0, pos_lon_min0, pos_lon_EW0)
	local position_min = ""
	local position_deg = ""
	local position = ""

	local pos_deg = string.format("%02d", pos_lat_deg0)
	local pos_min = string.format("%05.1f", pos_lat_min0)
	if pos_lat_NS0 == 1 then
		position = ("S" .. pos_deg)
	else
		position = ("N" .. pos_deg)
	end
	position = position .. string.sub(pos_min, 1, 2)
	position = position .. "."
	position = position .. string.sub(pos_min, 3, 3)
	pos_deg = string.format("%03d", pos_lon_deg0)
	pos_min = string.format("%05.1f", pos_lon_min0)
	if pos_lon_EW0 == 1 then
		position = (position .. "W")
	else
		position = (position .. "E")
	end
	position = position .. pos_deg
	position = position .. string.sub(pos_min, 1, 2)
	position = position .. "."
	position = position .. string.sub(pos_min, 3, 3)

	return position
end

function B738_set_last_pos()


	local lat = (math.abs(B738DR_last_pos_lat))
	local lat_deg = (math.floor(lat))
	local lat_min_dec = (math.fmod(lat,1.0)*600)
	local lat_min_dec2 = (string.format("%06.3f",lat_min_dec))

	local last_latitude_NS = 0
	if B738DR_last_pos_lat < 0 then
		last_latitude_NS = 1
	end

	local lon = (math.abs(B738DR_last_pos_lon))
	local lon_deg = (math.floor(lon))
	local lon_min_dec = (math.fmod(lon,1.0)*600)
	local lon_min_dec2 = (string.format("%06.3f",lon_min_dec))

	local last_longitude_EW = 0
	if B738DR_last_pos_lon < 0 then
		last_longitude_EW = 1
	end

	if B738DR_last_pos_lat == 0 and B738DR_last_pos_lon == 0 then
		last_pos = "-----.-------.-"
	else
		last_pos = pos_to_string(lat_deg, lat_min_dec2, last_latitude_NS, lon_deg, lon_min_dec2, last_longitude_EW)
	end

end


function B738_last_pos()

	-- Last Position
	
	local gps_irs_fail = 0
	if B738DR_gps_pos == "-----.-------.-" 
	and B738DR_gps2_pos == "-----.-------.-" 
	and B738DR_irs_pos =="-----.-------.-"
	and B738DR_irs2_pos == "-----.-------.-" then
		gps_irs_fail = 1
	end
	
	if B738DR_irs_pos ~= "-----.-------.-" or B738DR_irs2_pos ~= "-----.-------.-" then
		last_pos = pos_to_string(B738DR_latitude_deg, B738DR_latitude_min, B738DR_latitude_NS, B738DR_longitude_deg, B738DR_longitude_min, B738DR_longitude_EW)
	end
	B738DR_last_pos_str = last_pos
	
	if gps_irs_fail == 0 then
		if gps_ok == 0 and B738DR_chock_status == 1 then
			gps_ok = 1
			set_chock = 1
		end
		
	else
		gps_ok = 0
	end

end

function airport_pos()

	local temp_i = 0
	
	local nd_x = 0
	local idx_rec = 0
	
	if ref_icao ~= "----" then
		
		icao_latitude = 0
		icao_longitude = 0
		
		if apt_data_num > 0 then
			nd_x = string.byte(string.sub(ref_icao, 1, 1))
			if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
				if idx_apt[nd_x][99999] > 0 then
					for temp_i = 1, idx_apt[nd_x][99999] do
						idx_rec = idx_apt[nd_x][temp_i]
						if ref_icao == apt_data[idx_rec][1] then
							icao_latitude = apt_data[idx_rec][2]
							icao_longitude = apt_data[idx_rec][3]
							break
						end
					end
				end
			end
		end
	end

end

function airport_pos2()

	local position_min = ""
	local position_deg = ""
	local position = ""
	local temp_deg = 0
	local temp_min = 0
	local airport_lat_deg = 0
	local airport_lat_min = 0
	local airport_lon_deg = 0
	local airport_lon_min = 0
	local airport_lat_ns = 0
	local airport_lon_ew = 0
	local temp_i = 0
	
	local nd_x = 0
	local idx_rec = 0
	
	local icao_latitude2 = 0
	local icao_longitude2 = 0
	
	if ref_icao2 == "----" then
		ref_icao_pos = "               "
	else
		
		
		if apt_data_num > 0 then
			nd_x = string.byte(string.sub(ref_icao2, 1, 1))
			if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
				if idx_apt[nd_x][99999] > 0 then
					for temp_i = 1, idx_apt[nd_x][99999] do
						idx_rec = idx_apt[nd_x][temp_i]
						if ref_icao2 == apt_data[idx_rec][1] then
							icao_latitude2 = apt_data[idx_rec][2]
							icao_longitude2 = apt_data[idx_rec][3]
							break
						end
					end
				end
			end
		
			local lat = (math.abs(icao_latitude2))
			local lat_min_dec = (math.fmod(lat,1.0)*600)
			airport_lat_deg = (math.floor(lat))
			airport_lat_min = (string.format("%06.3f",lat_min_dec))
			airport_lat_ns = 0
			if icao_latitude2 < 0 then
				airport_lat_ns = 1
			end
			
			local lon = (math.abs(icao_longitude2))
			local lon_min_dec = (math.fmod(lon,1.0)*600)
			airport_lon_deg = (math.floor(lon))
			airport_lon_min = (string.format("%06.3f",lon_min_dec))
			airport_lon_ew = 0
			if icao_longitude2 < 0 then
				airport_lon_ew = 1
			end
			
			
			
			temp_deg = string.format("%02d", airport_lat_deg)
			temp_min = string.format("%05.1f", airport_lat_min)
			if airport_lat_ns == 1 then
				position = ("S" .. temp_deg)
			else
				position = ("N" .. temp_deg)
			end
			position = position .. string.sub(temp_min, 1, 2)
			position = position .. "."
			position = position .. string.sub(temp_min, 3, 3)
			temp_deg = string.format("%03d", airport_lon_deg)
			temp_min = string.format("%05.1f", airport_lon_min)
			if airport_lon_ew == 1 then
				position = (position .. "W")
			else
				position = (position .. "E")
			end
			position = position .. temp_deg
			position = position .. string.sub(temp_min, 1, 2)
			position = position .. "."
			position = position .. string.sub(temp_min, 3, 3)
			
			ref_icao_pos = position
			
		else
			ref_icao_pos = "               "
		end
	end

end






function string_lat_pos(lat_pos)

	local position_min = ""
	local position_deg = ""
	local position = ""
	local temp_deg = 0
	local temp_min = 0
	local navaid_lat_deg = 0
	local navaid_lat_min = 0
	local navaid_lat_ns = 0
	
	local lat = (math.abs(lat_pos))
	local lat_min_dec = (math.fmod(lat,1.0)*600)
	navaid_lat_deg = (math.floor(lat))
	navaid_lat_min = (string.format("%06.3f",lat_min_dec))
	navaid_lat_ns = 0
	if lat_pos < 0 then
		navaid_lat_ns = 1
	end
	
	temp_deg = string.format("%02d", navaid_lat_deg)
	temp_min = string.format("%05.1f", navaid_lat_min)
	if navaid_lat_ns == 1 then
		position = ("S" .. temp_deg)
	else
		position = ("N" .. temp_deg)
	end
	position = position .. string.sub(temp_min, 1, 2)
	position = position .. "."
	position = position .. string.sub(temp_min, 3, 3)
	
	return position

end

function string_lon_pos(lon_pos)

	local position_min = ""
	local position_deg = ""
	local position = ""
	local temp_deg = 0
	local temp_min = 0
	local navaid_lat_deg = 0
	local navaid_lat_min = 0
	local navaid_lon_deg = 0
	local navaid_lon_min = 0
	local navaid_lat_ns = 0
	local navaid_lon_ew = 0
	
	local lon = (math.abs(lon_pos))
	local lon_min_dec = (math.fmod(lon,1.0)*600)
	navaid_lon_deg = (math.floor(lon))
	navaid_lon_min = (string.format("%06.3f",lon_min_dec))
	navaid_lon_ew = 0
	if lon_pos < 0 then
		navaid_lon_ew = 1
	end
	
	temp_deg = string.format("%03d", navaid_lon_deg)
	temp_min = string.format("%05.1f", navaid_lon_min)
	if navaid_lon_ew == 1 then
		position = ("W" .. temp_deg)
	else
		position = ("E" .. temp_deg)
	end
	position = position .. string.sub(temp_min, 1, 2)
	position = position .. "."
	position = position .. string.sub(temp_min, 3, 3)
	
	return position

end


function B738_irs_sys()

	if B738DR_irs_left_mode == 0 and B738DR_irs_right_mode == 0 then
		msg_irs_pos = 0
		msg_irs_hdg = 0
		irs_hdg = "---`"
		irs_pos = "*****.*******.*"
	end
	
	B738DR_irs_pos_fmc_set = irs_pos
	B738DR_irs_hdg_fmc_set = string.sub(irs_hdg, 1, 3)
	
--	local gs = string.format("%3d", B738_rescale(0, 0, 205, 400, simDR_ground_speed))
	local gs = string.format("%3d", (simDR_ground_spd * 1.94384))
	if B738DR_irs_left_mode > 1 then
		irs_gs = gs
		fmc_pos = B738DR_irs_pos
	else
		irs_gs = "   "
	end
	if B738DR_irs_right_mode > 1 then
		irs2_gs = gs
		fmc_pos = B738DR_irs2_pos
	else
		irs2_gs = "   "
	end
	if B738DR_irs_left_mode > 1 or B738DR_irs_right_mode > 1 then
		fmc_gs = gs
		irs_pos = ""
	else
		fmc_gs = "   "
	end
	if simDR_gps_fail ~= 0 then
		fmc_pos = B738DR_gps_pos
	end
	if simDR_gps2_fail ~= 0 then
		fmc_pos = B738DR_gps2_pos
	end
	
	if B738DR_irs_pos ~= "-----.-------.-" then
		B738DR_irs1_restart = 0
	end
	if B738DR_irs2_pos ~= "-----.-------.-" then
		B738DR_irs2_restart = 0
	end
	if B738DR_irs1_restart == 0 and B738DR_irs2_restart == 0 then
		msg_irs_motion = 0
	end
	
	if B738DR_gps_pos ~= "-----.-------.-" then
		msg_gps_l_fail = 0
	end
	
	if B738DR_gps2_pos ~= "-----.-------.-" then
		msg_gps_r_fail = 0
	end
	
	if B738DR_gps_pos ~= "-----.-------.-" 
	and B738DR_gps2_pos ~= "-----.-------.-" then
		msg_gps_lr_fail = 0
	end

end


function B738_N1_sel_thr()

	if sel_temp == "----" then
		if to == "<ACT>" then	-- 26K
			B738DR_fms_N1_to_sel = 1
		elseif to_1 == "<ACT>" then		-- 24K
			B738DR_fms_N1_to_sel = 2
		elseif to_2 == "<ACT>" then		-- 22K
			B738DR_fms_N1_to_sel = 3
		end
	else
		if to == "<ACT>" then	-- RED 26K
			B738DR_fms_N1_to_sel = 4
		elseif to_1 == "<ACT>" then		-- RED 24K
			B738DR_fms_N1_to_sel = 5
		elseif to_2 == "<ACT>" then		-- RED 22K
			B738DR_fms_N1_to_sel = 6
		end
	end

end

function B738_N1_thrust_calc()

	fmc_full_thrust = B738DR_thr_takeoff_N1
	
	fmc_dto_thrust = B738DR_thr_takeoff_N1
	
	-- if sel_temp == "----" then
		-- fmc_sel_thrust = fmc_full_thrust
	-- else
		-- fmc_sel_thrust = fmc_dto_thrust
	-- end
	
	fmc_clb_thrust = B738DR_thr_climb_N1
	fmc_crz_thrust = B738DR_thr_cruise_N1
	
	-- fmc_con_thrust = math.max(B738DR_thr_climb_N1, B738DR_thr_cruise_N1)
	-- if fmc_con_thrust > 0 then
		-- fmc_con_thrust = fmc_con_thrust + 0.023
	-- end
	-- if fmc_con_thrust > B738DR_thr_goaround_N1 then
		-- fmc_con_thrust = B738DR_thr_goaround_N1 - 0.023
	-- end
	fmc_con_thrust = B738DR_thr_goaround_N1 * 0.96
	
	fmc_ga_thrust = B738DR_thr_goaround_N1

end


function on_ground_25sec()
	takeoff_enable = 1
	-- takeoff
	-- v1_set = "---"
	-- vr_set = "---"
	-- v2_set = "---"
	-- flaps = "**"
	-- clb_alt = "----"
	-- clb_alt_num = 1500
	-- crz_wind_dir = "---"
	-- crz_wind_spd = "---"
	-- rw_wind_dir = "---"
	-- rw_wind_spd = "---"
	-- rw_slope = "--.-"
	-- rw_hdg = "---"
	-- to = "<ACT>"
	-- to_1 = "     "
	-- to_2 = "     "
	-- clb = "<SEL>"
	-- clb_1 = "     "
	-- clb_2 = "     "
	-- sel_clb_thr = 0
	-- rw_cond = 0
	-- cg = "--.-"
	-- trim = "    "
	-- time_err = "  "
	-- oat_sim = "    "
	-- oat = "    "
	-- sel_temp = "----"
	-- sel_temp_f = "----"
	-- oat_f = "    "
	-- oat_sim_f = "    "
	-- oat_unit = "`C"
	
	-- -- approach
	-- app_flap = "--"
	-- app_spd = "---"
	-- wind_corr = "--"
	-- B738DR_fms_descent_now = 0
end

function switch_fmc_page(sw_page)
	if B738DR_fmc_exec_lights == 0 then
		if page_climb == 1 or page_cruise == 1 or page_descent == 1 
		or page_climb2 == 1 or page_cruise2 == 1 or page_descent2 == 1 then
			if sw_page == 1 then
				reset_fmc_pages()
				page_climb = 1
				act_page = 1
				reset_fmc_pages_fo()
				page_climb2 = 1
				act_page2 = 1
			elseif sw_page == 2 then
				reset_fmc_pages()
				page_cruise = 1
				act_page = 1
				reset_fmc_pages_fo()
				page_cruise2 = 1
				act_page2 = 1
			elseif sw_page == 3 then
				reset_fmc_pages()
				page_descent = 1
				act_page = 1
				reset_fmc_pages_fo()
				page_descent2 = 1
				act_page2 = 1
			-- elseif sw_page == 4 then
				-- reset_fmc_pages()
				-- page_approach = 1
				-- act_page = 1
				-- reset_fmc_pages_fo()
				-- page_approach2 = 1
				-- act_page2 = 1
			end
		end
	end
end

function B738_flight_phase3()

	local alt_temp = 0
	local descent_active = 0
	local ii = 0
	
	
		if altitude_last >= crz_alt_num and crz_alt_num > 0 then
			altitude_last = crz_alt_num
		end
		
		if B738DR_flight_phase < 4 then
			alt_temp = simDR_altitude_pilot + 1500
			if altitude_last > alt_temp then
				descent_active = 1
			end
		end
		
		if simDR_radio_height_pilot_ft > 50 then
			in_flight_mode = 1
		else
			in_flight_mode = 0
		end
		
		
		if simDR_on_ground_0 == 1
		or simDR_on_ground_1 == 1
		or simDR_on_ground_2 == 1 then
			
			-- reset FMC
			if reset_fmc_act == 1 and simDR_airspeed_pilot < 80 and B738DR_flight_phase > 0 then
				--reset_fmc_act = 0
				B738_init2()
				legs_num = 0
				legs_num2 = 0
				legs_data = {}
				legs_data2 = {}
				offset = 0
				msg_nav_data = 2
			end
			
			-- flight phase TAKEOFF
			if is_timer_scheduled(on_ground_25sec) == false 
			and takeoff_enable == 0 and simDR_airspeed_pilot < 70 then
				run_after_time(on_ground_25sec, 25)	-- 25 seconds on the ground
			end
			if takeoff_enable == 1 then
				climb_enable = 1
				--descent_enable = 0
				--goaround_enable = 0
				B738DR_flight_phase = 0
				altitude_last = simDR_altitude_pilot
				--in_flight_mode = 0
			end
		
		else
		
			if B738DR_flight_phase == 0 then
				-- flight phase CLIMB
				alt_temp = clb_alt_num - 150
				if simDR_radio_height_pilot_ft > alt_temp and climb_enable == 1 then
					takeoff_enable = 0
					B738DR_flight_phase = 1
				end
			end
			
			if td_idx == 0 then
				-- if B738DR_flight_phase == 0 then
					-- -- flight phase CLIMB
					-- alt_temp = clb_alt_num - 150
					-- if simDR_radio_height_pilot_ft > alt_temp and climb_enable == 1 then
						-- takeoff_enable = 0
						-- B738DR_flight_phase = 1
					-- end
				if B738DR_flight_phase == 1 then
					if crz_alt_num > 0 and simDR_altitude_pilot >= crz_alt_num then
						B738DR_flight_phase = 2
						altitude_last = simDR_altitude_pilot
					elseif descent_active == 1 then
						B738DR_fms_descent_now = 3
						B738DR_flight_phase = 5
						takeoff_enable = 0
						climb_enable = 0
					end
				else
					if descent_active == 1 and B738DR_flight_phase < 5 then
						B738DR_flight_phase = 5
						B738DR_fms_descent_now = 3
						takeoff_enable = 0
						climb_enable = 0
						--descent_enable = 1
						--goaround_enable = 1
					end
				end
			else
				if offset <= td_idx and B738DR_vnav_td_dist > 0 and calc_rte_enable == 0 then	-- before T/D
					if B738DR_fms_descent_now < 2 then
						if crz_alt_num > 0 then
							-- flight phase CRUISE
							alt_temp = crz_alt_num - 70
							if simDR_altitude_pilot >= alt_temp then
								takeoff_enable = 0
								climb_enable = 0
								if B738DR_autopilot_vnav_status == 0 then
									if B738DR_flight_phase ~= 2 then
										B738DR_flight_phase = 2
										altitude_last = simDR_altitude_pilot
									end
								else
									if B738DR_flight_phase ~= 3 and B738DR_flight_phase ~= 4 and B738DR_flight_phase ~= 2 then
										B738DR_flight_phase = 2
										altitude_last = simDR_altitude_pilot
									end
								end
							-- else
								-- alt_temp = clb_alt_num - 150
								-- if simDR_radio_height_pilot_ft > alt_temp and B738DR_flight_phase == 0 then
									-- -- flight phase CLIMB
									-- takeoff_enable = 0
									-- if B738DR_flight_phase < 1 then
										-- B738DR_flight_phase = 1
									-- end
								-- end
							end
						end
						if descent_active == 1 and B738DR_flight_phase < 5 then
							-- flight phase DESCENT
							B738DR_flight_phase = 5
							-- switch_fmc_page(3)
							takeoff_enable = 0
							climb_enable = 0
							B738DR_fms_descent_now = 3
							--descent_enable = 1
							--goaround_enable = 1
						end
					else
						ii = 0
						if crz_alt_num > 0 and simDR_altitude_pilot > (crz_alt_num - 200) and B738DR_fms_descent_now ~= 2 then
							if B738DR_flight_phase ~= 2 and B738DR_flight_phase ~= 3 and B738DR_flight_phase ~= 4 then
								B738DR_fms_descent_now = 0
								B738DR_flight_phase = 2
								altitude_last = simDR_altitude_pilot
								descent_active = 0
							end
							ii = 1
						end
						if ii == 0 and B738DR_flight_phase < 5 then
							-- flight phase DESCENT
							takeoff_enable = 0
							climb_enable = 0
							B738DR_flight_phase = 5
							B738DR_fms_descent_now = 3
							-- switch_fmc_page(3)
						end
					end
				else
					if descent_active == 0 then
						if B738DR_flight_phase < 2 and crz_alt_num > 0 and simDR_altitude_pilot >= crz_alt_num then
							B738DR_flight_phase = 2
							-- switch_fmc_page(2)
							altitude_last = simDR_altitude_pilot
							B738DR_fms_descent_now = 0
						end
					else
						if B738DR_flight_phase < 5 and B738DR_missed_app_act == 0 then
							B738DR_flight_phase = 5
							B738DR_fms_descent_now = 3
							-- switch_fmc_page(3)
							takeoff_enable = 0
							climb_enable = 0
						end
					end
				end
			end
		
			-- flight phase Descent
			if B738DR_flight_phase == 5 then
				if B738DR_missed_app_act == 0 then
					if offset >= first_app_idx or simDR_altitude_pilot < (des_icao_alt + 2000) then
						B738DR_flight_phase = 6
						--switch_fmc_page(4)
					end
				end
			end
			
			-- flight phase Approach
			if B738DR_flight_phase == 6 then
				if simDR_radio_height_pilot_ft < 2000 then
					B738DR_flight_phase = 7
				end
				--if push TO/GA
				if B738DR_speed_mode == 4 or B738DR_speed_mode == 5 or B738DR_speed_mode == 8 or B738DR_speed_mode == 1 then
					B738DR_flight_phase = 7
				end
				--if EXEC direct to wpt in the missed approach
				--automatically when first wpt missed approach
				--if rnav_idx_last > 0 and offset > rnav_idx_last then
				
				if B738DR_missed_app_act == 2 then
					B738DR_flight_phase = 7
				end
					-- -- original des airport change to ref airport allowing SID select if diversion to another airport is required
					-- -- if automatic TO/GA
					-- --    crz alt change to: highest constraint in the missed approach or 1500ft above airport alt
					-- -- if manual TO/GA pressed
					-- --    crz alt to: 1500ft above airport or MCP altitude
			end
			
			-- flight phase Go-Around armed
			if B738DR_flight_phase == 7 then
				if B738DR_speed_mode == 4 or B738DR_speed_mode == 5 or B738DR_speed_mode == 8 then --or B738DR_speed_mode == 1 then
					--goaround_enable = 1
					--descent_enable = 0
					B738DR_flight_phase = 8
					B738DR_missed_app_act = 1
					if B738DR_mcp_alt_dial < (des_icao_alt + 1500) then
						crz_alt_num = des_icao_alt + 1500
					else
						crz_alt_num = B738DR_mcp_alt_dial
					end
					crz_alt_num2 = crz_alt_num
					B738DR_fmc_cruise_alt = crz_alt_num
					if crz_alt_num >= B738DR_trans_alt then
						crz_alt = "FL" .. string.format("%03d", crz_alt_num / 100)
					else
						crz_alt = string.format("%5d", crz_alt_num)
					end
				end
				-- if B738DR_missed_app_alt > 0 and simDR_altitude_pilot > (B738DR_missed_app_alt - 200) then
					-- B738DR_flight_phase = 8
					-- --altitude_last = simDR_altitude_pilot
				-- end
				if B738DR_missed_app_act == 2 then
					B738DR_flight_phase = 8
					if B738DR_missed_app_alt > 0 then
						crz_alt_num = B738DR_missed_app_alt
						crz_alt_num2 = crz_alt_num
						B738DR_fmc_cruise_alt = crz_alt_num
						if crz_alt_num >= B738DR_trans_alt then
							crz_alt = "FL" .. string.format("%03d", crz_alt_num / 100)
						else
							crz_alt = string.format("%5d", crz_alt_num)
						end
					end
				end
				if simDR_vvi_fpm_pilot > 600 and simDR_flaps_ratio < 0.625 then
					B738DR_flight_phase = 8
				end
				
				if B738DR_flight_phase == 8 then
					-- active climb mode
					-- thrust limit to go-around thrust
					-- all descent restrict alt below current alt are deleted
					if legs_num > 1 then
						--for ii = offset, legs_num do
						for ii = 2, legs_num do
							if legs_data[ii][5] < simDR_altitude_pilot then
								legs_data[ii][5] = 0
								legs_data[ii][6] = 0
							end
							-- change STAR,APP to route
							if legs_data[ii][19] == 2 or legs_data[ii][19] == 4
							or legs_data[ii][19] == 7 or legs_data[ii][19] == 8 
							or legs_data[ii][19] == 9 then
								legs_data[ii][19] = 0
							end
							-- clear FAF,FixMA
							--if legs_data[ii][17] == 1 or legs_data[ii][17] == 2 then
								legs_data[ii][17] = 0
							--end
						end
						legs_data[legs_num][19] = 10	-- last wpt after engage Missed Approach
						last_sid_idx = legs_num
						copy_to_legsdata2()
						last_sid_idx_mod = legs_num2
						B738DR_fms_descent_now = 0
						altitude_last = simDR_altitude_pilot
						des_app = "------"
						des_app_tns = "------"
						des_star = "------"
						des_star_trans = "------"
						des_app2 = "------"
						des_app_tns2 = "------"
						des_star2 = "------"
						des_star_trans2 = "------"
						
						id_ed = ""
						idx_ed = 0
						rnav_idx_first = 0
						rnav_idx_last = 0
						-- first_miss_app_idx = 0
						-- last_miss_app_idx = 0
						-- missed_app_via = ""
						-- B738DR_missed_app_act = 0
						rnav_alt = 0
						rnav_vpa = 0
						
						id_ed_mod = ""
						idx_ed_mod = 0
						rnav_idx_first_mod = 0
						rnav_idx_last_mod = 0
						rnav_alt_mod = 0
						rnav_vpa_mod = 0
					end
				end
			end
			
			-- flight phase Go-Around
			if B738DR_flight_phase == 8 then
				if B738DR_missed_app_alt > 0 and simDR_altitude_pilot > (B738DR_missed_app_alt - 200) then
					B738DR_flight_phase = 1	-- climb phase
					altitude_last = simDR_altitude_pilot
				end
				if simDR_altitude_pilot > (des_icao_alt + 1500) and simDR_vvi_fpm_pilot > 600 then
					B738DR_flight_phase = 1	-- climb phase
					altitude_last = simDR_altitude_pilot
				end
			end
		
		end
		
		if crz_alt_num > 0 then
			if simDR_altitude_pilot <= crz_alt_num and altitude_last < simDR_altitude_pilot then
				altitude_last = simDR_altitude_pilot
			end
		else
			if altitude_last < simDR_altitude_pilot then
				altitude_last = simDR_altitude_pilot
			end
		end
		if B738DR_missed_app_act > 0 then
			altitude_last = simDR_altitude_pilot
		end
	--DR_test = altitude_last
	
	if simDR_radio_height_pilot_ft > 1000 and reset_fmc_act == 0 then
		reset_fmc_act = 1
	end
	
	-- if B738DR_changed_flight_phase > 0 then
		-- if B738DR_flight_phase == 2 then
			-- switch_fmc_page(2)
			-- B738DR_changed_flight_phase = 0
		-- elseif B738DR_flight_phase == 5 then
			-- switch_fmc_page(3)
			-- B738DR_changed_flight_phase = 0
		-- end
	-- end
	
	if flight_phase_old ~= B738DR_flight_phase then
		if B738DR_flight_phase == 1 then
			switch_fmc_page(1)
		elseif B738DR_flight_phase == 2 then
			switch_fmc_page(2)
		elseif B738DR_flight_phase == 5 then
			switch_fmc_page(3)
		elseif flight_phase_old < 5 and B738DR_flight_phase == 6 then
			switch_fmc_page(3)
		end
	end
	flight_phase_old = B738DR_flight_phase
	

end


function B738_N1_thrust_set()
	fmc_takeoff_mode = 1
	fmc_goaround_mode = 1
	--fmc_ga_thrust = B738DR_thr_goaround_N1
	fmc_cruise_mode = 1
	fmc_climb_mode = 1
	fmc_cont_mode = 1
	local alt_thrust = 0
	local alt_thrust_ratio = 0
	
	if simDR_altitude_pilot > 15000 then
		clb = "<SEL>"
		clb_1 = "     "
		clb_2 = "     "
	end
	
	-- mode TAKEOFF
	if B738DR_flight_phase == 0 then
		if sel_temp == "----" then
			if to == "<ACT>" then
				fms_N1_to_mode_sel = 1	-- mode TO
				fmc_auto_thrust = fmc_full_thrust
			elseif to_1 == "<ACT>" then
				fms_N1_to_mode_sel = 2	-- mode TO 1
				fmc_auto_thrust = fmc_full_thrust --* 0.97
			elseif to_2 == "<ACT>" then
				fms_N1_to_mode_sel = 3	-- mode TO 2
				fmc_auto_thrust = fmc_full_thrust --* 0.94
			end
		else
			if to == "<ACT>" then
				fms_N1_to_mode_sel = 4	-- mode D-TO
				fmc_auto_thrust = fmc_dto_thrust
			elseif to_1 == "<ACT>" then
				fms_N1_to_mode_sel = 5	-- mode D-TO 1
				fmc_auto_thrust = fmc_dto_thrust --* 0.97
			elseif to_2 == "<ACT>" then
				fms_N1_to_mode_sel = 6	-- mode D-TO 2
				fmc_auto_thrust = fmc_dto_thrust --* 0.94
			end
		end
		fms_N1_mode = fms_N1_to_mode_sel
		-- if simDR_radio_height_pilot_ft > B738DR_accel_alt - 300 then
			-- fmc_auto_thrust = fmc_auto_thrust * 0.96	-- 4% thrust reduction
		-- end
	
	-- mode CLIMB
	elseif B738DR_flight_phase == 1 then
		
		alt_thrust = math.max(simDR_altitude_pilot, 10000)
		alt_thrust = math.min(alt_thrust, 15000)
		
		if clb_1 == "<SEL>" then
			alt_thrust_ratio = B738_rescale(10000, 0.97, 15000, 1.00, alt_thrust)
		elseif clb_2 == "<SEL>" then
			alt_thrust_ratio = B738_rescale(10000, 0.94, 15000, 1.00, alt_thrust)
		else
			alt_thrust_ratio = 1.00
		end
		
		if clb == "<SEL>" then
			fms_N1_clb_mode_sel = 7	-- mode CLB
			fmc_auto_thrust = fmc_clb_thrust
		elseif clb_1 == "<SEL>" then
			fms_N1_clb_mode_sel = 8	-- mode CLB 1
			fmc_auto_thrust = fmc_clb_thrust * alt_thrust_ratio 	--0.97
		elseif clb_2 == "<SEL>" then
			fms_N1_clb_mode_sel = 9	-- mode CLB 2
			fmc_auto_thrust = fmc_clb_thrust * alt_thrust_ratio 	--0.94
		end
		fms_N1_mode = fms_N1_clb_mode_sel
	
	-- mode CRUISE CLIMB
	elseif B738DR_flight_phase == 3 then
		fms_N1_clb_mode_sel = 7	-- mode CLB
		fmc_auto_thrust = fmc_clb_thrust
	
	-- mode CRUISE, CRUISE DESCENT, DESCENT, APPROACH
	elseif B738DR_flight_phase == 2 
	or B738DR_flight_phase == 4 
	or B738DR_flight_phase == 5
	or B738DR_flight_phase == 6 then
		fms_N1_mode = 10	-- mode  CRZ
		fmc_auto_thrust = fmc_crz_thrust
	
	-- mode GO AROUND
	elseif B738DR_flight_phase >= 7 then
		fms_N1_mode = 11	-- mode GA
		fmc_auto_thrust = fmc_ga_thrust
	end
	
	if B738DR_eng_out == 1 then
		if B738DR_flight_phase > 0 and B738DR_flight_phase < 7 then
			fms_N1_mode = 12
			fmc_auto_thrust = fmc_con_thrust
		end
	end
	
	if vnav_status_old ~= B738DR_autopilot_vnav_status and B738DR_autopilot_vnav_status == 1 then
		auto_act = "<ACT>"
		ga_act = "     "
		con_act = "     "
		clb_act = "     "
		crz_act = "     "
	end
	vnav_status_old = B738DR_autopilot_vnav_status
	
	-- SET N1 THRUST
	if B738DR_n1_set_source == 0 then	-- N1 source AUTO
		
		if clb_act == "<ACT>" then
			alt_thrust = math.max(simDR_altitude_pilot, 10000)
			alt_thrust = math.min(alt_thrust, 15000)
			
			if clb_1 == "<SEL>" then
				alt_thrust_ratio = B738_rescale(10000, 0.97, 15000, 1.00, alt_thrust)
			elseif clb_2 == "<SEL>" then
				alt_thrust_ratio = B738_rescale(10000, 0.94, 15000, 1.00, alt_thrust)
			else
				alt_thrust_ratio = 1.00
			end
		end
		
		if auto_act == "<ACT>" then
			if fmc_auto_thrust == 0 then	-- FMC thrust not able
				B738DR_fms_N1_mode = 13
				B738DR_fms_N1_thrust = 1.00	-- full thrust
			else
				B738DR_fms_N1_mode = fms_N1_mode
				B738DR_fms_N1_thrust = fmc_auto_thrust
			end
		elseif ga_act == "<ACT>" then
			B738DR_fms_N1_mode = 11
			B738DR_fms_N1_thrust = fmc_ga_thrust
		elseif con_act == "<ACT>" then
			B738DR_fms_N1_mode = 12
			B738DR_fms_N1_thrust = fmc_con_thrust
		elseif clb_act == "<ACT>" then
			if clb == "<SEL>" then
				B738DR_fms_N1_mode = 7
				B738DR_fms_N1_thrust = fmc_clb_thrust
			elseif clb_1 == "<SEL>" then
				B738DR_fms_N1_mode = 8
				B738DR_fms_N1_thrust = fmc_clb_thrust * alt_thrust_ratio 	--0.97
			elseif clb_2 == "<SEL>" then
				B738DR_fms_N1_mode = 9
				B738DR_fms_N1_thrust = fmc_clb_thrust * alt_thrust_ratio 	--0.94
			end
		elseif crz_act == "<ACT>" then
			B738DR_fms_N1_mode = 10
			B738DR_fms_N1_thrust = fmc_crz_thrust
		end
	else
		B738DR_fms_N1_mode = 0
	end
end

function drag_timer()
	drag_timeout = 2
end

function rst_fms_msg()
	fms_msg_sound = 0
end

function B738_fmc_msg()

	local day_act = ""
	local month_act = ""
	local year_act = ""
	local date_act = 0
	local date_temp = ""
	local align_mode = 0
	local airspeed = B738DR_mcp_speed_dial	--simDR_airspeed_dial
	local throttle_idle = 0
	local day_nav = ""
	local year_nav = ""
	local date_nav = 0
	local month_nav = ""
	local ii = 0
	
	local lnav_mode = 0
	if B738DR_heading_mode > 3 and B738DR_heading_mode < 7 then
		lnav_mode = 1
	elseif B738DR_heading_mode == 8 then
		lnav_mode = 1
	elseif B738DR_heading_mode == 13 then
		lnav_mode = 1
	end
	
	if simDR_bus_volts1 > 10 or simDR_bus_volts2 > 10 then
		
		-- GPS_L_INVALID
		if B738DR_gps_pos == "-----.-------.-"  then
			if msg_gps_l_fail == 0 then
				msg_gps_l_fail = 1
				add_fmc_msg(GPS_L_INVALID, 2)
				--B738DR_fmc_message_warn = 1
			end
		end
		
		-- GPS_R_INVALID
		if B738DR_gps2_pos == "-----.-------.-"  then
			if msg_gps_r_fail == 0 then
				msg_gps_r_fail = 1
				add_fmc_msg(GPS_R_INVALID, 2)
				--B738DR_fmc_message_warn = 1
			end
		end
		
		-- GPS_LR_INVALID
		if B738DR_gps_pos == "-----.-------.-" 
		and B738DR_gps2_pos == "-----.-------.-"  then
			if msg_gps_lr_fail == 0 then
				msg_gps_lr_fail = 1
				add_fmc_msg(GPS_LR_INVALID, 1)
			end
		end
		
		-- IRS MOTION
		if B738DR_irs1_restart == 1 or B738DR_irs2_restart == 1 then
			if msg_irs_motion == 0 then
				msg_irs_motion = 1
				add_fmc_msg(IRS_MOTION, 2)
				--B738DR_fmc_message_warn = 1
			end
		end
		
		-- ENTER IRS HDG
		align_mode = 0
		if B738DR_irs_left_mode == 1 and B738DR_irs_left == 3 then
			align_mode = 1
		end
		if B738DR_irs_right_mode == 1 and B738DR_irs_right == 3 then
			align_mode = 1
		end
		if B738DR_irs_left_mode == 3 or B738DR_irs_right_mode == 3 then
			align_mode = 0
		end
		if align_mode == 1 then
			if msg_irs_hdg == 0 then
				msg_irs_hdg = 1
				add_fmc_msg(ENTER_IRS_HDG, 1)
			end
		end
		
		-- ENTER IRS POS
		align_mode = 0
		if B738DR_irs_left_mode == 1 and B738DR_irs_left == 2 and B738DR_irs_align_left == 1 then
			align_mode = 1
		end
		if B738DR_irs_right_mode == 1 and B738DR_irs_right == 2 and B738DR_irs_align_right == 1 then
			align_mode = 1
		end
		if B738DR_irs_left_mode == 2 or B738DR_irs_right_mode == 2 then
			align_mode = 0
		end
		if align_mode == 1 then
			if msg_irs_pos == 0 then
				msg_irs_pos = 1
				add_fmc_msg(ENTER_IRS_POS, 2)
				--B738DR_fmc_message_warn = 1
			end
		end
		
		-- RESET MCP ALT
		if td_idx ~= 0 and B738DR_vnav_td_dist < 6 and B738DR_altitude_mode == 5 
		and B738DR_flight_phase == 2 then	-- VNAV on and cruise phase
			if crz_alt_num > 0 and simDR_ap_altitude_dial_ft >= crz_alt_num then
				if msg_mcp_alt == 0 then
					msg_mcp_alt = 1
					add_fmc_msg(RESET_MCP_ALT, 2)
					--B738DR_fmc_message_warn = 1
				end
			end
		end
		if B738DR_altitude_mode ~= 5 then	-- VNAV off
			msg_mcp_alt = 0
		end
		
		-- DRAG REQUIRED
		if simDR_throttle1_use < 0.1 or simDR_throttle2_use < 0.1 then
			throttle_idle = 1
		end
		if B738DR_flight_phase > 4 and B738DR_flight_phase < 8 and B738DR_autopilot_vnav_status == 1 then
			
			airspeed = airspeed + 2
			if B738DR_speed_ratio > -0.2 and msg_drag_req == 0 and simDR_airspeed_pilot > airspeed then
				airspeed = airspeed + 10
				if simDR_airspeed_pilot > airspeed then
					if drag_timeout == 0 and throttle_idle == 1 then
						drag_timeout = 1
						if is_timer_scheduled(drag_timer) == false then
							run_after_time(drag_timer, 10)
						end
					end
					if drag_timeout == 2 then
						msg_drag_req = 1
						add_fmc_msg(DRAG_REQUIRED, 1)
					end
				end
			else
				if is_timer_scheduled(drag_timer) == true then
					stop_timer(drag_timer)
					drag_timeout = 0
				end
				if simDR_airspeed_pilot <= airspeed and drag_timeout == 2 then
					msg_drag_req = 0
					drag_timeout = 0
				end
			end
			
		else
			if is_timer_scheduled(drag_timer) == true then
				stop_timer(drag_timer)
			end
			drag_timeout = 0
			msg_drag_req = 0
		end
		
		if msg_nav_data == 0 then
			day_act = os.date("%d")
			month_act = os.date("%m")
			year_act = os.date("%Y")
			date_act = tonumber(year_act .. month_act .. day_act)
			if string.len(airac_navdata_active) < 13 then
				date_nav = 0
			else
				year_nav = string.sub(airac_navdata_active, 12, 13) -- year
				date_temp = string.sub(airac_navdata_active, 6, 8) -- month
				for ii = 1, 12 do
					if date_temp == month_table[ii][1] then
						month_nav = month_table[ii][2]
						break
					end
				end
				day_nav = string.sub(airac_navdata_active, 9, 10) -- day
				date_nav = tonumber("20" .. year_nav .. month_nav .. day_nav)
			end
			if date_nav == 0 then
				msg_nav_data = 3
			elseif date_act > date_nav then
				msg_nav_data = 1
			else
				msg_nav_data = 2
			end
		end
		
		if msg_nav_data == 1 then
			msg_nav_data = 2
			add_fmc_msg(NAV_DATA_OF_DATE, 2)
			--B738DR_fmc_message_warn = 1
		elseif msg_nav_data == 3 then
			msg_nav_data = 4
			add_fmc_msg(CORRUPTED_NAVDATA, 2)
			--B738DR_fmc_message_warn = 1
		end
		
		-- UNABLE CRZ ALT
		if B738DR_flight_phase < 2 or B738DR_flight_phase == 3 then
			if tc_idx > td_idx then
				if msg_unavaible_crz_alt == 0 then
					msg_unavaible_crz_alt = 1
					add_fmc_msg(UNABLE_CRUISE_ALT, 1)
				end
			else
				if tc_idx == td_idx and dist_tc > B738DR_vnav_td_dist then
					if msg_unavaible_crz_alt == 0 then
						msg_unavaible_crz_alt = 1
						add_fmc_msg(UNABLE_CRUISE_ALT, 1)
					end
				end
			end
		end
		
		-- CONFIG SAVED
		-- if entry == CONFIG_SAVED and fms_msg_cfg_saved == 0 then
			-- fms_msg_cfg_saved = 1
			-- fms_msg_sound = 1
		-- end
		
		-- TAI ABOVE 10 C
		if simDR_TAT > 10 then
			if simDR_cowl_ice_0_on == 1 or simDR_cowl_ice_1_on == 1 then
				if msg_tai_above_10 == 0 then
					msg_tai_above_10 = 1
					add_fmc_msg(TAI_ON_ABOVE_10C, 1)
				end
			else
				msg_tai_above_10 = 0
			end
		end
		-- DISCONTINUITY
		if string.sub(B738DR_fpln_nav_id, 1, 7) == "DISCONT" then
			if lnav_mode == 1 then
				B738DR_lnav_disconnect = 1
				--B738DR_vnav_disconnect = 1
				add_fmc_msg(DISCON, 2)
				--B738DR_fmc_message_warn = 1
			end
			B738DR_vnav_disconnect = 1
		end
		
		-- ABOVE MAX CERT ALT
		if simDR_altitude_pilot > 41200 then
			if msg_above_max == 0 then
				msg_above_max = 1
				add_fmc_msg(ABOVE_MAX_CERT_ALT, 1)
			end
		end
		if simDR_altitude_pilot < 41000 then
			msg_above_max = 0
		end
	
		-- APPRCH VREF NOT SELECTED
		if B738DR_flight_phase > 4 and B738DR_flight_phase < 8 and B738DR_spd_ref == 0 then
			if simDR_gear_retract > 0.1 and simDR_flaps_ratio > 0.624 then	-- gear down, flaps >= 15
				if app_flap == "--" and msg_vref_not_sel == 0 then
					msg_vref_not_sel = 1
					add_fmc_msg(APPRCH_VREF_NOT_SELECTED, 1)
				end
			end
		else
			msg_vref_not_sel = 0
		end
		
		-- LNAV DISCONNECT
		if legs_num < 1 then
			if lnav_mode == 1 then
				B738DR_lnav_disconnect = 1
				--B738DR_vnav_disconnect = 1
				add_fmc_msg(LNAV_DISCON, 2)
				--B738DR_fmc_message_warn = 1
			end
			B738DR_vnav_disconnect = 1
		end
		if legs_num < 1 then
			B738DR_end_route = 1
		else
			B738DR_end_route = 0
		end
		
		if crz_alt_num > 0 and legs_num > 0 and offset > 0 and perf_exec > 1 and ref_icao ~= "----" and des_icao ~= "****" then
			B738DR_no_perf = 0
		else
			B738DR_no_perf = 1
		end
		
		-- USING_RSV_FUEL
		local res_fuel = tonumber(reserves_kgs)
		local disable_rsv_fuel = 0
		if simDR_radio_height_pilot_ft < 50 then
			disable_rsv_fuel = 1
		elseif res_fuel == nil then
			disable_rsv_fuel = 1
		elseif legs_num < 2 then
			disable_rsv_fuel = 1
		elseif legs_data[legs_num][40] == 0 then
			disable_rsv_fuel = 1
		end
		if disable_rsv_fuel == 0 then
			res_fuel = res_fuel * 1000
			if legs_data[legs_num][40] < res_fuel then
				if msg_using_rsv_fuel == 0 then
					msg_using_rsv_fuel = 1
					add_fmc_msg(USING_RSV_FUEL, 1)
				end
			end
		else
			msg_using_rsv_fuel = 0
		end
		
		-- UNABLE_REQ_NAV_PERF
		local rnp_timer_max = 30 * 1.5
		if B738DR_flight_phase > 5 then
			rnp_timer_max = 10 * 1.5
		end
		
		local run_rnp_timer = 0
		local alert_ignore = 0
		if offset <= legs_num and offset > 0 then
			if legs_data[offset][31] == "CF" or legs_data[offset][31] == "DF" or legs_data[offset][31] == "PI" then
				alert_ignore = 1
			end
			if legs_data[offset][31] == "HA" or legs_data[offset][31] == "HF" or legs_data[offset][31] == "HM" then
				alert_ignore = 1
			end
			if legs_intdir_act == 1 then
				alert_ignore = 1
			end
		end
		
		if rnp_lock_time > 0 then
			rnp_lock_time = rnp_lock_time - SIM_PERIOD
		end
		if rnp_lock_time < 0 then
			rnp_lock_time = 0
		end
		
		if simDR_radio_height_pilot_ft > 50 then
			if B738DR_anp > B738DR_rnp and legs_num > 1 and lnav_mode == 1 then
				run_rnp_timer = 1
			end
		end
		if legs_num > 1 and fmc_align == 0 and align_mode == 0 then
			run_rnp_timer = 1
		end
		
		if run_rnp_timer == 0 or rnp_lock_time ~= 0 or msg_rnp_alert == 1 then
			if is_timer_scheduled(rnp_timer) == true then
				stop_timer(rnp_timer)
			end
		else
			if is_timer_scheduled(rnp_timer) == false and msg_rnp_alert == 0 and alert_ignore == 0 then
				run_after_time(rnp_timer, rnp_timer_max)
			end
		end
		if rnp_alert == 1 and msg_rnp_alert == 0 then
			msg_rnp_alert = 1
			rnp_alert = 0
			add_fmc_msg(UNABLE_REQ_NAV_PERF, 2)
			--B738DR_fmc_message_warn = 1
		end
		ii = B738DR_anp + 0.2
		if ii < B738DR_rnp and simDR_radio_height_pilot_ft > 50 then
			msg_rnp_alert = 0
		end
		
	end
	
	
	B738DR_fms_msg_sound = fms_msg_sound
	if fms_msg_sound == 1 then
		if is_timer_scheduled(rst_fms_msg) == false then
			run_after_time(rst_fms_msg, 1)
		end
	end
	
	if fmc_message_num > 255 then
		fmc_message_num = 255
	end
	
	-- FMCs message light
	fmc1_msg_light = 0
	fmc2_msg_light = 0
	
	if fmc1_msg_alt == 1 then
		fmc1_msg_light = 1
	end
	if fmc2_msg_alt == 0 then
		fmc2_msg_light = 0
	elseif fmc2_msg_alt == 1 then
		fmc2_msg_light = 1
	end
	
	if fmc_message_num > 0 then
		fmc1_msg_light = 1
		fmc2_msg_light = 1
	else
		fmc1_msg_light = 0
		fmc2_msg_light = 0
		fmc_message_warn_dis = 0
		B738DR_fmc_message_warn = 0
	end
	
	B738DR_fmc_message = fmc1_msg_light
	
	--B738DR_fmc_message2 = fmc2_msg_light		-- FMC2


end

function rnp_timer()
	rnp_alert = 1
end

function add_fmc_msg(msg_idx, msg_annun)
	
	local ii = 0
	local no_fmc_message_warn = 1
	if fmc_message_num > 0 then
		for ii = 1, fmc_message_num do
			if fmc_message_warn[ii] > 1 then
				no_fmc_message_warn = 0
			end
		end
	end
	if no_fmc_message_warn == 1 then
		fmc_message_warn_dis = 0
	end
	if msg_annun == 2 then
		B738DR_fmc_message_warn = 1
	end
	
	fms_msg_sound = 1
	fmc_message_num = fmc_message_num + 1
	if fmc_message_num > 255 then
		fmc_message_num = 255
	end
	fmc_message[fmc_message_num] = msg_idx
	fmc_message_warn[fmc_message_num] = msg_annun
	
	simCMD_nosmoking_toggle:once()
	
end

function B738DR_checklist()

	local to_flaps_set = 0
	if B738DR_fms_takeoff_flaps > 0 then
		if B738DR_fms_takeoff_flaps == 1 and simDR_flaps_ratio == 0.125 then
			to_flaps_set = 1
		elseif B738DR_fms_takeoff_flaps == 5 and simDR_flaps_ratio == 0.375 then
			to_flaps_set = 1
		elseif B738DR_fms_takeoff_flaps == 10 and simDR_flaps_ratio == 0.5 then
			to_flaps_set = 1
		elseif B738DR_fms_takeoff_flaps == 15 and simDR_flaps_ratio == 0.625 then
			to_flaps_set = 1
		elseif B738DR_fms_takeoff_flaps == 25 and simDR_flaps_ratio == 0.75 then
			to_flaps_set = 1
		end
	end
	B738DR_takeoff_flaps_set = to_flaps_set
	
	local app_flaps_set = 0
	if B738DR_fms_approach_flaps > 0 then
		if B738DR_fms_approach_flaps == 15 and simDR_flaps_ratio == 0.625 then
			app_flaps_set = 1
		elseif B738DR_fms_approach_flaps == 30 and simDR_flaps_ratio == 0.875 then
			app_flaps_set = 1
		elseif B738DR_fms_approach_flaps == 40 and simDR_flaps_ratio == 1 then
			app_flaps_set = 1
		end
	end
	B738DR_approach_flaps_set = app_flaps_set
	
	local to_trim_set = 0
	local trim_xxx = 0
	local trim_yyy = simDR_elevator_trim
	local trim_aaa = 0
	if B738DR_trim_calc > 0 and B738DR_trim_calc < 15 then
		trim_yyy = trim_yyy + 1
		trim_xxx = B738_rescale(0, 0, 1.588244, 15, trim_yyy) - 1
		trim_aaa = B738DR_trim_calc - trim_xxx
		if trim_aaa < 0 then
			trim_aaa = -trim_aaa
		end
		if trim_aaa <= 0.15 then
			to_trim_set = 1
		end
	end
	--DR_test = trim_xxx
	B738DR_trim_set = to_trim_set
	
end

function B738_des_now()
	
	local des_now_nm = 0
	local tod_nm = 100
	
	if crz_alt_num >= 15000 then
		des_now_nm = B738_rescale(15000, 10, 41000, 70, crz_alt_num)
	end
	
	des_now_enable = 0
	if B738DR_flight_phase == 2 and B738DR_autopilot_vnav_status == 1 
	and des_now_nm ~= 0 and B738DR_vnav_td_dist < des_now_nm then
		des_now_enable = 1
	end
	
end

function calc_hold_dist(idx_hld)
	
	local x_temp = 0
	local y_temp = 0
	
	local x_lenght = 0
	local x_speed = legs_data[idx_hld][4]
	
	if x_speed == 0 then
		x_speed = 230
	end
	
	if string.len(legs_data[idx_hld][30]) == 4 then
		if string.sub(legs_data[idx_hld][30], 1, 1) == "T" then
			-- Time
			x_temp = tonumber(string.sub(legs_data[idx_hld][30], 2, 3))
			y_temp = (tonumber(string.sub(legs_data[idx_hld][30], 4, 4))) / 10
			x_temp = x_temp + y_temp
			x_lenght = x_temp * 60	-- in seconds
			x_lenght = (x_speed * 0.51444 * x_lenght) / 1852	-- in NM 
		else
			-- Distance
			x_temp = tonumber(legs_data[idx_hld][30])
			if x_temp ~= nil then
				x_lenght = x_temp / 10
			end
		end
	else
		-- default hold_time == 1.5 min
		x_lenght = (x_speed * 0.51444 * 90) / 1852	-- in NM 
	end
	
	return x_lenght

end

function calc_hold_dist2(idx_hld)
	
	local x_temp = 0
	local y_temp = 0
	
	local x_lenght = 0
	local x_speed = legs_data2[idx_hld][4]
	
	if x_speed == 0 then
		x_speed = 230
	end
	
	if string.len(legs_data2[idx_hld][30]) == 4 then
		if string.sub(legs_data2[idx_hld][30], 1, 1) == "T" then
			-- Time
			x_temp = tonumber(string.sub(legs_data2[idx_hld][30], 2, 3))
			y_temp = (tonumber(string.sub(legs_data2[idx_hld][30], 4, 4))) / 10
			x_temp = x_temp + y_temp
			x_lenght = x_temp * 60	-- in seconds
			x_lenght = (x_speed * 0.51444 * x_lenght) / 1852	-- in NM 
		else
			-- Distance
			x_temp = tonumber(legs_data2[idx_hld][30])
			if x_temp ~= nil then
				x_lenght = x_temp / 10
			end
		end
	else
		-- default hold_time == 1.5 min
		x_lenght = (x_speed * 0.51444 * 90) / 1852	-- in NM 
	end
	
	return x_lenght

end

function calc_hold_spd(ahold_alt)
	
	local ahold_spd = 0
	if ahold_alt <= 14000 then
		ahold_spd = 230
	elseif ahold_alt <= 20000 then
		ahold_spd = 240
	else
		ahold_spd = 265
	end
	
	return ahold_spd
	
end

function calc_hold_rad(ahold_alt)
	
	local ahold_rad = 0
	if ahold_alt <= 14000 then
		ahold_rad = 2.0
	elseif ahold_alt <= 20000 then
		ahold_rad = 2.0
	else
		ahold_rad = 2.0
	end
	
	return ahold_rad
	
end


function B738_displ_acf()
	
	local nd_lat_acf = math.rad(ndx_lat)
	local nd_lon_acf = math.rad(ndx_lon)
	local nd_lat = 0
	local nd_lon = 0
	local mag_hdg = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	local nd_hdg = 0
	local delta_hdg = 0
	local nd_zoom = 0
	
	if ref_icao == "----" or des_icao == "****" then
		legs_num = 0
	end
	
	if legs_num > 0 then 
		
		if legs_step > legs_num2 then
			legs_step = legs_num2
		end
		
		if legs_step2 > legs_num2 then
			legs_step2 = legs_num2
		end
		
		-- CAPTAIN
		if B738DR_capt_map_mode == 3 then
			if legs_step == 0 then
				nd_lat = math.rad(legs_data2[1][7])
				nd_lon = math.rad(legs_data2[1][8])
			else
				nd_lat = math.rad(legs_data2[legs_step][7])
				nd_lon = math.rad(legs_data2[legs_step][8])
			end
			mag_hdg = -simDR_mag_variation
		
			nd_lat2 = nd_lat_acf
			nd_lon2 = nd_lon_acf
			
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			
			if nd_dis < 645 then
				
				nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
				nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
				nd_hdg = math.atan2(nd_y, nd_x)
				nd_hdg = math.deg(nd_hdg)
				nd_hdg = (nd_hdg + 360) % 360
				
				delta_hdg = ((((nd_hdg - mag_hdg) % 360) + 540) % 360) - 180
				
				if delta_hdg >= 0 and delta_hdg <= 90 then
					-- right
					delta_hdg = 90 - delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y = nd_dis * math.sin(delta_hdg)
					nd_x = nd_dis * math.cos(delta_hdg)
				elseif delta_hdg < 0 and delta_hdg >= -90 then
					-- left
					delta_hdg = 90 + delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y = nd_dis * math.sin(delta_hdg)
					nd_x = -nd_dis * math.cos(delta_hdg)
				elseif delta_hdg >= 90 then
					-- right back
					delta_hdg = delta_hdg - 90
					delta_hdg = math.rad(delta_hdg)
					nd_y = -nd_dis * math.sin(delta_hdg)
					nd_x = nd_dis * math.cos(delta_hdg)
				elseif delta_hdg <= -90 then
					-- left back
					delta_hdg = -90 - delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y = -nd_dis * math.sin(delta_hdg)
					nd_x = -nd_dis * math.cos(delta_hdg)
				end
				
				if B738DR_efis_map_range_capt == 0 then	-- 5 NM
					nd_zoom = 2
				elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
					nd_zoom = 1
				elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
					nd_zoom = 0.5
				elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
					nd_zoom = 0.25
				elseif B738DR_efis_map_range_capt == 4 then	-- 80 NM
					nd_zoom = 0.125
				elseif B738DR_efis_map_range_capt == 5 then	-- 160 NM
					nd_zoom = 0.0625
				elseif B738DR_efis_map_range_capt == 6 then	-- 320 NM
					nd_zoom = 0.03125
				else	-- 640 NM
					nd_zoom = 0.015625
				end
				
				nd_zoom = nd_zoom / 2
				
				nd_x = nd_x * nd_zoom		-- zoom
				nd_y = nd_y * nd_zoom		-- zoom
				nd_y = nd_y + 4.1	-- adjust center
				
				B738DR_acf_show = 1
				B738DR_acf_x = nd_x
				B738DR_acf_y = nd_y
				if simDR_radio_height_pilot_ft > 50 then
					B738DR_acf_rot = ndx_mag_hdg
				else
					B738DR_acf_rot = ndx_ahars_mag_hdg
				end
			else
				B738DR_acf_show = 0
			end
		else
			B738DR_acf_show = 0
		end
		
		-- FIRST OFFICER
		if B738DR_fo_map_mode == 3 then
			
			if legs_step2 == 0 then
				nd_lat = math.rad(legs_data2[1][7])
				nd_lon = math.rad(legs_data2[1][8])
			else
				nd_lat = math.rad(legs_data2[legs_step2][7])
				nd_lon = math.rad(legs_data2[legs_step2][8])
			end
			
			mag_hdg = -simDR_mag_variation
		
			nd_lat2 = nd_lat_acf
			nd_lon2 = nd_lon_acf
			
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			
			if nd_dis < 645 then
				
				nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
				nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
				nd_hdg = math.atan2(nd_y, nd_x)
				nd_hdg = math.deg(nd_hdg)
				nd_hdg = (nd_hdg + 360) % 360
				
				delta_hdg = ((((nd_hdg - mag_hdg) % 360) + 540) % 360) - 180
				
				if delta_hdg >= 0 and delta_hdg <= 90 then
					-- right
					delta_hdg = 90 - delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y = nd_dis * math.sin(delta_hdg)
					nd_x = nd_dis * math.cos(delta_hdg)
				elseif delta_hdg < 0 and delta_hdg >= -90 then
					-- left
					delta_hdg = 90 + delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y = nd_dis * math.sin(delta_hdg)
					nd_x = -nd_dis * math.cos(delta_hdg)
				elseif delta_hdg >= 90 then
					-- right back
					delta_hdg = delta_hdg - 90
					delta_hdg = math.rad(delta_hdg)
					nd_y = -nd_dis * math.sin(delta_hdg)
					nd_x = nd_dis * math.cos(delta_hdg)
				elseif delta_hdg <= -90 then
					-- left back
					delta_hdg = -90 - delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y = -nd_dis * math.sin(delta_hdg)
					nd_x = -nd_dis * math.cos(delta_hdg)
				end
				
				if B738DR_efis_map_range_fo == 0 then	-- 5 NM
					nd_zoom = 2
				elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
					nd_zoom = 1
				elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
					nd_zoom = 0.5
				elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
					nd_zoom = 0.25
				elseif B738DR_efis_map_range_fo == 4 then	-- 80 NM
					nd_zoom = 0.125
				elseif B738DR_efis_map_range_fo == 5 then	-- 160 NM
					nd_zoom = 0.0625
				elseif B738DR_efis_map_range_fo == 6 then	-- 320 NM
					nd_zoom = 0.03125
				else	-- 640 NM
					nd_zoom = 0.015625
				end
				
				nd_zoom = nd_zoom / 2
				
				nd_x = nd_x * nd_zoom		-- zoom
				nd_y = nd_y * nd_zoom		-- zoom
				nd_y = nd_y + 4.1	-- adjust center
				
				B738DR_acf_fo_show = 1
				B738DR_acf_x_fo = nd_x
				B738DR_acf_y_fo = nd_y
				if simDR_radio_height_pilot_ft > 50 then
					B738DR_acf_rot_fo = ndx_mag_hdg
				else
					B738DR_acf_rot_fo = ndx_ahars_mag_hdg
				end
			else
				B738DR_acf_fo_show = 0
			end
		else
			B738DR_acf_fo_show = 0
		end
	else
		B738DR_acf_show = 0
		B738DR_acf_fo_show = 0
	end
	
end

function B738_displ_wpt()


	-- local nd_lat = math.rad(simDR_latitude) 
	-- local nd_lon = math.rad(simDR_longitude) 
	local nd_lat = math.rad(ndx_lat)
	local nd_lon = math.rad(ndx_lon)
	local mag_hdg = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	local nd_hdg = 0
	local delta_hdg = 0
	local nd_on_off = 0
	local nd_zoom = 0
	local nd_corr = 0
	local n = 0
	local obj = 0
	local max_obj = 20
	local obj_enable = 0
	local nav_disable = 0
	local txt_white_id = ""
	local txt_white_alt = ""
	local txt_white_eta = ""
	local txt_cyan_id = ""
	local txt_cyan_alt = ""
	local txt_cyan_eta = ""
	local wpt_type = 0
	
	local tmp_wpt_alt = 0
	local tmp_wpt_type = 0
	local wpt_data = 0
	local tmp_wpt_eta = ""
	local tmp_wpt_eta2 = 0
	local tmp_wpt_eta3 = 0
	
	local wpt_from = 0
	local wpt_to = 0
	
	local rte_act_enable = 0
	local rte_act_enable_fo = 0
	local rte_dist = 0
	local rte_n = 0
	local rte_plan_mode = 0
	local nd_x0 = 0
	local nd_y0 = 0
	
	local nd_dist_dir = 0
	local obj2 = 0
	local rte_act_enable2 = 0
	local rte_act_enable2_fo = 0
	--local rte_calc_enable2_fo = 0
	
	local hold_obj = 0
	local hold_obj_fo = 0
	
	B738DR_rte_show_act = 0
	B738DR_rte_fo_show_act = 0
	
	if ref_icao == "----" or des_icao == "****" then
		legs_num = 0
	end
	
	if legs_num > 0 then 
		
		
		if offset > legs_num then
			offset = legs_num
		end
		if offset == 0 then
			offset = 1
		end
		
		if legs_step > legs_num2 then
			legs_step = legs_num2
		end
		
		if legs_step2 > legs_num2 then
			legs_step2 = legs_num2
		end
		
		-- CAPTAIN
		if B738DR_capt_map_mode == 3 then
			if legs_step == 0 then
				nd_lat = math.rad(legs_data2[1][7])
				nd_lon = math.rad(legs_data2[1][8])
			else
				nd_lat = math.rad(legs_data2[legs_step][7])
				nd_lon = math.rad(legs_data2[legs_step][8])
			end
			-- if legs_step == 0 then
				-- nd_lat = math.rad(legs_data[1][7])
				-- nd_lon = math.rad(legs_data[1][8])
			-- else
				-- nd_lat = math.rad(legs_data[legs_step][7])
				-- nd_lon = math.rad(legs_data[legs_step][8])
			-- end
			mag_hdg = -simDR_mag_variation
			if offset == 1 then
				wpt_from = 1
			else
				wpt_from = offset - 1
			end
			rte_plan_mode = 1
		elseif B738DR_capt_map_mode == 2 then
			-- if B738DR_capt_map_mode < 2 then
				-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				-- if B738DR_capt_map_mode == 1 and B738DR_capt_exp_map_mode == 0 then
					-- nav_disable = 1
				-- end
				
			-- else
				if B738DR_track_up == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					if B738DR_track_up_active == 0 then
						mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
					else
						mag_hdg = ndx_mag_hdg - simDR_mag_variation
					end
				end
			-- end
			rte_plan_mode = 0
			wpt_from = offset
		else
			nav_disable = 1
		end
		
		if des_app == "------" then
			wpt_to = legs_num + 1
		else
			wpt_to = legs_num
		end
		
		if nav_disable == 0 then
			for n = wpt_from, wpt_to do
			
			if legs_data[n][1] ~= "DISCONTINUITY" then --and legs_data[n][1] ~= "VECTOR" then
				
				if last_lat == 0 and last_lon == 0 then
					nd_lat2 = math.rad(legs_data[n][7])
					nd_lon2 = math.rad(legs_data[n][8])
				else
					nd_lat2 = math.rad(legs_data[n][7])
					nd_lon2 = math.rad(legs_data[n][8])
				end
				
				nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
				
				if nd_dis < 645 then
					
					nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
					nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
					nd_hdg = math.atan2(nd_y, nd_x)
					nd_hdg = math.deg(nd_hdg)
					nd_hdg = (nd_hdg + 360) % 360
					
					delta_hdg = ((((nd_hdg - mag_hdg) % 360) + 540) % 360) - 180
					
					if delta_hdg >= 0 and delta_hdg <= 90 then
						-- right
						nd_on_off = 1
						delta_hdg = 90 - delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = nd_dis * math.sin(delta_hdg)
						nd_x = nd_dis * math.cos(delta_hdg)
					elseif delta_hdg < 0 and delta_hdg >= -90 then
						-- left
						nd_on_off = 1
						delta_hdg = 90 + delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = nd_dis * math.sin(delta_hdg)
						nd_x = -nd_dis * math.cos(delta_hdg)
					elseif delta_hdg >= 90 then
						-- right back
						nd_on_off = 1
						delta_hdg = delta_hdg - 90
						delta_hdg = math.rad(delta_hdg)
						nd_y = -nd_dis * math.sin(delta_hdg)
						nd_x = nd_dis * math.cos(delta_hdg)
					elseif delta_hdg <= -90 then
						-- left back
						nd_on_off = 1
						delta_hdg = -90 - delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = -nd_dis * math.sin(delta_hdg)
						nd_x = -nd_dis * math.cos(delta_hdg)
					end
					
					if B738DR_efis_map_range_capt == 0 then	-- 5 NM
						nd_zoom = 2
					elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
						nd_zoom = 1
					elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
						nd_zoom = 0.5
					elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
						nd_zoom = 0.25
					elseif B738DR_efis_map_range_capt == 4 then	-- 80 NM
						nd_zoom = 0.125
					elseif B738DR_efis_map_range_capt == 5 then	-- 160 NM
						nd_zoom = 0.0625
					elseif B738DR_efis_map_range_capt == 6 then	-- 320 NM
						nd_zoom = 0.03125
					else	-- 640 NM
						nd_zoom = 0.015625
						--nd_on_off = 0
					end
					
					if rte_plan_mode == 1 then
						nd_zoom = nd_zoom / 2
					end
					
					nd_x = nd_x * nd_zoom		-- zoom
					nd_y = nd_y * nd_zoom		-- zoom
					if B738DR_capt_map_mode == 3 then
						nd_y = nd_y + 4.1	-- adjust center
					elseif B738DR_capt_map_mode == 0 and B738DR_capt_exp_map_mode == 0 then
						nd_y = nd_y + 4.1	-- adjust center
					else
						if B738DR_capt_map_mode == 3 then
							nd_y = nd_y + 4.1	-- adjust
						end
					end
					
					-- if nd_x < -8.0 or nd_x > 8.0 then
						-- nd_on_off = 0
					-- end
					-- if nd_y > 11.0 or nd_y < -2 then
						-- nd_on_off = 0
					-- end
					if n < legs_num then
						if B738DR_efis_map_range_capt == 0 and
							(legs_data[n+1][31] == "HA" or legs_data[n+1][31] == "HF" or legs_data[n+1][31] == "HM") then
							if nd_x < -22.0 or nd_x > 22.0 then
								nd_on_off = 0
							end
							if nd_y > 22.0 or nd_y < -22.0 then
								nd_on_off = 0
							end
						else
							if nd_x < -15.0 or nd_x > 15.0 then
								nd_on_off = 0
							end
							if nd_y > 15.0 or nd_y < -15.0 then
								nd_on_off = 0
							end
						end
					else
						if nd_x < -15.0 or nd_x > 15.0 then
							nd_on_off = 0
						end
						if nd_y > 15.0 or nd_y < -15.0 then
							nd_on_off = 0
						end
					end
					
					if nd_on_off == 1 then
						-- WAYPOINTS and ROUTE
						if obj < max_obj then	-- max number displayed objects
							B738DR_wpt_x[obj] = nd_x
							B738DR_wpt_y[obj] = nd_y
							
							-- DRAW ROUTE
							if n > 0 then --and n <= legs_num then
								rte_n = legs_num + 1
								if n == rte_n then
									-- DES ICAO
									B738DR_rte_show[obj] = 0
									if legs_num > 1 then
										rte_act_enable = 1
									end
								else
									if legs_num == 1 then
										B738DR_rte_show[obj] = 0
									else
										B738DR_rte_show[obj] = 1
										B738DR_rte_x[obj] = nd_x
										B738DR_rte_y[obj] = nd_y
										if B738DR_missed_app_act == 0 and (n+1) >= first_miss_app_idx and (n+1) <= last_miss_app_idx then
											B738DR_rte_edit[obj] = 2
										else
											B738DR_rte_edit[obj] = 0
										end
										
										if legs_intdir_act == 0 then
											if legs_data[n+1][1] == "VECTOR" then
												--B738DR_rte_rot[obj] = (math.deg(legs_data[n+1][2]) - mag_hdg - simDR_mag_variation + 360) % 360
												B738DR_rte_rot[obj] = (math.deg(legs_data[n+1][2]) - mag_hdg + 360) % 360
												rte_dist = 15
											else
												B738DR_rte_rot[obj] = (math.deg(legs_data[n+1][2]) - mag_hdg ) % 360
												rte_dist = legs_data[n+1][3] * nd_zoom
												rte_dist = math.min(rte_dist, 15)
											end
										else
											if legs_data[n+1][1] == "VECTOR" then
												B738DR_rte_rot[obj] = (math.deg(legs_data[n+1][2]) - mag_hdg + 360) % 360
												rte_dist = 15
											else
												B738DR_rte_rot[obj] = (math.deg(legs_data[n+1][2]) - mag_hdg ) % 360
												rte_dist = legs_data[n+1][3] * nd_zoom
												rte_dist = math.min(rte_dist, 15)
											end
										end
										if n == legs_num and first_miss_app_idx > 0 then
											rte_dist = 0
										end
										B738DR_rte_dist[obj] = rte_dist
										--if hold_obj < 5 and n ~= offset then
										if hold_obj < 5 then
											
											if legs_data[n+1][31] == "HA" or legs_data[n+1][31] == "HF" or legs_data[n+1][31] == "HM" then
											
												if B738DR_missed_app_act == 0 and (n+1) >= first_miss_app_idx and (n+1) <= last_miss_app_idx then
													rte_dist = 30	-- blue
												else
													rte_dist = 0
												end
											
											--if legs_data[n+1][31] == "HA" or legs_data[n+1][31] == "HF" or legs_data[n+1][31] == "HM" then
												B738DR_hold_x[hold_obj] = nd_x
												B738DR_hold_y[hold_obj] = nd_y
												B738DR_hold_crs[hold_obj] = ((tonumber(legs_data[n+1][29]) / 10) - mag_hdg + 360) % 360
												if B738DR_efis_map_range_capt == 0 then	-- 5 NM
													B738DR_hold_type[hold_obj] = legs_data[n+1][21] + 1 + rte_dist
													B738DR_hold_dist[hold_obj] = calc_hold_dist(n+1)
												elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
													B738DR_hold_type[hold_obj] = legs_data[n+1][21] + 3 + rte_dist
													B738DR_hold_dist[hold_obj] = calc_hold_dist(n+1)
												elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
													B738DR_hold_type[hold_obj] = legs_data[n+1][21] + 5 + rte_dist
													B738DR_hold_dist[hold_obj] = calc_hold_dist(n+1)
												elseif B738DR_efis_map_range_capt >= 3 then	-- 40 NM
													B738DR_hold_type[hold_obj] = legs_data[n+1][21] + 7 + rte_dist
												end
												hold_obj = hold_obj + 1
											end
										end
									end
								end
								if legs_num > 1 then
									if rte_plan_mode == 0 then
										if obj == 0 and n == offset then	--n == wpt_from then
											B738DR_rte_show_act = 1
											B738DR_rte_x_act = nd_x
											B738DR_rte_y_act = nd_y
											if legs_intdir_act == 0 then
												B738DR_rte_rot_act = (math.deg(legs_data[n][2]) - mag_hdg + 180) % 360
												rte_dist = legs_data[n][3] * nd_zoom
												rte_dist = math.min(rte_dist, 15)
											else
												B738DR_rte_rot_act = (simDR_fmc_trk - mag_hdg + 180) % 360
												--rte_dist = 15
												rte_dist = simDR_fmc_dist * nd_zoom
												if rte_dist > 15 then
													rte_dist = 15
												end
											end
											B738DR_rte_dist_act = rte_dist
											rte_act_enable = 1
										end
									else
										if n <= legs_step and obj == 0 and n > 1 then
											rte_act_enable = 1
											B738DR_rte_show_act = 1
											B738DR_rte_x_act = nd_x
											B738DR_rte_y_act = nd_y
											B738DR_rte_rot_act = (math.deg(legs_data[n][2]) - mag_hdg + 180) % 360
											rte_dist = legs_data[n][3] * nd_zoom
											rte_dist = math.min(rte_dist, 15)
											B738DR_rte_dist_act = rte_dist
										end
									end
									if n == offset then
										if hold_obj < 5 then
											rte_dist = 0
											if legs_data[n][31] == "HA" or legs_data[n][31] == "HF" or legs_data[n][31] == "HM" then
												B738DR_hold_x[hold_obj] = nd_x
												B738DR_hold_y[hold_obj] = nd_y
												B738DR_hold_crs[hold_obj] = ((tonumber(legs_data[n][29]) / 10) - mag_hdg + 360) % 360
												if B738DR_efis_map_range_capt == 0 then	-- 5 NM
													B738DR_hold_type[hold_obj] = legs_data[n][21] + 1
													B738DR_hold_dist[hold_obj] = calc_hold_dist(n)
												elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
													B738DR_hold_type[hold_obj] = legs_data[n][21] + 3
													B738DR_hold_dist[hold_obj] = calc_hold_dist(n)
												elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
													B738DR_hold_type[hold_obj] = legs_data[n][21] + 5
													B738DR_hold_dist[hold_obj] = calc_hold_dist(n)
												elseif B738DR_efis_map_range_capt >= 3 then	-- 40 NM
													B738DR_hold_type[hold_obj] = legs_data[n][21] + 7
												end
												hold_obj = hold_obj + 1
											end
										end
									end
								end
							end
							
							-- WAYPOINTS
							if n == offset then
								txt_white_id = ""
								txt_white_alt = ""
								txt_white_eta = ""
								txt_cyan_id = legs_data[n][1]
								if legs_data[n][13] <= 0 then
									tmp_wpt_eta = "--.--Z"
								else
									tmp_wpt_eta2 = math.floor(legs_data[n][13])
									tmp_wpt_eta3 = (legs_data[n][13] - tmp_wpt_eta2) * 60
									tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. "."
									tmp_wpt_eta = tmp_wpt_eta .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
									tmp_wpt_eta = tmp_wpt_eta .. "Z"
								end
								
								if B738DR_efis_data_capt_status == 1 then
									wpt_data = 0
									if legs_data[n][5] > 0 then
										tmp_wpt_alt = legs_data[n][5]
										tmp_wpt_type = legs_data[n][6]
										wpt_data = 1
									elseif legs_data[n][11] > 0 then
										tmp_wpt_alt = legs_data[n][11]
										tmp_wpt_type = 32
										wpt_data = 1
									end
									if wpt_data == 1 then
										if B738DR_flight_phase < 5 then
											if tmp_wpt_alt > B738DR_trans_alt then
												txt_cyan_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											else
												txt_cyan_alt = string.format("%5d", tmp_wpt_alt)
											end
										else
											if tmp_wpt_alt > B738DR_trans_lvl then
												txt_cyan_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											else
												txt_cyan_alt = string.format("%5d", tmp_wpt_alt)
											end
										end
										if tmp_wpt_type == 43 then	-- Above
											txt_cyan_alt = txt_cyan_alt .. "A"
										elseif tmp_wpt_type == 45 then	-- Below
											txt_cyan_alt = txt_cyan_alt .. "B"
										end
										txt_cyan_eta = tmp_wpt_eta		--"--.--Z"
									else
										txt_cyan_alt = ""
										txt_cyan_eta = ""
									end
								else
									txt_cyan_alt = ""
									txt_cyan_eta = ""
								end
								if legs_data[n][32] == 0 then
									wpt_type = 2
								else
									wpt_type = 4
								end
								--wpt_type = 2
							else
								txt_cyan_id = ""
								txt_cyan_alt = ""
								txt_cyan_eta = ""
								txt_white_id = legs_data[n][1]
								if legs_data[n][13] <= 0 then
									tmp_wpt_eta = "--.--Z"
								else
									tmp_wpt_eta2 = math.floor(legs_data[n][13])
									tmp_wpt_eta3 = (legs_data[n][13] - tmp_wpt_eta2) * 60
									tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. "."
									tmp_wpt_eta = tmp_wpt_eta .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
									tmp_wpt_eta = tmp_wpt_eta .. "Z"
								end
								if B738DR_efis_data_capt_status == 1 then
									wpt_data = 0
									if legs_data[n][5] > 0 then
										tmp_wpt_alt = legs_data[n][5]
										tmp_wpt_type = legs_data[n][6]
										wpt_data = 1
									elseif legs_data[n][11] > 0 then
										tmp_wpt_alt = legs_data[n][11]
										tmp_wpt_type = 32
										wpt_data = 1
									end
									
									if wpt_data == 1 then
										if B738DR_flight_phase < 5 then
											if tmp_wpt_alt > B738DR_trans_alt then
												txt_white_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											else
												txt_white_alt = string.format("%5d", tmp_wpt_alt)
											end
										else
											if tmp_wpt_alt > B738DR_trans_lvl then
												txt_white_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											else
												txt_white_alt = string.format("%5d", tmp_wpt_alt)
											end
										end
										if tmp_wpt_type == 43 then	-- Above
											txt_white_alt = txt_white_alt .. "A"
										elseif tmp_wpt_type == 45 then	-- Below
											txt_white_alt = txt_white_alt .. "B"
										end
										txt_white_eta = tmp_wpt_eta		--"--.--Z"
									else
										txt_white_alt = ""
										txt_white_eta = ""
									end
								else
									txt_white_alt = ""
									txt_white_eta = ""
								end
								if legs_data[n][32] == 0 then
									wpt_type = 1
								else
									wpt_type = 3
								end
								--wpt_type = 1
							end
							
							if legs_num == 1 then
								wpt_type = 0
								txt_white_id = ""
								txt_white_alt = ""
								txt_white_eta = ""
								txt_cyan_id = ""
								txt_cyan_alt = ""
								txt_cyan_eta = ""
							end
							
							if legs_data[n][1] == "VECTOR" then
								wpt_type = 0
								txt_white_id = ""
								txt_white_alt = ""
								txt_white_eta = ""
								txt_cyan_id = ""
								txt_cyan_alt = ""
								txt_cyan_eta = ""
							end
							if legs_data[n][31] == "HA" or legs_data[n][31] == "HF" or legs_data[n][31] == "HM" then
								if n ~= offset then
									wpt_type = 0
									txt_white_id = ""
									txt_white_alt = ""
									txt_white_eta = ""
									txt_cyan_id = ""
									txt_cyan_alt = ""
									txt_cyan_eta = ""
								end
							end
							
							if obj == 0 then
								B738DR_wpt_id00w = txt_white_id
								B738DR_wpt_alt00w = txt_white_alt
								B738DR_wpt_eta00w = txt_white_eta
								B738DR_wpt_id00m = txt_cyan_id
								B738DR_wpt_alt00m = txt_cyan_alt
								B738DR_wpt_eta00m = txt_cyan_eta
								B738DR_wpt_type00 = wpt_type
							elseif obj == 1 then
								B738DR_wpt_id01w = txt_white_id
								B738DR_wpt_alt01w = txt_white_alt
								B738DR_wpt_eta01w = txt_white_eta
								B738DR_wpt_id01m = txt_cyan_id
								B738DR_wpt_alt01m = txt_cyan_alt
								B738DR_wpt_eta01m = txt_cyan_eta
								B738DR_wpt_type01 = wpt_type
							elseif obj == 2 then
								B738DR_wpt_id02w = txt_white_id
								B738DR_wpt_alt02w = txt_white_alt
								B738DR_wpt_eta02w = txt_white_eta
								B738DR_wpt_id02m = txt_cyan_id
								B738DR_wpt_alt02m = txt_cyan_alt
								B738DR_wpt_eta02m = txt_cyan_eta
								B738DR_wpt_type02 = wpt_type
							elseif obj == 3 then
								B738DR_wpt_id03w = txt_white_id
								B738DR_wpt_alt03w = txt_white_alt
								B738DR_wpt_eta03w = txt_white_eta
								B738DR_wpt_id03m = txt_cyan_id
								B738DR_wpt_alt03m = txt_cyan_alt
								B738DR_wpt_eta03m = txt_cyan_eta
								B738DR_wpt_type03 = wpt_type
							elseif obj == 4 then
								B738DR_wpt_id04w = txt_white_id
								B738DR_wpt_alt04w = txt_white_alt
								B738DR_wpt_eta04w = txt_white_eta
								B738DR_wpt_id04m = txt_cyan_id
								B738DR_wpt_alt04m = txt_cyan_alt
								B738DR_wpt_eta04m = txt_cyan_eta
								B738DR_wpt_type04 = wpt_type
							elseif obj == 5 then
								B738DR_wpt_id05w = txt_white_id
								B738DR_wpt_alt05w = txt_white_alt
								B738DR_wpt_eta05w = txt_white_eta
								B738DR_wpt_id05m = txt_cyan_id
								B738DR_wpt_alt05m = txt_cyan_alt
								B738DR_wpt_eta05m = txt_cyan_eta
								B738DR_wpt_type05 = wpt_type
							elseif obj == 6 then
								B738DR_wpt_id06w = txt_white_id
								B738DR_wpt_alt06w = txt_white_alt
								B738DR_wpt_eta06w = txt_white_eta
								B738DR_wpt_id06m = txt_cyan_id
								B738DR_wpt_alt06m = txt_cyan_alt
								B738DR_wpt_eta06m = txt_cyan_eta
								B738DR_wpt_type06 = wpt_type
							elseif obj == 7 then
								B738DR_wpt_id07w = txt_white_id
								B738DR_wpt_alt07w = txt_white_alt
								B738DR_wpt_eta07w = txt_white_eta
								B738DR_wpt_id07m = txt_cyan_id
								B738DR_wpt_alt07m = txt_cyan_alt
								B738DR_wpt_eta07m = txt_cyan_eta
								B738DR_wpt_type07 = wpt_type
							elseif obj == 8 then
								B738DR_wpt_id08w = txt_white_id
								B738DR_wpt_alt08w = txt_white_alt
								B738DR_wpt_eta08w = txt_white_eta
								B738DR_wpt_id08m = txt_cyan_id
								B738DR_wpt_alt08m = txt_cyan_alt
								B738DR_wpt_eta08m = txt_cyan_eta
								B738DR_wpt_type08 = wpt_type
							elseif obj == 9 then
								B738DR_wpt_id09w = txt_white_id
								B738DR_wpt_alt09w = txt_white_alt
								B738DR_wpt_eta09w = txt_white_eta
								B738DR_wpt_id09m = txt_cyan_id
								B738DR_wpt_alt09m = txt_cyan_alt
								B738DR_wpt_eta09m = txt_cyan_eta
								B738DR_wpt_type09 = wpt_type
							elseif obj == 10 then
								B738DR_wpt_id10w = txt_white_id
								B738DR_wpt_alt10w = txt_white_alt
								B738DR_wpt_eta10w = txt_white_eta
								B738DR_wpt_id10m = txt_cyan_id
								B738DR_wpt_alt10m = txt_cyan_alt
								B738DR_wpt_eta10m = txt_cyan_eta
								B738DR_wpt_type10 = wpt_type
							elseif obj == 11 then
								B738DR_wpt_id11w = txt_white_id
								B738DR_wpt_alt11w = txt_white_alt
								B738DR_wpt_eta11w = txt_white_eta
								B738DR_wpt_id11m = txt_cyan_id
								B738DR_wpt_alt11m = txt_cyan_alt
								B738DR_wpt_eta11m = txt_cyan_eta
								B738DR_wpt_type11 = wpt_type
							elseif obj == 12 then
								B738DR_wpt_id12w = txt_white_id
								B738DR_wpt_alt12w = txt_white_alt
								B738DR_wpt_eta12w = txt_white_eta
								B738DR_wpt_id12m = txt_cyan_id
								B738DR_wpt_alt12m = txt_cyan_alt
								B738DR_wpt_eta12m = txt_cyan_eta
								B738DR_wpt_type12 = wpt_type
							elseif obj == 13 then
								B738DR_wpt_id13w = txt_white_id
								B738DR_wpt_alt13w = txt_white_alt
								B738DR_wpt_eta13w = txt_white_eta
								B738DR_wpt_id13m = txt_cyan_id
								B738DR_wpt_alt13m = txt_cyan_alt
								B738DR_wpt_eta13m = txt_cyan_eta
								B738DR_wpt_type13 = wpt_type
							elseif obj == 14 then
								B738DR_wpt_id14w = txt_white_id
								B738DR_wpt_alt14w = txt_white_alt
								B738DR_wpt_eta14w = txt_white_eta
								B738DR_wpt_id14m = txt_cyan_id
								B738DR_wpt_alt14m = txt_cyan_alt
								B738DR_wpt_eta14m = txt_cyan_eta
								B738DR_wpt_type14 = wpt_type
							elseif obj == 15 then
								B738DR_wpt_id15w = txt_white_id
								B738DR_wpt_alt15w = txt_white_alt
								B738DR_wpt_eta15w = txt_white_eta
								B738DR_wpt_id15m = txt_cyan_id
								B738DR_wpt_alt15m = txt_cyan_alt
								B738DR_wpt_eta15m = txt_cyan_eta
								B738DR_wpt_type15 = wpt_type
							elseif obj == 16 then
								B738DR_wpt_id16w = txt_white_id
								B738DR_wpt_alt16w = txt_white_alt
								B738DR_wpt_eta16w = txt_white_eta
								B738DR_wpt_id16m = txt_cyan_id
								B738DR_wpt_alt16m = txt_cyan_alt
								B738DR_wpt_eta16m = txt_cyan_eta
								B738DR_wpt_type16 = wpt_type
							elseif obj == 17 then
								B738DR_wpt_id17w = txt_white_id
								B738DR_wpt_alt17w = txt_white_alt
								B738DR_wpt_eta17w = txt_white_eta
								B738DR_wpt_id17m = txt_cyan_id
								B738DR_wpt_alt17m = txt_cyan_alt
								B738DR_wpt_eta17m = txt_cyan_eta
								B738DR_wpt_type17 = wpt_type
							elseif obj == 18 then
								B738DR_wpt_id18w = txt_white_id
								B738DR_wpt_alt18w = txt_white_alt
								B738DR_wpt_eta18w = txt_white_eta
								B738DR_wpt_id18m = txt_cyan_id
								B738DR_wpt_alt18m = txt_cyan_alt
								B738DR_wpt_eta18m = txt_cyan_eta
								B738DR_wpt_type18 = wpt_type
							elseif obj == 19 then
								B738DR_wpt_id19w = txt_white_id
								B738DR_wpt_alt19w = txt_white_alt
								B738DR_wpt_eta19w = txt_white_eta
								B738DR_wpt_id19m = txt_cyan_id
								B738DR_wpt_alt19m = txt_cyan_alt
								B738DR_wpt_eta19m = txt_cyan_eta
								B738DR_wpt_type19 = wpt_type
							end
							
							
							obj = obj + 1
						end
					else
						--rte_act_enable = 1
						if obj == 0 and n == offset and rte_plan_mode == 0 and legs_num > 1 then
							if nd_x < 0 then
								if nd_y == 0 then
									nd_y0 = 0
									nd_x0 = -10
								elseif nd_y > 0 then
									nd_x = -nd_x
									nd_x0 = (nd_x / nd_y) * 10
									nd_x0 = -nd_x0
									nd_y0 = 11
								else
									nd_x = -nd_x
									nd_y = -nd_y
									nd_x0 = (nd_x / nd_y) * 10
									nd_x0 = -nd_x0
									nd_y0 = -11
								end
							else
								if nd_y == 0 then
									nd_y0 = 0
									nd_x0 = 11
								elseif nd_y > 0 then
									nd_x0 = (nd_x / nd_y) * 10
									nd_y0 = 11
								else
									nd_y = -nd_y
									nd_x0 = (nd_x / nd_y) * 10
									nd_y0 = -11
								end
							end
							rte_act_enable = 1
							B738DR_rte_show_act = 1
							B738DR_rte_x_act = nd_x0
							B738DR_rte_y_act = nd_y0
							if legs_intdir_act == 0 then
								B738DR_rte_rot_act = (math.deg(legs_data[n][2]) - mag_hdg + 180) % 360
							else
								B738DR_rte_rot_act = (simDR_fmc_trk - mag_hdg + 180) % 360
							end
							if n == offset then
								rte_dist = 15
							else
								rte_dist = legs_data[n][3] * nd_zoom
								rte_dist = math.min(rte_dist, 15)
							end
							B738DR_rte_dist_act = rte_dist
							
						end
					end
				end
			
			end
			
			end
		
			
			-- MOD LEGS
			
			--if calc_rte_enable2 == 0 then
			
			if des_app2 == "------" then
				wpt_to = legs_num2 + 1
			else
				wpt_to = legs_num2
			end
			
			if wpt_from > wpt_to then
				wpt_from = wpt_to
			end
			
			for n = wpt_from, wpt_to do
			
			if legs_data2[n][1] ~= "DISCONTINUITY" then --and calc_rte_enable2 == 0 then --and legs_data[n][1] ~= "VECTOR" then
				
				if last_lat == 0 and last_lon == 0 then
					nd_lat2 = math.rad(legs_data2[n][7])
					nd_lon2 = math.rad(legs_data2[n][8])
				else
					nd_lat2 = math.rad(legs_data2[n][7])
					nd_lon2 = math.rad(legs_data2[n][8])
				end
				
				nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
				
				if nd_dis < 645 then
					
					nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
					nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
					nd_hdg = math.atan2(nd_y, nd_x)
					nd_hdg = math.deg(nd_hdg)
					nd_hdg = (nd_hdg + 360) % 360
					
					delta_hdg = ((((nd_hdg - mag_hdg) % 360) + 540) % 360) - 180
					
					if delta_hdg >= 0 and delta_hdg <= 90 then
						-- right
						nd_on_off = 1
						delta_hdg = 90 - delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = nd_dis * math.sin(delta_hdg)
						nd_x = nd_dis * math.cos(delta_hdg)
					elseif delta_hdg < 0 and delta_hdg >= -90 then
						-- left
						nd_on_off = 1
						delta_hdg = 90 + delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = nd_dis * math.sin(delta_hdg)
						nd_x = -nd_dis * math.cos(delta_hdg)
					elseif delta_hdg >= 90 then
						-- right back
						nd_on_off = 1
						delta_hdg = delta_hdg - 90
						delta_hdg = math.rad(delta_hdg)
						nd_y = -nd_dis * math.sin(delta_hdg)
						nd_x = nd_dis * math.cos(delta_hdg)
					elseif delta_hdg <= -90 then
						-- left back
						nd_on_off = 1
						delta_hdg = -90 - delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = -nd_dis * math.sin(delta_hdg)
						nd_x = -nd_dis * math.cos(delta_hdg)
					end
					
					if B738DR_efis_map_range_capt == 0 then	-- 5 NM
						nd_zoom = 2
					elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
						nd_zoom = 1
					elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
						nd_zoom = 0.5
					elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
						nd_zoom = 0.25
					elseif B738DR_efis_map_range_capt == 4 then	-- 80 NM
						nd_zoom = 0.125
					elseif B738DR_efis_map_range_capt == 5 then	-- 160 NM
						nd_zoom = 0.0625
					elseif B738DR_efis_map_range_capt == 6 then	-- 320 NM
						nd_zoom = 0.03125
					else	-- 640 NM
						nd_zoom = 0.015625
						--nd_on_off = 0
					end
					
					if rte_plan_mode == 1 then
						nd_zoom = nd_zoom / 2
					end
					
					nd_x = nd_x * nd_zoom		-- zoom
					nd_y = nd_y * nd_zoom		-- zoom
					if B738DR_capt_map_mode == 3 then
						nd_y = nd_y + 4.1	-- adjust center
					elseif B738DR_capt_map_mode == 0 and B738DR_capt_exp_map_mode == 0 then
						nd_y = nd_y + 4.1	-- adjust center
					else
						if B738DR_capt_map_mode == 3 then
							nd_y = nd_y + 4.1	-- adjust
						end
					end
					
					if nd_x < -8.0 or nd_x > 8.0 then
						nd_on_off = 0
					end
					if nd_y > 11.0 or nd_y < -2 then
						nd_on_off = 0
					end
					
					if n > 0 then
						-- if n ~= legs_intdir_idx or legs_intdir ~= 1 then
							-- if legs_data2[n][17] < 100 then
								-- nd_on_off = 0
							-- end
						-- else
							-- B738DR_rte_edit_show_act = 0
						-- end
						-- if n == legs_intdir_idx and legs_intdir == 1 then
							-- -- ignore check [17]
						-- else
						if legs_num > 1 then
							if n ~= legs_intdir_idx or legs_intdir ~= 1 then
								if legs_data2[n][17] < 100 then
									nd_on_off = 0
								end
							end
						end
					end
					
					
					if nd_on_off == 1 then
						-- WAYPOINTS and ROUTE
						if obj < max_obj then	-- max number displayed objects
							B738DR_wpt_x[obj] = nd_x
							B738DR_wpt_y[obj] = nd_y
							
							-- DRAW ROUTE
							if n > 0 then --and n <= legs_num then
								if n == legs_intdir_idx and legs_intdir == 1 then
									rte_act_enable2 = 1
								end
								
								rte_n = legs_num2 + 1
								if n == rte_n then
									-- DES ICAO
									B738DR_rte_show[obj] = 0
									--rte_act_enable2 = 1
								else
									
									if legs_data2[n][17] > 99 or legs_num == 1 then
									
										--if rte_act_enable2 == 0 then
											--if legs_data2[n][17] < 100 then
												B738DR_rte_show[obj] = 1
											--else
												--B738DR_rte_show[obj] = 0
											--end
										--else
											--B738DR_rte_show[obj] = 0
										--end
										B738DR_rte_x[obj] = nd_x
										B738DR_rte_y[obj] = nd_y
										if legs_num == 1 then
											B738DR_rte_edit[obj] = 2	-- 0-active, 1-mod, 2-not active
										else
											B738DR_rte_edit[obj] = 1	-- 0-active, 1-mod, 2-not active
										end
										if legs_intdir_act == 0 then
										-- if last_lat == 0 and last_lon == 0 then
											if legs_data2[n+1][1] == "VECTOR" then
												--B738DR_rte_rot[obj] = (math.deg(legs_data[n+1][2]) - mag_hdg - simDR_mag_variation + 360) % 360
												B738DR_rte_rot[obj] = (math.deg(legs_data2[n+1][2]) - mag_hdg + 360) % 360
												rte_dist = 15
											else
												B738DR_rte_rot[obj] = (math.deg(legs_data2[n+1][2]) - mag_hdg ) % 360
												rte_dist = legs_data2[n+1][3] * nd_zoom
												rte_dist = math.min(rte_dist, 15)
											end
										else
											if legs_data2[n+1][1] == "VECTOR" then
												--B738DR_rte_rot[obj] = (math.deg(legs_data[n+1][2]) - mag_hdg - simDR_mag_variation + 360) % 360
												B738DR_rte_rot[obj] = (math.deg(legs_data2[n+1][2]) - mag_hdg + 360) % 360
												rte_dist = 15
											else
												B738DR_rte_rot[obj] = (math.deg(legs_data2[n+1][2]) - mag_hdg ) % 360
												rte_dist = legs_data2[n+1][3] * nd_zoom
												rte_dist = math.min(rte_dist, 15)
											end
										end
										B738DR_rte_dist[obj] = rte_dist
									
										if hold_obj < 5 then
											if legs_data2[n][31] == "HA" or legs_data2[n][31] == "HF" or legs_data2[n][31] == "HM" then
												B738DR_rte_show[obj] = 0
												B738DR_hold_x[hold_obj] = nd_x
												B738DR_hold_y[hold_obj] = nd_y
												B738DR_hold_crs[hold_obj] = ((tonumber(legs_data2[n][29]) / 10) - mag_hdg + 360) % 360
												if B738DR_efis_map_range_capt == 0 then	-- 5 NM
													B738DR_hold_type[hold_obj] = legs_data2[n][21] + 21
													B738DR_hold_dist[hold_obj] = calc_hold_dist2(n)
												elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
													B738DR_hold_type[hold_obj] = legs_data2[n][21] + 23
													B738DR_hold_dist[hold_obj] = calc_hold_dist2(n)
												elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
													B738DR_hold_type[hold_obj] = legs_data2[n][21] + 25
													B738DR_hold_dist[hold_obj] = calc_hold_dist2(n)
												elseif B738DR_efis_map_range_capt >= 3 then	-- 40 NM
													B738DR_hold_type[hold_obj] = legs_data2[n][21] + 27
												end
												hold_obj = hold_obj + 1
											end
										end
									else
										
										B738DR_rte_show[obj] = 0
									
									end
								end
								if rte_plan_mode == 0 then
									if n == legs_intdir_idx and legs_intdir == 1 then
										B738DR_rte_edit_show_act = 1
										if legs_num == 1 then
											B738DR_rte_edit_type_act = 2	-- 1-mod, 2-not active
										else
											B738DR_rte_edit_type_act = 1	-- 1-mod, 2-not active
										end
										B738DR_rte_edit_x_act = nd_x
										B738DR_rte_edit_y_act = nd_y
												
												
										if legs_intdir_crs2 == -1 then
										
											B738DR_rte_edit_rot_act = (nd_hdg - mag_hdg + 180) % 360
											--rte_dist = 15
											rte_dist = nd_dis * nd_zoom
											if rte_dist > 15 then
												rte_dist = 15
											end
										else
											B738DR_rte_edit_rot_act = (legs_intdir_crs_mod - mag_hdg - simDR_mag_variation + 180 + 360) % 360
											rte_dist = 15
										end
										B738DR_rte_edit_dist_act = rte_dist
									else
										B738DR_rte_edit_show_act = 0
									end
									
									-- if obj == 0 and n == offset then	--n == wpt_from then
										-- B738DR_rte_edit_show_act = 1
										-- --B738DR_rte_edit_act = 1
										-- B738DR_rte_edit_x_act = nd_x
										-- B738DR_rte_edit_y_act = nd_y
										-- if legs_intdir_act == 0 then
											-- B738DR_rte_edit_rot_act = (math.deg(legs_data2[n][2]) - mag_hdg + 180) % 360
											-- rte_dist = legs_data2[n][3] * nd_zoom
											-- rte_dist = math.min(rte_dist, 15)
										-- else
											-- B738DR_rte_edit_rot_act = (simDR_fmc_trk - mag_hdg + 180) % 360
											-- rte_dist = 15
										-- end
										-- B738DR_rte_edit_dist_act = rte_dist
										-- --rte_act_enable2 = 1
									-- else
										-- B738DR_rte_edit_show_act = 0
									-- end
								else
									if n <= legs_step and obj == 0 and n > 1 then
										--rte_act_enable2 = 1
										B738DR_rte_edit_show_act = 1
										if legs_num == 1 then
											B738DR_rte_edit_type_act = 2	-- 1-mod, 2-not active
										else
											B738DR_rte_edit_type_act = 1	-- 1-mod, 2-not active
										end
										--B738DR_rte_edit_act = 1
										B738DR_rte_edit_x_act = nd_x
										B738DR_rte_edit_y_act = nd_y
										B738DR_rte_edit_rot_act = (math.deg(legs_data2[n][2]) - mag_hdg + 180) % 360
										rte_dist = legs_data2[n][3] * nd_zoom
										rte_dist = math.min(rte_dist, 15)
										B738DR_rte_edit_dist_act = rte_dist
									else
										B738DR_rte_edit_show_act = 0
									end
								end
								if n == offset then
									if hold_obj < 5 then
										if legs_data2[n][31] == "HA" or legs_data2[n][31] == "HF" or legs_data2[n][31] == "HM" then
											B738DR_hold_x[hold_obj] = nd_x
											B738DR_hold_y[hold_obj] = nd_y
											B738DR_hold_crs[hold_obj] = ((tonumber(legs_data2[n][29]) / 10) - mag_hdg + 360) % 360
											if B738DR_efis_map_range_capt == 0 then	-- 5 NM
												B738DR_hold_type[hold_obj] = legs_data2[n][21] + 21
												B738DR_hold_dist[hold_obj] = calc_hold_dist2(n)
											elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
												B738DR_hold_type[hold_obj] = legs_data2[n][21] + 23
												B738DR_hold_dist[hold_obj] = calc_hold_dist2(n)
											elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
												B738DR_hold_type[hold_obj] = legs_data2[n][21] + 25
												B738DR_hold_dist[hold_obj] = calc_hold_dist2(n)
											elseif B738DR_efis_map_range_capt >= 3 then	-- 40 NM
												B738DR_hold_type[hold_obj] = legs_data2[n][21] + 27
											end
											hold_obj = hold_obj + 1
										end
									end
								end
							end
							
							-- WAYPOINTS
							-- if n == offset then
								-- txt_white_id = ""
								-- txt_white_alt = ""
								-- txt_white_eta = ""
								-- txt_cyan_id = legs_data2[n][1]
								-- if legs_data2[n][13] <= 0 then
									-- tmp_wpt_eta = "--.--Z"
								-- else
									-- tmp_wpt_eta2 = math.floor(legs_data2[n][13])
									-- tmp_wpt_eta3 = (legs_data2[n][13] - tmp_wpt_eta2) * 60
									-- tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. "."
									-- tmp_wpt_eta = tmp_wpt_eta .. string.format("%02d", tmp_wpt_eta3)
									-- tmp_wpt_eta = tmp_wpt_eta .. "Z"
								-- end
								
								-- if B738DR_efis_data_capt_status == 1 then
									-- wpt_data = 0
									-- if legs_data2[n][5] > 0 then
										-- tmp_wpt_alt = legs_data2[n][5]
										-- tmp_wpt_type = legs_data2[n][6]
										-- wpt_data = 1
									-- elseif legs_data2[n][11] > 0 then
										-- tmp_wpt_alt = legs_data2[n][11]
										-- tmp_wpt_type = 32
										-- wpt_data = 1
									-- end
									-- if wpt_data == 1 then
										-- if B738DR_flight_phase < 5 then
											-- if tmp_wpt_alt > B738DR_trans_alt then
												-- txt_cyan_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											-- else
												-- txt_cyan_alt = string.format("%5d", tmp_wpt_alt)
											-- end
										-- else
											-- if tmp_wpt_alt > B738DR_trans_lvl then
												-- txt_cyan_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											-- else
												-- txt_cyan_alt = string.format("%5d", tmp_wpt_alt)
											-- end
										-- end
										-- if tmp_wpt_type == 43 then	-- Above
											-- txt_cyan_alt = txt_cyan_alt .. "A"
										-- elseif tmp_wpt_type == 45 then	-- Below
											-- txt_cyan_alt = txt_cyan_alt .. "B"
										-- end
										-- txt_cyan_eta = tmp_wpt_eta		--"--.--Z"
									-- else
										-- txt_cyan_alt = ""
										-- txt_cyan_eta = ""
									-- end
								-- else
									-- txt_cyan_alt = ""
									-- txt_cyan_eta = ""
								-- end
								-- if legs_data2[n][32] == 0 then
									-- wpt_type = 2
								-- else
									-- wpt_type = 4
								-- end
								-- --wpt_type = 2
							-- else
							-- if n== offset then
								-- if legs_data2[n][17] < 200 then
									-- txt_white_id = ""
									-- wpt_type = 0
								-- else
									-- txt_white_id = legs_data2[n][1]
									-- wpt_type = 1
								-- end
								-- -- wpt_type = 0
								-- -- txt_white_id = ""
								-- txt_white_alt = ""
								-- txt_white_eta = ""
								-- txt_cyan_id = ""
								-- txt_cyan_alt = ""
								-- txt_cyan_eta = ""
							-- else
								
								if legs_data2[n][17] < 200 then
									if legs_num == 1 then
										txt_white_id = legs_data2[n][1]
										wpt_type = 1
									else
										txt_white_id = ""
										wpt_type = 0
									end
								else
									txt_white_id = legs_data2[n][1]
									wpt_type = 1
								end
								txt_white_alt = ""
								txt_white_eta = ""
								txt_cyan_id = ""
								txt_cyan_alt = ""
								txt_cyan_eta = ""
								
								-- if legs_data2[n][13] <= 0 then
									-- tmp_wpt_eta = "--.--Z"
								-- else
									-- tmp_wpt_eta2 = math.floor(legs_data2[n][13])
									-- tmp_wpt_eta3 = (legs_data2[n][13] - tmp_wpt_eta2) * 60
									-- tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. "."
									-- tmp_wpt_eta = tmp_wpt_eta .. string.format("%02d", tmp_wpt_eta3)
									-- tmp_wpt_eta = tmp_wpt_eta .. "Z"
								-- end
								-- if B738DR_efis_data_capt_status == 1 then
									-- wpt_data = 0
									-- if legs_data2[n][5] > 0 then
										-- tmp_wpt_alt = legs_data2[n][5]
										-- tmp_wpt_type = legs_data2[n][6]
										-- wpt_data = 1
									-- elseif legs_data2[n][11] > 0 then
										-- tmp_wpt_alt = legs_data2[n][11]
										-- tmp_wpt_type = 32
										-- wpt_data = 1
									-- end
									
									-- if wpt_data == 1 then
										-- if B738DR_flight_phase < 5 then
											-- if tmp_wpt_alt > B738DR_trans_alt then
												-- txt_white_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											-- else
												-- txt_white_alt = string.format("%5d", tmp_wpt_alt)
											-- end
										-- else
											-- if tmp_wpt_alt > B738DR_trans_lvl then
												-- txt_white_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											-- else
												-- txt_white_alt = string.format("%5d", tmp_wpt_alt)
											-- end
										-- end
										-- if tmp_wpt_type == 43 then	-- Above
											-- txt_white_alt = txt_white_alt .. "A"
										-- elseif tmp_wpt_type == 45 then	-- Below
											-- txt_white_alt = txt_white_alt .. "B"
										-- end
										-- txt_white_eta = tmp_wpt_eta		--"--.--Z"
									-- else
										-- txt_white_alt = ""
										-- txt_white_eta = ""
									-- end
								-- else
									-- txt_white_alt = ""
									-- txt_white_eta = ""
								-- end
								-- if legs_data2[n][32] == 0 then
									-- wpt_type = 1
								-- else
									-- wpt_type = 3
								-- end
							--end
							
							if legs_data2[n][1] == "VECTOR" then
								wpt_type = 0
								txt_white_id = ""
								txt_white_alt = ""
								txt_white_eta = ""
								txt_cyan_id = ""
								txt_cyan_alt = ""
								txt_cyan_eta = ""
							end
							if legs_data2[n][31] == "HA" or legs_data2[n][31] == "HF" or legs_data2[n][31] == "HM" then
								if n ~= offset then
									wpt_type = 0
									txt_white_id = ""
									txt_white_alt = ""
									txt_white_eta = ""
									txt_cyan_id = ""
									txt_cyan_alt = ""
									txt_cyan_eta = ""
								end
							end
							
							if obj == 0 then
								B738DR_wpt_id00w = txt_white_id
								B738DR_wpt_alt00w = txt_white_alt
								B738DR_wpt_eta00w = txt_white_eta
								B738DR_wpt_id00m = txt_cyan_id
								B738DR_wpt_alt00m = txt_cyan_alt
								B738DR_wpt_eta00m = txt_cyan_eta
								B738DR_wpt_type00 = wpt_type
							elseif obj == 1 then
								B738DR_wpt_id01w = txt_white_id
								B738DR_wpt_alt01w = txt_white_alt
								B738DR_wpt_eta01w = txt_white_eta
								B738DR_wpt_id01m = txt_cyan_id
								B738DR_wpt_alt01m = txt_cyan_alt
								B738DR_wpt_eta01m = txt_cyan_eta
								B738DR_wpt_type01 = wpt_type
							elseif obj == 2 then
								B738DR_wpt_id02w = txt_white_id
								B738DR_wpt_alt02w = txt_white_alt
								B738DR_wpt_eta02w = txt_white_eta
								B738DR_wpt_id02m = txt_cyan_id
								B738DR_wpt_alt02m = txt_cyan_alt
								B738DR_wpt_eta02m = txt_cyan_eta
								B738DR_wpt_type02 = wpt_type
							elseif obj == 3 then
								B738DR_wpt_id03w = txt_white_id
								B738DR_wpt_alt03w = txt_white_alt
								B738DR_wpt_eta03w = txt_white_eta
								B738DR_wpt_id03m = txt_cyan_id
								B738DR_wpt_alt03m = txt_cyan_alt
								B738DR_wpt_eta03m = txt_cyan_eta
								B738DR_wpt_type03 = wpt_type
							elseif obj == 4 then
								B738DR_wpt_id04w = txt_white_id
								B738DR_wpt_alt04w = txt_white_alt
								B738DR_wpt_eta04w = txt_white_eta
								B738DR_wpt_id04m = txt_cyan_id
								B738DR_wpt_alt04m = txt_cyan_alt
								B738DR_wpt_eta04m = txt_cyan_eta
								B738DR_wpt_type04 = wpt_type
							elseif obj == 5 then
								B738DR_wpt_id05w = txt_white_id
								B738DR_wpt_alt05w = txt_white_alt
								B738DR_wpt_eta05w = txt_white_eta
								B738DR_wpt_id05m = txt_cyan_id
								B738DR_wpt_alt05m = txt_cyan_alt
								B738DR_wpt_eta05m = txt_cyan_eta
								B738DR_wpt_type05 = wpt_type
							elseif obj == 6 then
								B738DR_wpt_id06w = txt_white_id
								B738DR_wpt_alt06w = txt_white_alt
								B738DR_wpt_eta06w = txt_white_eta
								B738DR_wpt_id06m = txt_cyan_id
								B738DR_wpt_alt06m = txt_cyan_alt
								B738DR_wpt_eta06m = txt_cyan_eta
								B738DR_wpt_type06 = wpt_type
							elseif obj == 7 then
								B738DR_wpt_id07w = txt_white_id
								B738DR_wpt_alt07w = txt_white_alt
								B738DR_wpt_eta07w = txt_white_eta
								B738DR_wpt_id07m = txt_cyan_id
								B738DR_wpt_alt07m = txt_cyan_alt
								B738DR_wpt_eta07m = txt_cyan_eta
								B738DR_wpt_type07 = wpt_type
							elseif obj == 8 then
								B738DR_wpt_id08w = txt_white_id
								B738DR_wpt_alt08w = txt_white_alt
								B738DR_wpt_eta08w = txt_white_eta
								B738DR_wpt_id08m = txt_cyan_id
								B738DR_wpt_alt08m = txt_cyan_alt
								B738DR_wpt_eta08m = txt_cyan_eta
								B738DR_wpt_type08 = wpt_type
							elseif obj == 9 then
								B738DR_wpt_id09w = txt_white_id
								B738DR_wpt_alt09w = txt_white_alt
								B738DR_wpt_eta09w = txt_white_eta
								B738DR_wpt_id09m = txt_cyan_id
								B738DR_wpt_alt09m = txt_cyan_alt
								B738DR_wpt_eta09m = txt_cyan_eta
								B738DR_wpt_type09 = wpt_type
							elseif obj == 10 then
								B738DR_wpt_id10w = txt_white_id
								B738DR_wpt_alt10w = txt_white_alt
								B738DR_wpt_eta10w = txt_white_eta
								B738DR_wpt_id10m = txt_cyan_id
								B738DR_wpt_alt10m = txt_cyan_alt
								B738DR_wpt_eta10m = txt_cyan_eta
								B738DR_wpt_type10 = wpt_type
							elseif obj == 11 then
								B738DR_wpt_id11w = txt_white_id
								B738DR_wpt_alt11w = txt_white_alt
								B738DR_wpt_eta11w = txt_white_eta
								B738DR_wpt_id11m = txt_cyan_id
								B738DR_wpt_alt11m = txt_cyan_alt
								B738DR_wpt_eta11m = txt_cyan_eta
								B738DR_wpt_type11 = wpt_type
							elseif obj == 12 then
								B738DR_wpt_id12w = txt_white_id
								B738DR_wpt_alt12w = txt_white_alt
								B738DR_wpt_eta12w = txt_white_eta
								B738DR_wpt_id12m = txt_cyan_id
								B738DR_wpt_alt12m = txt_cyan_alt
								B738DR_wpt_eta12m = txt_cyan_eta
								B738DR_wpt_type12 = wpt_type
							elseif obj == 13 then
								B738DR_wpt_id13w = txt_white_id
								B738DR_wpt_alt13w = txt_white_alt
								B738DR_wpt_eta13w = txt_white_eta
								B738DR_wpt_id13m = txt_cyan_id
								B738DR_wpt_alt13m = txt_cyan_alt
								B738DR_wpt_eta13m = txt_cyan_eta
								B738DR_wpt_type13 = wpt_type
							elseif obj == 14 then
								B738DR_wpt_id14w = txt_white_id
								B738DR_wpt_alt14w = txt_white_alt
								B738DR_wpt_eta14w = txt_white_eta
								B738DR_wpt_id14m = txt_cyan_id
								B738DR_wpt_alt14m = txt_cyan_alt
								B738DR_wpt_eta14m = txt_cyan_eta
								B738DR_wpt_type14 = wpt_type
							elseif obj == 15 then
								B738DR_wpt_id15w = txt_white_id
								B738DR_wpt_alt15w = txt_white_alt
								B738DR_wpt_eta15w = txt_white_eta
								B738DR_wpt_id15m = txt_cyan_id
								B738DR_wpt_alt15m = txt_cyan_alt
								B738DR_wpt_eta15m = txt_cyan_eta
								B738DR_wpt_type15 = wpt_type
							elseif obj == 16 then
								B738DR_wpt_id16w = txt_white_id
								B738DR_wpt_alt16w = txt_white_alt
								B738DR_wpt_eta16w = txt_white_eta
								B738DR_wpt_id16m = txt_cyan_id
								B738DR_wpt_alt16m = txt_cyan_alt
								B738DR_wpt_eta16m = txt_cyan_eta
								B738DR_wpt_type16 = wpt_type
							elseif obj == 17 then
								B738DR_wpt_id17w = txt_white_id
								B738DR_wpt_alt17w = txt_white_alt
								B738DR_wpt_eta17w = txt_white_eta
								B738DR_wpt_id17m = txt_cyan_id
								B738DR_wpt_alt17m = txt_cyan_alt
								B738DR_wpt_eta17m = txt_cyan_eta
								B738DR_wpt_type17 = wpt_type
							elseif obj == 18 then
								B738DR_wpt_id18w = txt_white_id
								B738DR_wpt_alt18w = txt_white_alt
								B738DR_wpt_eta18w = txt_white_eta
								B738DR_wpt_id18m = txt_cyan_id
								B738DR_wpt_alt18m = txt_cyan_alt
								B738DR_wpt_eta18m = txt_cyan_eta
								B738DR_wpt_type18 = wpt_type
							elseif obj == 19 then
								B738DR_wpt_id19w = txt_white_id
								B738DR_wpt_alt19w = txt_white_alt
								B738DR_wpt_eta19w = txt_white_eta
								B738DR_wpt_id19m = txt_cyan_id
								B738DR_wpt_alt19m = txt_cyan_alt
								B738DR_wpt_eta19m = txt_cyan_eta
								B738DR_wpt_type19 = wpt_type
							end
							
							
							obj = obj + 1
						end
					
					
					
					-- else
						-- --rte_act_enable = 1
						-- if obj == 0 and n == offset and rte_plan_mode == 0 then
							-- if nd_x < 0 then
								-- if nd_y == 0 then
									-- nd_y0 = 0
									-- nd_x0 = -11
								-- elseif nd_y > 0 then
									-- nd_x = -nd_x
									-- nd_x0 = (nd_x / nd_y) * 11
									-- nd_x0 = -nd_x0
									-- nd_y0 = 11
								-- else
									-- nd_x = -nd_x
									-- nd_y = -nd_y
									-- nd_x0 = (nd_x / nd_y) * 11
									-- nd_x0 = -nd_x0
									-- nd_y0 = -11
								-- end
							-- else
								-- if nd_y == 0 then
									-- nd_y0 = 0
									-- nd_x0 = 11
								-- elseif nd_y > 0 then
									-- nd_x0 = (nd_x / nd_y) * 11
									-- nd_y0 = 11
								-- else
									-- nd_y = -nd_y
									-- nd_x0 = (nd_x / nd_y) * 11
									-- nd_y0 = -11
								-- end
							-- end
							-- --rte_act_enable2 = 1
							-- B738DR_rte_show_act = 1
							-- B738DR_rte_x_act = nd_x0
							-- B738DR_rte_y_act = nd_y0
							-- if legs_intdir_act == 0 then
								-- B738DR_rte_rot_act = (math.deg(legs_data2[n][2]) - mag_hdg + 180) % 360
							-- else
								-- B738DR_rte_rot_act = (simDR_fmc_trk - mag_hdg + 180) % 360
							-- end
							-- if n == offset then
								-- rte_dist = 15
							-- else
								-- rte_dist = legs_data2[n][3] * nd_zoom
								-- rte_dist = math.min(rte_dist, 15)
							-- end
							-- B738DR_rte_dist_act = rte_dist
							
						-- end
					end
				end
			
			end
			
			end
			
			--end
		
		end
		
		-- FIRST OFFICER
		nav_disable = 0
		nd_on_off = 0
		-- nd_lat = math.rad(simDR_latitude) 
		-- nd_lon = math.rad(simDR_longitude) 
		nd_lat = math.rad(ndx_lat)
		nd_lon = math.rad(ndx_lon)
		if B738DR_fo_map_mode == 3 then
			
			--nav_disable = 1
			--rte_plan_mode = 0
			if legs_step2 == 0 then
				nd_lat = math.rad(legs_data2[1][7])
				nd_lon = math.rad(legs_data2[1][8])
			else
				nd_lat = math.rad(legs_data2[legs_step2][7])
				nd_lon = math.rad(legs_data2[legs_step2][8])
			end
			
			-- if legs_step2 == 0 then
				-- nd_lat = math.rad(legs_data[1][7])
				-- nd_lon = math.rad(legs_data[1][8])
			-- else
				-- nd_lat = math.rad(legs_data[legs_step2][7])
				-- nd_lon = math.rad(legs_data[legs_step2][8])
			-- end
			mag_hdg = -simDR_mag_variation
			if offset == 1 then
				wpt_from = 1
			else
				wpt_from = offset - 1
			end
			rte_plan_mode = 1
		elseif B738DR_fo_map_mode == 2 then
			-- if B738DR_fo_map_mode < 2 then
				-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				-- if B738DR_fo_map_mode == 1 and B738DR_fo_exp_map_mode == 0 then
					-- nav_disable = 1
				-- end
				
			-- else
				if B738DR_track_up == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					if B738DR_track_up_active == 0 then
						mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
					else
						mag_hdg = ndx_mag_hdg - simDR_mag_variation
					end
				end
				-- mag_hdg = simDR_mag_hdg - simDR_mag_variation
			-- end
			rte_plan_mode = 0
			wpt_from = offset
		else
			nav_disable = 1
		end
		
		if des_app == "------" then
			wpt_to = legs_num + 1
		else
			wpt_to = legs_num
		end
		
		if nav_disable == 0 then
			for n = wpt_from, wpt_to do
			
			if legs_data[n][1] ~= "DISCONTINUITY" then --and legs_data[n][1] ~= "VECTOR" then
				
				if last_lat == 0 and last_lon == 0 then
					nd_lat2 = math.rad(legs_data[n][7])
					nd_lon2 = math.rad(legs_data[n][8])
				else
					-- if n == (offset - 1) and rte_plan_mode == 0 then
						
						-- nd_lat = last_lat
						-- nd_lon = last_lon
						-- nd_lat2 = math.rad(legs_data[offset][7])
						-- nd_lon2 = math.rad(legs_data[offset][8])
						
						-- nd_x = (nd_lon2 - nd_lon) * math.cos((nd_lat + nd_lat2)/2)
						-- nd_y = nd_lat2 - nd_lat
						-- nd_dist_dir = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
						
						-- nd_lat = math.rad(simDR_latitude) 
						-- nd_lon = math.rad(simDR_longitude) 
						-- nd_lat2 = last_lat
						-- nd_lon2 = last_lon
					-- else
						nd_lat2 = math.rad(legs_data[n][7])
						nd_lon2 = math.rad(legs_data[n][8])
					-- end
				end
				
				--nd_lat2 = math.rad(nd_lat2)
				--nd_lon2 = math.rad(nd_lon2)
				
				-- nd_x = (nd_lon2 - nd_lon) * math.cos((nd_lat + nd_lat2)/2)
				-- nd_y = nd_lat2 - nd_lat
				-- nd_dis = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
				
				nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
				
				if nd_dis < 645 then
					
					nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
					nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
					nd_hdg = math.atan2(nd_y, nd_x)
					nd_hdg = math.deg(nd_hdg)
					nd_hdg = (nd_hdg + 360) % 360
					
					delta_hdg = ((((nd_hdg - mag_hdg) % 360) + 540) % 360) - 180
					
					if delta_hdg >= 0 and delta_hdg <= 90 then
						-- right
						nd_on_off = 1
						delta_hdg = 90 - delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = nd_dis * math.sin(delta_hdg)
						nd_x = nd_dis * math.cos(delta_hdg)
					elseif delta_hdg < 0 and delta_hdg >= -90 then
						-- left
						nd_on_off = 1
						delta_hdg = 90 + delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = nd_dis * math.sin(delta_hdg)
						nd_x = -nd_dis * math.cos(delta_hdg)
					elseif delta_hdg >= 90 then
						-- right back
						nd_on_off = 1
						delta_hdg = delta_hdg - 90
						delta_hdg = math.rad(delta_hdg)
						nd_y = -nd_dis * math.sin(delta_hdg)
						nd_x = nd_dis * math.cos(delta_hdg)
					elseif delta_hdg <= -90 then
						-- left back
						nd_on_off = 1
						delta_hdg = -90 - delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = -nd_dis * math.sin(delta_hdg)
						nd_x = -nd_dis * math.cos(delta_hdg)
					end
					
					if B738DR_efis_map_range_fo == 0 then	-- 5 NM
						nd_zoom = 2
					elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
						nd_zoom = 1
					elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
						nd_zoom = 0.5
					elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
						nd_zoom = 0.25
					elseif B738DR_efis_map_range_fo == 4 then	-- 80 NM
						nd_zoom = 0.125
					elseif B738DR_efis_map_range_fo == 5 then	-- 160 NM
						nd_zoom = 0.0625
					elseif B738DR_efis_map_range_fo == 6 then	-- 320 NM
						nd_zoom = 0.03125
					else	-- 640 NM
						nd_zoom = 0.015625
						--nd_on_off = 0
					end
					
					if rte_plan_mode == 1 then
						nd_zoom = nd_zoom / 2
					end
					
					nd_x = nd_x * nd_zoom		-- zoom
					nd_y = nd_y * nd_zoom		-- zoom
					if B738DR_fo_map_mode == 3 then
						nd_y = nd_y + 4.1	-- adjust center
					elseif B738DR_fo_map_mode == 0 and B738DR_fo_exp_map_mode == 0 then
						nd_y = nd_y + 4.1	-- adjust center
					else
						if B738DR_fo_map_mode == 3 then
							nd_y = nd_y + 4.1	-- adjust
						end
					end
					
					if n < legs_num then
						if B738DR_efis_map_range_fo == 0 and
							(legs_data[n+1][31] == "HA" or legs_data[n+1][31] == "HF" or legs_data[n+1][31] == "HM") then
							if nd_x < -22.0 or nd_x > 22.0 then
								nd_on_off = 0
							end
							if nd_y > 22.0 or nd_y < -22.0 then
								nd_on_off = 0
							end
						else
							if nd_x < -15.0 or nd_x > 15.0 then
								nd_on_off = 0
							end
							if nd_y > 15.0 or nd_y < -15.0 then
								nd_on_off = 0
							end
						end
					else
						if nd_x < -15.0 or nd_x > 15.0 then
							nd_on_off = 0
						end
						if nd_y > 15.0 or nd_y < -15.0 then
							nd_on_off = 0
						end
					end
					
					if nd_on_off == 1 then
						-- WAYPOINTS and ROUTE
						if obj2 < max_obj then	-- max number displayed objects
							B738DR_wpt_fo_x[obj2] = nd_x
							B738DR_wpt_fo_y[obj2] = nd_y
							
							-- DRAW ROUTE
							if n > 0 then --and n <= legs_num then
								rte_n = legs_num + 1
								if n == rte_n then
									-- DES ICAO
									B738DR_rte_fo_show[obj2] = 0
									rte_act_enable_fo = 1
								else
									B738DR_rte_fo_show[obj2] = 1
									B738DR_rte_fo_x[obj2] = nd_x
									B738DR_rte_fo_y[obj2] = nd_y
									
									if B738DR_missed_app_act == 0 and (n+1) >= first_miss_app_idx and (n+1) <= last_miss_app_idx then
										B738DR_rte_fo_edit[obj2] = 2
									else
										B738DR_rte_fo_edit[obj2] = 0
									end
									
									if legs_intdir_act == 0 then
										if legs_data[n+1][1] == "VECTOR" then
											--B738DR_rte_rot[obj] = (math.deg(legs_data[n+1][2]) - mag_hdg - simDR_mag_variation + 360) % 360
											B738DR_rte_fo_rot[obj2] = (math.deg(legs_data[n+1][2]) - mag_hdg + 360) % 360
											rte_dist = 15
										else
											B738DR_rte_fo_rot[obj2] = (math.deg(legs_data[n+1][2]) - mag_hdg ) % 360
											rte_dist = legs_data[n+1][3] * nd_zoom
											rte_dist = math.min(rte_dist, 15)
										end
									else
										if legs_data[n+1][1] == "VECTOR" then
											B738DR_rte_fo_rot[obj2] = (math.deg(legs_data[n+1][2]) - mag_hdg + 360) % 360
											rte_dist = 15
										else
											B738DR_rte_fo_rot[obj2] = (math.deg(legs_data[n+1][2]) - mag_hdg ) % 360
											rte_dist = legs_data[n+1][3] * nd_zoom
											rte_dist = math.min(rte_dist, 15)
										end
									end
									if n == legs_num and first_miss_app_idx > 0 then
										rte_dist = 0
									end
									B738DR_rte_fo_dist[obj2] = rte_dist
									--if hold_obj_fo < 5 and n ~= offset then
									if hold_obj_fo < 5 then
										
										if legs_data[n+1][31] == "HA" or legs_data[n+1][31] == "HF" or legs_data[n+1][31] == "HM" then
										
											if B738DR_missed_app_act == 0 and (n+1) >= first_miss_app_idx and (n+1) <= last_miss_app_idx then
												rte_dist = 30	-- blue
											else
												rte_dist = 0
											end
										
										--if legs_data[n+1][31] == "HA" or legs_data[n+1][31] == "HF" or legs_data[n+1][31] == "HM" then
											B738DR_hold_fo_x[hold_obj_fo] = nd_x
											B738DR_hold_fo_y[hold_obj_fo] = nd_y
											B738DR_hold_fo_crs[hold_obj_fo] = ((tonumber(legs_data[n+1][29]) / 10) - mag_hdg + 360) % 360
											if B738DR_efis_map_range_fo == 0 then	-- 5 NM
												B738DR_hold_fo_type[hold_obj_fo] = legs_data[n+1][21] + 1 + rte_dist
												B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n+1)
											elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
												B738DR_hold_fo_type[hold_obj_fo] = legs_data[n+1][21] + 3 + rte_dist
												B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n+1)
											elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
												B738DR_hold_fo_type[hold_obj_fo] = legs_data[n+1][21] + 5 + rte_dist
												B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n+1)
											elseif B738DR_efis_map_range_fo >= 3 then	-- 40 NM
												B738DR_hold_fo_type[hold_obj_fo] = legs_data[n+1][21] + 7 + rte_dist
											end
											hold_obj_fo = hold_obj_fo + 1
										end
									end
								end
								if legs_num > 1 then
									if rte_plan_mode == 0 then
										if obj2 == 0 and n == offset then	--n == wpt_from then
											B738DR_rte_fo_show_act = 1
											B738DR_rte_fo_x_act = nd_x
											B738DR_rte_fo_y_act = nd_y
											if legs_intdir_act == 0 then
												B738DR_rte_fo_rot_act = (math.deg(legs_data[n][2]) - mag_hdg + 180) % 360
												rte_dist = legs_data[n][3] * nd_zoom
												rte_dist = math.min(rte_dist, 15)
											else
												B738DR_rte_fo_rot_act = (simDR_fmc_trk - mag_hdg + 180) % 360
												--rte_dist = 15
												rte_dist = simDR_fmc_dist * nd_zoom
												if rte_dist > 15 then
													rte_dist = 15
												end
											end
											B738DR_rte_fo_dist_act = rte_dist
											rte_act_enable_fo = 1
										end
									else
										if n <= legs_step2 and obj2 == 0 and n > 1 then
											rte_act_enable_fo = 1
											B738DR_rte_fo_show_act = 1
											B738DR_rte_fo_x_act = nd_x
											B738DR_rte_fo_y_act = nd_y
											B738DR_rte_fo_rot_act = (math.deg(legs_data[n][2]) - mag_hdg + 180) % 360
											rte_dist = legs_data[n][3] * nd_zoom
											rte_dist = math.min(rte_dist, 15)
											B738DR_rte_fo_dist_act = rte_dist
										end
									end
									if n == offset then
										if hold_obj_fo < 5 then
											rte_dist = 0
											if legs_data[n][31] == "HA" or legs_data[n][31] == "HF" or legs_data[n][31] == "HM" then
												B738DR_hold_fo_x[hold_obj_fo] = nd_x
												B738DR_hold_fo_y[hold_obj_fo] = nd_y
												B738DR_hold_fo_crs[hold_obj_fo] = ((tonumber(legs_data[n][29]) / 10) - mag_hdg + 360) % 360
												if B738DR_efis_map_range_fo == 0 then	-- 5 NM
													B738DR_hold_fo_type[hold_obj_fo] = legs_data[n][21] + 1
													B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n)
												elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
													B738DR_hold_fo_type[hold_obj_fo] = legs_data[n][21] + 3
													B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n)
												elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
													B738DR_hold_fo_type[hold_obj_fo] = legs_data[n][21] + 5
													B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n)
												elseif B738DR_efis_map_range_fo >= 3 then	-- 40 NM
													B738DR_hold_fo_type[hold_obj_fo] = legs_data[n][21] + 7
												end
												hold_obj_fo = hold_obj_fo + 1
											end
										end
									end
								end
									
									
									
									
									-- if B738DR_missed_app_act == 0 and (n+1) >= first_miss_app_idx and (n+1) <= last_miss_app_idx then
										-- B738DR_rte_fo_edit[obj2] = 2
									-- else
										-- B738DR_rte_fo_edit[obj2] = 0
									-- end
									-- if legs_intdir_act == 0 then
									-- -- if last_lat == 0 and last_lon == 0 then
										-- if legs_data[n+1][1] == "VECTOR" then
											-- B738DR_rte_fo_rot[obj2] = (math.deg(legs_data[n+1][2]) - mag_hdg - simDR_mag_variation + 360) % 360
											-- rte_dist = 15
										-- else
											-- B738DR_rte_fo_rot[obj2] = (math.deg(legs_data[n+1][2]) - mag_hdg ) % 360
											-- rte_dist = legs_data[n+1][3] * nd_zoom
											-- rte_dist = math.min(rte_dist, 15)
										-- end
									-- else
										-- if legs_data[n+1][1] == "VECTOR" then
											-- B738DR_rte_fo_rot[obj2] = (math.deg(legs_data[n+1][2]) - mag_hdg - simDR_mag_variation + 360) % 360
											-- rte_dist = 15
										-- else
											-- B738DR_rte_fo_rot[obj2] = (math.deg(legs_data[n+1][2]) - mag_hdg ) % 360
											-- rte_dist = legs_data[n+1][3] * nd_zoom
											-- rte_dist = math.min(rte_dist, 15)
										-- end
									-- end
									-- if n == legs_num and first_miss_app_idx > 0 then
										-- rte_dist = 0
									-- end
									-- B738DR_rte_fo_dist[obj2] = rte_dist
									-- if hold_obj_fo < 5 and n ~= offset then
										-- if B738DR_missed_app_act == 0 and (n+1) >= first_miss_app_idx and (n+1) <= last_miss_app_idx then
											-- rte_dist = 30	-- blue
										-- else
											-- rte_dist = 0
										-- end
										-- if legs_data[n+1][31] == "HA" or legs_data[n+1][31] == "HF" or legs_data[n+1][31] == "HM" then
											-- B738DR_hold_fo_x[hold_obj_fo] = nd_x
											-- B738DR_hold_fo_y[hold_obj_fo] = nd_y
											-- B738DR_hold_fo_crs[hold_obj_fo] = ((tonumber(legs_data[n+1][29]) / 10) - mag_hdg + 360) % 360
											-- if B738DR_efis_map_range_fo == 0 then	-- 5 NM
												-- B738DR_hold_fo_type[hold_obj_fo] = legs_data[n+1][21] + 1 + rte_dist
												-- B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n+1)
											-- elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
												-- B738DR_hold_fo_type[hold_obj_fo] = legs_data[n+1][21] + 3 + rte_dist
												-- B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n+1)
											-- elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
												-- B738DR_hold_fo_type[hold_obj_fo] = legs_data[n+1][21] + 5 + rte_dist
												-- B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n+1)
											-- elseif B738DR_efis_map_range_fo >= 3 then	-- 40 NM
												-- B738DR_hold_fo_type[hold_obj_fo] = legs_data[n+1][21] + 7 + rte_dist
											-- end
											-- hold_obj_fo = hold_obj_fo + 1
										-- end
								-- end
								-- if rte_plan_mode == 0 then
									-- if obj2 == 0 and n == offset then	--n == wpt_from then
										-- B738DR_rte_fo_show_act = 1
										-- B738DR_rte_fo_x_act = nd_x
										-- B738DR_rte_fo_y_act = nd_y
										-- if legs_intdir_act == 0 then
											-- B738DR_rte_fo_rot_act = (math.deg(legs_data[n][2]) - mag_hdg + 180) % 360
											-- rte_dist = legs_data[n][3] * nd_zoom
											-- rte_dist = math.min(rte_dist, 15)
										-- else
											-- B738DR_rte_fo_rot_act = (simDR_fmc_trk - mag_hdg + 180) % 360
											-- rte_dist = 15
										-- end
										-- B738DR_rte_fo_dist_act = rte_dist
										-- rte_act_enable = 1
									-- end
								-- else
									-- if n <= legs_step and obj2 == 0 and n > 1 then
										-- rte_act_enable = 1
										-- B738DR_rte_fo_show_act = 1
										-- B738DR_rte_fo_x_act = nd_x
										-- B738DR_rte_fo_y_act = nd_y
										-- B738DR_rte_fo_rot_act = (math.deg(legs_data[n][2]) - mag_hdg + 180) % 360
										-- rte_dist = legs_data[n][3] * nd_zoom
										-- rte_dist = math.min(rte_dist, 15)
										-- B738DR_rte_fo_dist_act = rte_dist
									-- end
								-- end
								-- if n == offset then
									-- if hold_obj_fo < 5 then
										-- if legs_data[n][31] == "HA" or legs_data[n][31] == "HF" or legs_data[n][31] == "HM" then
											-- B738DR_hold_fo_x[hold_obj_fo] = nd_x
											-- B738DR_hold_fo_y[hold_obj_fo] = nd_y
											-- B738DR_hold_fo_crs[hold_obj_fo] = ((tonumber(legs_data[n][29]) / 10) - mag_hdg + 360) % 360
											-- if B738DR_efis_map_range_fo == 0 then	-- 5 NM
												-- B738DR_hold_fo_type[hold_obj_fo] = legs_data[n][21] + 1
												-- B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n)
											-- elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
												-- B738DR_hold_fo_type[hold_obj_fo] = legs_data[n][21] + 3
												-- B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n)
											-- elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
												-- B738DR_hold_fo_type[hold_obj_fo] = legs_data[n][21] + 5
												-- B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist(n)
											-- elseif B738DR_efis_map_range_fo >= 3 then	-- 40 NM
												-- B738DR_hold_fo_type[hold_obj_fo] = legs_data[n][21] + 7
											-- end
											-- hold_obj_fo = hold_obj_fo + 1
										-- end
									-- end
								-- end
							end
							
							-- WAYPOINTS
							if n == offset then
								txt_white_id = ""
								txt_white_alt = ""
								txt_white_eta = ""
								txt_cyan_id = legs_data[n][1]
								if legs_data[n][13] <= 0 then
									tmp_wpt_eta = "--.--Z"
								else
									tmp_wpt_eta2 = math.floor(legs_data[n][13])
									tmp_wpt_eta3 = (legs_data[n][13] - tmp_wpt_eta2) * 60
									tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. "."
									tmp_wpt_eta = tmp_wpt_eta .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
									tmp_wpt_eta = tmp_wpt_eta .. "Z"
								end
								
								if B738DR_efis_data_fo_status == 1 then
									wpt_data = 0
									if legs_data[n][5] > 0 then
										tmp_wpt_alt = legs_data[n][5]
										tmp_wpt_type = legs_data[n][6]
										wpt_data = 1
									elseif legs_data[n][11] > 0 then
										tmp_wpt_alt = legs_data[n][11]
										tmp_wpt_type = 32
										wpt_data = 1
									end
									if wpt_data == 1 then
										if B738DR_flight_phase < 5 then
											if tmp_wpt_alt > B738DR_trans_alt then
												txt_cyan_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											else
												txt_cyan_alt = string.format("%5d", tmp_wpt_alt)
											end
										else
											if tmp_wpt_alt > B738DR_trans_lvl then
												txt_cyan_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											else
												txt_cyan_alt = string.format("%5d", tmp_wpt_alt)
											end
										end
										if tmp_wpt_type == 43 then	-- Above
											txt_cyan_alt = txt_cyan_alt .. "A"
										elseif tmp_wpt_type == 45 then	-- Below
											txt_cyan_alt = txt_cyan_alt .. "B"
										end
										txt_cyan_eta = tmp_wpt_eta		--"--.--Z"
									else
										txt_cyan_alt = ""
										txt_cyan_eta = ""
									end
								else
									txt_cyan_alt = ""
									txt_cyan_eta = ""
								end
								if legs_data[n][32] == 0 then
									wpt_type = 2
								else
									wpt_type = 4
								end
								--wpt_type = 2
							else
								txt_cyan_id = ""
								txt_cyan_alt = ""
								txt_cyan_eta = ""
								txt_white_id = legs_data[n][1]
								if legs_data[n][13] <= 0 then
									tmp_wpt_eta = "--.--Z"
								else
									tmp_wpt_eta2 = math.floor(legs_data[n][13])
									tmp_wpt_eta3 = (legs_data[n][13] - tmp_wpt_eta2) * 60
									tmp_wpt_eta = string.format("%02d", tmp_wpt_eta2) .. "."
									tmp_wpt_eta = tmp_wpt_eta .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2)
									tmp_wpt_eta = tmp_wpt_eta .. "Z"
								end
								if B738DR_efis_data_fo_status == 1 then
									wpt_data = 0
									if legs_data[n][5] > 0 then
										tmp_wpt_alt = legs_data[n][5]
										tmp_wpt_type = legs_data[n][6]
										wpt_data = 1
									elseif legs_data[n][11] > 0 then
										tmp_wpt_alt = legs_data[n][11]
										tmp_wpt_type = 32
										wpt_data = 1
									end
									
									if wpt_data == 1 then
										if B738DR_flight_phase < 5 then
											if tmp_wpt_alt > B738DR_trans_alt then
												txt_white_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											else
												txt_white_alt = string.format("%5d", tmp_wpt_alt)
											end
										else
											if tmp_wpt_alt > B738DR_trans_lvl then
												txt_white_alt = "FL" .. string.format("%03d", (tmp_wpt_alt/100))
											else
												txt_white_alt = string.format("%5d", tmp_wpt_alt)
											end
										end
										if tmp_wpt_type == 43 then	-- Above
											txt_white_alt = txt_white_alt .. "A"
										elseif tmp_wpt_type == 45 then	-- Below
											txt_white_alt = txt_white_alt .. "B"
										end
										txt_white_eta = tmp_wpt_eta		--"--.--Z"
									else
										txt_white_alt = ""
										txt_white_eta = ""
									end
								else
									txt_white_alt = ""
									txt_white_eta = ""
								end
								if legs_data[n][32] == 0 then
									wpt_type = 1
								else
									wpt_type = 3
								end
								--wpt_type = 1
							end
							
							if legs_data[n][1] == "VECTOR" then
								wpt_type = 0
								txt_white_id = ""
								txt_white_alt = ""
								txt_white_eta = ""
								txt_cyan_id = ""
								txt_cyan_alt = ""
								txt_cyan_eta = ""
							end
							if legs_data[n][31] == "HA" or legs_data[n][31] == "HF" or legs_data[n][31] == "HM" then
								if n ~= offset then
									wpt_type = 0
									txt_white_id = ""
									txt_white_alt = ""
									txt_white_eta = ""
									txt_cyan_id = ""
									txt_cyan_alt = ""
									txt_cyan_eta = ""
								end
							end
							
							if obj2 == 0 then
								B738DR_wpt_fo_id00w = txt_white_id
								B738DR_wpt_fo_alt00w = txt_white_alt
								B738DR_wpt_fo_eta00w = txt_white_eta
								B738DR_wpt_fo_id00m = txt_cyan_id
								B738DR_wpt_fo_alt00m = txt_cyan_alt
								B738DR_wpt_fo_eta00m = txt_cyan_eta
								B738DR_wpt_fo_type00 = wpt_type
							elseif obj2 == 1 then
								B738DR_wpt_fo_id01w = txt_white_id
								B738DR_wpt_fo_alt01w = txt_white_alt
								B738DR_wpt_fo_eta01w = txt_white_eta
								B738DR_wpt_fo_id01m = txt_cyan_id
								B738DR_wpt_fo_alt01m = txt_cyan_alt
								B738DR_wpt_fo_eta01m = txt_cyan_eta
								B738DR_wpt_fo_type01 = wpt_type
							elseif obj2 == 2 then
								B738DR_wpt_fo_id02w = txt_white_id
								B738DR_wpt_fo_alt02w = txt_white_alt
								B738DR_wpt_fo_eta02w = txt_white_eta
								B738DR_wpt_fo_id02m = txt_cyan_id
								B738DR_wpt_fo_alt02m = txt_cyan_alt
								B738DR_wpt_fo_eta02m = txt_cyan_eta
								B738DR_wpt_fo_type02 = wpt_type
							elseif obj2 == 3 then
								B738DR_wpt_fo_id03w = txt_white_id
								B738DR_wpt_fo_alt03w = txt_white_alt
								B738DR_wpt_fo_eta03w = txt_white_eta
								B738DR_wpt_fo_id03m = txt_cyan_id
								B738DR_wpt_fo_alt03m = txt_cyan_alt
								B738DR_wpt_fo_eta03m = txt_cyan_eta
								B738DR_wpt_fo_type03 = wpt_type
							elseif obj2 == 4 then
								B738DR_wpt_fo_id04w = txt_white_id
								B738DR_wpt_fo_alt04w = txt_white_alt
								B738DR_wpt_fo_eta04w = txt_white_eta
								B738DR_wpt_fo_id04m = txt_cyan_id
								B738DR_wpt_fo_alt04m = txt_cyan_alt
								B738DR_wpt_fo_eta04m = txt_cyan_eta
								B738DR_wpt_fo_type04 = wpt_type
							elseif obj2 == 5 then
								B738DR_wpt_fo_id05w = txt_white_id
								B738DR_wpt_fo_alt05w = txt_white_alt
								B738DR_wpt_fo_eta05w = txt_white_eta
								B738DR_wpt_fo_id05m = txt_cyan_id
								B738DR_wpt_fo_alt05m = txt_cyan_alt
								B738DR_wpt_fo_eta05m = txt_cyan_eta
								B738DR_wpt_fo_type05 = wpt_type
							elseif obj2 == 6 then
								B738DR_wpt_fo_id06w = txt_white_id
								B738DR_wpt_fo_alt06w = txt_white_alt
								B738DR_wpt_fo_eta06w = txt_white_eta
								B738DR_wpt_fo_id06m = txt_cyan_id
								B738DR_wpt_fo_alt06m = txt_cyan_alt
								B738DR_wpt_fo_eta06m = txt_cyan_eta
								B738DR_wpt_fo_type06 = wpt_type
							elseif obj2 == 7 then
								B738DR_wpt_fo_id07w = txt_white_id
								B738DR_wpt_fo_alt07w = txt_white_alt
								B738DR_wpt_fo_eta07w = txt_white_eta
								B738DR_wpt_fo_id07m = txt_cyan_id
								B738DR_wpt_fo_alt07m = txt_cyan_alt
								B738DR_wpt_fo_eta07m = txt_cyan_eta
								B738DR_wpt_fo_type07 = wpt_type
							elseif obj2 == 8 then
								B738DR_wpt_fo_id08w = txt_white_id
								B738DR_wpt_fo_alt08w = txt_white_alt
								B738DR_wpt_fo_eta08w = txt_white_eta
								B738DR_wpt_fo_id08m = txt_cyan_id
								B738DR_wpt_fo_alt08m = txt_cyan_alt
								B738DR_wpt_fo_eta08m = txt_cyan_eta
								B738DR_wpt_fo_type08 = wpt_type
							elseif obj2 == 9 then
								B738DR_wpt_fo_id09w = txt_white_id
								B738DR_wpt_fo_alt09w = txt_white_alt
								B738DR_wpt_fo_eta09w = txt_white_eta
								B738DR_wpt_fo_id09m = txt_cyan_id
								B738DR_wpt_fo_alt09m = txt_cyan_alt
								B738DR_wpt_fo_eta09m = txt_cyan_eta
								B738DR_wpt_fo_type09 = wpt_type
							elseif obj2 == 10 then
								B738DR_wpt_fo_id10w = txt_white_id
								B738DR_wpt_fo_alt10w = txt_white_alt
								B738DR_wpt_fo_eta10w = txt_white_eta
								B738DR_wpt_fo_id10m = txt_cyan_id
								B738DR_wpt_fo_alt10m = txt_cyan_alt
								B738DR_wpt_fo_eta10m = txt_cyan_eta
								B738DR_wpt_fo_type10 = wpt_type
							elseif obj2 == 11 then
								B738DR_wpt_fo_id11w = txt_white_id
								B738DR_wpt_fo_alt11w = txt_white_alt
								B738DR_wpt_fo_eta11w = txt_white_eta
								B738DR_wpt_fo_id11m = txt_cyan_id
								B738DR_wpt_fo_alt11m = txt_cyan_alt
								B738DR_wpt_fo_eta11m = txt_cyan_eta
								B738DR_wpt_fo_type11 = wpt_type
							elseif obj2 == 12 then
								B738DR_wpt_fo_id12w = txt_white_id
								B738DR_wpt_fo_alt12w = txt_white_alt
								B738DR_wpt_fo_eta12w = txt_white_eta
								B738DR_wpt_fo_id12m = txt_cyan_id
								B738DR_wpt_fo_alt12m = txt_cyan_alt
								B738DR_wpt_fo_eta12m = txt_cyan_eta
								B738DR_wpt_fo_type12 = wpt_type
							elseif obj2 == 13 then
								B738DR_wpt_fo_id13w = txt_white_id
								B738DR_wpt_fo_alt13w = txt_white_alt
								B738DR_wpt_fo_eta13w = txt_white_eta
								B738DR_wpt_fo_id13m = txt_cyan_id
								B738DR_wpt_fo_alt13m = txt_cyan_alt
								B738DR_wpt_fo_eta13m = txt_cyan_eta
								B738DR_wpt_fo_type13 = wpt_type
							elseif obj2 == 14 then
								B738DR_wpt_fo_id14w = txt_white_id
								B738DR_wpt_fo_alt14w = txt_white_alt
								B738DR_wpt_fo_eta14w = txt_white_eta
								B738DR_wpt_fo_id14m = txt_cyan_id
								B738DR_wpt_fo_alt14m = txt_cyan_alt
								B738DR_wpt_fo_eta14m = txt_cyan_eta
								B738DR_wpt_fo_type14 = wpt_type
							elseif obj2 == 15 then
								B738DR_wpt_fo_id15w = txt_white_id
								B738DR_wpt_fo_alt15w = txt_white_alt
								B738DR_wpt_fo_eta15w = txt_white_eta
								B738DR_wpt_fo_id15m = txt_cyan_id
								B738DR_wpt_fo_alt15m = txt_cyan_alt
								B738DR_wpt_fo_eta15m = txt_cyan_eta
								B738DR_wpt_fo_type15 = wpt_type
							elseif obj2 == 16 then
								B738DR_wpt_fo_id16w = txt_white_id
								B738DR_wpt_fo_alt16w = txt_white_alt
								B738DR_wpt_fo_eta16w = txt_white_eta
								B738DR_wpt_fo_id16m = txt_cyan_id
								B738DR_wpt_fo_alt16m = txt_cyan_alt
								B738DR_wpt_fo_eta16m = txt_cyan_eta
								B738DR_wpt_fo_type16 = wpt_type
							elseif obj2 == 17 then
								B738DR_wpt_fo_id17w = txt_white_id
								B738DR_wpt_fo_alt17w = txt_white_alt
								B738DR_wpt_fo_eta17w = txt_white_eta
								B738DR_wpt_fo_id17m = txt_cyan_id
								B738DR_wpt_fo_alt17m = txt_cyan_alt
								B738DR_wpt_fo_eta17m = txt_cyan_eta
								B738DR_wpt_fo_type17 = wpt_type
							elseif obj2 == 18 then
								B738DR_wpt_fo_id18w = txt_white_id
								B738DR_wpt_fo_alt18w = txt_white_alt
								B738DR_wpt_fo_eta18w = txt_white_eta
								B738DR_wpt_fo_id18m = txt_cyan_id
								B738DR_wpt_fo_alt18m = txt_cyan_alt
								B738DR_wpt_fo_eta18m = txt_cyan_eta
								B738DR_wpt_fo_type18 = wpt_type
							elseif obj2 == 19 then
								B738DR_wpt_fo_id19w = txt_white_id
								B738DR_wpt_fo_alt19w = txt_white_alt
								B738DR_wpt_fo_eta19w = txt_white_eta
								B738DR_wpt_fo_id19m = txt_cyan_id
								B738DR_wpt_fo_alt19m = txt_cyan_alt
								B738DR_wpt_fo_eta19m = txt_cyan_eta
								B738DR_wpt_fo_type19 = wpt_type
							end
							
							
							obj2 = obj2 + 1
						end
					else
						--rte_act_enable = 1
						if obj2 == 0 and n == offset and rte_plan_mode == 0 then
							if nd_x < 0 then
								if nd_y == 0 then
									nd_y0 = 0
									nd_x0 = -11
								elseif nd_y > 0 then
									nd_x = -nd_x
									nd_x0 = (nd_x / nd_y) * 10
									nd_x0 = -nd_x0
									nd_y0 = 11
								else
									nd_x = -nd_x
									nd_y = -nd_y
									nd_x0 = (nd_x / nd_y) * 10
									nd_x0 = -nd_x0
									nd_y0 = -11
								end
							else
								if nd_y == 0 then
									nd_y0 = 0
									nd_x0 = 11
								elseif nd_y > 0 then
									nd_x0 = (nd_x / nd_y) * 10
									nd_y0 = 11
								else
									nd_y = -nd_y
									nd_x0 = (nd_x / nd_y) * 10
									nd_y0 = -11
								end
							end
							rte_act_enable_fo = 1
							B738DR_rte_fo_show_act = 1
							B738DR_rte_fo_x_act = nd_x0
							B738DR_rte_fo_y_act = nd_y0
							if legs_intdir_act == 0 then
								B738DR_rte_fo_rot_act = (math.deg(legs_data[n][2]) - mag_hdg + 180) % 360
							else
								B738DR_rte_fo_rot_act = (simDR_fmc_trk - mag_hdg + 180) % 360
							end
							if n == offset then
								rte_dist = 15
							else
								rte_dist = legs_data[n][3] * nd_zoom
								rte_dist = math.min(rte_dist, 15)
							end
							B738DR_rte_fo_dist_act = rte_dist
							
						end
					end
				end
			
			end
			
			end
			
			-- MOD LEGS First Officer
			
			--if calc_rte_enable2 == 0 then
			
			if des_app2 == "------" then
				wpt_to = legs_num2 + 1
			else
				wpt_to = legs_num2
			end
			
			if wpt_from > wpt_to then
				wpt_from = wpt_to
			end
			
			for n = wpt_from, wpt_to do
			
			if legs_data2[n][1] ~= "DISCONTINUITY" then --and calc_rte_enable2 == 0 then --and legs_data[n][1] ~= "VECTOR" then
				
				if last_lat == 0 and last_lon == 0 then
					nd_lat2 = math.rad(legs_data2[n][7])
					nd_lon2 = math.rad(legs_data2[n][8])
				else
					nd_lat2 = math.rad(legs_data2[n][7])
					nd_lon2 = math.rad(legs_data2[n][8])
				end
				
				nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
				
				if nd_dis < 645 then
					
					nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
					nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
					nd_hdg = math.atan2(nd_y, nd_x)
					nd_hdg = math.deg(nd_hdg)
					nd_hdg = (nd_hdg + 360) % 360
					
					delta_hdg = ((((nd_hdg - mag_hdg) % 360) + 540) % 360) - 180
					
					if delta_hdg >= 0 and delta_hdg <= 90 then
						-- right
						nd_on_off = 1
						delta_hdg = 90 - delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = nd_dis * math.sin(delta_hdg)
						nd_x = nd_dis * math.cos(delta_hdg)
					elseif delta_hdg < 0 and delta_hdg >= -90 then
						-- left
						nd_on_off = 1
						delta_hdg = 90 + delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = nd_dis * math.sin(delta_hdg)
						nd_x = -nd_dis * math.cos(delta_hdg)
					elseif delta_hdg >= 90 then
						-- right back
						nd_on_off = 1
						delta_hdg = delta_hdg - 90
						delta_hdg = math.rad(delta_hdg)
						nd_y = -nd_dis * math.sin(delta_hdg)
						nd_x = nd_dis * math.cos(delta_hdg)
					elseif delta_hdg <= -90 then
						-- left back
						nd_on_off = 1
						delta_hdg = -90 - delta_hdg
						delta_hdg = math.rad(delta_hdg)
						nd_y = -nd_dis * math.sin(delta_hdg)
						nd_x = -nd_dis * math.cos(delta_hdg)
					end
					
					if B738DR_efis_map_range_fo == 0 then	-- 5 NM
						nd_zoom = 2
					elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
						nd_zoom = 1
					elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
						nd_zoom = 0.5
					elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
						nd_zoom = 0.25
					elseif B738DR_efis_map_range_fo == 4 then	-- 80 NM
						nd_zoom = 0.125
					elseif B738DR_efis_map_range_fo == 5 then	-- 160 NM
						nd_zoom = 0.0625
					elseif B738DR_efis_map_range_fo == 6 then	-- 320 NM
						nd_zoom = 0.03125
					else	-- 640 NM
						nd_zoom = 0.015625
						--nd_on_off = 0
					end
					
					if rte_plan_mode == 1 then
						nd_zoom = nd_zoom / 2
					end
					
					nd_x = nd_x * nd_zoom		-- zoom
					nd_y = nd_y * nd_zoom		-- zoom
					if B738DR_fo_map_mode == 3 then
						nd_y = nd_y + 4.1	-- adjust center
					elseif B738DR_fo_map_mode == 0 and B738DR_fo_exp_map_mode == 0 then
						nd_y = nd_y + 4.1	-- adjust center
					else
						if B738DR_fo_map_mode == 3 then
							nd_y = nd_y + 4.1	-- adjust
						end
					end
					
					if nd_x < -8.0 or nd_x > 8.0 then
						nd_on_off = 0
					end
					if nd_y > 11.0 or nd_y < -2 then
						nd_on_off = 0
					end
					
					if n > 0 then
						-- if n ~= legs_intdir_idx or legs_intdir ~= 1 then
							-- if legs_data2[n][17] < 100 then
								-- nd_on_off = 0
							-- end
						-- else
							-- B738DR_rte_edit_show_act = 0
						-- end
						-- if n == legs_intdir_idx and legs_intdir == 1 then
							-- -- ignore check [17]
						-- else
						if legs_num > 1 then
							if n ~= legs_intdir_idx or legs_intdir ~= 1 then
								if legs_data2[n][17] < 100 then
									nd_on_off = 0
								end
							end
						end
					end
					
					--B738DR_rte_edit_show_act = 0
					
					if nd_on_off == 1 then
						-- WAYPOINTS and ROUTE
						if obj2 < max_obj then	-- max number displayed objects
							B738DR_wpt_fo_x[obj2] = nd_x
							B738DR_wpt_fo_y[obj2] = nd_y
							
							-- DRAW ROUTE
							if n > 0 then --and n <= legs_num then
								if n == legs_intdir_idx and legs_intdir == 1 then
									rte_act_enable2_fo = 1
								end
								
								rte_n = legs_num2 + 1
								if n == rte_n then
									-- DES ICAO
									B738DR_rte_fo_show[obj2] = 0
									--rte_act_enable2 = 1
								else
									
									if legs_data2[n][17] > 99 or legs_num == 1 then
									
										--if rte_act_enable2 == 0 then
											--if legs_data2[n][17] < 100 then
												B738DR_rte_fo_show[obj2] = 1
											--else
												--B738DR_rte_show[obj] = 0
											--end
										--else
											--B738DR_rte_show[obj] = 0
										--end
										B738DR_rte_fo_x[obj2] = nd_x
										B738DR_rte_fo_y[obj2] = nd_y
										if legs_num == 1 then
											B738DR_rte_fo_edit[obj2] = 2	-- 0-active, 1-mod, 2-not active
										else
											B738DR_rte_fo_edit[obj2] = 1	-- 0-active, 1-mod, 2-not active
										end
										if legs_intdir_act == 0 then
										-- if last_lat == 0 and last_lon == 0 then
											if legs_data2[n+1][1] == "VECTOR" then
												--B738DR_rte_rot[obj] = (math.deg(legs_data[n+1][2]) - mag_hdg - simDR_mag_variation + 360) % 360
												B738DR_rte_fo_rot[obj2] = (math.deg(legs_data2[n+1][2]) - mag_hdg + 360) % 360
												rte_dist = 15
											else
												B738DR_rte_fo_rot[obj2] = (math.deg(legs_data2[n+1][2]) - mag_hdg ) % 360
												rte_dist = legs_data2[n+1][3] * nd_zoom
												rte_dist = math.min(rte_dist, 15)
											end
										else
											if legs_data2[n+1][1] == "VECTOR" then
												--B738DR_rte_rot[obj] = (math.deg(legs_data[n+1][2]) - mag_hdg - simDR_mag_variation + 360) % 360
												B738DR_rte_fo_rot[obj2] = (math.deg(legs_data2[n+1][2]) - mag_hdg + 360) % 360
												rte_dist = 15
											else
												B738DR_rte_fo_rot[obj2] = (math.deg(legs_data2[n+1][2]) - mag_hdg ) % 360
												rte_dist = legs_data2[n+1][3] * nd_zoom
												rte_dist = math.min(rte_dist, 15)
											end
										end
										B738DR_rte_fo_dist[obj2] = rte_dist
									
										if hold_obj_fo < 5 then
											if legs_data2[n][31] == "HA" or legs_data2[n][31] == "HF" or legs_data2[n][31] == "HM" then
												B738DR_rte_fo_show[obj2] = 0
												B738DR_hold_fo_x[hold_obj_fo] = nd_x
												B738DR_hold_fo_y[hold_obj_fo] = nd_y
												B738DR_hold_fo_crs[hold_obj_fo] = ((tonumber(legs_data2[n][29]) / 10) - mag_hdg + 360) % 360
												if B738DR_efis_map_range_fo == 0 then	-- 5 NM
													B738DR_hold_fo_type[hold_obj_fo] = legs_data2[n][21] + 21
													B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist2(n)
												elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
													B738DR_hold_fo_type[hold_obj_fo] = legs_data2[n][21] + 23
													B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist2(n)
												elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
													B738DR_hold_fo_type[hold_obj_fo] = legs_data2[n][21] + 25
													B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist2(n)
												elseif B738DR_efis_map_range_fo >= 3 then	-- 40 NM
													B738DR_hold_fo_type[hold_obj_fo] = legs_data2[n][21] + 27
												end
												hold_obj_fo = hold_obj_fo + 1
											end
										end
									else
										
										B738DR_rte_fo_show[obj2] = 0
									
									end
								end
								if rte_plan_mode == 0 then
									-- if n == legs_intdir_idx and legs_intdir == 1 then
										-- B738DR_rte_fo_edit_show_act = 1
										-- if legs_num == 1 then
											-- B738DR_rte_fo_edit_type_act = 2	-- 1-mod, 2-not active
										-- else
											-- B738DR_rte_fo_edit_type_act = 1	-- 1-mod, 2-not active
										-- end
										-- B738DR_rte_fo_edit_x_act = nd_x
										-- B738DR_rte_fo_edit_y_act = nd_y
										-- --B738DR_rte_edit_rot_act = (simDR_fmc_trk - mag_hdg + 180) % 360
										-- --B738DR_rte_edit_rot_act = (legs_intdir_crs - simDR_mag_variation + 180) % 360
										-- B738DR_rte_fo_edit_rot_act = (legs_intdir_crs_mod - mag_hdg - simDR_mag_variation + 180 + 360) % 360
										-- rte_dist = 15
										-- B738DR_rte_fo_edit_dist_act = rte_dist
									-- else
										-- B738DR_rte_fo_edit_show_act = 0
									-- end
									
									
									
									if n == legs_intdir_idx and legs_intdir == 1 then
										B738DR_rte_fo_edit_show_act = 1
										if legs_num == 1 then
											B738DR_rte_fo_edit_type_act = 2	-- 1-mod, 2-not active
										else
											B738DR_rte_fo_edit_type_act = 1	-- 1-mod, 2-not active
										end
										B738DR_rte_fo_edit_x_act = nd_x
										B738DR_rte_fo_edit_y_act = nd_y
												
												
										if legs_intdir_crs2 == -1 then
										
											B738DR_rte_fo_edit_rot_act = (nd_hdg - mag_hdg + 180) % 360
											--rte_dist = 15
											rte_dist = nd_dis * nd_zoom
											if rte_dist > 15 then
												rte_dist = 15
											end
										else
											B738DR_rte_fo_edit_rot_act = (legs_intdir_crs_mod - mag_hdg - simDR_mag_variation + 180 + 360) % 360
											rte_dist = 15
										end
										B738DR_rte_fo_edit_dist_act = rte_dist
									else
										B738DR_rte_fo_edit_show_act = 0
									end
									-- if obj == 0 and n == offset then	--n == wpt_from then
										-- B738DR_rte_edit_show_act = 1
										-- --B738DR_rte_edit_act = 1
										-- B738DR_rte_edit_x_act = nd_x
										-- B738DR_rte_edit_y_act = nd_y
										-- if legs_intdir_act == 0 then
											-- B738DR_rte_edit_rot_act = (math.deg(legs_data2[n][2]) - mag_hdg + 180) % 360
											-- rte_dist = legs_data2[n][3] * nd_zoom
											-- rte_dist = math.min(rte_dist, 15)
										-- else
											-- B738DR_rte_edit_rot_act = (simDR_fmc_trk - mag_hdg + 180) % 360
											-- rte_dist = 15
										-- end
										-- B738DR_rte_edit_dist_act = rte_dist
										-- --rte_act_enable2 = 1
									-- else
										-- B738DR_rte_edit_show_act = 0
									-- end
								else
									if n <= legs_step2 and obj2 == 0 and n > 1 then
										--rte_act_enable2 = 1
										B738DR_rte_fo_edit_show_act = 1
										if legs_num == 1 then
											B738DR_rte_fo_edit_type_act = 2	-- 1-mod, 2-not active
										else
											B738DR_rte_fo_edit_type_act = 1	-- 1-mod, 2-not active
										end
										--B738DR_rte_edit_act = 1
										B738DR_rte_fo_edit_x_act = nd_x
										B738DR_rte_fo_edit_y_act = nd_y
										B738DR_rte_fo_edit_rot_act = (math.deg(legs_data2[n][2]) - mag_hdg + 180) % 360
										rte_dist = legs_data2[n][3] * nd_zoom
										rte_dist = math.min(rte_dist, 15)
										B738DR_rte_fo_edit_dist_act = rte_dist
									else
										B738DR_rte_fo_edit_show_act = 0
									end
								end
								if n == offset then
									if hold_obj_fo < 5 then
										if legs_data2[n][31] == "HA" or legs_data2[n][31] == "HF" or legs_data2[n][31] == "HM" then
											B738DR_hold_fo_x[hold_obj_fo] = nd_x
											B738DR_hold_fo_y[hold_obj_fo] = nd_y
											B738DR_hold_fo_crs[hold_obj_fo] = ((tonumber(legs_data2[n][29]) / 10) - mag_hdg + 360) % 360
											if B738DR_efis_map_range_fo == 0 then	-- 5 NM
												B738DR_hold_fo_type[hold_obj_fo] = legs_data2[n][21] + 21
												B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist2(n)
											elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
												B738DR_hold_fo_type[hold_obj_fo] = legs_data2[n][21] + 23
												B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist2(n)
											elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
												B738DR_hold_fo_type[hold_obj_fo] = legs_data2[n][21] + 25
												B738DR_hold_fo_dist[hold_obj_fo] = calc_hold_dist2(n)
											elseif B738DR_efis_map_range_fo >= 3 then	-- 40 NM
												B738DR_hold_fo_type[hold_obj_fo] = legs_data2[n][21] + 27
											end
											hold_obj_fo = hold_obj_fo + 1
										end
									end
								end
							end
							
							-- WAYPOINTS
								
								if legs_data2[n][17] < 200 then
									if legs_num == 1 then
										txt_white_id = legs_data2[n][1]
										wpt_type = 1
									else
										txt_white_id = ""
										wpt_type = 0
									end
								else
									txt_white_id = legs_data2[n][1]
									wpt_type = 1
								end
								txt_white_alt = ""
								txt_white_eta = ""
								txt_cyan_id = ""
								txt_cyan_alt = ""
								txt_cyan_eta = ""
								
							
							if legs_data2[n][1] == "VECTOR" then
								wpt_type = 0
								txt_white_id = ""
								txt_white_alt = ""
								txt_white_eta = ""
								txt_cyan_id = ""
								txt_cyan_alt = ""
								txt_cyan_eta = ""
							end
							if legs_data2[n][31] == "HA" or legs_data2[n][31] == "HF" or legs_data2[n][31] == "HM" then
								if n ~= offset then
									wpt_type = 0
									txt_white_id = ""
									txt_white_alt = ""
									txt_white_eta = ""
									txt_cyan_id = ""
									txt_cyan_alt = ""
									txt_cyan_eta = ""
								end
							end
							
							if obj2 == 0 then
								B738DR_wpt_fo_id00w = txt_white_id
								B738DR_wpt_fo_alt00w = txt_white_alt
								B738DR_wpt_fo_eta00w = txt_white_eta
								B738DR_wpt_fo_id00m = txt_cyan_id
								B738DR_wpt_fo_alt00m = txt_cyan_alt
								B738DR_wpt_fo_eta00m = txt_cyan_eta
								B738DR_wpt_fo_type00 = wpt_type
							elseif obj2 == 1 then
								B738DR_wpt_fo_id01w = txt_white_id
								B738DR_wpt_fo_alt01w = txt_white_alt
								B738DR_wpt_fo_eta01w = txt_white_eta
								B738DR_wpt_fo_id01m = txt_cyan_id
								B738DR_wpt_fo_alt01m = txt_cyan_alt
								B738DR_wpt_fo_eta01m = txt_cyan_eta
								B738DR_wpt_fo_type01 = wpt_type
							elseif obj2 == 2 then
								B738DR_wpt_fo_id02w = txt_white_id
								B738DR_wpt_fo_alt02w = txt_white_alt
								B738DR_wpt_fo_eta02w = txt_white_eta
								B738DR_wpt_fo_id02m = txt_cyan_id
								B738DR_wpt_fo_alt02m = txt_cyan_alt
								B738DR_wpt_fo_eta02m = txt_cyan_eta
								B738DR_wpt_fo_type02 = wpt_type
							elseif obj2 == 3 then
								B738DR_wpt_fo_id03w = txt_white_id
								B738DR_wpt_fo_alt03w = txt_white_alt
								B738DR_wpt_fo_eta03w = txt_white_eta
								B738DR_wpt_fo_id03m = txt_cyan_id
								B738DR_wpt_fo_alt03m = txt_cyan_alt
								B738DR_wpt_fo_eta03m = txt_cyan_eta
								B738DR_wpt_fo_type03 = wpt_type
							elseif obj2 == 4 then
								B738DR_wpt_fo_id04w = txt_white_id
								B738DR_wpt_fo_alt04w = txt_white_alt
								B738DR_wpt_fo_eta04w = txt_white_eta
								B738DR_wpt_fo_id04m = txt_cyan_id
								B738DR_wpt_fo_alt04m = txt_cyan_alt
								B738DR_wpt_fo_eta04m = txt_cyan_eta
								B738DR_wpt_fo_type04 = wpt_type
							elseif obj2 == 5 then
								B738DR_wpt_fo_id05w = txt_white_id
								B738DR_wpt_fo_alt05w = txt_white_alt
								B738DR_wpt_fo_eta05w = txt_white_eta
								B738DR_wpt_fo_id05m = txt_cyan_id
								B738DR_wpt_fo_alt05m = txt_cyan_alt
								B738DR_wpt_fo_eta05m = txt_cyan_eta
								B738DR_wpt_fo_type05 = wpt_type
							elseif obj2 == 6 then
								B738DR_wpt_fo_id06w = txt_white_id
								B738DR_wpt_fo_alt06w = txt_white_alt
								B738DR_wpt_fo_eta06w = txt_white_eta
								B738DR_wpt_fo_id06m = txt_cyan_id
								B738DR_wpt_fo_alt06m = txt_cyan_alt
								B738DR_wpt_fo_eta06m = txt_cyan_eta
								B738DR_wpt_fo_type06 = wpt_type
							elseif obj2 == 7 then
								B738DR_wpt_fo_id07w = txt_white_id
								B738DR_wpt_fo_alt07w = txt_white_alt
								B738DR_wpt_fo_eta07w = txt_white_eta
								B738DR_wpt_fo_id07m = txt_cyan_id
								B738DR_wpt_fo_alt07m = txt_cyan_alt
								B738DR_wpt_fo_eta07m = txt_cyan_eta
								B738DR_wpt_fo_type07 = wpt_type
							elseif obj2 == 8 then
								B738DR_wpt_fo_id08w = txt_white_id
								B738DR_wpt_fo_alt08w = txt_white_alt
								B738DR_wpt_fo_eta08w = txt_white_eta
								B738DR_wpt_fo_id08m = txt_cyan_id
								B738DR_wpt_fo_alt08m = txt_cyan_alt
								B738DR_wpt_fo_eta08m = txt_cyan_eta
								B738DR_wpt_fo_type08 = wpt_type
							elseif obj2 == 9 then
								B738DR_wpt_fo_id09w = txt_white_id
								B738DR_wpt_fo_alt09w = txt_white_alt
								B738DR_wpt_fo_eta09w = txt_white_eta
								B738DR_wpt_fo_id09m = txt_cyan_id
								B738DR_wpt_fo_alt09m = txt_cyan_alt
								B738DR_wpt_fo_eta09m = txt_cyan_eta
								B738DR_wpt_fo_type09 = wpt_type
							elseif obj2 == 10 then
								B738DR_wpt_fo_id10w = txt_white_id
								B738DR_wpt_fo_alt10w = txt_white_alt
								B738DR_wpt_fo_eta10w = txt_white_eta
								B738DR_wpt_fo_id10m = txt_cyan_id
								B738DR_wpt_fo_alt10m = txt_cyan_alt
								B738DR_wpt_fo_eta10m = txt_cyan_eta
								B738DR_wpt_fo_type10 = wpt_type
							elseif obj2 == 11 then
								B738DR_wpt_fo_id11w = txt_white_id
								B738DR_wpt_fo_alt11w = txt_white_alt
								B738DR_wpt_fo_eta11w = txt_white_eta
								B738DR_wpt_fo_id11m = txt_cyan_id
								B738DR_wpt_fo_alt11m = txt_cyan_alt
								B738DR_wpt_fo_eta11m = txt_cyan_eta
								B738DR_wpt_fo_type11 = wpt_type
							elseif obj2 == 12 then
								B738DR_wpt_fo_id12w = txt_white_id
								B738DR_wpt_fo_alt12w = txt_white_alt
								B738DR_wpt_fo_eta12w = txt_white_eta
								B738DR_wpt_fo_id12m = txt_cyan_id
								B738DR_wpt_fo_alt12m = txt_cyan_alt
								B738DR_wpt_fo_eta12m = txt_cyan_eta
								B738DR_wpt_fo_type12 = wpt_type
							elseif obj2 == 13 then
								B738DR_wpt_fo_id13w = txt_white_id
								B738DR_wpt_fo_alt13w = txt_white_alt
								B738DR_wpt_fo_eta13w = txt_white_eta
								B738DR_wpt_fo_id13m = txt_cyan_id
								B738DR_wpt_fo_alt13m = txt_cyan_alt
								B738DR_wpt_fo_eta13m = txt_cyan_eta
								B738DR_wpt_fo_type13 = wpt_type
							elseif obj2 == 14 then
								B738DR_wpt_fo_id14w = txt_white_id
								B738DR_wpt_fo_alt14w = txt_white_alt
								B738DR_wpt_fo_eta14w = txt_white_eta
								B738DR_wpt_fo_id14m = txt_cyan_id
								B738DR_wpt_fo_alt14m = txt_cyan_alt
								B738DR_wpt_fo_eta14m = txt_cyan_eta
								B738DR_wpt_fo_type14 = wpt_type
							elseif obj2 == 15 then
								B738DR_wpt_fo_id15w = txt_white_id
								B738DR_wpt_fo_alt15w = txt_white_alt
								B738DR_wpt_fo_eta15w = txt_white_eta
								B738DR_wpt_fo_id15m = txt_cyan_id
								B738DR_wpt_fo_alt15m = txt_cyan_alt
								B738DR_wpt_fo_eta15m = txt_cyan_eta
								B738DR_wpt_fo_type15 = wpt_type
							elseif obj2 == 16 then
								B738DR_wpt_fo_id16w = txt_white_id
								B738DR_wpt_fo_alt16w = txt_white_alt
								B738DR_wpt_fo_eta16w = txt_white_eta
								B738DR_wpt_fo_id16m = txt_cyan_id
								B738DR_wpt_fo_alt16m = txt_cyan_alt
								B738DR_wpt_fo_eta16m = txt_cyan_eta
								B738DR_wpt_fo_type16 = wpt_type
							elseif obj2 == 17 then
								B738DR_wpt_fo_id17w = txt_white_id
								B738DR_wpt_fo_alt17w = txt_white_alt
								B738DR_wpt_fo_eta17w = txt_white_eta
								B738DR_wpt_fo_id17m = txt_cyan_id
								B738DR_wpt_fo_alt17m = txt_cyan_alt
								B738DR_wpt_fo_eta17m = txt_cyan_eta
								B738DR_wpt_fo_type17 = wpt_type
							elseif obj2 == 18 then
								B738DR_wpt_fo_id18w = txt_white_id
								B738DR_wpt_fo_alt18w = txt_white_alt
								B738DR_wpt_fo_eta18w = txt_white_eta
								B738DR_wpt_fo_id18m = txt_cyan_id
								B738DR_wpt_fo_alt18m = txt_cyan_alt
								B738DR_wpt_fo_eta18m = txt_cyan_eta
								B738DR_wpt_fo_type18 = wpt_type
							elseif obj2 == 19 then
								B738DR_wpt_fo_id19w = txt_white_id
								B738DR_wpt_fo_alt19w = txt_white_alt
								B738DR_wpt_fo_eta19w = txt_white_eta
								B738DR_wpt_fo_id19m = txt_cyan_id
								B738DR_wpt_fo_alt19m = txt_cyan_alt
								B738DR_wpt_fo_eta19m = txt_cyan_eta
								B738DR_wpt_fo_type19 = wpt_type
							end
							
							
							obj2 = obj2 + 1
						end
					
					
					
					-- else
						-- --rte_act_enable = 1
						-- if obj == 0 and n == offset and rte_plan_mode == 0 then
							-- if nd_x < 0 then
								-- if nd_y == 0 then
									-- nd_y0 = 0
									-- nd_x0 = -11
								-- elseif nd_y > 0 then
									-- nd_x = -nd_x
									-- nd_x0 = (nd_x / nd_y) * 11
									-- nd_x0 = -nd_x0
									-- nd_y0 = 11
								-- else
									-- nd_x = -nd_x
									-- nd_y = -nd_y
									-- nd_x0 = (nd_x / nd_y) * 11
									-- nd_x0 = -nd_x0
									-- nd_y0 = -11
								-- end
							-- else
								-- if nd_y == 0 then
									-- nd_y0 = 0
									-- nd_x0 = 11
								-- elseif nd_y > 0 then
									-- nd_x0 = (nd_x / nd_y) * 11
									-- nd_y0 = 11
								-- else
									-- nd_y = -nd_y
									-- nd_x0 = (nd_x / nd_y) * 11
									-- nd_y0 = -11
								-- end
							-- end
							-- --rte_act_enable2 = 1
							-- B738DR_rte_show_act = 1
							-- B738DR_rte_x_act = nd_x0
							-- B738DR_rte_y_act = nd_y0
							-- if legs_intdir_act == 0 then
								-- B738DR_rte_rot_act = (math.deg(legs_data2[n][2]) - mag_hdg + 180) % 360
							-- else
								-- B738DR_rte_rot_act = (simDR_fmc_trk - mag_hdg + 180) % 360
							-- end
							-- if n == offset then
								-- rte_dist = 15
							-- else
								-- rte_dist = legs_data2[n][3] * nd_zoom
								-- rte_dist = math.min(rte_dist, 15)
							-- end
							-- B738DR_rte_dist_act = rte_dist
							
						-- end
					end
				end
			
			end
			
			end
			
			--end
			
		end
		
	end
	-- turn off unused objects
	if obj < max_obj then
		for n = obj, max_obj-1 do
			if n == 0 then
				B738DR_wpt_id00w = ""
				B738DR_wpt_alt00w = ""
				B738DR_wpt_eta00w = ""
				B738DR_wpt_id00m = ""
				B738DR_wpt_alt00m = ""
				B738DR_wpt_eta00m = ""
				B738DR_wpt_type00 = 0
			elseif n == 1 then
				B738DR_wpt_id01w = ""
				B738DR_wpt_alt01w = ""
				B738DR_wpt_eta01w = ""
				B738DR_wpt_id01m = ""
				B738DR_wpt_alt01m = ""
				B738DR_wpt_eta01m = ""
				B738DR_wpt_type01 = 0
			elseif n == 2 then
				B738DR_wpt_id02w = ""
				B738DR_wpt_alt02w = ""
				B738DR_wpt_eta02w = ""
				B738DR_wpt_id02m = ""
				B738DR_wpt_alt02m = ""
				B738DR_wpt_eta02m = ""
				B738DR_wpt_type02 = 0
			elseif n == 3 then
				B738DR_wpt_id03w = ""
				B738DR_wpt_alt03w = ""
				B738DR_wpt_eta03w = ""
				B738DR_wpt_id03m = ""
				B738DR_wpt_alt03m = ""
				B738DR_wpt_eta03m = ""
				B738DR_wpt_type03 = 0
			elseif n == 4 then
				B738DR_wpt_id04w = ""
				B738DR_wpt_alt04w = ""
				B738DR_wpt_eta04w = ""
				B738DR_wpt_id04m = ""
				B738DR_wpt_alt04m = ""
				B738DR_wpt_eta04m = ""
				B738DR_wpt_type04 = 0
			elseif n == 5 then
				B738DR_wpt_id05w = ""
				B738DR_wpt_alt05w = ""
				B738DR_wpt_eta05w = ""
				B738DR_wpt_id05m = ""
				B738DR_wpt_alt05m = ""
				B738DR_wpt_eta05m = ""
				B738DR_wpt_type05 = 0
			elseif n == 6 then
				B738DR_wpt_id06w = ""
				B738DR_wpt_alt06w = ""
				B738DR_wpt_eta06w = ""
				B738DR_wpt_id06m = ""
				B738DR_wpt_alt06m = ""
				B738DR_wpt_eta06m = ""
				B738DR_wpt_type06 = 0
			elseif n == 7 then
				B738DR_wpt_id07w = ""
				B738DR_wpt_alt07w = ""
				B738DR_wpt_eta07w = ""
				B738DR_wpt_id07m = ""
				B738DR_wpt_alt07m = ""
				B738DR_wpt_eta07m = ""
				B738DR_wpt_type07 = 0
			elseif n == 8 then
				B738DR_wpt_id08w = ""
				B738DR_wpt_alt08w = ""
				B738DR_wpt_eta08w = ""
				B738DR_wpt_id08m = ""
				B738DR_wpt_alt08m = ""
				B738DR_wpt_eta08m = ""
				B738DR_wpt_type08 = 0
			elseif n == 9 then
				B738DR_wpt_id09w = ""
				B738DR_wpt_alt09w = ""
				B738DR_wpt_eta09w = ""
				B738DR_wpt_id09m = ""
				B738DR_wpt_alt09m = ""
				B738DR_wpt_eta09m = ""
				B738DR_wpt_type09 = 0
			elseif n == 10 then
				B738DR_wpt_id10w = ""
				B738DR_wpt_alt10w = ""
				B738DR_wpt_eta10w = ""
				B738DR_wpt_id10m = ""
				B738DR_wpt_alt10m = ""
				B738DR_wpt_eta10m = ""
				B738DR_wpt_type10 = 0
			elseif n == 11 then
				B738DR_wpt_id11w = ""
				B738DR_wpt_alt11w = ""
				B738DR_wpt_eta11w = ""
				B738DR_wpt_id11m = ""
				B738DR_wpt_alt11m = ""
				B738DR_wpt_eta11m = ""
				B738DR_wpt_type11 = 0
			elseif n == 12 then
				B738DR_wpt_id12w = ""
				B738DR_wpt_alt12w = ""
				B738DR_wpt_eta12w = ""
				B738DR_wpt_id12m = ""
				B738DR_wpt_alt12m = ""
				B738DR_wpt_eta12m = ""
				B738DR_wpt_type12 = 0
			elseif n == 13 then
				B738DR_wpt_id13w = ""
				B738DR_wpt_alt13w = ""
				B738DR_wpt_eta13w = ""
				B738DR_wpt_id13m = ""
				B738DR_wpt_alt13m = ""
				B738DR_wpt_eta13m = ""
				B738DR_wpt_type13 = 0
			elseif n == 14 then
				B738DR_wpt_id14w = ""
				B738DR_wpt_alt14w = ""
				B738DR_wpt_eta14w = ""
				B738DR_wpt_id14m = ""
				B738DR_wpt_alt14m = ""
				B738DR_wpt_eta14m = ""
				B738DR_wpt_type14 = 0
			elseif n == 15 then
				B738DR_wpt_id15w = ""
				B738DR_wpt_alt15w = ""
				B738DR_wpt_eta15w = ""
				B738DR_wpt_id15m = ""
				B738DR_wpt_alt15m = ""
				B738DR_wpt_eta15m = ""
				B738DR_wpt_type15 = 0
			elseif n == 16 then
				B738DR_wpt_id16w = ""
				B738DR_wpt_alt16w = ""
				B738DR_wpt_eta16w = ""
				B738DR_wpt_id16m = ""
				B738DR_wpt_alt16m = ""
				B738DR_wpt_eta16m = ""
				B738DR_wpt_type16 = 0
			elseif n == 17 then
				B738DR_wpt_id17w = ""
				B738DR_wpt_alt17w = ""
				B738DR_wpt_eta17w = ""
				B738DR_wpt_id17m = ""
				B738DR_wpt_alt17m = ""
				B738DR_wpt_eta17m = ""
				B738DR_wpt_type17 = 0
			elseif n == 18 then
				B738DR_wpt_id18w = ""
				B738DR_wpt_alt18w = ""
				B738DR_wpt_eta18w = ""
				B738DR_wpt_id18m = ""
				B738DR_wpt_alt18m = ""
				B738DR_wpt_eta18m = ""
				B738DR_wpt_type18 = 0
			elseif n == 19 then
				B738DR_wpt_id19w = ""
				B738DR_wpt_alt19w = ""
				B738DR_wpt_eta19w = ""
				B738DR_wpt_id19m = ""
				B738DR_wpt_alt19m = ""
				B738DR_wpt_eta19m = ""
				B738DR_wpt_type19 = 0
			end
			
			B738DR_rte_show[n] = 0
		end
	end
	if rte_act_enable == 0 then
		B738DR_rte_show_act = 0
	end
	if rte_act_enable2 == 0 then
		B738DR_rte_edit_show_act = 0
	end
	
	if obj2 < max_obj then
		for n = obj2, max_obj-1 do
			if n == 0 then
				B738DR_wpt_fo_id00w = ""
				B738DR_wpt_fo_alt00w = ""
				B738DR_wpt_fo_eta00w = ""
				B738DR_wpt_fo_id00m = ""
				B738DR_wpt_fo_alt00m = ""
				B738DR_wpt_fo_eta00m = ""
				B738DR_wpt_fo_type00 = 0
			elseif n == 1 then
				B738DR_wpt_fo_id01w = ""
				B738DR_wpt_fo_alt01w = ""
				B738DR_wpt_fo_eta01w = ""
				B738DR_wpt_fo_id01m = ""
				B738DR_wpt_fo_alt01m = ""
				B738DR_wpt_fo_eta01m = ""
				B738DR_wpt_fo_type01 = 0
			elseif n == 2 then
				B738DR_wpt_fo_id02w = ""
				B738DR_wpt_fo_alt02w = ""
				B738DR_wpt_fo_eta02w = ""
				B738DR_wpt_fo_id02m = ""
				B738DR_wpt_fo_alt02m = ""
				B738DR_wpt_fo_eta02m = ""
				B738DR_wpt_fo_type02 = 0
			elseif n == 3 then
				B738DR_wpt_fo_id03w = ""
				B738DR_wpt_fo_alt03w = ""
				B738DR_wpt_fo_eta03w = ""
				B738DR_wpt_fo_id03m = ""
				B738DR_wpt_fo_alt03m = ""
				B738DR_wpt_fo_eta03m = ""
				B738DR_wpt_fo_type03 = 0
			elseif n == 4 then
				B738DR_wpt_fo_id04w = ""
				B738DR_wpt_fo_alt04w = ""
				B738DR_wpt_fo_eta04w = ""
				B738DR_wpt_fo_id04m = ""
				B738DR_wpt_fo_alt04m = ""
				B738DR_wpt_fo_eta04m = ""
				B738DR_wpt_fo_type04 = 0
			elseif n == 5 then
				B738DR_wpt_fo_id05w = ""
				B738DR_wpt_fo_alt05w = ""
				B738DR_wpt_fo_eta05w = ""
				B738DR_wpt_fo_id05m = ""
				B738DR_wpt_fo_alt05m = ""
				B738DR_wpt_fo_eta05m = ""
				B738DR_wpt_fo_type05 = 0
			elseif n == 6 then
				B738DR_wpt_fo_id06w = ""
				B738DR_wpt_fo_alt06w = ""
				B738DR_wpt_fo_eta06w = ""
				B738DR_wpt_fo_id06m = ""
				B738DR_wpt_fo_alt06m = ""
				B738DR_wpt_fo_eta06m = ""
				B738DR_wpt_fo_type06 = 0
			elseif n == 7 then
				B738DR_wpt_fo_id07w = ""
				B738DR_wpt_fo_alt07w = ""
				B738DR_wpt_fo_eta07w = ""
				B738DR_wpt_fo_id07m = ""
				B738DR_wpt_fo_alt07m = ""
				B738DR_wpt_fo_eta07m = ""
				B738DR_wpt_fo_type07 = 0
			elseif n == 8 then
				B738DR_wpt_fo_id08w = ""
				B738DR_wpt_fo_alt08w = ""
				B738DR_wpt_fo_eta08w = ""
				B738DR_wpt_fo_id08m = ""
				B738DR_wpt_fo_alt08m = ""
				B738DR_wpt_fo_eta08m = ""
				B738DR_wpt_fo_type08 = 0
			elseif n == 9 then
				B738DR_wpt_fo_id09w = ""
				B738DR_wpt_fo_alt09w = ""
				B738DR_wpt_fo_eta09w = ""
				B738DR_wpt_fo_id09m = ""
				B738DR_wpt_fo_alt09m = ""
				B738DR_wpt_fo_eta09m = ""
				B738DR_wpt_fo_type09 = 0
			elseif n == 10 then
				B738DR_wpt_fo_id10w = ""
				B738DR_wpt_fo_alt10w = ""
				B738DR_wpt_fo_eta10w = ""
				B738DR_wpt_fo_id10m = ""
				B738DR_wpt_fo_alt10m = ""
				B738DR_wpt_fo_eta10m = ""
				B738DR_wpt_fo_type10 = 0
			elseif n == 11 then
				B738DR_wpt_fo_id11w = ""
				B738DR_wpt_fo_alt11w = ""
				B738DR_wpt_fo_eta11w = ""
				B738DR_wpt_fo_id11m = ""
				B738DR_wpt_fo_alt11m = ""
				B738DR_wpt_fo_eta11m = ""
				B738DR_wpt_fo_type11 = 0
			elseif n == 12 then
				B738DR_wpt_fo_id12w = ""
				B738DR_wpt_fo_alt12w = ""
				B738DR_wpt_fo_eta12w = ""
				B738DR_wpt_fo_id12m = ""
				B738DR_wpt_fo_alt12m = ""
				B738DR_wpt_fo_eta12m = ""
				B738DR_wpt_fo_type12 = 0
			elseif n == 13 then
				B738DR_wpt_fo_id13w = ""
				B738DR_wpt_fo_alt13w = ""
				B738DR_wpt_fo_eta13w = ""
				B738DR_wpt_fo_id13m = ""
				B738DR_wpt_fo_alt13m = ""
				B738DR_wpt_fo_eta13m = ""
				B738DR_wpt_fo_type13 = 0
			elseif n == 14 then
				B738DR_wpt_fo_id14w = ""
				B738DR_wpt_fo_alt14w = ""
				B738DR_wpt_fo_eta14w = ""
				B738DR_wpt_fo_id14m = ""
				B738DR_wpt_fo_alt14m = ""
				B738DR_wpt_fo_eta14m = ""
				B738DR_wpt_fo_type14 = 0
			elseif n == 15 then
				B738DR_wpt_fo_id15w = ""
				B738DR_wpt_fo_alt15w = ""
				B738DR_wpt_fo_eta15w = ""
				B738DR_wpt_fo_id15m = ""
				B738DR_wpt_fo_alt15m = ""
				B738DR_wpt_fo_eta15m = ""
				B738DR_wpt_fo_type15 = 0
			elseif n == 16 then
				B738DR_wpt_fo_id16w = ""
				B738DR_wpt_fo_alt16w = ""
				B738DR_wpt_fo_eta16w = ""
				B738DR_wpt_fo_id16m = ""
				B738DR_wpt_fo_alt16m = ""
				B738DR_wpt_fo_eta16m = ""
				B738DR_wpt_fo_type16 = 0
			elseif n == 17 then
				B738DR_wpt_fo_id17w = ""
				B738DR_wpt_fo_alt17w = ""
				B738DR_wpt_fo_eta17w = ""
				B738DR_wpt_fo_id17m = ""
				B738DR_wpt_fo_alt17m = ""
				B738DR_wpt_fo_eta17m = ""
				B738DR_wpt_fo_type17 = 0
			elseif n == 18 then
				B738DR_wpt_fo_id18w = ""
				B738DR_wpt_fo_alt18w = ""
				B738DR_wpt_fo_eta18w = ""
				B738DR_wpt_fo_id18m = ""
				B738DR_wpt_fo_alt18m = ""
				B738DR_wpt_fo_eta18m = ""
				B738DR_wpt_fo_type18 = 0
			elseif n == 19 then
				B738DR_wpt_fo_id19w = ""
				B738DR_wpt_fo_alt19w = ""
				B738DR_wpt_fo_eta19w = ""
				B738DR_wpt_fo_id19m = ""
				B738DR_wpt_fo_alt19m = ""
				B738DR_wpt_fo_eta19m = ""
				B738DR_wpt_fo_type19 = 0
			end
			
			B738DR_rte_fo_show[n] = 0
		end
	end
	
	if rte_act_enable_fo == 0 then
		B738DR_rte_fo_show_act = 0
	end
	if rte_act_enable2_fo == 0 then
		B738DR_rte_fo_edit_show_act = 0
	end
	
	if hold_obj < 5 then
		for n = hold_obj, 4 do
			B738DR_hold_type[n] = 0
		end
	end
	if hold_obj_fo < 5 then
		for n = hold_obj_fo, 4 do
			B738DR_hold_fo_type[n] = 0
		end
	end

end

function calc_dist(c_spd, c_vvi, c_d_alt)

	local calc_temp = 0
	local calc_time = 0
	
	calc_time = c_vvi / 60				-- ft/s
	calc_time = c_d_alt / calc_time		-- sec
	calc_temp = c_spd * 0.5144444444	-- m/s
	calc_temp = calc_temp * calc_time	-- m
	return  calc_temp * 0.0005399568	-- NM
	

end

function calc_alt(c_spd, c_vvi, c_dist)

	local calc_temp = 0
	local calc_time = 0
	
	calc_time = c_spd * 0.5144444444	-- m/s
	calc_time = c_dist * 1852 / calc_time 		-- sec
	calc_temp = c_vvi / 60				-- ft/s
	calc_temp = calc_temp * calc_time	-- sec
	return  calc_temp	-- delta alt
	

end

function vnav_timer()
	vnav_update = 1
end

function vnav_timer_mod()
	vnav_update_mod = 1
end


function find_clb_rest_spd(rest_from, rest_to)
	
	local ii = 0
	local finded_rest_idx = 0
	
	if rest_from <= rest_to then
		for ii = rest_from, rest_to do
			if legs_data[ii][19] == 1 or legs_data[ii][19] == 3 then
				if legs_data[ii][4] > 0 then
					finded_rest_idx = ii
					break
				end
			end
		end
	else
		for ii = rest_from, rest_to, -1 do
			if legs_data[ii][19] == 1 or legs_data[ii][19] == 3 then
				if legs_data[ii][4] > 0 then
					finded_rest_idx = ii
					break
				end
			end
		end
	end
	return finded_rest_idx
	
end

function find_clb_rest_alt(rest_from, rest_to)
	
	local ii = 0
	local finded_rest_idx = 0
	
	if rest_from <= rest_to then
		for ii = rest_from, rest_to do
			if legs_data[ii][19] == 1 or legs_data[ii][19] == 3 then
				if legs_data[ii][5] > 0 and legs_data[ii][6] ~= 43 then
					finded_rest_idx = ii
					break
				end
			end
		end
	else
		for ii = rest_from, rest_to, -1 do
			if legs_data[ii][19] == 1 or legs_data[ii][19] == 3 then
				if legs_data[ii][5] > 0 and legs_data[ii][6] ~= 43 then
					finded_rest_idx = ii
					break
				end
			end
		end
	end
	return finded_rest_idx
	
end

function find_clb_rest_spd_mod(rest_from, rest_to)
	
	local ii = 0
	local finded_rest_idx = 0
	
	if rest_from <= rest_to then
		for ii = rest_from, rest_to do
			if legs_data2[ii][19] == 1 or legs_data2[ii][19] == 3 then
				if legs_data2[ii][4] > 0 then
					finded_rest_idx = ii
					break
				end
			end
		end
	else
		for ii = rest_from, rest_to, -1 do
			if legs_data2[ii][19] == 1 or legs_data2[ii][19] == 3 then
				if legs_data2[ii][4] > 0 then
					finded_rest_idx = ii
					break
				end
			end
		end
	end
	return finded_rest_idx
	
end

function find_clb_rest_alt_mod(rest_from, rest_to)
	
	local ii = 0
	local finded_rest_idx = 0
	
	if rest_from <= rest_to then
		for ii = rest_from, rest_to do
			if legs_data2[ii][19] == 1 or legs_data2[ii][19] == 3 then
				if legs_data2[ii][5] > 0 and legs_data2[ii][6] ~= 43 then
					finded_rest_idx = ii
					break
				end
			end
		end
	else
		for ii = rest_from, rest_to, -1 do
			if legs_data2[ii][19] == 1 or legs_data2[ii][19] == 3 then
				if legs_data2[ii][5] > 0 and legs_data2[ii][6] ~= 43 then
					finded_rest_idx = ii
					break
				end
			end
		end
	end
	return finded_rest_idx
	
end


function wind_pth(wpt_brg, wind_over, wind_pred)
	
	local tmp_wind_spd = 0
	local tmp_wind_dir = 0
	local result = 0
	
	if wind_over == "" then
		if wind_pred ~= "" then
			tmp_wind_dir = tonumber(string.sub(wind_pred, 1, 3))
			tmp_wind_spd = tonumber(string.sub(wind_pred, -3, -1))
		end
	else
		tmp_wind_dir = tonumber(string.sub(wind_over, 1, 3))
		tmp_wind_spd = tonumber(string.sub(wind_over, -3, -1))
	end
	
	local wc_speed = 0
	if tmp_wind_spd > 0 then
		wc_speed = tonumber(tmp_wind_spd) * math.cos(math.rad(Angle180(tonumber(tmp_wind_dir)))-wpt_brg)
		
		wc_speed = math.min(wc_speed, 200)
		wc_speed = math.max(wc_speed, -200)
		
		result = B738_rescale(-200, 1.15, 200, 0.85, wc_speed)
	else
		result = 1
	end
	
	return	result
end

function B738_vnav_calc()

	local n = 0
	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local delta_alt = 0
	local dist_10000 = 0
	local rest_idx_spd = 0
	local rest_idx_alt = 0
	local rest_idx_spd_p = 0
	local rest_idx_alt_p = 0
	local dist = 0
	local calc_wpt_alt = 0
	local calc_wpt_spd = 0
	local calc_wpt_alt_distr = 0
	local calc_vvi = 0
	local rest_idx = 0
	local rest_spd = 0
	local rest_alt = 0
	local rest_alt_t = 0
	local rest_alt_idx = 0
	local calc_spd_alt = 0
	
	local temp_d_R = 0
	local temp_brg = 0
	local temp_lat = 0
	local temp_lon = 0
	local lat_wpt = 0
	local lon_wpt = 0
	
	local from_spd = 0
	
	local td_spd_rest_loc = 0
	local skip_vpa = 0
	local discon = 0
	
	local recalc_spd = 0
	local recalc_alt = 0
	local first_idx_alt = 1
	
	local climb_calc_enable = 0
	
	
	local ed_fix_dist = 0
	local ed_fix_vpa = 0
	local ignored = 0
	local idx_temp = 0
	local decel_idx_temp = 0
	local last_wpt_idx = 0
	--local temp_idx = 0
	
	local offset2 = 0

	local nd_lat2 = 0
	local nd_lon2= 0
	local nd_lat = 0
	local nd_lon = 0
	local nd_y = 0
	local nd_x = 0
	
	local alt_calc_temp = 0
	local alt_calc_temp2 = 0
	
	local init_alt = 0
	local init_spd = 0
	local init_vvi = 0
	local init_distance = 0
	local first_restrict = 0
	local temp_alt = 0
	local temp_vpa = 0
	local temp_idx = 0
	
	local spd_lim = 0
	local spd_vvi_corr = 0
	
	local pom5 = 0
	local pom6 = 0
	local wind_temp = 0
	local wind_temp_old = 0
	
	if vnav_update == 1 then
	
	if is_timer_scheduled(vnav_timer) == true then
		stop_timer(vnav_timer)
	end
	
	--if crz_alt_num > 0 and legs_num > 0 and offset > 0 and cost_index ~= "***" and ref_icao ~= "----" and des_icao ~= "****" then
	if crz_alt_num > 0 and legs_num > 0 and offset > 0 and perf_exec > 0 and ref_icao ~= "----" and des_icao ~= "****" then
	
		if offset > legs_num then
			offset = legs_num
		end
		if offset == 0 then
			offset = 1
		end

		--if legs_data[offset][1] == ref_icao and ground_air == 0 then
		if offset == 1 and ground_air == 0 then
			offset2 = 2
		else
			offset2 = offset
		end

		--clear calculations data
		--for n = offset2, (legs_num + 1) do
		for n = 1, (legs_num + 1) do
			if string.sub(legs_data[n][1], 1, 2) == "RW" and n == 2 then
				legs_data[n][11] = ref_icao_alt
			else
				--if n >= offset2 then
					legs_data[n][11] = 0
				--end
			end
			legs_data[n][10] = 0
			legs_data[n][14] = 50000
			legs_data[n][38] = ""
			--legs_data[n][13] = 0
		end




		------------------------------------------------
		-- CLIMB PHASE
		climb_calc_enable = 0
		if B738DR_flight_phase < 2 then
			climb_calc_enable = 1
		end
		if ed_found ~= 0 then
			if offset2 > ed_found then
				climb_calc_enable = 0
			end
		end
		
		if climb_calc_enable == 1 then
			
			tc_idx = 0
			--jj = legs_num + 1
			
			-- intial speed and alt
			if ground_air == 0 then
				calc_wpt_spd = 205
				calc_wpt_alt = ref_icao_alt
			else
				calc_wpt_spd = simDR_airspeed_pilot
				calc_wpt_alt = simDR_altitude_pilot
			end
			
			-- find restricts spd and alt
			if offset2 > last_sid_idx or last_sid_idx == 0 then
				rest_spd = 340
				rest_alt = 45000
			else
				rest_idx_spd = find_clb_rest_spd(offset2, last_sid_idx)
				if rest_idx_spd == 0 then
					rest_spd = B738DR_fmc_climb_speed
				else
					rest_spd = legs_data[rest_idx_spd][4]
				end
				rest_idx_alt = find_clb_rest_alt(offset2, last_sid_idx)
				--entry = tostring(rest_idx_alt)
				if rest_idx_alt == 0 then
					rest_alt = 45000
				else
					rest_alt = legs_data[rest_idx_alt][5]
				end
			end
			
			-- if rest_alt < 45000 then
				-- calc_wpt_alt = math.min(calc_wpt_alt, rest_alt)
			-- end
			
			if rest_alt < 45000 and calc_wpt_alt > rest_alt then
				calc_wpt_alt = rest_alt
			end
			
			if calc_wpt_alt < 10000 then
				calc_wpt_spd = math.min(calc_wpt_spd, rest_spd, B738DR_fmc_climb_speed, 250)
			else
				calc_wpt_spd = math.min(calc_wpt_spd, rest_spd, B738DR_fmc_climb_speed)
			end
			
			for n = offset2, (legs_num + 1) do
				
				-- break calculation
				if legs_data[n][1] == "DISCONTINUITY" then
					break
				end
				
				if n ~= 2 or string.sub(legs_data[n][1], 1, 2) ~= "RW" then
				
					-- calc vvi
					alt_calc_temp = math.max(2000, calc_wpt_alt)
					alt_calc_temp = math.min(41000, alt_calc_temp)
					alt_calc_temp = roundUpToIncrement(alt_calc_temp, 1000)
					calc_vvi = vnav_vvi[alt_calc_temp] * 0.9
					
					if n == offset2 then
						calc_spd_alt = calc_wpt_spd * (1 + (calc_wpt_spd / 1000 * 0.02))
						if legs_data[n][1] == "VECTOR" then
							nd_lat = 0
						else
							nd_lat = simDR_fmc_dist
						end
					else
						if calc_wpt_spd < 100 then
							calc_spd_alt = B738DR_fmc_climb_speed * (1 + (legs_data[n-1][11] / 1000 * 0.02))
						else
							calc_spd_alt = calc_wpt_spd * (1 + (legs_data[n-1][11] / 1000 * 0.02))
						end
						nd_lat = legs_data[n][3]
					end
					
					nd_lat2 = 0
					nd_x = calc_dist(calc_spd_alt, calc_vvi, 1000)
					nd_y = calc_wpt_alt + 1000
					
					nd_lon = 0
					
					-- step 1000ft
					if rest_alt < 45000 and nd_y > rest_alt then
						if rest_alt < 45000 and nd_y > rest_alt then
							calc_wpt_alt = rest_alt
							nd_y = rest_alt
							nd_lon = 1
						end
					
					else
						while nd_x < nd_lat and nd_y < crz_alt_num do
							
							nd_lat2 = nd_x
							alt_calc_temp = math.max(2000, nd_y)
							alt_calc_temp = math.min(41000, alt_calc_temp)
							alt_calc_temp = roundUpToIncrement(alt_calc_temp, 1000)
							calc_vvi = vnav_vvi[alt_calc_temp] * 0.9
							
							nd_x = nd_x + calc_dist(calc_spd_alt, calc_vvi, 1000)
							nd_y = nd_y + 1000
							
							if rest_alt < 45000 and nd_y > rest_alt then
								break
							end
							
						end
					end
					
					-- check restricts SPD
					if rest_alt < 45000 and nd_y > rest_alt then
						calc_wpt_alt = rest_alt
						nd_y = rest_alt
						nd_lon = 1
					end
						
					if nd_y >= crz_alt_num then
						
						if nd_lon == 0 then
							
							-- nd_x = nd_x - calc_dist(calc_spd_alt, calc_vvi, 1000)
							nd_x = nd_lat2
							nd_y = nd_y - 1000
							calc_wpt_alt = crz_alt_num
							
							-- calculation T/C
							--entry = tostring(nd_y)
							delta_alt = crz_alt_num - nd_y
							tc_dist = nd_x + calc_dist(calc_spd_alt, calc_vvi, delta_alt)	-- before dist
							tc_dist = nd_lat - tc_dist
							
							if tc_dist < 0 then
								tc_dist = 0
							end
						else
							tc_dist = 0
						end
						
						-- calc bearing
						-- nd_lat = math.rad(legs_data[n][7])
						-- nd_lon = math.rad(legs_data[n][8])
						if n == 1 then
							temp_brg = legs_data[n][2] + 3.1415926535
						else
							if legs_intdir_act == 1 and n == offset2 then
								-- temp_brg = math.rad((simDR_fmc_trk + 180) % 360)
								if B738DR_wpt_path == "DF" then
									temp_brg = math.rad((simDR_fmc_trk + 180) % 360)
								else
									temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
								end
							else
								-- nd_lat2 = math.rad(legs_data[n-1][7])
								-- nd_lon2 = math.rad(legs_data[n-1][8])
								-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
								-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
								-- temp_brg = math.atan2(nd_y, nd_x)
								--temp_brg = math.rad((math.deg(legs_data[n][2]) + 180) % 360)
								temp_brg = legs_data[n][2] + 3.1415926535
							end
						end
						
						tc_idx = n	-- before idx
						lat_wpt = math.rad(legs_data[n][7])
						lon_wpt = math.rad(legs_data[n][8])
						temp_d_R = tc_dist / 3440.064795					-- distance NM
						--temp_brg = legs_data[n][2] + 3.1415926535	-- back course radians
						temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
						temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
						tc_lat = temp_lat
						tc_lon = temp_lon
						
					else
						if nd_lon == 0 then
							--nd_x = nd_x - calc_dist(calc_spd_alt, calc_vvi, 1000)
							nd_x = nd_lat2
							nd_x = nd_lat - nd_x
							nd_y = nd_y - 1000
							calc_wpt_alt = nd_y + calc_alt(calc_spd_alt, calc_vvi, nd_x)
						end
					end
				
				end
				
				-- check restricts SPD
				if n > offset2 or ground_air ~= 0 then
					if calc_wpt_alt < 10000 then
						calc_wpt_spd = math.min(rest_spd, B738DR_fmc_climb_speed, 250)
					elseif calc_wpt_alt > 26000 and rest_spd == 340 then
						calc_wpt_spd = B738DR_fmc_climb_speed_mach
					else
						calc_wpt_spd = math.min(rest_spd, B738DR_fmc_climb_speed)
					end
				end
				
				legs_data[n][10] = calc_wpt_spd
				legs_data[n][11] = calc_wpt_alt
				
				if tc_idx == 0 then
					-- find next restricts ALT/SPD
					ii = n + 1
					if ii > legs_num or ii > last_sid_idx or last_sid_idx == 0 then
						rest_spd = 340
						rest_alt = 45000
					else
						-- find restricts spd and alt
						rest_idx_spd = find_clb_rest_spd(ii, last_sid_idx)
						if rest_idx_spd == 0 then
							rest_spd = B738DR_fmc_climb_speed
						else
							rest_spd = legs_data[rest_idx_spd][4]
						end
						rest_idx_alt = find_clb_rest_alt(ii, last_sid_idx)
						if rest_idx_alt == 0 then
							rest_alt = 45000
						else
							rest_alt = legs_data[rest_idx_alt][5]
						end
					end
				else
					break
				end
			end
			
		end
		
		
		--------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------
		-- Find E/D, T/D and DECEL
		--------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------
		if true then
			
			td_idx = 0
			
			-- find E/D
			ed_found = 0
			discon = 0
			if idx_ed > 0 then
				ed_found = idx_ed
				ed_alt = legs_data[ed_found][5]
				-- ed_dist = (crz_alt_num - ed_alt) / math.tan(math.rad(econ_des_vpa))		-- ft
				-- ed_dist = ed_dist * 0.00016458		-- NM
				ed_dist = calc_vnav_pth_dist(ed_alt, crz_alt_num)
				ed_vpa = econ_des_vpa
			end
			
			-- find T/D
			if discon == 0 then
				--td_found = 0
				td_dist = 0 
				decel_idx = 0
				skip_vpa = 0
				if ed_found == 0 then	-- not found e/d
					ed_found = legs_num + 1
					ed_alt = math.floor((des_icao_alt + 1000)/100) * 100
					-- ed_dist = (crz_alt_num - ed_alt) / math.tan(math.rad(econ_des_vpa))		-- ft
					-- ed_dist = ed_dist * 0.00016458		-- NM
					ed_dist = calc_vnav_pth_dist(ed_alt, crz_alt_num)
					ed_vpa = econ_des_vpa
					if legs_data[ed_found][1] == nil then
						skip_vpa = 1
					end
				end
				if skip_vpa == 0 then
					
					
					-----------------------------------------------------------
					-- find T/D , econ vnav descent path
					-----------------------------------------------------------
					create_vpth_table(gw_app_kgs)
					last_wpt_idx = 0
					for ii = ed_found, 2, -1 do
						
						if legs_data[ii][1] ~= "VECTOR" then
							td_dist = td_dist + legs_data[ii][3]
						end
						if ii == ed_found then
							calc_wpt_alt = ed_alt
						else
							--calc_wpt_alt = calc_wpt_alt + ((legs_data[ii+1][3] * (math.tan(math.rad(econ_des_vpa)))) * 6076.11549) -- ft
							wind_temp = wind_pth(legs_data[ii][2], legs_data[ii][39], legs_data[ii][38])
							
							-- if legs_restr_spd_n > 0 then
								-- for xx = legs_restr_spd_n, 1, -1 do
									-- if legs_restr_spd[rest_idx_spd][2] <= first_star_idx then
										-- break
									-- elseif legs_restr_spd[rest_idx_spd][2] <= first_app_idx then
										-- break
									-- end
									-- if legs_restr_spd[rest_idx_spd][2] <= ii then
										-- find previous des speed
										-- calculate delta speed
										-- calculate 
										-- wind_temp = wind_temp * 1
										-- break
									-- end
								-- end
							-- end
							
							modify_vpth_table(calc_wpt_alt, wind_temp)
							calc_wpt_alt = calc_vnav_pth_alt(ed_alt , td_dist - legs_data[ii][3])
						end
						if calc_wpt_alt > crz_alt_num then
							calc_wpt_alt = crz_alt_num
						end
						legs_data[ii][11] = calc_wpt_alt
						last_wpt_idx = ii
						
						if td_dist > ed_dist then
							
							if legs_intdir_act == 1 and ii == offset2 then
								if B738DR_wpt_path == "DF" then
									temp_brg = math.rad((simDR_fmc_trk + 180) % 360)
								else
									temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
								end
							else
								-- nd_lat = math.rad(legs_data[ii][7])
								-- nd_lon = math.rad(legs_data[ii][8])
								-- nd_lat2 = math.rad(legs_data[ii-1][7])
								-- nd_lon2 = math.rad(legs_data[ii-1][8])
								-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
								-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
								-- temp_brg = math.atan2(nd_y, nd_x)
								--temp_brg = math.rad((math.deg(legs_data[ii][2]) + 180) % 360)
								temp_brg = legs_data[ii][2] + 3.1415926535
							end
							
							td_dist = legs_data[ii][3] - (td_dist - ed_dist)
							td_idx = ii 	-- before idx
							lat_wpt = math.rad(legs_data[ii][7])
							lon_wpt = math.rad(legs_data[ii][8])
							temp_d_R = td_dist / 3440.064795					-- distance NM
							temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
							temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
							td_lat = temp_lat
							td_lon = temp_lon
							break
						end
					end
					
					----------------------------------
					if B738DR_fms_test == 1 then
						dump_leg_mod()
						--B738DR_fms_test = 0
					end
					
					-----------------------------------------------------------
					-- find fixed altitude restrict between T/C and T/D
					-----------------------------------------------------------
					
					if tc_idx == 0 then
						if last_sid_idx == 0 then
							jj = 2	--offset
						else
							jj = last_sid_idx + 1
						end
					else
						if tc_idx > td_idx then
							if last_sid_idx == 0 then
								jj = 2
							else
								-- if tc_idx <= last_sid_idx then
									jj = last_sid_idx + 1
								-- else
									-- jj = 2 ---?????
								-- end
							end
						else
							if last_sid_idx == 0 then
								jj = tc_idx
							else
								if tc_idx <= last_sid_idx then
									jj = last_sid_idx + 1
								else
									jj = tc_idx
								end
							end
						end
					end
					
					td_fix_dist = 0		-- distance before td_fix_idx
					td_fix_idx = 0		-- td_fix_idx
					ed_fix_found = 0	-- ed fix idx
					ed_fix_alt = 0		-- ed alt fix idx
					ed_fix_dist = 0		-- ed fix distance (local)
					ed_fix_vpa = 0
					ed_fix_found2 = {}
					ed_fix_alt2 = {}
					ed_fix_vpa2 = {}
					ed_fix_num = 0
					
					
					-- restrict alt
					for ii = 1, legs_restr_alt_n do
						if legs_restr_alt[ii][2] >= jj and legs_restr_alt[ii][2] < ed_found then
							idx_temp = legs_restr_alt[ii][2]
							ignored = 0
							
							-- fixed restrict altitude
							if legs_restr_alt[ii][4] == 45 or legs_restr_alt[ii][4] == 43 then
								ignored = 1
							else
								--if idx_temp >= td_idx then
									if legs_data[idx_temp][11] == 0 then
										if crz_alt_num == legs_restr_alt[ii][3] then
											ignored = 1
										end
									else
										if legs_data[idx_temp][11] == legs_restr_alt[ii][3] then
											ignored = 1
										end
									end
								--end
							end
							
							if ignored == 0 then
								
								ed_fix_found = idx_temp
								
								ed_fix_num = ed_fix_num + 1
								ed_fix_found2[ed_fix_num] = ed_fix_found
								
								if ed_fix_num == 1 then
									td_dist = 0
									td_idx = 0
								end
								
								ed_fix_alt = legs_restr_alt[ii][3]
								
								ed_fix_alt2[ed_fix_num] = ed_fix_alt
								
								
								legs_data[ed_fix_found][11] = ed_fix_alt
								legs_data[ed_fix_found][17] = legs_data[ed_fix_found][17] + 10
								
								ed_fix_vpa = econ_des_vpa
								if ed_fix_num == 1 then
									-- ed_dist = (crz_alt_num - ed_fix_alt) / math.tan(math.rad(econ_des_vpa))		-- ft
									-- ed_dist = ed_dist * 0.00016458		-- NM
									ed_dist = calc_vnav_pth_dist(ed_fix_alt, crz_alt_num)
									n = 2	--jj
									ed_fix_vpa2[ed_fix_num] = econ_des_vpa
									create_vpth_table(gw_app_kgs)
								else
									n = ed_fix_found2[(ed_fix_num-1)] + 1
									
									--calc vpa
									nd_x = 0
									for kk = n, ed_fix_found do
										nd_x = nd_x + legs_data[kk][3]
									end
									nd_x = nd_x * 1852	-- in metres
									nd_lat = ed_fix_alt2[(ed_fix_num-1)] - ed_fix_alt -- delta alt
									nd_lat = nd_lat * 0.3048	-- in metres
									nd_y = 0
									if nd_x > 0 and nd_lat > 0 then
										nd_y = math.deg(math.atan(nd_lat/nd_x))
									end
									ed_fix_vpa2[ed_fix_num] = nd_y
									ed_fix_vpa = nd_y
								end
								legs_data[ed_fix_found][20] = -ed_fix_vpa
								
								last_wpt_idx = 0
								for kk = ed_fix_found, n, -1 do
									
									if ed_fix_num == 1 then
										if legs_data[kk][1] ~= "VECTOR" then
											td_dist = td_dist + legs_data[kk][3]
										end
									end
									if kk == ed_fix_found then
										calc_wpt_alt = ed_fix_alt
									else
										-- calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(ed_fix_vpa2[ed_fix_num])))) * 6076.11549) -- ft
										if ed_fix_num == 1 then
											wind_temp = wind_pth(legs_data[kk][2], legs_data[kk][39], legs_data[kk][38])
											modify_vpth_table(calc_wpt_alt, wind_temp)
											calc_wpt_alt = calc_vnav_pth_alt(ed_fix_alt, td_dist - legs_data[kk][3])
										else
											calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(ed_fix_vpa2[ed_fix_num])))) * 6076.11549) -- ft
										end
									end
									if calc_wpt_alt > crz_alt_num then
										calc_wpt_alt = crz_alt_num
									end
									legs_data[kk][11] = calc_wpt_alt
									last_wpt_idx = kk
									
									if td_dist > ed_dist and ed_fix_num == 1 then
										
										-- calc bearing
											if legs_intdir_act == 1 and kk == offset2 then
												if B738DR_wpt_path == "DF" then
													temp_brg = math.rad((simDR_fmc_trk + 180) % 360)
												else
													temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
												end
											else
												-- nd_lat = math.rad(legs_data[kk][7])
												-- nd_lon = math.rad(legs_data[kk][8])
												-- nd_lat2 = math.rad(legs_data[kk-1][7])
												-- nd_lon2 = math.rad(legs_data[kk-1][8])
												-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
												-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
												-- temp_brg = math.atan2(nd_y, nd_x)
												--temp_brg = math.rad((math.deg(legs_data[kk][2]) + 180) % 360)
												temp_brg = legs_data[kk][2] + 3.1415926535
											end
										-- end
										td_dist = legs_data[kk][3] - (td_dist - ed_dist)
										td_idx = kk 	-- before idx
										lat_wpt = math.rad(legs_data[kk][7])
										lon_wpt = math.rad(legs_data[kk][8])
										temp_d_R = td_dist / 3440.064795					-- distance NM
										temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
										temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
										td_lat = temp_lat
										td_lon = temp_lon
										break
									end
									if ed_fix_num > 1 then
										if calc_wpt_alt > ed_fix_alt2[ed_fix_num-1] then
											legs_data[kk][11] = ed_fix_alt2[ed_fix_num-1]
											break
										end
									end
								end
								
							end -- ignored
							
						end
					end
					
					-- calc vpa from last restrict to E/D
					if ed_fix_num > 0 then
						n = ed_fix_found2[ed_fix_num] + 1
						
						--calc vpa
						nd_x = 0
						for kk = n, ed_found do
							nd_x = nd_x + legs_data[kk][3]
						end
						nd_x = nd_x * 1852	-- in metres
						nd_lat = ed_fix_alt2[ed_fix_num] - ed_alt -- delta alt
						nd_lat = nd_lat * 0.3048	-- in metres
						nd_y = 0
						if nd_x > 0 and nd_lat > 0 then
							nd_y = math.deg(math.atan(nd_lat/nd_x))
						end
						ed_vpa = nd_y
						
						for kk = ed_found, n, -1 do
							
							if kk == ed_found then
								calc_wpt_alt = ed_alt
							else
								--calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(econ_des_vpa)))) * 6076.11549) -- ft
								calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(ed_vpa)))) * 6076.11549) -- ft
							end
							if calc_wpt_alt > crz_alt_num then
								calc_wpt_alt = crz_alt_num
							end
							legs_data[kk][11] = calc_wpt_alt
						end
						
					end
					
					--------------------------------
					if B738DR_fms_test == 2 then
						dump_leg_mod()
						--B738DR_fms_test = 0
					end
					
					-----------------------------------------------------------
					-- find above/below altitude restrict between T/C and T/D
					-----------------------------------------------------------
					-- if tc_idx == 0 then
						-- jj = 2	--offset
					-- else
						-- if tc_idx > td_idx then
							-- if last_sid_idx == 0 then
								-- jj = 2
							-- else
								-- if tc_idx <= last_sid_idx then
									-- jj = last_sid_idx + 1
								-- else
									-- jj = 2
								-- end
							-- end
						-- else
							-- if last_sid_idx == 0 then
								-- jj = tc_idx
							-- else
								-- if tc_idx <= last_sid_idx then
									-- jj = last_sid_idx + 1
								-- else
									-- jj = tc_idx
								-- end
							-- end
						-- end
					-- end
					
					-- td_fix_dist = 0		-- distance before td_fix_idx
					-- td_fix_idx = 0		-- td_fix_idx
					-- ed_fix_found = 0	-- ed fix idx
					-- ed_fix_alt = 0		-- ed alt fix idx
					-- ed_fix_dist = 0		-- ed fix distance (local)
					-- ed_fix_vpa = 0
					-- ed_fix_found2 = {}
					-- ed_fix_alt2 = {}
					-- ed_fix_vpa2 = {}
					-- ed_fix_num = 0
					
					-- restrict alt
					for ii = 1, legs_restr_alt_n do
						if legs_restr_alt[ii][2] >= jj and legs_restr_alt[ii][2] < ed_found then
							idx_temp = legs_restr_alt[ii][2]
							ignored = 0
							
							if legs_restr_alt[ii][4] == 45 then 	-- Below
								if legs_data[idx_temp][11] == 0 then
									if crz_alt_num <= legs_restr_alt[ii][3] then
										ignored = 1
									end
								else
									if legs_data[idx_temp][11] <= legs_restr_alt[ii][3] then
										ignored = 1
									end
								end
							elseif legs_restr_alt[ii][4] == 43 then 	-- Above
								if legs_data[idx_temp][11] == 0 then
									if crz_alt_num >= legs_restr_alt[ii][3] then
										ignored = 1
									end
								else
									if legs_data[idx_temp][11] >= legs_restr_alt[ii][3] then
										ignored = 1
									end
								end
							else
								ignored = 1
							end
							
							if ignored == 0 then
								
								ed_fix_found = idx_temp
								
								ed_fix_num = ed_fix_num + 1
								ed_fix_found2[ed_fix_num] = ed_fix_found
								
								ed_fix_alt = legs_restr_alt[ii][3]
								ed_fix_alt2[ed_fix_num] = ed_fix_alt
								
								
								legs_data[ed_fix_found][11] = ed_fix_alt
								legs_data[ed_fix_found][17] = legs_data[ed_fix_found][17] + 10
								
								if (ed_fix_found - 1) < jj then
									first_restrict = 0
								else
									first_restrict = find_alt_restrict(ed_fix_found-1, jj)
								end
								
								ed_fix_vpa = econ_des_vpa
								--if ed_fix_num == 1 then
								if first_restrict == 0 then
									-- ed_dist = (crz_alt_num - ed_fix_alt) / math.tan(math.rad(econ_des_vpa))		-- ft
									-- ed_dist = ed_dist * 0.00016458		-- NM
									ed_dist = calc_vnav_pth_dist(ed_fix_alt, crz_alt_num)
									n = 2	--jj
									ed_fix_vpa2[ed_fix_num] = econ_des_vpa
									td_dist = 0
									td_idx = 0
									create_vpth_table(gw_app_kgs)
								else
									--n = ed_fix_found2[(ed_fix_num-1)] + 1
									n = first_restrict + 1
									--calc vpa
									nd_x = 0
									for kk = n, ed_fix_found do
										nd_x = nd_x + legs_data[kk][3]
									end
									nd_x = nd_x * 1852	-- in metres
									--nd_lat = ed_fix_alt2[(ed_fix_num-1)] - ed_fix_alt -- delta alt
									nd_lat = legs_data[first_restrict][5] - ed_fix_alt -- delta alt
									nd_lat = nd_lat * 0.3048	-- in metres
									nd_y = 0
									if nd_x > 0 and nd_lat > 0 then
										nd_y = math.deg(math.atan(nd_lat/nd_x))
									end
									ed_fix_vpa2[ed_fix_num] = nd_y
									ed_fix_vpa = nd_y
								end
								legs_data[ed_fix_found][20] = -ed_fix_vpa
								
								---------------------------------
								-- correct vnav path TO restrict
								---------------------------------
								last_wpt_idx = 0
								for kk = ed_fix_found, n, -1 do
									
									--if ed_fix_num == 1 then
									if first_restrict == 0 then
										if legs_data[kk][1] ~= "VECTOR" then
											td_dist = td_dist + legs_data[kk][3]
										end
									end
									if kk == ed_fix_found then
										calc_wpt_alt = ed_fix_alt
									else
										-- calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(ed_fix_vpa2[ed_fix_num])))) * 6076.11549) -- ft
										if ed_fix_num == 1 then
											wind_temp = wind_pth(legs_data[kk][2], legs_data[kk][39], legs_data[kk][38])
											modify_vpth_table(calc_wpt_alt, wind_temp)
											calc_wpt_alt = calc_vnav_pth_alt(ed_fix_alt, td_dist - legs_data[kk][3])
										else
											calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(ed_fix_vpa2[ed_fix_num])))) * 6076.11549) -- ft
										end
									end
									if first_restrict > 0 then
										if calc_wpt_alt > legs_data[first_restrict][5] then
											calc_wpt_alt = legs_data[first_restrict][5]
										end
									end
									if calc_wpt_alt > crz_alt_num then
										calc_wpt_alt = crz_alt_num
									end
									-- if kk == n and ed_fix_num > 1 then
										
										-- if first_restrict > 0 then
											-- if legs_data[first_restrict][4] ~= 43 and legs_data[first_restrict][4] ~= 45 then
												-- legs_data[kk][11] = legs_data[first_restrict][5]	--ed_fix_alt2[first_restrict]
											-- else
												-- legs_data[kk][11] = calc_wpt_alt
											-- end
										-- else
											-- legs_data[kk][11] = calc_wpt_alt
										-- end
										
										-- pom6 = ed_fix_found2[ed_fix_num-1]
										-- if legs_data[pom6][4] ~= 43 and legs_data[pom6][4] ~= 45 then
											-- legs_data[kk][11] = ed_fix_alt2[(ed_fix_num-1)]
										-- else
											-- legs_data[kk][11] = calc_wpt_alt
										-- end
									-- else
										legs_data[kk][11] = calc_wpt_alt
									-- end
									--legs_data[kk][11] = calc_wpt_alt
									last_wpt_idx = kk
									
									if td_dist > ed_dist and first_restrict == 0 then
										
											if legs_intdir_act == 1 and kk == offset2 then
												if B738DR_wpt_path == "DF" then
													temp_brg = math.rad((simDR_fmc_trk + 180) % 360)
												else
													temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
												end
											else
												-- nd_lat = math.rad(legs_data[kk][7])
												-- nd_lon = math.rad(legs_data[kk][8])
												-- nd_lat2 = math.rad(legs_data[kk-1][7])
												-- nd_lon2 = math.rad(legs_data[kk-1][8])
												-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
												-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
												-- temp_brg = math.atan2(nd_y, nd_x)
												--temp_brg =  math.rad((math.deg(legs_data[kk][2]) + 180) % 360)
												temp_brg = legs_data[kk][2] + 3.1415926535
											end
										td_dist = legs_data[kk][3] - (td_dist - ed_dist)
										td_idx = kk 	-- before idx
										lat_wpt = math.rad(legs_data[kk][7])
										lon_wpt = math.rad(legs_data[kk][8])
										temp_d_R = td_dist / 3440.064795					-- distance NM
										temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
										temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
										td_lat = temp_lat
										td_lon = temp_lon
										break
									end
									-- if ed_fix_num > 1 and calc_wpt_alt > ed_fix_alt2[ed_fix_num-1] then
										-- legs_data[kk][11] = ed_fix_alt2[ed_fix_num-1]
										-- break
									-- end
								end
								
									----------------------------------
									if B738DR_fms_test == 4 and ed_fix_num == B738DR_fms_test3 then
										dump_leg_mod()
										B738DR_fms_test3 = first_restrict
										--B738DR_fms_test = 0
									end
									----------------------------------
								-----------------------------------
								-- correct vnav path FROM restrict
								-----------------------------------
								first_restrict = find_alt_restrict(ed_fix_found+1, ed_found)
								
								if first_restrict ~= 0 then	--and first_restrict ~= ed_found then
									--if first_restrict > ed_fix_found + 1 then
										n = first_restrict
										
										-- calculate vnav path
										nd_x = 0
										for kk = ed_fix_found + 1, n do
											nd_x = nd_x + legs_data[kk][3]
										end
										nd_x = nd_x * 1852	-- in metres
										--nd_lat = ed_fix_alt2[(ed_fix_num-1)] - ed_fix_alt -- delta alt
										nd_lat = ed_fix_alt - legs_data[first_restrict][5]-- delta alt
										nd_lat = nd_lat * 0.3048	-- in metres
										nd_y = 0
										if nd_x > 0 and nd_lat > 0 then
											nd_y = math.deg(math.atan(nd_lat/nd_x))
										end
										legs_data[n][20] = -nd_y
										--ed_fix_vpa = nd_y
										
										--last_wpt_idx = 0
										for kk = n, ed_fix_found + 1, -1 do
											if kk == n then
												calc_wpt_alt = legs_data[kk][5]
											else
												calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(-legs_data[n][20])))) * 6076.11549) -- ft
											end
											if calc_wpt_alt > crz_alt_num then
												calc_wpt_alt = crz_alt_num
											end
											legs_data[kk][11] = calc_wpt_alt
											--last_wpt_idx = kk
											
											-- if ed_fix_num > 1 and calc_wpt_alt > ed_fix_alt2[ed_fix_num-1] then
												-- legs_data[kk][11] = ed_fix_alt2[ed_fix_num-1]
												-- break
											-- end
										end
									
									----------------------------------
									if B738DR_fms_test == 5 and ed_fix_num == B738DR_fms_test3 then
										dump_leg_mod()
										--B738DR_fms_test = 0
									end
									----------------------------------
									
									--end
								end
								
								
							end -- ignored
							
						end
					end
					
					
					
					-- order E/D restrict data
					if ed_fix_num > 1 then
						for kk = 1, ed_fix_num do
							n = ed_fix_found2[kk]
							ed_fix_vpa2[kk] = -legs_data[n][20]
						end
						for kk = 1, ed_fix_num-1 do
							for ll = kk+1, ed_fix_num do
								if ed_fix_found2[kk] > ed_fix_found2[ll] then
									temp_idx = ed_fix_found2[kk]
									temp_alt = ed_fix_alt2[kk]
									temp_vpa = ed_fix_vpa2[kk]
									ed_fix_found2[kk] = ed_fix_found2[ll]
									ed_fix_alt2[kk] = ed_fix_alt2[ll]
									ed_fix_vpa2[kk] = ed_fix_vpa2[ll]
									ed_fix_found2[ll] = temp_idx
									ed_fix_alt2[ll] = temp_alt
									ed_fix_vpa2[ll] = temp_vpa
								end
							end
						end
					end
					
					-- calc vpa from last restrict to E/D
					if ed_fix_num > 0 then
						n = ed_fix_found2[ed_fix_num] + 1
						
						--calc vpa
						nd_x = 0
						for kk = n, ed_found do
							nd_x = nd_x + legs_data[kk][3]
						end
						nd_x = nd_x * 1852	-- in metres
						nd_lat = ed_fix_alt2[ed_fix_num] - ed_alt -- delta alt
						nd_lat = nd_lat * 0.3048	-- in metres
						nd_y = 0
						if nd_x > 0 and nd_lat > 0 then
							nd_y = math.deg(math.atan(nd_lat/nd_x))
						end
						ed_vpa = nd_y
						
						-- for kk = ed_found, n, -1 do
							
							-- if kk == ed_found then
								-- calc_wpt_alt = ed_alt
							-- else
								-- --calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(econ_des_vpa)))) * 6076.11549) -- ft
								-- calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(ed_vpa)))) * 6076.11549) -- ft
							-- end
							-- if calc_wpt_alt > crz_alt_num then
								-- calc_wpt_alt = crz_alt_num
							-- end
							-- legs_data[kk][11] = calc_wpt_alt
						-- end
						
					end
					
					-- revert back waypoint flag
					for kk = 1, legs_num do
						if legs_data[kk][17] > 9 then
							legs_data[kk][17] = legs_data[kk][17] - 10
						-- else
							-- legs_data[kk][17] = 0
						end
					end
					
					
					-- calculate speed for waypoints
					if td_idx == 0 then
						last_wpt_idx = offset2
					else
						last_wpt_idx = td_idx
					end
					-- set restrict idx
					rest_idx_spd = 0
					if legs_restr_spd_n > 0 then
						for ii = 1, legs_restr_spd_n do
							rest_idx_spd = rest_idx_spd + 1
							if legs_restr_spd[rest_idx_spd][2] >= last_wpt_idx then
								break
							end
						end
					else
						rest_idx_spd = 1
					end
					
					if last_wpt_idx <= ed_found then
						for ii = last_wpt_idx, ed_found do
							if rest_idx_spd <= legs_restr_spd_n then
								rest_spd = legs_restr_spd[rest_idx_spd][3]
								rest_idx = legs_restr_spd[rest_idx_spd][2]
							else
								rest_idx = 0
							end
							-- descent phase
							if ii == rest_idx then
								td_spd_rest_loc = 1
								calc_wpt_spd = rest_spd
								rest_idx_spd = rest_idx_spd + 1
								if decel_idx == 0 and ii >= offset2 then
									if ii == offset2 then
										if simDR_fmc_dist > 6.7 then
											-- DECEL calc
											
											if legs_intdir_act == 1 and ii == offset2 then
												if B738DR_wpt_path == "DF" then
													temp_brg = math.rad((simDR_fmc_trk + 180) % 360)
												else
													temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
												end
											else
												-- nd_lat = math.rad(legs_data[ii][7])
												-- nd_lon = math.rad(legs_data[ii][8])
												-- nd_lat2 = math.rad(legs_data[ii-1][7])
												-- nd_lon2 = math.rad(legs_data[ii-1][8])
												-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
												-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
												-- temp_brg = math.atan2(nd_y, nd_x)
												--temp_brg = math.rad((math.deg(legs_data[ii][2]) + 180) % 360)
												temp_brg = legs_data[ii][2] + 3.1415926535
											end
											
											decel_dist = 6.7 -- before dist (6.7NM)
											decel_idx = ii
											lat_wpt = math.rad(legs_data[ii][7])
											lon_wpt = math.rad(legs_data[ii][8])
											temp_d_R = decel_dist / 3440.064795					-- distance NM
											temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
											temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
											decel_lat = temp_lat
											decel_lon = temp_lon
										end
									else
										-- DECEL calc
										if legs_data[ii][3] < 6.7 and ii > 1 then
											
											---------------------------------
											-- if ii-1 is restrict wpt then
											---------------------------------
											if legs_data[ii-1][4] == 0 then		-- speed restrict
												pom5 = ii - 1
												if legs_intdir_act == 1 and pom5 == offset2 then
													if B738DR_wpt_path == "DF" then
														temp_brg = math.rad((simDR_fmc_trk + 180) % 360)
													else
														temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
													end
												else
													-- nd_lat = math.rad(legs_data[ii][7])
													-- nd_lon = math.rad(legs_data[ii][8])
													-- nd_lat2 = math.rad(legs_data[ii-1][7])
													-- nd_lon2 = math.rad(legs_data[ii-1][8])
													-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
													-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
													-- temp_brg = math.atan2(nd_y, nd_x)
													--temp_brg = math.rad((math.deg(legs_data[ii-1][2]) + 180) % 360)
													temp_brg = legs_data[ii-1][2] + 3.1415926535
												end
											
												decel_idx = ii - 1
												lat_wpt = math.rad(legs_data[ii-1][7])
												lon_wpt = math.rad(legs_data[ii-1][8])
												if legs_data[ii-1][4] ~= 0 then
													decel_idx = ii
													decel_dist = legs_data[ii][3] - 0.3
													if legs_intdir_act ~= 1 or pom5 ~= offset2 then
														temp_brg = legs_data[ii][2] + 3.1415926535
													end
												else
													decel_dist = 6.7 - legs_data[ii][3]
													if legs_data[ii-1][3] < decel_dist then
														decel_dist = legs_data[ii-1][3] - 0.3
													end
												end
											else
												decel_dist = legs_data[ii][3] - 0.3 -- 0.3 NM before
											
												if legs_intdir_act == 1 and ii == offset2 then
													if B738DR_wpt_path == "DF" then
														temp_brg = math.rad((simDR_fmc_trk + 180) % 360)
													else
														temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
													end
												else
													-- nd_lat = math.rad(legs_data[ii][7])
													-- nd_lon = math.rad(legs_data[ii][8])
													-- nd_lat2 = math.rad(legs_data[ii-1][7])
													-- nd_lon2 = math.rad(legs_data[ii-1][8])
													-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
													-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
													-- temp_brg = math.atan2(nd_y, nd_x)
													--temp_brg = math.rad((math.deg(legs_data[ii][2]) + 180) % 360)
													temp_brg = legs_data[ii][2] + 3.1415926535
												end
											
												decel_idx = ii
												lat_wpt = math.rad(legs_data[ii][7])
												lon_wpt = math.rad(legs_data[ii][8])
											end
										else
											decel_dist = 6.7 -- before dist (6.7NM)
											
											if legs_intdir_act == 1 and ii == offset2 then
												if B738DR_wpt_path == "DF" then
													temp_brg = math.rad((simDR_fmc_trk + 180) % 360)
												else
													temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
												end
											else
												-- nd_lat = math.rad(legs_data[ii][7])
												-- nd_lon = math.rad(legs_data[ii][8])
												-- nd_lat2 = math.rad(legs_data[ii-1][7])
												-- nd_lon2 = math.rad(legs_data[ii-1][8])
												-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
												-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
												-- temp_brg = math.atan2(nd_y, nd_x)
												--temp_brg = math.rad((math.deg(legs_data[ii][2]) + 180) % 360)
												temp_brg = legs_data[ii][2] + 3.1415926535
											end
											
											decel_idx = ii
											lat_wpt = math.rad(legs_data[ii][7])
											lon_wpt = math.rad(legs_data[ii][8])
										end
										temp_d_R = decel_dist / 3440.064795					-- distance NM
										temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
										temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
										decel_lat = temp_lat
										decel_lon = temp_lon
									end
								end
							end
							calc_wpt_alt = legs_data[ii][11]
							if td_spd_rest_loc == 0 then
								if calc_wpt_alt < 26000 then
									if calc_wpt_spd < 100 then
										calc_wpt_spd = B738DR_fmc_descent_speed
									else
										if calc_wpt_spd > B738DR_fmc_descent_speed then
											calc_wpt_spd = B738DR_fmc_descent_speed
										end
									end
								else
									calc_wpt_spd = B738DR_fmc_descent_speed_mach
								end
							end
							if calc_wpt_alt < 10000 then
								if calc_wpt_spd > 250 then
									calc_wpt_spd = 250
								end
							end
							legs_data[ii][10] = calc_wpt_spd
						end
					end
					
				end
			end
		end
		
		
		-- CRUISE
		if td_idx > 1 then
		--if 1 == 2 then
		
			calc_wpt_alt = crz_alt_num
			if crz_alt_num < 26000 then
				calc_wpt_spd = B738DR_fmc_cruise_speed
			else
				calc_wpt_spd = B738DR_fmc_cruise_speed_mach
			end
			if calc_wpt_alt < 10000 then
				if calc_wpt_spd > 250 then
					calc_wpt_spd = 250
				end
			end
			nd_x = 360
			n = td_idx - 1
			if tc_idx ~= 0 and tc_idx <= td_idx then
				if tc_idx <= n then
					for ii = tc_idx, n do
						legs_data[ii][10] = calc_wpt_spd
						-- find SID speed restrict
						if last_sid_idx > 0 and ii <= last_sid_idx then
							for jj = ii, last_sid_idx do
								if legs_data[jj][4] > 0 then
									legs_data[ii][10] = legs_data[jj][4]
									break
								end
							end
						end
						legs_data[ii][11] = crz_alt_num
						if crz_wind_dir ~= "---" and crz_wind_spd ~= "---" then
							if legs_data[ii][39] == "" then
								legs_data[ii][38] = crz_wind_dir .. "`/" .. crz_wind_spd
							end
						end
					end
				end
			else
				if tc_idx == 0 then
					if offset2 <= n then
						for ii = offset2, n do
							legs_data[ii][10] = calc_wpt_spd
							legs_data[ii][11] = crz_alt_num
							if crz_wind_dir ~= "---" and crz_wind_spd ~= "---" then
								if legs_data[ii][39] == "" then
									legs_data[ii][38] = crz_wind_dir .. "`/" .. crz_wind_spd
								end
							end
						end
					end
				else
					legs_data[n][10] = calc_wpt_spd 
					legs_data[n][11] = crz_alt_num
					if crz_wind_dir ~= "---" and crz_wind_spd ~= "---" then
						if legs_data[n][39] == "" then
							legs_data[n][38] = crz_wind_dir .. "`/" .. crz_wind_spd
						end
					end
				end
			end
			
			
			-- descent WIND
			if ed_found > td_idx then
				for ii = td_idx, ed_found do
					if legs_data[ii][11] <= forec_alt_3_num and forec_alt_3_num > 0 then
						if forec_dir_3 ~= "---" and forec_spd_3 ~= "---" then
							if legs_data[ii][39] == "" then
								legs_data[ii][38] = forec_dir_3 .. "`/" .. forec_spd_3
							end
						end
					elseif legs_data[ii][11] <= forec_alt_2_num and forec_alt_2_num > 0 then
						if forec_dir_2 ~= "---" and forec_spd_2 ~= "---" then
							if legs_data[ii][39] == "" then
								legs_data[ii][38] = forec_dir_2 .. "`/" .. forec_spd_2
							end
						end
					elseif legs_data[ii][11] <= forec_alt_1_num and forec_alt_1_num > 0 then
						if forec_dir_1 ~= "---" and forec_spd_1 ~= "---" then
							if legs_data[ii][39] == "" then
								legs_data[ii][38] = forec_dir_1 .. "`/" .. forec_spd_1
							end
						end
					elseif forec_alt_1_num > 0 then
						if crz_wind_dir ~= "---" and crz_wind_spd ~= "---" then
							if legs_data[ii][39] == "" then
								legs_data[ii][38] = crz_wind_dir .. "`/" .. crz_wind_spd
							end
						end
					end
				end
			end
		end
		
		
		----------------------------------
		if B738DR_fms_test == 3 then
			dump_leg_mod()
			--B738DR_fms_test = 0
		end
		----------------------------------
		
		
	else
		if legs_num > 1 then
			for n = 1, (legs_num + 1) do
				if string.sub(legs_data[n][1], 1, 2) == "RW" and n == 2 then
					legs_data[n][11] = ref_icao_alt
				else
					legs_data[n][11] = 0
				end
				legs_data[n][10] = 0
				legs_data[n][14] = 50000
				legs_data[n][38] = ""
			end
		end
		tc_idx = 0
		td_idx = 0
		ed_found = 0
		td_fix_idx = 0
		decel_idx = 0
		ed_fix_found = 0
		ed_fix_alt = 0
		ed_alt = 0

	
	end
	
	-- check alt constraint
	if msg_chk_alt_constr == 0 and td_idx ~= 0 then
		
		if offset > td_idx then
			ii = offset
		else
			ii = td_idx
		end
		if last_sid_idx > 0 and ii <= last_sid_idx then
			ii = last_sid_idx + 1
		end
		if ii > legs_num then
			ii = legs_num
		end
		for n = ii, legs_num do
			if legs_data[n][5] ~= 0 and legs_data[n][11] ~= 0
			and legs_data[n][1] ~= "DISCONTINUITY" and legs_data[n][1] ~= "VECTOR" then
				if legs_data[n][11] > legs_data[n-1][11] then
					fmc_message_num = fmc_message_num + 1
					fmc_message[fmc_message_num] = ALT_CONSTRAINT .. legs_data[n][1]
					fmc_message_warn[fmc_message_num] = 1
					simCMD_nosmoking_toggle:once()
					fms_msg_sound = 1
				else
					if legs_data[n][6] == 45 then -- below
						if legs_data[n][11] > legs_data[n][5] then
							fmc_message_num = fmc_message_num + 1
							fmc_message[fmc_message_num] = ALT_CONSTRAINT .. legs_data[n][1]
							fmc_message_warn[fmc_message_num] = 1
							simCMD_nosmoking_toggle:once()
							fms_msg_sound = 1
						end
					elseif legs_data[n][6] == 43 then -- above
						if legs_data[n][11] < legs_data[n][5] then
							fmc_message_num = fmc_message_num + 1
							fmc_message[fmc_message_num] = ALT_CONSTRAINT .. legs_data[n][1]
							fmc_message_warn[fmc_message_num] = 1
							simCMD_nosmoking_toggle:once()
							fms_msg_sound = 1
						end
					else
						if legs_data[n][11] ~= legs_data[n][5] then
							fmc_message_num = fmc_message_num + 1
							fmc_message[fmc_message_num] = ALT_CONSTRAINT .. legs_data[n][1]
							fmc_message_warn[fmc_message_num] = 1
							simCMD_nosmoking_toggle:once()
							fms_msg_sound = 1
						end
					end
				end
			end
		end
		msg_chk_alt_constr = 1
	end
	
	if legs_delete == 0 and calc_rte_enable == 0 and legs_num > 1 and exec_load_fpln == 0 and hold_exec == 0 then
		copy_to_legsdata2()
	end
	
	vnav_update = 0
	
	end
	
	if is_timer_scheduled(vnav_timer) == false then
		run_after_time(vnav_timer, 5)	-- 5 seconds
	end

end




function B738_vnav_calc_mod()

	local n = 0
	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local delta_alt = 0
	local dist_10000 = 0
	local rest_idx_spd = 0
	local rest_idx_alt = 0
	local rest_idx_spd_p = 0
	local rest_idx_alt_p = 0
	local dist = 0
	local calc_wpt_alt = 0
	local calc_wpt_spd = 0
	local calc_wpt_alt_distr = 0
	local calc_vvi = 0
	local rest_idx = 0
	local rest_spd = 0
	local rest_alt = 0
	local rest_alt_t = 0
	local rest_alt_idx = 0
	local calc_spd_alt = 0
	
	local temp_d_R = 0
	local temp_brg = 0
	local temp_lat = 0
	local temp_lon = 0
	local lat_wpt = 0
	local lon_wpt = 0
	
	local from_spd = 0
	
	local td_spd_rest_loc = 0
	local skip_vpa = 0
	local discon = 0
	
	local recalc_spd = 0
	local recalc_alt = 0
	local first_idx_alt = 1
	
	local climb_calc_enable = 0
	
	
	local ed_fix_dist_mod = 0
	local ed_fix_vpa_mod = 0
	local ignored = 0
	local idx_temp = 0
	local decel_idx_temp = 0
	local last_wpt_idx = 0
	
	local offset2 = 0

	local nd_lat2 = 0
	local nd_lon2= 0
	local nd_lat = 0
	local nd_lon = 0
	local nd_y = 0
	local nd_x = 0
	
	local alt_calc_temp = 0
	local alt_calc_temp2 = 0
	
	local init_alt = 0
	local init_spd = 0
	local init_vvi = 0
	local init_distance = 0
	local first_restrict = 0
	local temp_alt = 0
	local temp_vpa = 0
	local temp_idx = 0
	
	local spd_lim = 0
	local spd_vvi_corr = 0
	
	local pom5 = 0
	local wind_temp = 0
	local wind_temp_old = 0
	
	local vnav_upd_enable = 0
	if legs_num == 1 and legs_num2 > 1 then
		vnav_upd_enable = 1
	elseif legs_num > 1 and legs_num2 > 1 and legs_delete == 1 then
		vnav_upd_enable = 1
	end
	
	if vnav_upd_enable == 0 then
		vnav_update_mod = 0
	end
	
	--B738DR_fms_test = legs_num2
	-- if legs_num == 1 and legs_num2 > 1 then
		-- -- update
	-- else
		-- if legs_delete == 0 then
			-- vnav_update_mod = 0
		-- end
	-- end
	--legs_delete_old = legs_delete
	
	if vnav_update_mod == 1 then
	
	if is_timer_scheduled(vnav_timer_mod) == true then
		stop_timer(vnav_timer_mod)
	end
	
	--if crz_alt_num > 0 and legs_num2 > 0 and offset > 0 and cost_index ~= "***" and ref_icao ~= "----" and des_icao ~= "****" then
	if crz_alt_num > 0 and legs_num2 > 0 and offset > 0 and perf_exec > 0 and ref_icao ~= "----" and des_icao ~= "****" then
		if offset > legs_num2 then
			offset = legs_num2
		end
		-- if offset == 0 then
			-- offset = 1
		-- end

		if legs_data2[offset][1] == ref_icao and ground_air == 0 then
			offset2 = 2
		else
			offset2 = offset
		end

		--clear calculations data
		--for n = offset2, (legs_num2 + 1) do
		for n = 1, (legs_num2 + 1) do
			if string.sub(legs_data2[n][1], 1, 2) == "RW" and n == 2 then
				legs_data2[n][11] = ref_icao_alt
			else
				--if n >= offset2 then
					legs_data2[n][11] = 0
				--end
			end
			legs_data2[n][10] = 0
			legs_data2[n][14] = 50000
			legs_data2[n][38] = ""
		end




		------------------------------------------------
		-- CLIMB PHASE
		climb_calc_enable = 0
		if B738DR_flight_phase < 2 then
			climb_calc_enable = 1
		end
		if ed_found ~= 0 then
			if offset2 > ed_found then
				climb_calc_enable = 0
			end
		end
		
		--climb_calc_enable = 0
		if climb_calc_enable == 1 then
			
			--entry = "CLIMB CALC"
			tc_idx_mod = 0
			--jj = legs_num + 1
			
			-- intial speed and alt
			if ground_air == 0 then
				calc_wpt_spd = 205
				calc_wpt_alt = ref_icao_alt
			else
				calc_wpt_spd = simDR_airspeed_pilot
				calc_wpt_alt = simDR_altitude_pilot
			end
			
			-- find restricts spd and alt
			if offset2 > last_sid_idx_mod or last_sid_idx_mod == 0 then
				rest_spd = 340
				rest_alt = 45000
			else
				rest_idx_spd = find_clb_rest_spd_mod(offset2, last_sid_idx_mod)
				if rest_idx_spd == 0 then
					rest_spd = B738DR_fmc_climb_speed
				else
					rest_spd = legs_data2[rest_idx_spd][4]
				end
				rest_idx_alt = find_clb_rest_alt_mod(offset2, last_sid_idx_mod)
				--entry = tostring(rest_idx_alt)
				if rest_idx_alt == 0 then
					rest_alt = 45000
				else
					rest_alt = legs_data2[rest_idx_alt][5]
				end
			end
			
			-- if rest_alt < 45000 then
				-- calc_wpt_alt = math.min(calc_wpt_alt, rest_alt)
			-- end
			
			if rest_alt < 45000 and calc_wpt_alt > rest_alt then
				calc_wpt_alt = rest_alt
			end
			
			if calc_wpt_alt < 10000 then
				calc_wpt_spd = math.min(calc_wpt_spd, rest_spd, B738DR_fmc_climb_speed, 250)
			else
				calc_wpt_spd = math.min(calc_wpt_spd, rest_spd, B738DR_fmc_climb_speed)
			end
			
			for n = offset2, (legs_num2 + 1) do
				
				-- break calculation
				if legs_data2[n][1] == "DISCONTINUITY" then
					break
				end
				
				if n ~= 2 or string.sub(legs_data2[n][1], 1, 2) ~= "RW" then
				
					-- calc vvi
					alt_calc_temp = math.max(2000, calc_wpt_alt)
					alt_calc_temp = math.min(41000, alt_calc_temp)
					alt_calc_temp = roundUpToIncrement(alt_calc_temp, 1000)
					calc_vvi = vnav_vvi[alt_calc_temp] * 0.9
					
					if n == offset2 then
						calc_spd_alt = calc_wpt_spd * (1 + (calc_wpt_spd / 1000 * 0.02))
						if legs_data2[n][1] == "VECTOR" then
							nd_lat = 0
						else
							nd_lat = simDR_fmc_dist
						end
					else
						if calc_wpt_spd < 100 then
							calc_spd_alt = B738DR_fmc_climb_speed * (1 + (legs_data2[n-1][11] / 1000 * 0.02))
						else
							calc_spd_alt = calc_wpt_spd * (1 + (legs_data2[n-1][11] / 1000 * 0.02))
						end
						nd_lat = legs_data2[n][3]
					end
					
					nd_lat2 = 0
					nd_x = calc_dist(calc_spd_alt, calc_vvi, 1000)
					nd_y = calc_wpt_alt + 1000
					
					nd_lon = 0
					
					-- step 1000ft
					if rest_alt < 45000 and nd_y > rest_alt then
						if rest_alt < 45000 and nd_y > rest_alt then
							calc_wpt_alt = rest_alt
							nd_y = rest_alt
							nd_lon = 1
						end
					
					else
						while nd_x < nd_lat and nd_y < crz_alt_num do
							
							nd_lat2 = nd_x
							alt_calc_temp = math.max(2000, nd_y)
							alt_calc_temp = math.min(41000, alt_calc_temp)
							alt_calc_temp = roundUpToIncrement(alt_calc_temp, 1000)
							calc_vvi = vnav_vvi[alt_calc_temp] * 0.9
							
							nd_x = nd_x + calc_dist(calc_spd_alt, calc_vvi, 1000)
							nd_y = nd_y + 1000
							
							if rest_alt < 45000 and nd_y > rest_alt then
								break
							end
							
						end
					end
					
					-- check restricts SPD
					if rest_alt < 45000 and nd_y > rest_alt then
						calc_wpt_alt = rest_alt
						nd_y = rest_alt
						nd_lon = 1
					end
						
					if nd_y >= crz_alt_num then
						
						if nd_lon == 0 then
							
							-- nd_x = nd_x - calc_dist(calc_spd_alt, calc_vvi, 1000)
							nd_x = nd_lat2
							nd_y = nd_y - 1000
							calc_wpt_alt = crz_alt_num
							
							-- calculation T/C
							--entry = tostring(nd_y)
							delta_alt = crz_alt_num - nd_y
							tc_dist_mod = nd_x + calc_dist(calc_spd_alt, calc_vvi, delta_alt)	-- before dist
							tc_dist_mod = nd_lat - tc_dist_mod
							
							if tc_dist_mod < 0 then
								tc_dist_mod = 0
							end
						else
							tc_dist_mod = 0
						end
						
						-- calc bearing
						nd_lat = math.rad(legs_data2[n][7])
						nd_lon = math.rad(legs_data2[n][8])
						if n == 1 then
							temp_brg = legs_data2[n][2] + 3.1415926535
						else
							if legs_intdir_act == 1 and n == offset2 then
								temp_brg = math.rad((simDR_fmc_trk + 180) % 360)
							else
								nd_lat2 = math.rad(legs_data2[n-1][7])
								nd_lon2 = math.rad(legs_data2[n-1][8])
								nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
								nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
								temp_brg = math.atan2(nd_y, nd_x)
							end
						end
						
						tc_idx_mod = n	-- before idx
						lat_wpt = math.rad(legs_data2[n][7])
						lon_wpt = math.rad(legs_data2[n][8])
						temp_d_R = tc_dist_mod / 3440.064795					-- distance NM
						--temp_brg = legs_data[n][2] + 3.1415926535	-- back course radians
						temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
						temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
						--tc_lat = temp_lat
						--tc_lon = temp_lon
						
					else
						if nd_lon == 0 then
							--nd_x = nd_x - calc_dist(calc_spd_alt, calc_vvi, 1000)
							nd_x = nd_lat2
							nd_x = nd_lat - nd_x
							nd_y = nd_y - 1000
							calc_wpt_alt = nd_y + calc_alt(calc_spd_alt, calc_vvi, nd_x)
						end
					end
				
				end
				
				-- check restricts SPD
				if n > offset2 or ground_air ~= 0 then
					if calc_wpt_alt < 10000 then
						calc_wpt_spd = math.min(rest_spd, B738DR_fmc_climb_speed, 250)
					elseif calc_wpt_alt > 26000 and rest_spd == 340 then
						calc_wpt_spd = B738DR_fmc_climb_speed_mach
					else
						calc_wpt_spd = math.min(rest_spd, B738DR_fmc_climb_speed)
					end
				end
				
				legs_data2[n][10] = calc_wpt_spd
				legs_data2[n][11] = calc_wpt_alt
				
				if tc_idx_mod == 0 then
					-- find next restricts ALT/SPD
					ii = n + 1
					if ii > legs_num2 or ii > last_sid_idx_mod or last_sid_idx_mod == 0 then
						rest_spd = 340
						rest_alt = 45000
					else
						-- find restricts spd and alt
						rest_idx_spd = find_clb_rest_spd_mod(ii, last_sid_idx_mod)
						if rest_idx_spd == 0 then
							rest_spd = B738DR_fmc_climb_speed
						else
							rest_spd = legs_data2[rest_idx_spd][4]
						end
						rest_idx_alt = find_clb_rest_alt_mod(ii, last_sid_idx_mod)
						if rest_idx_alt == 0 then
							rest_alt = 45000
						else
							rest_alt = legs_data2[rest_idx_alt][5]
						end
					end
				else
					break
				end
			end
			
		end
		
		
		--------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------
		-- Find E/D, T/D and DECEL
		--------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------
		if true then
		--if 5 == 6 then
			td_idx_mod = 0
			
			-- find E/D
			ed_found_mod = 0
			discon = 0
			if idx_ed_mod > 0 then
				ed_found_mod = idx_ed_mod
				ed_alt_mod = legs_data2[ed_found_mod][5]
				-- ed_dist_mod = (crz_alt_num - ed_alt_mod) / math.tan(math.rad(econ_des_vpa))		-- ft
				-- ed_dist_mod = ed_dist_mod * 0.00016458		-- NM
				ed_dist_mod = calc_vnav_pth_dist2(ed_alt_mod, crz_alt_num)
				ed_vpa_mod = econ_des_vpa
			end
			
			-- find T/D
			if discon == 0 then
				td_dist_mod = 0 
				decel_idx_mod = 0
				skip_vpa = 0
				if ed_found_mod == 0 then	-- not found e/d
					ed_found_mod = legs_num2 + 1
					ed_alt_mod = math.floor((des_icao_alt + 1000)/100) * 100
					-- ed_dist_mod = (crz_alt_num - ed_alt_mod) / math.tan(math.rad(econ_des_vpa))		-- ft
					-- ed_dist_mod = ed_dist_mod * 0.00016458		-- NM
					ed_dist_mod = calc_vnav_pth_dist2(ed_alt_mod, crz_alt_num)
					ed_vpa_mod = econ_des_vpa
					if legs_data2[ed_found_mod][1] == nil then
						skip_vpa = 1
					end
				end
				if skip_vpa == 0 then
					
					
					-----------------------------------------------------------
					-- find T/D , econ vnav descent path
					-----------------------------------------------------------
					last_wpt_idx = 0
					create_vpth_table2(gw_app_kgs)
					for ii = ed_found_mod, 2, -1 do
						
						if legs_data2[ii][1] ~= "VECTOR" then
							td_dist_mod = td_dist_mod + legs_data2[ii][3]
						end
						if ii == ed_found_mod then
							calc_wpt_alt = ed_alt_mod
						else
							--calc_wpt_alt = calc_wpt_alt + ((legs_data2[ii+1][3] * (math.tan(math.rad(econ_des_vpa)))) * 6076.11549) -- ft
							wind_temp = wind_pth(legs_data2[ii][2], legs_data2[ii][39], legs_data2[ii][38])
							modify_vpth_table2(calc_wpt_alt, wind_temp)
							calc_wpt_alt = calc_vnav_pth_alt2(ed_alt_mod , td_dist_mod - legs_data2[ii][3])
						end
						if calc_wpt_alt > crz_alt_num then
							calc_wpt_alt = crz_alt_num
						end
						legs_data2[ii][11] = calc_wpt_alt
						last_wpt_idx = ii
						
						if td_dist_mod > ed_dist_mod then
							
							-- if legs_intdir_act == 1 and ii == offset2 then
								-- temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
							-- else
								-- nd_lat = math.rad(legs_data2[ii][7])
								-- nd_lon = math.rad(legs_data2[ii][8])
								-- nd_lat2 = math.rad(legs_data2[ii-1][7])
								-- nd_lon2 = math.rad(legs_data2[ii-1][8])
								-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
								-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
								-- temp_brg = math.atan2(nd_y, nd_x)
							-- end
							td_dist_mod = legs_data2[ii][3] - (td_dist_mod - ed_dist_mod)
							td_idx_mod = ii 	-- before idx
							-- lat_wpt = math.rad(legs_data2[ii][7])
							-- lon_wpt = math.rad(legs_data2[ii][8])
							-- temp_d_R = td_dist / 3440.064795					-- distance NM
							-- temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
							-- temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
							--td_lat = temp_lat
							--td_lon = temp_lon
							break
						end
					end
					
					-- if B738DR_fms_test == 1 then
						-- dump_leg_mod()
						-- B738DR_fms_test = 0
					-- end
					
					-----------------------------------------------------------
					-- find fixed altitude restrict between T/C and T/D
					-----------------------------------------------------------
					
					if tc_idx_mod == 0 then
						if last_sid_idx_mod == 0 then
							jj = 2	--offset
						else
							jj = last_sid_idx_mod + 1
						end
					else
						if tc_idx_mod > td_idx_mod then
							if last_sid_idx_mod == 0 then
								jj = 2
							else
								-- if tc_idx <= last_sid_idx then
									jj = last_sid_idx_mod + 1
								-- else
									-- jj = 2 ---?????
								-- end
							end
						else
							if last_sid_idx_mod == 0 then
								jj = tc_idx_mod
							else
								if tc_idx_mod <= last_sid_idx_mod then
									jj = last_sid_idx_mod + 1
								else
									jj = tc_idx_mod
								end
							end
						end
					end
					
					td_fix_dist_mod = 0		-- distance before td_fix_idx
					td_fix_idx_mod = 0		-- td_fix_idx
					ed_fix_found_mod = 0	-- ed fix idx
					ed_fix_alt_mod = 0		-- ed alt fix idx
					ed_fix_dist_mod = 0		-- ed fix distance (local)
					ed_fix_vpa_mod = 0
					ed_fix_found2_mod = {}
					ed_fix_alt2_mod = {}
					ed_fix_vpa2_mod = {}
					ed_fix_num_mod = 0
					
					
					-- restrict alt
					for ii = 1, legs_restr_alt_n_mod do
						if legs_restr_alt_mod[ii][2] >= jj and legs_restr_alt_mod[ii][2] < ed_found_mod then
							idx_temp = legs_restr_alt_mod[ii][2]
							ignored = 0
							
							-- fixed restrict altitude
							if legs_restr_alt_mod[ii][4] == 45 or legs_restr_alt_mod[ii][4] == 43 then
								ignored = 1
							else
								--if idx_temp >= td_idx_mod then
									if legs_data2[idx_temp][11] == 0 then
										if crz_alt_num == legs_restr_alt_mod[ii][3] then
											ignored = 1
										end
									else
										if legs_data2[idx_temp][11] == legs_restr_alt_mod[ii][3] then
											ignored = 1
										end
									end
								--end
							end
							
							if ignored == 0 then
								
								ed_fix_found_mod = idx_temp
								
								ed_fix_num_mod = ed_fix_num_mod + 1
								ed_fix_found2_mod[ed_fix_num_mod] = ed_fix_found_mod
								
								if ed_fix_num_mod == 1 then
									td_dist_mod = 0
									td_idx_mod = 0
								end
								
								ed_fix_alt_mod = legs_restr_alt_mod[ii][3]
								
								ed_fix_alt2_mod[ed_fix_num_mod] = ed_fix_alt_mod
								
								
								legs_data2[ed_fix_found_mod][11] = ed_fix_alt_mod
								legs_data2[ed_fix_found_mod][17] = legs_data2[ed_fix_found_mod][17] + 10
								
								ed_fix_vpa_mod = econ_des_vpa
								if ed_fix_num_mod == 1 then
									-- ed_dist_mod = (crz_alt_num - ed_fix_alt_mod) / math.tan(math.rad(econ_des_vpa))		-- ft
									-- ed_dist_mod = ed_dist_mod * 0.00016458		-- NM
									ed_dist_mod = calc_vnav_pth_dist2(ed_fix_alt_mod, crz_alt_num)
									n = 2	--jj
									ed_fix_vpa2_mod[ed_fix_num_mod] = econ_des_vpa
									create_vpth_table2(gw_app_kgs)
								else
									n = ed_fix_found2_mod[(ed_fix_num_mod-1)] + 1
									
									--calc vpa
									nd_x = 0
									for kk = n, ed_fix_found_mod do
										nd_x = nd_x + legs_data2[kk][3]
									end
									nd_x = nd_x * 1852	-- in metres
									nd_lat = ed_fix_alt2_mod[(ed_fix_num_mod-1)] - ed_fix_alt_mod -- delta alt
									nd_lat = nd_lat * 0.3048	-- in metres
									nd_y = 0
									if nd_x > 0 and nd_lat > 0 then
										nd_y = math.deg(math.atan(nd_lat/nd_x))
									end
									ed_fix_vpa2_mod[ed_fix_num_mod] = nd_y
									ed_fix_vpa_mod = nd_y
								end
								legs_data2[ed_fix_found_mod][20] = -ed_fix_vpa_mod
								
								last_wpt_idx = 0
								for kk = ed_fix_found_mod, n, -1 do
									
									if ed_fix_num_mod == 1 then
										if legs_data2[kk][1] ~= "VECTOR" then
											td_dist_mod = td_dist_mod + legs_data2[kk][3]
										end
									end
									if kk == ed_fix_found_mod then
										calc_wpt_alt = ed_fix_alt_mod
									else
										--calc_wpt_alt = calc_wpt_alt + ((legs_data2[kk+1][3] * (math.tan(math.rad(ed_fix_vpa2_mod[ed_fix_num_mod])))) * 6076.11549) -- ft
										if ed_fix_num_mod == 1 then
											wind_temp = wind_pth(legs_data2[kk][2], legs_data2[kk][39], legs_data2[kk][38])
											modify_vpth_table2(calc_wpt_alt, wind_temp)
											calc_wpt_alt = calc_vnav_pth_alt2(ed_fix_alt_mod, td_dist_mod - legs_data2[kk][3])
										else
											calc_wpt_alt = calc_wpt_alt + ((legs_data2[kk+1][3] * (math.tan(math.rad(ed_fix_vpa2_mod[ed_fix_num_mod])))) * 6076.11549) -- ft
										end
									end
									if calc_wpt_alt > crz_alt_num then
										calc_wpt_alt = crz_alt_num
									end
									
									legs_data2[kk][11] = calc_wpt_alt
									
									
									-- if kk == n and ed_fix_num_mod > 1 then
										
										-- if first_restrict > 0 then
											-- if legs_data2[first_restrict][4] ~= 43 and legs_data2[first_restrict][4] ~= 45 then
												-- legs_data2[kk][11] = ed_fix_alt2[first_restrict]
											-- else
												-- legs_data2[kk][11] = calc_wpt_alt
											-- end
										-- else
											-- legs_data2[kk][11] = calc_wpt_alt
										-- end
										
									-- else
										-- legs_data2[kk][11] = calc_wpt_alt
									-- end
									--last_wpt_idx = kk
									
									
									
									
									last_wpt_idx = kk
									
									if td_dist_mod > ed_dist_mod and ed_fix_num_mod == 1 then
										
										td_dist_mod = legs_data2[kk][3] - (td_dist_mod - ed_dist_mod)
										td_idx_mod = kk 	-- before idx
										break
									end
									if ed_fix_num_mod > 1 and calc_wpt_alt > ed_fix_alt2_mod[ed_fix_num_mod-1] then
										legs_data2[kk][11] = ed_fix_alt2_mod[ed_fix_num_mod-1]
										break
									end
								end
								
							end -- ignored
							
						end
					end
					
					-- calc vpa from last restrict to E/D
					if ed_fix_num_mod > 0 then
						n = ed_fix_found2_mod[ed_fix_num_mod] + 1
						
						--calc vpa
						nd_x = 0
						for kk = n, ed_found_mod do
							nd_x = nd_x + legs_data2[kk][3]
						end
						nd_x = nd_x * 1852	-- in metres
						nd_lat = ed_fix_alt2_mod[ed_fix_num_mod] - ed_alt_mod -- delta alt
						nd_lat = nd_lat * 0.3048	-- in metres
						nd_y = 0
						if nd_x > 0 and nd_lat > 0 then
							nd_y = math.deg(math.atan(nd_lat/nd_x))
						end
						ed_vpa = nd_y
						
						for kk = ed_found_mod, n, -1 do
							
							if kk == ed_found_mod then
								calc_wpt_alt = ed_alt_mod
							else
								--calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(econ_des_vpa)))) * 6076.11549) -- ft
								calc_wpt_alt = calc_wpt_alt + ((legs_data2[kk+1][3] * (math.tan(math.rad(ed_vpa)))) * 6076.11549) -- ft
							end
							if calc_wpt_alt > crz_alt_num then
								calc_wpt_alt = crz_alt_num
							end
							legs_data2[kk][11] = calc_wpt_alt
						end
						
					end
					
					
					----------------------------------------
					
					-- if B738DR_fms_test == 1 then
						-- dump_leg_mod()
						-- B738DR_fms_test = 0
					-- end
					
					
					-----------------------------------------------------------
					-- find above/below altitude restrict between T/C and T/D
					-----------------------------------------------------------
					
					-- restrict alt
					for ii = 1, legs_restr_alt_n_mod do
						if legs_restr_alt_mod[ii][2] >= jj and legs_restr_alt_mod[ii][2] < ed_found_mod then
							idx_temp = legs_restr_alt_mod[ii][2]
							ignored = 0
							
							if legs_restr_alt_mod[ii][4] == 45 then 	-- Below
								if legs_data2[idx_temp][11] == 0 then
									if crz_alt_num <= legs_restr_alt_mod[ii][3] then
										ignored = 1
									end
								else
									if legs_data2[idx_temp][11] <= legs_restr_alt_mod[ii][3] then
										ignored = 1
									end
								end
							elseif legs_restr_alt_mod[ii][4] == 43 then -- Above
								if legs_data2[idx_temp][11] == 0 then
									if crz_alt_num >= legs_restr_alt_mod[ii][3] then
										ignored = 1
									end
								else
									if legs_data2[idx_temp][11] >= legs_restr_alt_mod[ii][3] then
										ignored = 1
									end
								end
							else
								ignored = 1
							end
							
							if ignored == 0 then
								
								ed_fix_found_mod = idx_temp
								
								ed_fix_num_mod = ed_fix_num_mod + 1
								ed_fix_found2_mod[ed_fix_num_mod] = ed_fix_found_mod
								
								ed_fix_alt_mod = legs_restr_alt_mod[ii][3]
								
								ed_fix_alt2_mod[ed_fix_num_mod] = ed_fix_alt_mod
								
								
								legs_data2[ed_fix_found_mod][11] = ed_fix_alt_mod
								legs_data2[ed_fix_found_mod][17] = legs_data2[ed_fix_found_mod][17] + 10
								
								if (ed_fix_found_mod - 1) < jj then
									first_restrict = 0
								else
									first_restrict = find_alt_restrict_mod(ed_fix_found_mod-1, jj)
								end
								--first_restrict = find_alt_restrict_mod(ed_fix_found_mod-1, jj)
								
								ed_fix_vpa_mod = econ_des_vpa
								if first_restrict == 0 then
									-- ed_dist_mod = (crz_alt_num - ed_fix_alt_mod) / math.tan(math.rad(econ_des_vpa))		-- ft
									-- ed_dist_mod = ed_dist_mod * 0.00016458		-- NM
									ed_dist_mod = calc_vnav_pth_dist2(ed_fix_alt_mod, crz_alt_num)
									n = 2	--jj
									ed_fix_vpa2_mod[ed_fix_num_mod] = econ_des_vpa
									td_dist_mod = 0
									td_idx_mod = 0
									create_vpth_table2(gw_app_kgs)
								else
									n = first_restrict + 1
									--calc vpa
									nd_x = 0
									for kk = n, ed_fix_found_mod do
										nd_x = nd_x + legs_data2[kk][3]
									end
									nd_x = nd_x * 1852	-- in metres
									nd_lat = legs_data2[first_restrict][5] - ed_fix_alt_mod -- delta alt
									nd_lat = nd_lat * 0.3048	-- in metres
									nd_y = 0
									if nd_x > 0 and nd_lat > 0 then
										nd_y = math.deg(math.atan(nd_lat/nd_x))
									end
									ed_fix_vpa2_mod[ed_fix_num_mod] = nd_y
									ed_fix_vpa_mod = nd_y
								end
								legs_data2[ed_fix_found_mod][20] = -ed_fix_vpa_mod
								
								---------------------------------
								-- correct vnav path TO restrict
								---------------------------------
								last_wpt_idx = 0
								for kk = ed_fix_found_mod, n, -1 do
									
									if first_restrict == 0 then
										if legs_data2[kk][1] ~= "VECTOR" then
											td_dist_mod = td_dist_mod + legs_data2[kk][3]
										end
									end
									if kk == ed_fix_found_mod then
										calc_wpt_alt = ed_fix_alt_mod
									else
										-- calc_wpt_alt = calc_wpt_alt + ((legs_data2[kk+1][3] * (math.tan(math.rad(ed_fix_vpa2_mod[ed_fix_num_mod])))) * 6076.11549) -- ft
										if ed_fix_num_mod == 1 then
											wind_temp = wind_pth(legs_data2[kk][2], legs_data2[kk][39], legs_data2[kk][38])
											modify_vpth_table2(calc_wpt_alt, wind_temp)
											calc_wpt_alt = calc_vnav_pth_alt2(ed_fix_alt_mod, td_dist_mod - legs_data2[kk][3])
										else
											calc_wpt_alt = calc_wpt_alt + ((legs_data2[kk+1][3] * (math.tan(math.rad(ed_fix_vpa2_mod[ed_fix_num_mod])))) * 6076.11549) -- ft
										end
									end
									if first_restrict > 0 then
										if calc_wpt_alt > legs_data2[first_restrict][5] then
											calc_wpt_alt = legs_data2[first_restrict][5]
										end
									end
									if calc_wpt_alt > crz_alt_num then
										calc_wpt_alt = crz_alt_num
									end
									legs_data2[kk][11] = calc_wpt_alt
									last_wpt_idx = kk
									
									if td_dist_mod > ed_dist_mod and first_restrict == 0 then
										
											-- if legs_intdir_act == 1 and kk == offset2 then
												-- temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
											-- else
												-- nd_lat = math.rad(legs_data2[kk][7])
												-- nd_lon = math.rad(legs_data2[kk][8])
												-- nd_lat2 = math.rad(legs_data2[kk-1][7])
												-- nd_lon2 = math.rad(legs_data2[kk-1][8])
												-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
												-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
												-- temp_brg = math.atan2(nd_y, nd_x)
											-- end
										td_dist_mod = legs_data2[kk][3] - (td_dist_mod - ed_dist_mod)
										td_idx_mod = kk 	-- before idx
										-- lat_wpt = math.rad(legs_data2[kk][7])
										-- lon_wpt = math.rad(legs_data2[kk][8])
										-- temp_d_R = td_dist_mod / 3440.064795					-- distance NM
										-- temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
										-- temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
										--td_lat = temp_lat
										--td_lon = temp_lon
										break
									end
								end
								
								-----------------------------------
								-- correct vnav path FROM restrict
								-----------------------------------
								first_restrict = find_alt_restrict_mod(ed_fix_found_mod+1, ed_found_mod)
								
								if first_restrict ~= 0 then --and first_restrict ~= ed_found_mod then
										n = first_restrict
										
										-- calculate vnav path
										nd_x = 0
										for kk = ed_fix_found_mod + 1, n do
											nd_x = nd_x + legs_data2[kk][3]
										end
										nd_x = nd_x * 1852	-- in metres
										nd_lat = ed_fix_alt_mod - legs_data2[first_restrict][5]-- delta alt
										nd_lat = nd_lat * 0.3048	-- in metres
										nd_y = 0
										if nd_x > 0 and nd_lat > 0 then
											nd_y = math.deg(math.atan(nd_lat/nd_x))
										end
										legs_data2[n][20] = -nd_y
										
										for kk = n, ed_fix_found_mod + 1, -1 do
											if kk == n then
												calc_wpt_alt = legs_data2[kk][5]
											else
												--calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(econ_des_vpa)))) * 6076.11549) -- ft
												calc_wpt_alt = calc_wpt_alt + ((legs_data2[kk+1][3] * (math.tan(math.rad(-legs_data2[n][20])))) * 6076.11549) -- ft
											end
											if calc_wpt_alt > crz_alt_num then
												calc_wpt_alt = crz_alt_num
											end
											legs_data2[kk][11] = calc_wpt_alt
										end
								end
								
								
							end -- ignored
							
						end
					end
					
					-- order E/D restrict data
					if ed_fix_num_mod > 1 then
						for kk = 1, ed_fix_num_mod do
							n = ed_fix_found2_mod[kk]
							ed_fix_vpa2_mod[kk] = -legs_data2[n][20]
						end
						for kk = 1, ed_fix_num_mod-1 do
							for ll = kk+1, ed_fix_num_mod do
								if ed_fix_found2_mod[kk] > ed_fix_found2_mod[ll] then
									temp_idx = ed_fix_found2_mod[kk]
									temp_alt = ed_fix_alt2_mod[kk]
									temp_vpa = ed_fix_vpa2_mod[kk]
									ed_fix_found2_mod[kk] = ed_fix_found2_mod[ll]
									ed_fix_alt2_mod[kk] = ed_fix_alt2_mod[ll]
									ed_fix_vpa2_mod[kk] = ed_fix_vpa2_mod[ll]
									ed_fix_found2_mod[ll] = temp_idx
									ed_fix_alt2_mod[ll] = temp_alt
									ed_fix_vpa2_mod[ll] = temp_vpa
								end
							end
						end
					end
					
					-- calc vpa from last restrict to E/D
					if ed_fix_num_mod > 0 then
						n = ed_fix_found2_mod[ed_fix_num_mod] + 1
						
						--calc vpa
						nd_x = 0
						for kk = n, ed_found_mod do
							nd_x = nd_x + legs_data2[kk][3]
						end
						nd_x = nd_x * 1852	-- in metres
						nd_lat = ed_fix_alt2_mod[ed_fix_num_mod] - ed_alt_mod -- delta alt
						nd_lat = nd_lat * 0.3048	-- in metres
						nd_y = 0
						if nd_x > 0 and nd_lat > 0 then
							nd_y = math.deg(math.atan(nd_lat/nd_x))
						end
						ed_vpa = nd_y
						
						-- for kk = ed_found_mod, n, -1 do
							
							-- if kk == ed_found_mod then
								-- calc_wpt_alt = ed_alt
							-- else
								-- --calc_wpt_alt = calc_wpt_alt + ((legs_data[kk+1][3] * (math.tan(math.rad(econ_des_vpa)))) * 6076.11549) -- ft
								-- calc_wpt_alt = calc_wpt_alt + ((legs_data2[kk+1][3] * (math.tan(math.rad(ed_vpa)))) * 6076.11549) -- ft
							-- end
							-- if calc_wpt_alt > crz_alt_num then
								-- calc_wpt_alt = crz_alt_num
							-- end
							-- legs_data2[kk][11] = calc_wpt_alt
						-- end
						
					end
					
					-- revert back waypoint flag
					for kk = 1, legs_num2 do
						nd_x = 0
						if legs_data2[kk][17] > 199 then
							nd_x = 200
						elseif legs_data2[kk][17] > 99 then
							nd_x = 100
						end
						while legs_data2[kk][17] > 99 do
							legs_data2[kk][17] = legs_data2[kk][17] - 100
						end
						if legs_data2[kk][17] > 9 then
							legs_data2[kk][17] = legs_data2[kk][17] - 10
						end
						legs_data2[kk][17] = legs_data2[kk][17] + nd_x
					end
					
					
					
					-- calculate speed for waypoints
					if td_idx_mod == 0 then
						last_wpt_idx = offset2
					else
						last_wpt_idx = td_idx_mod
					end
					-- set restrict idx
					rest_idx_spd = 0
					if legs_restr_spd_n_mod > 0 then
						for ii = 1, legs_restr_spd_n_mod do
							rest_idx_spd = rest_idx_spd + 1
							if legs_restr_spd_mod[rest_idx_spd][2] >= last_wpt_idx then
								break
							end
						end
					else
						rest_idx_spd = 1
					end
					
					if last_wpt_idx <= ed_found_mod then
						for ii = last_wpt_idx, ed_found_mod do
							if rest_idx_spd <= legs_restr_spd_n_mod then
								rest_spd = legs_restr_spd_mod[rest_idx_spd][3]
								rest_idx = legs_restr_spd_mod[rest_idx_spd][2]
							else
								rest_idx = 0
							end
							-- descent phase
							if ii == rest_idx then
								td_spd_rest_loc = 1
								calc_wpt_spd = rest_spd
								rest_idx_spd = rest_idx_spd + 1
								if decel_idx_mod == 0 and ii >= offset2 then
									if ii == offset2 then
										if simDR_fmc_dist > 6.7 then
											-- DECEL calc
											
											-- if legs_intdir_act == 1 and ii == offset2 then
												-- temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
											-- else
												-- nd_lat = math.rad(legs_data2[ii][7])
												-- nd_lon = math.rad(legs_data2[ii][8])
												-- nd_lat2 = math.rad(legs_data2[ii-1][7])
												-- nd_lon2 = math.rad(legs_data2[ii-1][8])
												-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
												-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
												-- temp_brg = math.atan2(nd_y, nd_x)
											-- end
											
											decel_dist_mod = 6.7 -- before dist (6.7NM)
											decel_idx_mod = ii
											-- lat_wpt = math.rad(legs_data2[ii][7])
											-- lon_wpt = math.rad(legs_data2[ii][8])
											-- temp_d_R = decel_dist_mod / 3440.064795					-- distance NM
											-- temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
											-- temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
											--decel_lat = temp_lat
											--decel_lon = temp_lon
										end
									else
										-- DECEL calc
										if legs_data2[ii][3] < 6.7 and ii > 1 then
											
											---------------------------------
											-- if ii-1 is restrict wpt then
											---------------------------------
											if legs_data2[ii-1][4] == 0 then		-- speed restrict
											
												-- pom5 = ii - 1
												-- if legs_intdir_act == 1 and pom5 == offset2 then
													-- temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
												-- else
													-- nd_lat = math.rad(legs_data2[ii][7])
													-- nd_lon = math.rad(legs_data2[ii][8])
													-- nd_lat2 = math.rad(legs_data2[ii-1][7])
													-- nd_lon2 = math.rad(legs_data2[ii-1][8])
													-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
													-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
													-- temp_brg = math.atan2(nd_y, nd_x)
												-- end
											
												decel_idx_mod = ii - 1
												-- lat_wpt = math.rad(legs_data2[ii-1][7])
												-- lon_wpt = math.rad(legs_data2[ii-1][8])
												decel_dist_mod = 6.7 - legs_data2[ii][3]
												if legs_data2[ii-1][3] < decel_dist_mod then
													decel_dist_mod = legs_data2[ii-1][3] - 0.3
												end
											else
												decel_dist_mod = legs_data2[ii][3] - 0.3 -- 0.3 NM before
											
												-- if legs_intdir_act == 1 and ii == offset2 then
													-- temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
												-- else
													-- nd_lat = math.rad(legs_data2[ii][7])
													-- nd_lon = math.rad(legs_data2[ii][8])
													-- nd_lat2 = math.rad(legs_data2[ii-1][7])
													-- nd_lon2 = math.rad(legs_data2[ii-1][8])
													-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
													-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
													-- temp_brg = math.atan2(nd_y, nd_x)
												-- end
											
												decel_idx_mod = ii
												-- lat_wpt = math.rad(legs_data2[ii][7])
												-- lon_wpt = math.rad(legs_data2[ii][8])
											end
										else
											decel_dist_mod = 6.7 -- before dist (6.7NM)
											
											-- if legs_intdir_act == 1 and ii == offset2 then
												-- temp_brg = math.rad((legs_intdir_crs - simDR_mag_variation + 360 + 180) % 360)
											-- else
												-- nd_lat = math.rad(legs_data2[ii][7])
												-- nd_lon = math.rad(legs_data2[ii][8])
												-- nd_lat2 = math.rad(legs_data2[ii-1][7])
												-- nd_lon2 = math.rad(legs_data2[ii-1][8])
												-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
												-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
												-- temp_brg = math.atan2(nd_y, nd_x)
											-- end
											
											decel_idx_mod = ii
											-- lat_wpt = math.rad(legs_data2[ii][7])
											-- lon_wpt = math.rad(legs_data2[ii][8])
										end
										-- temp_d_R = decel_dist_mod / 3440.064795					-- distance NM
										-- temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
										-- temp_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
										--decel_lat = temp_lat
										--decel_lon = temp_lon
									end
								end
							end
							calc_wpt_alt = legs_data2[ii][11]
							if td_spd_rest_loc == 0 then
								if calc_wpt_alt < 26000 then
									if calc_wpt_spd < 100 then
										calc_wpt_spd = B738DR_fmc_descent_speed
									else
										if calc_wpt_spd > B738DR_fmc_descent_speed then
											calc_wpt_spd = B738DR_fmc_descent_speed
										end
									end
								else
									calc_wpt_spd = B738DR_fmc_descent_speed_mach
								end
							end
							if calc_wpt_alt < 10000 then
								if calc_wpt_spd > 250 then
									calc_wpt_spd = 250
								end
							end
							legs_data2[ii][10] = calc_wpt_spd
						end
					end
					
				end
			end
		end
		
		
		-- CRUISE
		if td_idx_mod > 1 then
		--if 1 == 2 then
		
			calc_wpt_alt = crz_alt_num
			if crz_alt_num < 26000 then
				calc_wpt_spd = B738DR_fmc_cruise_speed
			else
				calc_wpt_spd = B738DR_fmc_cruise_speed_mach
			end
			if calc_wpt_alt < 10000 then
				if calc_wpt_spd > 250 then
					calc_wpt_spd = 250
				end
			end
			nd_x = 360
			n = td_idx_mod - 1
			if tc_idx_mod ~= 0 and tc_idx_mod <= td_idx_mod then
				if tc_idx_mod <= n then
					for ii = tc_idx_mod, n do
						legs_data2[ii][10] = calc_wpt_spd
						-- find SID speed restrict
						if last_sid_idx_mod > 0 and ii <= last_sid_idx_mod then
							for jj = ii, last_sid_idx_mod do
								if legs_data2[jj][4] > 0 then
									legs_data2[ii][10] = legs_data2[jj][4]
									break
								end
							end
						end
						legs_data2[ii][11] = crz_alt_num
						if crz_wind_dir ~= "---" and crz_wind_spd ~= "---" then
							if legs_data2[ii][39] == "" then
								legs_data2[ii][38] = crz_wind_dir .. "`/" .. crz_wind_spd
							end
						end
					end
				end
			else
				if tc_idx_mod == 0 then
					if offset2 <= n then
						for ii = offset2, n do
							-- cruise phase
							legs_data2[ii][10] = calc_wpt_spd
							legs_data2[ii][11] = crz_alt_num
							if crz_wind_dir ~= "---" and crz_wind_spd ~= "---" then
								if legs_data2[ii][39] == "" then
									legs_data2[ii][38] = crz_wind_dir .. "`/" .. crz_wind_spd
								end
							end
						end
					end
				else
					legs_data2[n][10] = calc_wpt_spd 
					legs_data2[n][11] = crz_alt_num
					if crz_wind_dir ~= "---" and crz_wind_spd ~= "---" then
						if legs_data2[n][39] == "" then
							legs_data2[n][38] = crz_wind_dir .. "`/" .. crz_wind_spd
						end
					end
				end
			end
			
			-- descent WIND
			if ed_found_mod > td_idx_mod then
				for ii = td_idx_mod, ed_found_mod do
					if legs_data2[ii][11] <= forec_alt_3_num and forec_alt_3_num > 0 then
						if forec_dir_3 ~= "---" and forec_spd_3 ~= "---" then
							if legs_data2[ii][39] == "" then
								legs_data2[ii][38] = forec_dir_3 .. "`/" .. forec_spd_3
							end
						end
					elseif legs_data2[ii][11] <= forec_alt_2_num and forec_alt_2_num > 0 then
						if forec_dir_2 ~= "---" and forec_spd_2 ~= "---" then
							if legs_data2[ii][39] == "" then
								legs_data2[ii][38] = forec_dir_2 .. "`/" .. forec_spd_2
							end
						end
					elseif legs_data2[ii][11] <= forec_alt_1_num and forec_alt_1_num > 0 then
						if forec_dir_1 ~= "---" and forec_spd_1 ~= "---" then
							if legs_data2[ii][39] == "" then
								legs_data2[ii][38] = forec_dir_1 .. "`/" .. forec_spd_1
							end
						end
					elseif forec_alt_1_num > 0 then
						if crz_wind_dir ~= "---" and crz_wind_spd ~= "---" then
							if legs_data2[ii][39] == "" then
								legs_data2[ii][38] = crz_wind_dir .. "`/" .. crz_wind_spd
							end
						end
					end
				end
			end
		end
		
	else
		if legs_num2 > 1 then
			for n = 1, (legs_num2 + 1) do
				if string.sub(legs_data2[n][1], 1, 2) == "RW" and n == 2 then
					legs_data2[n][11] = ref_icao_alt
				else
					legs_data2[n][11] = 0
				end
				legs_data2[n][10] = 0
				legs_data2[n][14] = 50000
				legs_data2[n][38] = ""
			end
		end
		tc_idx_mod = 0
		td_idx_mod = 0
		ed_found_mod = 0
		td_fix_idx_mod = 0
		decel_idx_mod = 0
		ed_fix_found_mod = 0
		ed_fix_alt_mod = 0
		ed_alt_mod = 0

	
	end
	
	-- check alt constraint
	if msg_chk_alt_constr == 0 and td_idx_mod ~= 0 then
		
		if offset > td_idx_mod then
			ii = offset
		else
			ii = td_idx_mod
		end
		if last_sid_idx_mod > 0 and ii <= last_sid_idx_mod then
			ii = last_sid_idx_mod + 1
		end
		if ii > legs_num2 then
			ii = legs_num2
		end
		for n = ii, legs_num2 do
			if legs_data2[n][5] ~= 0 and legs_data2[n][11] ~= 0
			and legs_data2[n][1] ~= "DISCONTINUITY" and legs_data2[n][1] ~= "VECTOR" then
				if legs_data2[n][11] > legs_data2[n-1][11] then
					fmc_message_num = fmc_message_num + 1
					fmc_message[fmc_message_num] = ALT_CONSTRAINT .. legs_data2[n][1]
					fmc_message_warn[fmc_message_num] = 1
					simCMD_nosmoking_toggle:once()
					fms_msg_sound = 1
				else
					if legs_data2[n][6] == 45 then -- below
						if legs_data2[n][11] > legs_data2[n][5] then
							fmc_message_num = fmc_message_num + 1
							fmc_message[fmc_message_num] = ALT_CONSTRAINT .. legs_data2[n][1]
							fmc_message_warn[fmc_message_num] = 1
							simCMD_nosmoking_toggle:once()
							fms_msg_sound = 1
						end
					elseif legs_data2[n][6] == 43 then -- above
						if legs_data2[n][11] < legs_data2[n][5] then
							fmc_message_num = fmc_message_num + 1
							fmc_message[fmc_message_num] = ALT_CONSTRAINT .. legs_data2[n][1]
							fmc_message_warn[fmc_message_num] = 1
							simCMD_nosmoking_toggle:once()
							fms_msg_sound = 1
						end
					else
						if legs_data2[n][11] ~= legs_data2[n][5] then
							fmc_message_num = fmc_message_num + 1
							fmc_message[fmc_message_num] = ALT_CONSTRAINT .. legs_data2[n][1]
							fmc_message_warn[fmc_message_num] = 1
							simCMD_nosmoking_toggle:once()
							fms_msg_sound = 1
						end
					end
				end
			end
		end
		msg_chk_alt_constr = 1
	end
	
	-- if legs_delete == 0 and calc_rte_enable2 == 0 then
		-- copy_to_legsdata()
	-- end
	
	vnav_update_mod = 0
	
	end
	
	if is_timer_scheduled(vnav_timer_mod) == false then
		run_after_time(vnav_timer_mod, 1)	-- 1 seconds
	end

end


function find_alt_restrict(rest_from, rest_to)
	
	local ii = 0
	local finded_rest_idx = 0
	
	if rest_from < rest_to then
		for ii = rest_from, rest_to do
			if legs_data[ii][17] > 9 then
				finded_rest_idx = ii
				break
			end
		end
		if rest_to == ed_found and finded_rest_idx == 0 then
			finded_rest_idx = ed_found
		end
	else
		for ii = rest_from, rest_to, -1 do
			if legs_data[ii][17] > 9 then
				finded_rest_idx = ii
				break
			end
		end
	end
	return finded_rest_idx
	
end

function find_alt_restrict_mod(rest_from, rest_to)
	
	local ii = 0
	local finded_rest_idx = 0
	local jj = 0
	
	if rest_from < rest_to then
		for ii = rest_from, rest_to do
			jj = legs_data2[ii][17]
			while jj > 99 do
				jj = jj - 100
			end
			if jj > 9 then
				finded_rest_idx = ii
				break
			end
		end
		if rest_to == ed_found_mod and finded_rest_idx == 0 then
			finded_rest_idx = ed_found_mod
		end
	else
		for ii = rest_from, rest_to, -1 do
			jj = legs_data2[ii][17]
			while jj > 99 do
				jj = jj - 100
			end
			if jj > 9 then
				finded_rest_idx = ii
				break
			end
		end
	end
	return finded_rest_idx
	
end


function B738_displ_tc()
	-- local ils_lat = math.rad(simDR_latitude) 
	-- local ils_lon = math.rad(simDR_longitude) 
	local ils_lat = math.rad(ndx_lat)
	local ils_lon = math.rad(ndx_lon)
	local mag_hdg = 0
	local delta_ils_hdg = 0
	local ils_hdg = 0
	local ils_on_off = 0
	local ils_x = 0
	local ils_y = 0
	local ils_dis = 0
	local ils_zoom = 0
	local ils_disable = 0
	local ils_corr = 0
	local rte_plan_mode = 0
	
	if legs_num > 0 then -- and legs_step <= legs_num then
	
		-- if offset == 0 then
			-- offset = 1
		-- end
	
		if legs_step > legs_num2 then
			legs_step = legs_num2
		end
		
		-- CAPTAIN
		if B738DR_capt_map_mode == 3 then
			if legs_step == 0 then
				ils_lat = math.rad(legs_data2[1][7])
				ils_lon = math.rad(legs_data2[1][8])
			else
				ils_lat = math.rad(legs_data2[legs_step][7])
				ils_lon = math.rad(legs_data2[legs_step][8])
			end
			mag_hdg = -simDR_mag_variation
			rte_plan_mode = 1
		-- -- CAPTAIN
		-- if B738DR_capt_map_mode == 3 then
			-- if legs_step == 0 then
				-- ils_lat = math.rad(legs_data[1][7])
				-- ils_lon = math.rad(legs_data[1][8])
			-- else
				-- ils_lat = math.rad(legs_data[legs_step][7])
				-- ils_lon = math.rad(legs_data[legs_step][8])
			-- end
			-- mag_hdg = -simDR_mag_variation
		elseif B738DR_capt_map_mode == 2 then
			-- if B738DR_capt_map_mode < 2 then
				-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				-- -- if simDR_efis_map_mode == 0 then
				-- if B738DR_capt_map_mode == 1 and B738DR_capt_exp_map_mode == 0 then
					-- ils_disable = 1
				-- end
			-- -- elseif simDR_efis_sub_mode == 4 then
				-- -- ils_disable = 1
			-- else
				if B738DR_track_up == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					if B738DR_track_up_active == 0 then
						mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
					else
						mag_hdg = ndx_mag_hdg - simDR_mag_variation
					end
				end
			-- end
		else
			ils_disable = 1
		end
		if tc_idx == 0 or B738DR_flight_phase > 1 then
			ils_disable = 1
		end
			
			
		if ils_disable == 0 then
			
			B738DR_tc_lat = math.deg(tc_lat)
			B738DR_tc_lon = math.deg(tc_lon)
			
			-- Calculate distance
			-- ils_x = (tc_lon - ils_lon) * math.cos((ils_lat + tc_lat)/2)
			-- ils_y = tc_lat - ils_lat
			-- ils_dis = math.sqrt(ils_x*ils_x + ils_y*ils_y) * 3440.064795	--nm
			
			ils_dis = nd_calc_dist2(math.deg(ils_lat), math.deg(ils_lon), math.deg(tc_lat), math.deg(tc_lon))
			
			ils_y = math.sin(tc_lon - ils_lon) * math.cos(tc_lat)
			ils_x = math.cos(ils_lat) * math.sin(tc_lat) - math.sin(ils_lat) * math.cos(tc_lat) * math.cos(tc_lon - ils_lon)
			ils_hdg = math.atan2(ils_y, ils_x)
			ils_hdg = math.deg(ils_hdg)
			ils_hdg = (ils_hdg + 360) % 360
			
			delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
			
			if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
				-- right
				ils_on_off = 1
				delta_ils_hdg = 90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
				-- left
				ils_on_off = 1
				delta_ils_hdg = 90 + delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg >= 90 then
				-- right back
				ils_on_off = 1
				delta_ils_hdg = delta_ils_hdg - 90
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg <= -90 then
				-- left back
				ils_on_off = 1
				delta_ils_hdg = -90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			end

			if B738DR_efis_map_range_capt == 0 then	-- 5 NM
				ils_zoom = 2
			elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
				ils_zoom = 1
			elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
				ils_zoom = 0.5
			elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
				ils_zoom = 0.25
			elseif B738DR_efis_map_range_capt == 4 then	-- 80 NM
				ils_zoom = 0.125
			elseif B738DR_efis_map_range_capt == 5 then	-- 160 NM
				ils_zoom = 0.0625
			elseif B738DR_efis_map_range_capt == 6 then	-- 320 NM
				ils_zoom = 0.03125
			else	-- 640 NM
				ils_zoom = 0.015625
				--ils_on_off = 0
			end
			
			if rte_plan_mode == 1 then
				ils_zoom = ils_zoom / 2
			end
			
			ils_x = ils_x * ils_zoom		-- zoom
			ils_y = ils_y * ils_zoom		-- zoom
			-- if simDR_efis_sub_mode == 4 then
				-- ils_y = ils_y + 4.1	-- adjust
			-- end
			
			if B738DR_capt_map_mode == 3 then
				ils_y = ils_y + 4.1	-- adjust center
			elseif B738DR_capt_map_mode == 0 and B738DR_capt_exp_map_mode == 0 then
				ils_y = ils_y + 4.1	-- adjust center
			else
				if B738DR_capt_map_mode == 3 then
					ils_y = ils_y + 4.1	-- adjust
				end
			end
			if ils_x < -8.0 or ils_x > 8.0 then
				ils_on_off = 0
			end
			if ils_y > 11.0 or ils_y < -2 then
				ils_on_off = 0
			end
				
			if ils_on_off == 1 then
				B738DR_tc_x = ils_x
				B738DR_tc_y = ils_y
				B738DR_tc_id = "T/C"
				B738DR_tc_show = 1
			else
				B738DR_tc_show = 0
				B738DR_tc_id = ""
			end
		else
			B738DR_tc_show = 0
			B738DR_tc_id = ""
		end
	
		-- FIRST OFFICER
		rte_plan_mode = 0
		ils_disable = 0
		ils_on_off = 0
		-- ils_lat = math.rad(simDR_latitude) 
		-- ils_lon = math.rad(simDR_longitude) 
		ils_lat = math.rad(ndx_lat)
		ils_lon = math.rad(ndx_lon)
		if B738DR_fo_map_mode == 3 then
			-- temporary
			ils_disable = 1
			rte_plan_mode = 1
			-- if legs_step == 0 then
				-- ils_lat = math.rad(legs_data[1][7])
				-- ils_lon = math.rad(legs_data[1][8])
			-- else
				-- ils_lat = math.rad(legs_data[legs_step][7])
				-- ils_lon = math.rad(legs_data[legs_step][8])
			-- end
			-- mag_hdg = -simDR_mag_variation
		elseif B738DR_fo_map_mode == 2 then
			-- if B738DR_fo_map_mode < 2 then
				-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				-- if B738DR_fo_map_mode == 1 and B738DR_fo_exp_map_mode == 0 then
					-- ils_disable = 1
				-- end
			-- else
				if B738DR_track_up == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					if B738DR_track_up_active == 0 then
						mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
					else
						mag_hdg = ndx_mag_hdg - simDR_mag_variation
					end
				end
				-- mag_hdg = simDR_mag_hdg - simDR_mag_variation
			-- end
		else
			ils_disable = 1
		end
		if tc_idx == 0 or B738DR_flight_phase > 1 then
			ils_disable = 1
		end
			
			
		if ils_disable == 0 then
			
			
			-- Calculate distance
			-- ils_x = (tc_lon - ils_lon) * math.cos((ils_lat + tc_lat)/2)
			-- ils_y = tc_lat - ils_lat
			-- ils_dis = math.sqrt(ils_x*ils_x + ils_y*ils_y) * 3440.064795	--nm
			
			ils_dis = nd_calc_dist2(math.deg(ils_lat), math.deg(ils_lon), math.deg(tc_lat), math.deg(tc_lon))
			
			ils_y = math.sin(tc_lon - ils_lon) * math.cos(tc_lat)
			ils_x = math.cos(ils_lat) * math.sin(tc_lat) - math.sin(ils_lat) * math.cos(tc_lat) * math.cos(tc_lon - ils_lon)
			ils_hdg = math.atan2(ils_y, ils_x)
			ils_hdg = math.deg(ils_hdg)
			ils_hdg = (ils_hdg + 360) % 360
			
			delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
			
			if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
				-- right
				ils_on_off = 1
				delta_ils_hdg = 90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
				-- left
				ils_on_off = 1
				delta_ils_hdg = 90 + delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg >= 90 then
				-- right back
				ils_on_off = 1
				delta_ils_hdg = delta_ils_hdg - 90
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg <= -90 then
				-- left back
				ils_on_off = 1
				delta_ils_hdg = -90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			end

			if B738DR_efis_map_range_fo == 0 then	-- 5 NM
				ils_zoom = 2
			elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
				ils_zoom = 1
			elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
				ils_zoom = 0.5
			elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
				ils_zoom = 0.25
			elseif B738DR_efis_map_range_fo == 4 then	-- 80 NM
				ils_zoom = 0.125
			elseif B738DR_efis_map_range_fo == 5 then	-- 160 NM
				ils_zoom = 0.0625
			elseif B738DR_efis_map_range_fo == 6 then	-- 320 NM
				ils_zoom = 0.03125
			else	-- 640 NM
				ils_zoom = 0.015625
				--ils_on_off = 0
			end
			
			if rte_plan_mode == 1 then
				ils_zoom = ils_zoom / 2
			end
			
			ils_x = ils_x * ils_zoom		-- zoom
			ils_y = ils_y * ils_zoom		-- zoom
			-- if simDR_efis_sub_mode == 4 then
				-- ils_y = ils_y + 4.1	-- adjust
			-- end
			
			if B738DR_fo_map_mode == 3 then
				ils_y = ils_y + 4.1	-- adjust center
			elseif B738DR_fo_map_mode == 0 and B738DR_capt_exp_map_mode == 0 then
				ils_y = ils_y + 4.1	-- adjust center
			else
				if B738DR_fo_map_mode == 3 then
					ils_y = ils_y + 4.1	-- adjust
				end
			end
			if ils_x < -8.0 or ils_x > 8.0 then
				ils_on_off = 0
			end
			if ils_y > 11.0 or ils_y < -2 then
				ils_on_off = 0
			end
				
			if ils_on_off == 1 then
				B738DR_tc_fo_x = ils_x
				B738DR_tc_fo_y = ils_y
				B738DR_tc_fo_id = "T/C"
				B738DR_tc_fo_show = 1
			else
				B738DR_tc_fo_show = 0
				B738DR_tc_fo_id = ""
			end
		else
			B738DR_tc_fo_show = 0
			B738DR_tc_fo_id = ""
		end
		
	else
		B738DR_tc_show = 0
		B738DR_tc_id = ""
		B738DR_tc_fo_show = 0
		B738DR_tc_fo_id = ""
	end

end

function B738_displ_decel()
	-- local ils_lat = math.rad(simDR_latitude) 
	-- local ils_lon = math.rad(simDR_longitude) 
	local ils_lat = math.rad(ndx_lat)
	local ils_lon = math.rad(ndx_lon)
	local mag_hdg = 0
	local delta_ils_hdg = 0
	local ils_hdg = 0
	local ils_on_off = 0
	local ils_x = 0
	local ils_y = 0
	local ils_dis = 0
	local ils_zoom = 0
	local ils_disable = 0
	local ils_corr = 0
	local rte_plan_mode = 0
	
	if legs_num > 0 then --and legs_step <= legs_num then
	
		if legs_step > legs_num2 then
			legs_step = legs_num2
		end
		
		-- CAPTAIN
		if B738DR_capt_map_mode == 3 then
			if legs_step == 0 then
				ils_lat = math.rad(legs_data2[1][7])
				ils_lon = math.rad(legs_data2[1][8])
			else
				ils_lat = math.rad(legs_data2[legs_step][7])
				ils_lon = math.rad(legs_data2[legs_step][8])
			end
			mag_hdg = -simDR_mag_variation
			rte_plan_mode = 1
		-- -- CAPTAIN
		-- if B738DR_capt_map_mode == 3 then
			-- if legs_step == 0 then
				-- ils_lat = math.rad(legs_data[1][7])
				-- ils_lon = math.rad(legs_data[1][8])
			-- else
				-- ils_lat = math.rad(legs_data[legs_step][7])
				-- ils_lon = math.rad(legs_data[legs_step][8])
			-- end
			-- mag_hdg = -simDR_mag_variation
		elseif B738DR_capt_map_mode == 2 then
			-- if B738DR_capt_map_mode < 2 then
				-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				-- if B738DR_capt_map_mode == 1 and B738DR_capt_exp_map_mode == 0 then
					-- ils_disable = 1
				-- end
			-- else
				if B738DR_track_up == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					if B738DR_track_up_active == 0 then
						mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
					else
						mag_hdg = ndx_mag_hdg - simDR_mag_variation
					end
				end
			-- end
		else
			ils_disable = 1
		end
		if decel_idx == 0 or was_decel == 1 then
			ils_disable = 1
		end
			
			
		if ils_disable == 0 then
			
			
			B738DR_decel_lat = math.deg(decel_lat)
			B738DR_decel_lon = math.deg(decel_lon)
			
			-- Calculate distance
			
			-- ils_x = (decel_lon - ils_lon) * math.cos((ils_lat + decel_lat)/2)
			-- ils_y = decel_lat - ils_lat
			-- ils_dis = math.sqrt(ils_x*ils_x + ils_y*ils_y) * 3440.064795	--nm
			
			ils_dis = nd_calc_dist2(math.deg(ils_lat), math.deg(ils_lon), math.deg(decel_lat), math.deg(decel_lon))
			
			ils_y = math.sin(decel_lon - ils_lon) * math.cos(decel_lat)
			ils_x = math.cos(ils_lat) * math.sin(decel_lat) - math.sin(ils_lat) * math.cos(decel_lat) * math.cos(decel_lon - ils_lon)
			ils_hdg = math.atan2(ils_y, ils_x)
			ils_hdg = math.deg(ils_hdg)
			ils_hdg = (ils_hdg + 360) % 360
			
			delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
			
			if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
				-- right
				ils_on_off = 1
				delta_ils_hdg = 90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
				-- left
				ils_on_off = 1
				delta_ils_hdg = 90 + delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg >= 90 then
				-- right back
				ils_on_off = 1
				delta_ils_hdg = delta_ils_hdg - 90
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg <= -90 then
				-- left back
				ils_on_off = 1
				delta_ils_hdg = -90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			end
			
			if B738DR_efis_map_range_capt == 0 then	-- 5 NM
				ils_zoom = 2
			elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
				ils_zoom = 1
			elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
				ils_zoom = 0.5
			elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
				ils_zoom = 0.25
			elseif B738DR_efis_map_range_capt == 4 then	-- 80 NM
				ils_zoom = 0.125
			elseif B738DR_efis_map_range_capt == 5 then	-- 160 NM
				ils_zoom = 0.0625
			elseif B738DR_efis_map_range_capt == 6 then	-- 320 NM
				ils_zoom = 0.03125
			else	-- 640 NM
				ils_zoom = 0.015625
				--ils_on_off = 0
			end
			
			if rte_plan_mode == 1 then
				ils_zoom = ils_zoom / 2
			end
			
			ils_x = ils_x * ils_zoom		-- zoom
			ils_y = ils_y * ils_zoom		-- zoom
			
			if B738DR_capt_map_mode == 3 then
				ils_y = ils_y + 4.1	-- adjust center
			elseif B738DR_capt_map_mode == 0 and B738DR_capt_exp_map_mode == 0 then
				ils_y = ils_y + 4.1	-- adjust center
			else
				if B738DR_capt_map_mode == 3 then
					ils_y = ils_y + 4.1	-- adjust
				end
			end
				
			if ils_x < -8.0 or ils_x > 8.0 then
				ils_on_off = 0
			end
			if ils_y > 11.0 or ils_y < -2 then			ils_on_off = 0
			end
			
			if ils_on_off == 1 then
				B738DR_decel_x = ils_x
				B738DR_decel_y = ils_y
				B738DR_decel_id = "DECEL"
				B738DR_decel_show = 1
			else
				B738DR_decel_show = 0
				B738DR_decel_id = ""
			end
		else
			B738DR_decel_show = 0
			B738DR_decel_id = ""
		end
		
		-- FIRST OFFICER
		rte_plan_mode = 0
		ils_disable = 0
		ils_on_off = 0
		-- ils_lat = math.rad(simDR_latitude) 
		-- ils_lon = math.rad(simDR_longitude) 
		ils_lat = math.rad(ndx_lat) 
		ils_lon = math.rad(ndx_lon) 
		if B738DR_fo_map_mode == 3 then
			-- temporary
			ils_disable = 1
			rte_plan_mode = 1
			-- if legs_step == 0 then
				-- ils_lat = math.rad(legs_data[1][7])
				-- ils_lon = math.rad(legs_data[1][8])
			-- else
				-- ils_lat = math.rad(legs_data[legs_step][7])
				-- ils_lon = math.rad(legs_data[legs_step][8])
			-- end
			-- mag_hdg = -simDR_mag_variation
		elseif B738DR_fo_map_mode == 2 then
			-- if B738DR_fo_map_mode < 2 then
				-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				-- if B738DR_fo_map_mode == 1 and B738DR_fo_exp_map_mode == 0 then
					-- ils_disable = 1
				-- end
			-- else
				if B738DR_track_up == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					if B738DR_track_up_active == 0 then
						mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
					else
						mag_hdg = ndx_mag_hdg - simDR_mag_variation
					end
				end
				-- mag_hdg = simDR_mag_hdg - simDR_mag_variation
			-- end
		else
			ils_disable = 1
		end
		if decel_idx == 0 or was_decel == 1 then
			ils_disable = 1
		end
			
			
		if ils_disable == 0 then
			
			
			-- Calculate distance
			
			-- ils_x = (decel_lon - ils_lon) * math.cos((ils_lat + decel_lat)/2)
			-- ils_y = decel_lat - ils_lat
			-- ils_dis = math.sqrt(ils_x*ils_x + ils_y*ils_y) * 3440.064795	--nm
			
			ils_dis = nd_calc_dist2(math.deg(ils_lat), math.deg(ils_lon), math.deg(decel_lat), math.deg(decel_lon))
			
			ils_y = math.sin(decel_lon - ils_lon) * math.cos(decel_lat)
			ils_x = math.cos(ils_lat) * math.sin(decel_lat) - math.sin(ils_lat) * math.cos(decel_lat) * math.cos(decel_lon - ils_lon)
			ils_hdg = math.atan2(ils_y, ils_x)
			ils_hdg = math.deg(ils_hdg)
			ils_hdg = (ils_hdg + 360) % 360
			
			delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
			
			if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
				-- right
				ils_on_off = 1
				delta_ils_hdg = 90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
				-- left
				ils_on_off = 1
				delta_ils_hdg = 90 + delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg >= 90 then
				-- right back
				ils_on_off = 1
				delta_ils_hdg = delta_ils_hdg - 90
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg <= -90 then
				-- left back
				ils_on_off = 1
				delta_ils_hdg = -90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			end
			
			if B738DR_efis_map_range_fo == 0 then	-- 5 NM
				ils_zoom = 2
			elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
				ils_zoom = 1
			elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
				ils_zoom = 0.5
			elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
				ils_zoom = 0.25
			elseif B738DR_efis_map_range_fo == 4 then	-- 80 NM
				ils_zoom = 0.125
			elseif B738DR_efis_map_range_fo == 5 then	-- 160 NM
				ils_zoom = 0.0625
			elseif B738DR_efis_map_range_fo == 6 then	-- 320 NM
				ils_zoom = 0.03125
			else	-- 640 NM
				ils_zoom = 0.015625
				--ils_on_off = 0
			end
			
			if rte_plan_mode == 1 then
				ils_zoom = ils_zoom / 2
			end
			
			ils_x = ils_x * ils_zoom		-- zoom
			ils_y = ils_y * ils_zoom		-- zoom
			
			if B738DR_fo_map_mode == 3 then
				ils_y = ils_y + 4.1	-- adjust center
			elseif B738DR_fo_map_mode == 0 and B738DR_fo_exp_map_mode == 0 then
				ils_y = ils_y + 4.1	-- adjust center
			else
				if B738DR_fo_map_mode == 3 then
					ils_y = ils_y + 4.1	-- adjust
				end
			end
				
			if ils_x < -8.0 or ils_x > 8.0 then
				ils_on_off = 0
			end
			if ils_y > 11.0 or ils_y < -2 then			ils_on_off = 0
			end
			
			if ils_on_off == 1 then
				B738DR_decel_fo_x = ils_x
				B738DR_decel_fo_y = ils_y
				B738DR_decel_fo_id = "DECEL"
				B738DR_decel_fo_show = 1
			else
				B738DR_decel_fo_show = 0
				B738DR_decel_fo_id = ""
			end
		else
			B738DR_decel_fo_show = 0
			B738DR_decel_fo_id = ""
		end
		
	else
		B738DR_decel_show = 0
		B738DR_decel_id = ""
		B738DR_decel_fo_show = 0
		B738DR_decel_fo_id = ""
	end

end

function B738_displ_td()
	-- local ils_lat = math.rad(simDR_latitude) 
	-- local ils_lon = math.rad(simDR_longitude) 
	local ils_lat = math.rad(ndx_lat)
	local ils_lon = math.rad(ndx_lon)
	local mag_hdg = 0
	local delta_ils_hdg = 0
	local ils_hdg = 0
	local ils_on_off = 0
	local ils_x = 0
	local ils_y = 0
	local ils_dis = 0
	local ils_zoom = 0
	local ils_disable = 0
	local ils_corr = 0
	local rte_plan_mode = 0
	
	if legs_num > 0 then --and legs_step <= legs_num then
	
		if legs_step > legs_num2 then
			legs_step = legs_num2
		end
		
		-- CAPTAIN
		if B738DR_capt_map_mode == 3 then
			if legs_step == 0 then
				ils_lat = math.rad(legs_data2[1][7])
				ils_lon = math.rad(legs_data2[1][8])
			else
				ils_lat = math.rad(legs_data2[legs_step][7])
				ils_lon = math.rad(legs_data2[legs_step][8])
			end
			mag_hdg = -simDR_mag_variation
			rte_plan_mode = 1
			
		-- -- CAPTAIN
		-- if B738DR_capt_map_mode == 3 then
			-- if legs_step == 0 then
				-- ils_lat = math.rad(legs_data[1][7])
				-- ils_lon = math.rad(legs_data[1][8])
			-- else
				-- ils_lat = math.rad(legs_data[legs_step][7])
				-- ils_lon = math.rad(legs_data[legs_step][8])
			-- end
			-- mag_hdg = -simDR_mag_variation
		elseif B738DR_capt_map_mode == 2 then
			-- if B738DR_capt_map_mode < 2 then
				-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				-- if B738DR_capt_map_mode == 1 and B738DR_capt_exp_map_mode == 0 then
					-- ils_disable = 1
				-- end
			-- else
				if B738DR_track_up == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					if B738DR_track_up_active == 0 then
						mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
					else
						mag_hdg = ndx_mag_hdg - simDR_mag_variation
					end
				end
			-- end
		else
			ils_disable = 1
		end
		
		if td_idx == 0 or B738DR_flight_phase > 4 or B738DR_vnav_td_dist < 0.5 then
			ils_disable = 1
		end
			
			
		if ils_disable == 0 then
			
			
			B738DR_td_lat = math.deg(td_lat)
			B738DR_td_lon = math.deg(td_lon)
			
			-- Calculate distance
			
			-- ils_x = (td_lon - ils_lon) * math.cos((ils_lat + td_lat)/2)
			-- ils_y = td_lat - ils_lat
			-- ils_dis = math.sqrt(ils_x*ils_x + ils_y*ils_y) * 3440.064795	--nm
			
			ils_dis = nd_calc_dist2(math.deg(ils_lat), math.deg(ils_lon), math.deg(td_lat), math.deg(td_lon))
			
			ils_y = math.sin(td_lon - ils_lon) * math.cos(td_lat)
			ils_x = math.cos(ils_lat) * math.sin(td_lat) - math.sin(ils_lat) * math.cos(td_lat) * math.cos(td_lon - ils_lon)
			ils_hdg = math.atan2(ils_y, ils_x)
			ils_hdg = math.deg(ils_hdg)
			ils_hdg = (ils_hdg + 360) % 360
			
			delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
			
			if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
				-- right
				ils_on_off = 1
				delta_ils_hdg = 90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
				-- left
				ils_on_off = 1
				delta_ils_hdg = 90 + delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg >= 90 then
				-- right back
				ils_on_off = 1
				delta_ils_hdg = delta_ils_hdg - 90
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg <= -90 then
				-- left back
				ils_on_off = 1
				delta_ils_hdg = -90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			end
			
			if B738DR_efis_map_range_capt == 0 then	-- 5 NM
				ils_zoom = 2
			elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
				ils_zoom = 1
			elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
				ils_zoom = 0.5
			elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
				ils_zoom = 0.25
			elseif B738DR_efis_map_range_capt == 4 then	-- 80 NM
				ils_zoom = 0.125
			elseif B738DR_efis_map_range_capt == 5 then	-- 160 NM
				ils_zoom = 0.0625
			elseif B738DR_efis_map_range_capt == 6 then	-- 320 NM
				ils_zoom = 0.03125
			else	-- 640 NM
				ils_zoom = 0.015625
				--ils_on_off = 0
			end
			
			if rte_plan_mode == 1 then
				ils_zoom = ils_zoom / 2
			end
			
			ils_x = ils_x * ils_zoom		-- zoom
			ils_y = ils_y * ils_zoom		-- zoom
			-- if simDR_efis_sub_mode == 4 then
				-- ils_y = ils_y + 4.1	-- adjust
			-- end
			
			if B738DR_capt_map_mode == 3 then
				ils_y = ils_y + 4.1	-- adjust center
			elseif B738DR_capt_map_mode == 0 and B738DR_capt_exp_map_mode == 0 then
				ils_y = ils_y + 4.1	-- adjust center
			else
				if B738DR_capt_map_mode == 3 then
					ils_y = ils_y + 4.1	-- adjust
				end
			end
				
			if ils_x < -8.0 or ils_x > 8.0 then
				ils_on_off = 0
			end
			if ils_y > 11.0 or ils_y < -2 then
				ils_on_off = 0
			end
			
			if ils_on_off == 1 then
				B738DR_td_x = ils_x
				B738DR_td_y = ils_y
				B738DR_td_id = "T/D"
				B738DR_td_show = 1
			else
				B738DR_td_show = 0
				B738DR_td_id = ""
			end
		else
			B738DR_td_show = 0
			B738DR_td_id = ""
		end
	
		-- FIRST OFFICER
		rte_plan_mode = 0
		ils_disable = 0
		ils_on_off = 0
		-- ils_lat = math.rad(simDR_latitude) 
		-- ils_lon = math.rad(simDR_longitude) 
		ils_lat = math.rad(ndx_lat) 
		ils_lon = math.rad(ndx_lon) 
		if B738DR_fo_map_mode == 3 then
			-- temporary
			ils_disable = 1
			rte_plan_mode = 1
			-- if legs_step == 0 then
				-- ils_lat = math.rad(legs_data[1][7])
				-- ils_lon = math.rad(legs_data[1][8])
			-- else
				-- ils_lat = math.rad(legs_data[legs_step][7])
				-- ils_lon = math.rad(legs_data[legs_step][8])
			-- end
			-- mag_hdg = -simDR_mag_variation
		elseif B738DR_fo_map_mode == 2 then
			-- if B738DR_fo_map_mode < 2 then
				-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				-- if B738DR_fo_map_mode == 1 and B738DR_fo_exp_map_mode == 0 then
					-- ils_disable = 1
				-- end
			-- else
				if B738DR_track_up == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					if B738DR_track_up_active == 0 then
						mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
					else
						mag_hdg = ndx_mag_hdg - simDR_mag_variation
					end
				end
				-- mag_hdg = simDR_mag_hdg - simDR_mag_variation
			-- end
		else
			ils_disable = 1
		end
		
		if td_idx == 0 or B738DR_flight_phase > 4 or B738DR_vnav_td_dist < 0.5 then
			ils_disable = 1
		end
			
			
		if ils_disable == 0 then
			
			
			-- Calculate distance
			
			-- ils_x = (td_lon - ils_lon) * math.cos((ils_lat + td_lat)/2)
			-- ils_y = td_lat - ils_lat
			-- ils_dis = math.sqrt(ils_x*ils_x + ils_y*ils_y) * 3440.064795	--nm
			
			ils_dis = nd_calc_dist2(math.deg(ils_lat), math.deg(ils_lon), math.deg(td_lat), math.deg(td_lon))
			
			ils_y = math.sin(td_lon - ils_lon) * math.cos(td_lat)
			ils_x = math.cos(ils_lat) * math.sin(td_lat) - math.sin(ils_lat) * math.cos(td_lat) * math.cos(td_lon - ils_lon)
			ils_hdg = math.atan2(ils_y, ils_x)
			ils_hdg = math.deg(ils_hdg)
			ils_hdg = (ils_hdg + 360) % 360
			
			delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
			
			if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
				-- right
				ils_on_off = 1
				delta_ils_hdg = 90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
				-- left
				ils_on_off = 1
				delta_ils_hdg = 90 + delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg >= 90 then
				-- right back
				ils_on_off = 1
				delta_ils_hdg = delta_ils_hdg - 90
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg <= -90 then
				-- left back
				ils_on_off = 1
				delta_ils_hdg = -90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			end
			
			if B738DR_efis_map_range_fo == 0 then	-- 5 NM
				ils_zoom = 2
			elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
				ils_zoom = 1
			elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
				ils_zoom = 0.5
			elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
				ils_zoom = 0.25
			elseif B738DR_efis_map_range_fo == 4 then	-- 80 NM
				ils_zoom = 0.125
			elseif B738DR_efis_map_range_fo == 5 then	-- 160 NM
				ils_zoom = 0.0625
			elseif B738DR_efis_map_range_fo == 6 then	-- 320 NM
				ils_zoom = 0.03125
			else	-- 640 NM
				ils_zoom = 0.015625
				--ils_on_off = 0
			end
			
			if rte_plan_mode == 1 then
				ils_zoom = ils_zoom / 2
			end
			
			ils_x = ils_x * ils_zoom		-- zoom
			ils_y = ils_y * ils_zoom		-- zoom
			-- if simDR_efis_sub_mode == 4 then
				-- ils_y = ils_y + 4.1	-- adjust
			-- end
			
			if B738DR_fo_map_mode == 3 then
				ils_y = ils_y + 4.1	-- adjust center
			elseif B738DR_fo_map_mode == 0 and B738DR_fo_exp_map_mode == 0 then
				ils_y = ils_y + 4.1	-- adjust center
			else
				if B738DR_fo_map_mode == 3 then
					ils_y = ils_y + 4.1	-- adjust
				end
			end
				
			if ils_x < -8.0 or ils_x > 8.0 then
				ils_on_off = 0
			end
			if ils_y > 11.0 or ils_y < -2 then
				ils_on_off = 0
			end
			
			if ils_on_off == 1 then
				B738DR_td_fo_x = ils_x
				B738DR_td_fo_y = ils_y
				B738DR_td_fo_id = "T/D"
				B738DR_td_fo_show = 1
			else
				B738DR_td_fo_show = 0
				B738DR_td_fo_id = ""
			end
		else
			B738DR_td_fo_show = 0
			B738DR_td_fo_id = ""
		end
		
	else
		B738DR_td_show = 0
		B738DR_td_id = ""
		B738DR_td_fo_show = 0
		B738DR_td_fo_id = ""
	end

end




function B738_displ_rnw()

	local ils_lat2 = 0
	local ils_lon2 = 0
	-- local ils_lat = math.rad(simDR_latitude) 
	-- local ils_lon = math.rad(simDR_longitude) 
	local ils_lat = math.rad(ndx_lat)
	local ils_lon = math.rad(ndx_lon)
	local mag_hdg = 0
	local delta_ils_hdg = 0
	local ils_hdg = 0
	local ils_on_off = 0
	local ils_x = 0
	local ils_y = 0
	local ils_dis = 0
	local ils_zoom = 0
	local ils_disable = 0
	local rte_plan_mode = 0
	
	if legs_num > 0 then --and legs_step <= legs_num then
	
		if legs_step > legs_num2 then
			legs_step = legs_num2
		end
		
		-- CAPTAIN
		-- DES RUNWAY
		-- if B738DR_capt_map_mode < 2 then
			-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
			-- -- if simDR_efis_map_mode == 0 then
			-- if B738DR_capt_map_mode == 1 and B738DR_capt_exp_map_mode == 0 then
				-- ils_disable = 1
			-- end
		-- -- elseif simDR_efis_sub_mode == 4 then
			-- -- ils_disable = 1
		if B738DR_capt_map_mode == 3 then
			if legs_step == 0 then
				ils_lat = math.rad(legs_data2[1][7])
				ils_lon = math.rad(legs_data2[1][8])
			else
				ils_lat = math.rad(legs_data2[legs_step][7])
				ils_lon = math.rad(legs_data2[legs_step][8])
			end
			mag_hdg = -simDR_mag_variation
			rte_plan_mode = 1
			-- if legs_step == 0 then
				-- ils_lat = math.rad(legs_data[1][7])
				-- ils_lon = math.rad(legs_data[1][8])
			-- else
				-- ils_lat = math.rad(legs_data[legs_step][7])
				-- ils_lon = math.rad(legs_data[legs_step][8])
			-- end
			-- mag_hdg = -simDR_mag_variation
		elseif B738DR_capt_map_mode == 2 then
			if B738DR_track_up == 0 then
				mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
			else
				if B738DR_track_up_active == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					mag_hdg = ndx_mag_hdg - simDR_mag_variation
				end
			end
		else
			ils_disable = 1
		end
		
		if des_app == "------" and des_app2 == "------" then
			ils_disable = 1
		elseif des_app2 == "------" and legs_num == 1 then
			ils_disable = 1
		end
		-- if des_app == "------" then
			-- ils_disable = 1
		-- end
			
		if ils_disable == 0 then
			
			ils_lat2 = math.rad(des_runway_lat)
			ils_lon2 = math.rad(des_runway_lon)
			
			-- ils_x = (ils_lon2 - ils_lon) * math.cos((ils_lat + ils_lat2)/2)
			-- ils_y = ils_lat2 - ils_lat
			-- ils_dis = math.sqrt(ils_x*ils_x + ils_y*ils_y) * 3440.064795	--nm
			
			ils_dis = nd_calc_dist2(math.deg(ils_lat), math.deg(ils_lon), des_runway_lat, des_runway_lon)
			
			ils_y = math.sin(ils_lon2 - ils_lon) * math.cos(ils_lat2)
			ils_x = math.cos(ils_lat) * math.sin(ils_lat2) - math.sin(ils_lat) * math.cos(ils_lat2) * math.cos(ils_lon2 - ils_lon)
			ils_hdg = math.atan2(ils_y, ils_x)
			ils_hdg = math.deg(ils_hdg)
			ils_hdg = (ils_hdg + 360) % 360
			
			delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
			
			if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
				-- right
				ils_on_off = 1
				delta_ils_hdg = 90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
				-- left
				ils_on_off = 1
				delta_ils_hdg = 90 + delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg >= 90 then
				-- right back
				ils_on_off = 1
				delta_ils_hdg = delta_ils_hdg - 90
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg <= -90 then
				-- left back
				ils_on_off = 1
				delta_ils_hdg = -90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			end
			
			if B738DR_efis_map_range_capt == 0 then	-- 5 NM
				ils_zoom = 2
			elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
				ils_zoom = 1
			elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
				ils_zoom = 0.5
			elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
				ils_zoom = 0.25
			else
				ils_on_off = 0
			end
			
			if rte_plan_mode == 1 then
				ils_zoom = ils_zoom / 2
			end
			
			ils_x = ils_x * ils_zoom		-- zoom
			ils_y = ils_y * ils_zoom		-- zoom
			if B738DR_capt_map_mode == 3 then
				ils_y = ils_y + 4.1	-- adjust
			elseif B738DR_capt_map_mode == 0 and B738DR_capt_exp_map_mode == 0 then
				ils_y = ils_y + 4.1	-- adjust center
			end
			
			if ils_y > 14 or ils_y < -5 then		-- 7.7 / -1
				ils_on_off = 0
			end
			if ils_x < -10.0 or ils_x > 10.0 then		-- -6.0 / 6.0
				ils_on_off = 0
			end
				
			if ils_on_off == 1 then
				-- rotate
				if B738DR_capt_map_mode == 3 then
					ils_hdg = des_runway_crs
				else
					if B738DR_track_up == 0 then
						ils_hdg = (des_runway_crs - simDR_ahars_mag_hdg) % 360
					else
						if B738DR_track_up_active == 0 then
							ils_hdg = (des_runway_crs - simDR_ahars_mag_hdg) % 360
						else
							ils_hdg = (des_runway_crs - simDR_mag_hdg) % 360
						end
					end
				end
				ils_hdg = (90 + ils_hdg) % 360
				ils_hdg = ils_hdg + simDR_mag_variation
				B738DR_ils_rotate = ils_hdg
				
				B738DR_ils_x = ils_x
				B738DR_ils_y = ils_y
				B738DR_ils_runway = des_rnw
				B738DR_ils_show = 1
			else
				B738DR_ils_show = 0
			end
		else
			B738DR_ils_show = 0
		end
		
		
		
		-- REF RUNWAY
		
		ils_disable = 0
		ils_on_off = 0
		-- if B738DR_capt_map_mode < 2 then
			-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
			-- -- if simDR_efis_map_mode == 0 then
			-- if B738DR_capt_map_mode == 1 and B738DR_capt_exp_map_mode == 0 then
				-- ils_disable = 1
			-- end
		-- -- elseif simDR_efis_sub_mode == 4 then
			-- -- ils_disable = 1
		if B738DR_capt_map_mode == 3 then
			if legs_step == 0 then
				ils_lat = math.rad(legs_data2[1][7])
				ils_lon = math.rad(legs_data2[1][8])
			else
				ils_lat = math.rad(legs_data2[legs_step][7])
				ils_lon = math.rad(legs_data2[legs_step][8])
			end
			mag_hdg = -simDR_mag_variation
		elseif B738DR_capt_map_mode == 2 then
			if B738DR_track_up == 0 then
				mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
			else
				if B738DR_track_up_active == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					mag_hdg = ndx_mag_hdg - simDR_mag_variation
				end
			end
		else
			ils_disable = 1
		end
		
		if ref_rwy == "-----" and ref_rwy2 == "-----" then
			ils_disable = 1
		elseif ref_rwy2 == "-----" and legs_num == 1 then
			ils_disable = 1
		end
			
		if ils_disable == 0 and ref_runway_lenght > 0 then
			
			ils_lat2 = math.rad(ref_runway_lat)
			ils_lon2 = math.rad(ref_runway_lon)
			
			ils_x = (ils_lon2 - ils_lon) * math.cos((ils_lat + ils_lat2)/2)
			ils_y = ils_lat2 - ils_lat
			ils_dis = math.sqrt(ils_x*ils_x + ils_y*ils_y) * 3440.064795	--nm
			
			ils_y = math.sin(ils_lon2 - ils_lon) * math.cos(ils_lat2)
			ils_x = math.cos(ils_lat) * math.sin(ils_lat2) - math.sin(ils_lat) * math.cos(ils_lat2) * math.cos(ils_lon2 - ils_lon)
			ils_hdg = math.atan2(ils_y, ils_x)
			ils_hdg = math.deg(ils_hdg)
			ils_hdg = (ils_hdg + 360) % 360
			
			delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
			
			if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
				-- right
				ils_on_off = 1
				delta_ils_hdg = 90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
				-- left
				ils_on_off = 1
				delta_ils_hdg = 90 + delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg >= 90 then
				-- right back
				ils_on_off = 1
				delta_ils_hdg = delta_ils_hdg - 90
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg <= -90 then
				-- left back
				ils_on_off = 1
				delta_ils_hdg = -90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			end
			
			if B738DR_efis_map_range_capt == 0 then	-- 5 NM
				ils_zoom = 2
			elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
				ils_zoom = 1
			elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
				ils_zoom = 0.5
			elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
				ils_zoom = 0.25
			else
				ils_on_off = 0
			end
			
			if rte_plan_mode == 1 then
				ils_zoom = ils_zoom / 2
			end
			
			ils_x = ils_x * ils_zoom		-- zoom
			ils_y = ils_y * ils_zoom		-- zoom
			if B738DR_capt_map_mode == 3 then
				ils_y = ils_y + 4.1	-- adjust
			elseif B738DR_capt_map_mode == 0 and B738DR_capt_exp_map_mode == 0 then
				ils_y = ils_y + 4.1	-- adjust center
			end
			
			if ils_y > 14 or ils_y < -5 then		-- 7.7 / -1
				ils_on_off = 0
			end
			if ils_x < -10.0 or ils_x > 10.0 then		-- -6.0 / 6.0
				ils_on_off = 0
			end
			
			if ils_on_off == 1 then
				-- rotate
				if B738DR_capt_map_mode == 3 then
					ils_hdg = ref_runway_crs
				else
					if B738DR_track_up == 0 then
						ils_hdg = (ref_runway_crs - simDR_ahars_mag_hdg) % 360
					else
						if B738DR_track_up_active == 0 then
							ils_hdg = (ref_runway_crs - simDR_ahars_mag_hdg) % 360
						else
							ils_hdg = (ref_runway_crs - simDR_mag_hdg) % 360
						end
					end
				end
				ils_hdg = (90 + ils_hdg) % 360
				ils_hdg = ils_hdg + simDR_mag_variation
				B738DR_ils_rotate0 = ils_hdg
				
				B738DR_ils_x0 = ils_x
				B738DR_ils_y0 = ils_y
				B738DR_ils_runway0 = ref_rwy
				B738DR_ils_show0 = 1
			else
				B738DR_ils_show0 = 0
			end
		else
			B738DR_ils_show0 = 0
		end
		
		-- FIRST OFFICER
		-- DES RUNWAY
		rte_plan_mode = 0
		ils_disable = 0
		ils_on_off = 0
		-- ils_lat = math.rad(simDR_latitude) 
		-- ils_lon = math.rad(simDR_longitude) 
		ils_lat = math.rad(ndx_lat) 
		ils_lon = math.rad(ndx_lon) 
		-- if B738DR_fo_map_mode < 2 then
			-- mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
			-- -- if simDR_efis_map_mode == 0 then
			-- if B738DR_fo_map_mode == 1 and B738DR_fo_exp_map_mode == 0 then
				-- ils_disable = 1
			-- end
		if B738DR_fo_map_mode == 3 then
			if legs_step2 == 0 then
				ils_lat = math.rad(legs_data2[1][7])
				ils_lon = math.rad(legs_data2[1][8])
			else
				ils_lat = math.rad(legs_data2[legs_step2][7])
				ils_lon = math.rad(legs_data2[legs_step2][8])
			end
			mag_hdg = -simDR_mag_variation
			-- temporary
			--ils_disable = 1
			rte_plan_mode = 1
			-- if legs_step == 0 then
				-- ils_lat = math.rad(legs_data[1][7])
				-- ils_lon = math.rad(legs_data[1][8])
			-- else
				-- ils_lat = math.rad(legs_data[legs_step][7])
				-- ils_lon = math.rad(legs_data[legs_step][8])
			-- end
			-- mag_hdg = -simDR_mag_variation
		elseif B738DR_fo_map_mode == 2 then
			if B738DR_track_up == 0 then
				mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
			else
				if B738DR_track_up_active == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					mag_hdg = ndx_mag_hdg - simDR_mag_variation
				end
			end
			-- mag_hdg = simDR_mag_hdg - simDR_mag_variation
		else
			ils_disable = 1
		end
		-- if des_app == "------" then
			-- ils_disable = 1
		-- end
		if des_app == "------" and des_app2 == "------" then
			ils_disable = 1
		elseif des_app2 == "------" and legs_num == 1 then
			ils_disable = 1
		end
			
			
		if ils_disable == 0 then
			
			ils_lat2 = math.rad(des_runway_lat)
			ils_lon2 = math.rad(des_runway_lon)
			
			-- ils_x = (ils_lon2 - ils_lon) * math.cos((ils_lat + ils_lat2)/2)
			-- ils_y = ils_lat2 - ils_lat
			-- ils_dis = math.sqrt(ils_x*ils_x + ils_y*ils_y) * 3440.064795	--nm
			
			ils_dis = nd_calc_dist2(math.deg(ils_lat), math.deg(ils_lon), des_runway_lat, des_runway_lon)
			
			ils_y = math.sin(ils_lon2 - ils_lon) * math.cos(ils_lat2)
			ils_x = math.cos(ils_lat) * math.sin(ils_lat2) - math.sin(ils_lat) * math.cos(ils_lat2) * math.cos(ils_lon2 - ils_lon)
			ils_hdg = math.atan2(ils_y, ils_x)
			ils_hdg = math.deg(ils_hdg)
			ils_hdg = (ils_hdg + 360) % 360
			
			delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
			
			if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
				-- right
				ils_on_off = 1
				delta_ils_hdg = 90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
				-- left
				ils_on_off = 1
				delta_ils_hdg = 90 + delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg >= 90 then
				-- right back
				ils_on_off = 1
				delta_ils_hdg = delta_ils_hdg - 90
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg <= -90 then
				-- left back
				ils_on_off = 1
				delta_ils_hdg = -90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			end
			
			if B738DR_efis_map_range_fo == 0 then	-- 5 NM
				ils_zoom = 2
			elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
				ils_zoom = 1
			elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
				ils_zoom = 0.5
			elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
				ils_zoom = 0.25
			else
				ils_on_off = 0
			end
			
			if rte_plan_mode == 1 then
				ils_zoom = ils_zoom / 2
			end
			
			ils_x = ils_x * ils_zoom		-- zoom
			ils_y = ils_y * ils_zoom		-- zoom
			if B738DR_fo_map_mode == 3 then
				ils_y = ils_y + 4.1	-- adjust
			elseif B738DR_fo_map_mode == 0 and B738DR_fo_exp_map_mode == 0 then
				ils_y = ils_y + 4.1	-- adjust center
			end
			
			if ils_y > 14 or ils_y < -5 then		-- 7.7 / -1
				ils_on_off = 0
			end
			if ils_x < -10.0 or ils_x > 10.0 then		-- -6.0 / 6.0
				ils_on_off = 0
			end
				
			if ils_on_off == 1 then
				-- rotate
				if B738DR_fo_map_mode == 3 then
					ils_hdg = des_runway_crs
				else
					if B738DR_track_up == 0 then
						ils_hdg = (des_runway_crs - simDR_ahars_mag_hdg) % 360
					else
						if B738DR_track_up_active == 0 then
							ils_hdg = (des_runway_crs - simDR_ahars_mag_hdg) % 360
						else
							ils_hdg = (des_runway_crs - simDR_mag_hdg) % 360
						end
					end
				end
				ils_hdg = (90 + ils_hdg) % 360
				ils_hdg = ils_hdg + simDR_mag_variation
				B738DR_ils_fo_rotate = ils_hdg
				
				B738DR_ils_fo_x = ils_x
				B738DR_ils_fo_y = ils_y
				B738DR_ils_runway = des_rnw
				B738DR_ils_fo_show = 1
			else
				B738DR_ils_fo_show = 0
			end
		else
			B738DR_ils_fo_show = 0
		end
		
		
		
		-- REF RUNWAY
		
		ils_disable = 0
		ils_on_off = 0
		-- if B738DR_fo_map_mode < 2 then
			-- mag_hdg = simDR_ahars_mag_hdg - simDR_mag_variation
			-- -- if simDR_efis_map_mode == 0 then
			-- if B738DR_fo_map_mode == 1 and B738DR_fo_exp_map_mode == 0 then
				-- ils_disable = 1
			-- end
		-- -- elseif simDR_efis_sub_mode == 4 then
			-- -- ils_disable = 1
		if B738DR_fo_map_mode == 3 then
			if legs_step2 == 0 then
				ils_lat = math.rad(legs_data2[1][7])
				ils_lon = math.rad(legs_data2[1][8])
			else
				ils_lat = math.rad(legs_data2[legs_step2][7])
				ils_lon = math.rad(legs_data2[legs_step2][8])
			end
			mag_hdg = -simDR_mag_variation
		elseif B738DR_fo_map_mode == 2 then
			if B738DR_track_up == 0 then
				mag_hdg = simDR_ahars_mag_hdg - simDR_mag_variation
			else
				if B738DR_track_up_active == 0 then
					mag_hdg = simDR_ahars_mag_hdg - simDR_mag_variation
				else
					mag_hdg = simDR_mag_hdg - simDR_mag_variation
				end
			end
			-- mag_hdg = simDR_mag_hdg - simDR_mag_variation
		else
			ils_disable = 1
		end
		
		-- if ref_rwy == "-----" then
			-- ils_disable = 1
		-- end
		if ref_rwy == "-----" and ref_rwy2 == "-----" then
			ils_disable = 1
		elseif ref_rwy2 == "-----" and legs_num == 1 then
			ils_disable = 1
		end
			
		if ils_disable == 0 and ref_runway_lenght > 0 then
			
			ils_lat2 = math.rad(ref_runway_lat)
			ils_lon2 = math.rad(ref_runway_lon)
			
			ils_x = (ils_lon2 - ils_lon) * math.cos((ils_lat + ils_lat2)/2)
			ils_y = ils_lat2 - ils_lat
			ils_dis = math.sqrt(ils_x*ils_x + ils_y*ils_y) * 3440.064795	--nm
			
			ils_y = math.sin(ils_lon2 - ils_lon) * math.cos(ils_lat2)
			ils_x = math.cos(ils_lat) * math.sin(ils_lat2) - math.sin(ils_lat) * math.cos(ils_lat2) * math.cos(ils_lon2 - ils_lon)
			ils_hdg = math.atan2(ils_y, ils_x)
			ils_hdg = math.deg(ils_hdg)
			ils_hdg = (ils_hdg + 360) % 360
			
			delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
			
			if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
				-- right
				ils_on_off = 1
				delta_ils_hdg = 90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
				-- left
				ils_on_off = 1
				delta_ils_hdg = 90 + delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg >= 90 then
				-- right back
				ils_on_off = 1
				delta_ils_hdg = delta_ils_hdg - 90
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = ils_dis * math.cos(delta_ils_hdg)
			elseif delta_ils_hdg <= -90 then
				-- left back
				ils_on_off = 1
				delta_ils_hdg = -90 - delta_ils_hdg
				delta_ils_hdg = math.rad(delta_ils_hdg)
				ils_y = -ils_dis * math.sin(delta_ils_hdg)
				ils_x = -ils_dis * math.cos(delta_ils_hdg)
			end
			
			if B738DR_efis_map_range_fo == 0 then	-- 5 NM
				ils_zoom = 2
			elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
				ils_zoom = 1
			elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
				ils_zoom = 0.5
			elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
				ils_zoom = 0.25
			else
				ils_on_off = 0
			end
			
			if rte_plan_mode == 1 then
				ils_zoom = ils_zoom / 2
			end
			
			ils_x = ils_x * ils_zoom		-- zoom
			ils_y = ils_y * ils_zoom		-- zoom
			if B738DR_fo_map_mode == 3 then
				ils_y = ils_y + 4.1	-- adjust
			elseif B738DR_fo_map_mode == 0 and B738DR_fo_exp_map_mode == 0 then
				ils_y = ils_y + 4.1	-- adjust center
			end
			
			if ils_y > 14 or ils_y < -5 then		-- 7.7 / -1
				ils_on_off = 0
			end
			if ils_x < -10.0 or ils_x > 10.0 then		-- -6.0 / 6.0
				ils_on_off = 0
			end
			
			if ils_on_off == 1 then
				-- rotate
				if B738DR_fo_map_mode == 3 then
					ils_hdg = ref_runway_crs
				else
					if B738DR_track_up == 0 then
						ils_hdg = (ref_runway_crs - simDR_ahars_mag_hdg) % 360
					else
						if B738DR_track_up_active == 0 then
							ils_hdg = (ref_runway_crs - simDR_ahars_mag_hdg) % 360
						else
							ils_hdg = (ref_runway_crs - simDR_mag_hdg) % 360
						end
					end
				end
				ils_hdg = (90 + ils_hdg) % 360
				ils_hdg = ils_hdg + simDR_mag_variation
				B738DR_ils_fo_rotate0 = ils_hdg
				
				B738DR_ils_fo_x0 = ils_x
				B738DR_ils_fo_y0 = ils_y
				B738DR_ils_runway0 = ref_rwy
				B738DR_ils_fo_show0 = 1
			else
				B738DR_ils_fo_show0 = 0
			end
		else
			B738DR_ils_fo_show0 = 0
		end
		
	else
		B738DR_ils_show = 0
		B738DR_ils_show0 = 0
		B738DR_ils_fo_show = 0
		B738DR_ils_fo_show0 = 0
	end

end


function B738_displ_fix()
	
	local ils_lat2 = 0
	local ils_lon2 = 0
	-- local ils_lat = math.rad(simDR_latitude) 
	-- local ils_lon = math.rad(simDR_longitude) 
	local ils_lat = math.rad(ndx_lat)
	local ils_lon = math.rad(ndx_lon)
	local mag_hdg = 0
	local delta_ils_hdg = 0
	local ils_hdg = 0
	local ils_on_off = 0
	local ils_x = 0
	local ils_y = 0
	local ils_dis = 0
	local ils_zoom = 0
	local ils_disable = 0
	local ii = 0
	local jj = 0
	local kk = 0
	
	if fix_data_num > 0 then
	
		-- CAPTAIN
		if B738DR_capt_map_mode == 2 then
			if B738DR_track_up == 0 then
				mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
			else
				if B738DR_track_up_active == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					mag_hdg = ndx_mag_hdg - simDR_mag_variation
				end
			end
		else
			ils_disable = 1
		end
		
		if ils_disable == 0 then
			
			for ii = 1, fix_data_num do
			
				ils_lat2 = math.rad(fix_data[ii][3])
				ils_lon2 = math.rad(fix_data[ii][4])
				
				ils_dis = nd_calc_dist2(math.deg(ils_lat), math.deg(ils_lon), fix_data[ii][3], fix_data[ii][4])
				
				ils_y = math.sin(ils_lon2 - ils_lon) * math.cos(ils_lat2)
				ils_x = math.cos(ils_lat) * math.sin(ils_lat2) - math.sin(ils_lat) * math.cos(ils_lat2) * math.cos(ils_lon2 - ils_lon)
				ils_hdg = math.atan2(ils_y, ils_x)
				ils_hdg = math.deg(ils_hdg)
				ils_hdg = (ils_hdg + 360) % 360
				
				delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
				
				if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
					-- right
					ils_on_off = 1
					delta_ils_hdg = 90 - delta_ils_hdg
					delta_ils_hdg = math.rad(delta_ils_hdg)
					ils_y = ils_dis * math.sin(delta_ils_hdg)
					ils_x = ils_dis * math.cos(delta_ils_hdg)
				elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
					-- left
					ils_on_off = 1
					delta_ils_hdg = 90 + delta_ils_hdg
					delta_ils_hdg = math.rad(delta_ils_hdg)
					ils_y = ils_dis * math.sin(delta_ils_hdg)
					ils_x = -ils_dis * math.cos(delta_ils_hdg)
				elseif delta_ils_hdg >= 90 then
					-- right back
					ils_on_off = 1
					delta_ils_hdg = delta_ils_hdg - 90
					delta_ils_hdg = math.rad(delta_ils_hdg)
					ils_y = -ils_dis * math.sin(delta_ils_hdg)
					ils_x = ils_dis * math.cos(delta_ils_hdg)
				elseif delta_ils_hdg <= -90 then
					-- left back
					ils_on_off = 1
					delta_ils_hdg = -90 - delta_ils_hdg
					delta_ils_hdg = math.rad(delta_ils_hdg)
					ils_y = -ils_dis * math.sin(delta_ils_hdg)
					ils_x = -ils_dis * math.cos(delta_ils_hdg)
				end
				
				if B738DR_efis_map_range_capt == 0 then	-- 5 NM
					ils_zoom = 2
				elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
					ils_zoom = 1
				elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
					ils_zoom = 0.5
				elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
					ils_zoom = 0.25
				elseif B738DR_efis_map_range_capt == 4 then	-- 80 NM
					ils_zoom = 0.125
				elseif B738DR_efis_map_range_capt == 4 then	-- 160 NM
					ils_zoom = 0.0625
				elseif B738DR_efis_map_range_capt == 4 then	-- 320 NM
					ils_zoom = 0.03125
				else
					ils_on_off = 0
				end
				
				ils_x = ils_x * ils_zoom		-- zoom
				ils_y = ils_y * ils_zoom		-- zoom
				if B738DR_capt_map_mode == 3 then
					ils_y = ils_y + 4.1	-- adjust
				elseif B738DR_capt_map_mode == 0 and B738DR_capt_exp_map_mode == 0 then
					ils_y = ils_y + 4.1	-- adjust center
				end
				
				-- if ils_y > 14 or ils_y < -5 then
					-- ils_on_off = 0
				-- end
				-- if ils_x < -10.0 or ils_x > 10.0 then
					-- ils_on_off = 0
				-- end
				if ils_y > 28 or ils_y < -28 then
					ils_on_off = 0
				end
				if ils_x < -28 or ils_x > 28 then
					ils_on_off = 0
				end
					
				if ils_on_off == 1 then
					
					-- show FIX
					B738DR_fix_show[ii-1] = 1
					B738DR_fix_x[ii-1] = ils_x
					B738DR_fix_y[ii-1] = ils_y
					B738DR_fix_type[ii-1] = fix_data[ii][2]
					if ii == 1 then
						B738DR_fix_id00 = fix_data[ii][1]
					elseif ii == 2 then
						B738DR_fix_id01 = fix_data[ii][1]
					elseif ii == 3 then
						B738DR_fix_id02 = fix_data[ii][1]
					elseif ii == 4 then
						B738DR_fix_id03 = fix_data[ii][1]
					elseif ii == 5 then
						B738DR_fix_id04 = fix_data[ii][1]
					end
					
					for jj = 0, 2 do
						kk = 6 + (jj * 2)
						if fix_data[ii][kk] ~= -1 then
							-- radial
							if B738DR_capt_map_mode == 3 then
								ils_hdg = fix_data[ii][kk]
							else
								if B738DR_track_up == 0 then
									ils_hdg = (fix_data[ii][kk] - simDR_ahars_mag_hdg) % 360
								else
									if B738DR_track_up_active == 0 then
										ils_hdg = (fix_data[ii][kk] - simDR_ahars_mag_hdg) % 360
									else
										ils_hdg = (fix_data[ii][kk] - simDR_mag_hdg) % 360
									end
								end
							end
							ils_hdg = (90 + ils_hdg) % 360
							--ils_hdg = ils_hdg + simDR_mag_variation
							if ii == 1 then
								if jj == 0 then
									B738DR_fix_rad_dist_0[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad00_0 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_0[ii-1] = ils_hdg
								elseif jj == 1 then
									B738DR_fix_rad_dist_1[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad00_1 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_1[ii-1] = ils_hdg
								elseif jj == 2 then
									B738DR_fix_rad_dist_2[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad00_2 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_2[ii-1] = ils_hdg
								end
							elseif ii == 2 then
								if jj == 0 then
									B738DR_fix_rad_dist_0[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad01_0 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_0[ii-1] = ils_hdg
								elseif jj == 1 then
									B738DR_fix_rad_dist_1[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad01_1 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_1[ii-1] = ils_hdg
								elseif jj == 2 then
									B738DR_fix_rad_dist_2[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad01_2 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_2[ii-1] = ils_hdg
								end
							elseif ii == 3 then
								if jj == 0 then
									B738DR_fix_rad_dist_0[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad02_0 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_0[ii-1] = ils_hdg
								elseif jj == 1 then
									B738DR_fix_rad_dist_1[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad02_1 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_1[ii-1] = ils_hdg
								elseif jj == 2 then
									B738DR_fix_rad_dist_2[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad02_2 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_2[ii-1] = ils_hdg
								end
							elseif ii == 4 then
								if jj == 0 then
									B738DR_fix_rad_dist_0[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad03_0 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_0[ii-1] = ils_hdg
								elseif jj == 1 then
									B738DR_fix_rad_dist_1[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad03_1 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_1[ii-1] = ils_hdg
								elseif jj == 2 then
									B738DR_fix_rad_dist_2[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad03_2 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_2[ii-1] = ils_hdg
								end
							elseif ii == 5 then
								if jj == 0 then
									B738DR_fix_rad_dist_0[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad04_0 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_0[ii-1] = ils_hdg
								elseif jj == 1 then
									B738DR_fix_rad_dist_1[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad04_1 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_1[ii-1] = ils_hdg
								elseif jj == 2 then
									B738DR_fix_rad_dist_2[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_rad04_2 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_rot_2[ii-1] = ils_hdg
								end
							end
						elseif  fix_data[ii][kk+1] ~= -1 then
							--distance
							if ii == 1 then
								if jj == 0 then
									B738DR_fix_rad_dist_0[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_0[ii-1] = 0
								elseif jj == 1 then
									B738DR_fix_rad_dist_1[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_1[ii-1] = 0
								elseif jj == 2 then
									B738DR_fix_rad_dist_2[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_2[ii-1] = 0
								end
							elseif ii == 2 then
								if jj == 0 then
									B738DR_fix_rad_dist_0[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_0[ii-1] = 0
								elseif jj == 1 then
									B738DR_fix_rad_dist_1[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_1[ii-1] = 0
								elseif jj == 2 then
									B738DR_fix_rad_dist_2[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_2[ii-1] = 0
								end
							elseif ii == 3 then
								if jj == 0 then
									B738DR_fix_rad_dist_0[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_0[ii-1] = 0
								elseif jj == 1 then
									B738DR_fix_rad_dist_1[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_1[ii-1] = 0
								elseif jj == 2 then
									B738DR_fix_rad_dist_2[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_2[ii-1] = 0
								end
							elseif ii == 4 then
								if jj == 0 then
									B738DR_fix_rad_dist_0[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_0[ii-1] = 0
								elseif jj == 1 then
									B738DR_fix_rad_dist_1[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_1[ii-1] = 0
								elseif jj == 2 then
									B738DR_fix_rad_dist_2[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_2[ii-1] = 0
								end
							elseif ii == 5 then
								if jj == 0 then
									B738DR_fix_rad_dist_0[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_0[ii-1] = 0
								elseif jj == 1 then
									B738DR_fix_rad_dist_1[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_1[ii-1] = 0
								elseif jj == 2 then
									B738DR_fix_rad_dist_2[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_dist_2[ii-1] = 0
								end
							end
						else
							-- nothing
							if jj == 0 then
								B738DR_fix_rad_dist_0[ii-1] = 0	-- 0-none, 1-radial, 2-distance
							elseif jj == 1 then
								B738DR_fix_rad_dist_1[ii-1] = 0	-- 0-none, 1-radial, 2-distance
							elseif jj == 2 then
								B738DR_fix_rad_dist_2[ii-1] = 0	-- 0-none, 1-radial, 2-distance
							end
						end
					end
				else
					B738DR_fix_show[ii-1] = 0
				end
			end
			if fix_data_num < 5 then
				for ii = fix_data_num, 4 do
					B738DR_fix_show[ii] = 0
				end
			end
		else
			for ii = 0, 4 do
				B738DR_fix_show[ii] = 0
			end
		end
		
		
		-- FIRST OFFICER
		ils_disable = 0
		if B738DR_fo_map_mode == 2 then
			if B738DR_track_up == 0 then
				mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
			else
				if B738DR_track_up_active == 0 then
					mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
				else
					mag_hdg = ndx_mag_hdg - simDR_mag_variation
				end
			end
		else
			ils_disable = 1
		end
		
		if ils_disable == 0 then
			
			for ii = 1, fix_data_num do
			
				ils_lat2 = math.rad(fix_data[ii][3])
				ils_lon2 = math.rad(fix_data[ii][4])
				
				ils_dis = nd_calc_dist2(math.deg(ils_lat), math.deg(ils_lon), fix_data[ii][3], fix_data[ii][4])
				
				ils_y = math.sin(ils_lon2 - ils_lon) * math.cos(ils_lat2)
				ils_x = math.cos(ils_lat) * math.sin(ils_lat2) - math.sin(ils_lat) * math.cos(ils_lat2) * math.cos(ils_lon2 - ils_lon)
				ils_hdg = math.atan2(ils_y, ils_x)
				ils_hdg = math.deg(ils_hdg)
				ils_hdg = (ils_hdg + 360) % 360
				
				delta_ils_hdg = ((((ils_hdg - mag_hdg) % 360) + 540) % 360) - 180
				
				if delta_ils_hdg >= 0 and delta_ils_hdg <= 90 then
					-- right
					ils_on_off = 1
					delta_ils_hdg = 90 - delta_ils_hdg
					delta_ils_hdg = math.rad(delta_ils_hdg)
					ils_y = ils_dis * math.sin(delta_ils_hdg)
					ils_x = ils_dis * math.cos(delta_ils_hdg)
				elseif delta_ils_hdg < 0 and delta_ils_hdg >= -90 then
					-- left
					ils_on_off = 1
					delta_ils_hdg = 90 + delta_ils_hdg
					delta_ils_hdg = math.rad(delta_ils_hdg)
					ils_y = ils_dis * math.sin(delta_ils_hdg)
					ils_x = -ils_dis * math.cos(delta_ils_hdg)
				elseif delta_ils_hdg >= 90 then
					-- right back
					ils_on_off = 1
					delta_ils_hdg = delta_ils_hdg - 90
					delta_ils_hdg = math.rad(delta_ils_hdg)
					ils_y = -ils_dis * math.sin(delta_ils_hdg)
					ils_x = ils_dis * math.cos(delta_ils_hdg)
				elseif delta_ils_hdg <= -90 then
					-- left back
					ils_on_off = 1
					delta_ils_hdg = -90 - delta_ils_hdg
					delta_ils_hdg = math.rad(delta_ils_hdg)
					ils_y = -ils_dis * math.sin(delta_ils_hdg)
					ils_x = -ils_dis * math.cos(delta_ils_hdg)
				end
				
				if B738DR_efis_map_range_fo == 0 then	-- 5 NM
					ils_zoom = 2
				elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
					ils_zoom = 1
				elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
					ils_zoom = 0.5
				elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
					ils_zoom = 0.25
				elseif B738DR_efis_map_range_fo == 4 then	-- 80 NM
					ils_zoom = 0.125
				elseif B738DR_efis_map_range_fo == 4 then	-- 160 NM
					ils_zoom = 0.0625
				elseif B738DR_efis_map_range_fo == 4 then	-- 320 NM
					ils_zoom = 0.03125
				else
					ils_on_off = 0
				end
				
				ils_x = ils_x * ils_zoom		-- zoom
				ils_y = ils_y * ils_zoom		-- zoom
				if B738DR_fo_map_mode == 3 then
					ils_y = ils_y + 4.1	-- adjust
				elseif B738DR_fo_map_mode == 0 and B738DR_fo_exp_map_mode == 0 then
					ils_y = ils_y + 4.1	-- adjust center
				end
				
				-- if ils_y > 14 or ils_y < -5 then
					-- ils_on_off = 0
				-- end
				-- if ils_x < -10.0 or ils_x > 10.0 then
					-- ils_on_off = 0
				-- end
				if ils_y > 28 or ils_y < -28 then
					ils_on_off = 0
				end
				if ils_x < -28 or ils_x > 28 then
					ils_on_off = 0
				end
					
				if ils_on_off == 1 then
					
					-- show FIX
					B738DR_fix_fo_show[ii-1] = 1
					B738DR_fix_fo_x[ii-1] = ils_x
					B738DR_fix_fo_y[ii-1] = ils_y
					B738DR_fix_fo_type[ii-1] = fix_data[ii][2]
					if ii == 1 then
						B738DR_fix_fo_id00 = fix_data[ii][1]
					elseif ii == 2 then
						B738DR_fix_fo_id01 = fix_data[ii][1]
					elseif ii == 3 then
						B738DR_fix_fo_id02 = fix_data[ii][1]
					elseif ii == 4 then
						B738DR_fix_fo_id03 = fix_data[ii][1]
					elseif ii == 5 then
						B738DR_fix_fo_id04 = fix_data[ii][1]
					end
					
					for jj = 0, 2 do
						kk = 6 + (jj * 2)
						if fix_data[ii][kk] ~= -1 then
							-- radial
							if B738DR_fo_map_mode == 3 then
								ils_hdg = fix_data[ii][kk]
							else
								if B738DR_track_up == 0 then
									ils_hdg = (fix_data[ii][kk] - simDR_ahars_mag_hdg) % 360
								else
									if B738DR_track_up_active == 0 then
										ils_hdg = (fix_data[ii][kk] - simDR_ahars_mag_hdg) % 360
									else
										ils_hdg = (fix_data[ii][kk] - simDR_mag_hdg) % 360
									end
								end
							end
							ils_hdg = (90 + ils_hdg) % 360
							--ils_hdg = ils_hdg + simDR_mag_variation
							if ii == 1 then
								if jj == 0 then
									B738DR_fix_fo_rad_dist_0[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad00_0 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_0[ii-1] = ils_hdg
								elseif jj == 1 then
									B738DR_fix_fo_rad_dist_1[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad00_1 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_1[ii-1] = ils_hdg
								elseif jj == 2 then
									B738DR_fix_fo_rad_dist_2[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad00_2 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_2[ii-1] = ils_hdg
								end
							elseif ii == 2 then
								if jj == 0 then
									B738DR_fix_fo_rad_dist_0[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad01_0 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_0[ii-1] = ils_hdg
								elseif jj == 1 then
									B738DR_fix_fo_rad_dist_1[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad01_1 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_1[ii-1] = ils_hdg
								elseif jj == 2 then
									B738DR_fix_fo_rad_dist_2[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad01_2 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_2[ii-1] = ils_hdg
								end
							elseif ii == 3 then
								if jj == 0 then
									B738DR_fix_fo_rad_dist_0[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad02_0 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_0[ii-1] = ils_hdg
								elseif jj == 1 then
									B738DR_fix_fo_rad_dist_1[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad02_1 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_1[ii-1] = ils_hdg
								elseif jj == 2 then
									B738DR_fix_fo_rad_dist_2[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad02_2 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_2[ii-1] = ils_hdg
								end
							elseif ii == 4 then
								if jj == 0 then
									B738DR_fix_fo_rad_dist_0[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad03_0 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_0[ii-1] = ils_hdg
								elseif jj == 1 then
									B738DR_fix_fo_rad_dist_1[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad03_1 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_1[ii-1] = ils_hdg
								elseif jj == 2 then
									B738DR_fix_fo_rad_dist_2[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad03_2 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_2[ii-1] = ils_hdg
								end
							elseif ii == 5 then
								if jj == 0 then
									B738DR_fix_fo_rad_dist_0[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad04_0 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_0[ii-1] = ils_hdg
								elseif jj == 1 then
									B738DR_fix_fo_rad_dist_1[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad04_1 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_1[ii-1] = ils_hdg
								elseif jj == 2 then
									B738DR_fix_fo_rad_dist_2[ii-1] = 1	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_rad04_2 = string.format("%03d", fix_data[ii][kk])
									B738DR_fix_fo_rot_2[ii-1] = ils_hdg
								end
							end
						elseif  fix_data[ii][kk+1] ~= -1 then
							--distance
							if ii == 1 then
								if jj == 0 then
									B738DR_fix_fo_rad_dist_0[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_0[ii-1] = 0
								elseif jj == 1 then
									B738DR_fix_fo_rad_dist_1[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_1[ii-1] = 0
								elseif jj == 2 then
									B738DR_fix_fo_rad_dist_2[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_2[ii-1] = 0
								end
							elseif ii == 2 then
								if jj == 0 then
									B738DR_fix_fo_rad_dist_0[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_0[ii-1] = 0
								elseif jj == 1 then
									B738DR_fix_fo_rad_dist_1[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_1[ii-1] = 0
								elseif jj == 2 then
									B738DR_fix_fo_rad_dist_2[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_2[ii-1] = 0
								end
							elseif ii == 3 then
								if jj == 0 then
									B738DR_fix_fo_rad_dist_0[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_0[ii-1] = 0
								elseif jj == 1 then
									B738DR_fix_fo_rad_dist_1[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_1[ii-1] = 0
								elseif jj == 2 then
									B738DR_fix_fo_rad_dist_2[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_2[ii-1] = 0
								end
							elseif ii == 4 then
								if jj == 0 then
									B738DR_fix_fo_rad_dist_0[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_0[ii-1] = 0
								elseif jj == 1 then
									B738DR_fix_fo_rad_dist_1[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_1[ii-1] = 0
								elseif jj == 2 then
									B738DR_fix_fo_rad_dist_2[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_2[ii-1] = 0
								end
							elseif ii == 5 then
								if jj == 0 then
									B738DR_fix_fo_rad_dist_0[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_0[ii-1] = 0
								elseif jj == 1 then
									B738DR_fix_fo_rad_dist_1[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_1[ii-1] = 0
								elseif jj == 2 then
									B738DR_fix_fo_rad_dist_2[ii-1] = 2	-- 0-none, 1-radial, 2-distance
									B738DR_fix_fo_dist_2[ii-1] = 0
								end
							end
						else
							-- nothing
							if jj == 0 then
								B738DR_fix_fo_rad_dist_0[ii-1] = 0	-- 0-none, 1-radial, 2-distance
							elseif jj == 1 then
								B738DR_fix_fo_rad_dist_1[ii-1] = 0	-- 0-none, 1-radial, 2-distance
							elseif jj == 2 then
								B738DR_fix_fo_rad_dist_2[ii-1] = 0	-- 0-none, 1-radial, 2-distance
							end
						end
					end
				else
					B738DR_fix_fo_show[ii-1] = 0
				end
			end
			if fix_data_num < 5 then
				for ii = fix_data_num, 4 do
					B738DR_fix_fo_show[ii] = 0
				end
			end
		else
			for ii = 0, 4 do
				B738DR_fix_fo_show[ii] = 0
			end
		end
		
	else
		for ii = 0, 4 do
			B738DR_fix_show[ii] = 0
			B738DR_fix_fo_show[ii] = 0
		end
	end
	
end




function B738_nd_perf()
	
	-- local nd_lat = math.rad(simDR_latitude) 
	-- local nd_lon = math.rad(simDR_longitude) 
	local nd_lat = ndx_lat
	local nd_lon = ndx_lon
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	local n = 0
	local range = 165	-- 165 NM
	local delta_pos = 0
	local skip = 0
	
	if nd_to == apt_data_num then
		nd_teak = 0
		if first_time_apt < 2 then
			first_time_apt = first_time_apt + 1
		end
		if nd_page == 0 then
			nd_page = 1
			nd_page2_num = 0
			nd_page2 = {}
			near_apt2_dis = 999999
			near_apt2_icao = ""
		else
			nd_page = 0
			nd_page1_num = 0
			nd_page1 = {}
			near_apt1_dis = 999999
			near_apt1_icao = ""
		end
	else
		nd_teak = nd_teak + 1
	end
	
	nd_from = (nd_teak * 15) + 1
	nd_to = nd_from + 14
	
	if nd_to > apt_data_num then
		nd_to = apt_data_num
	end
	
	for n = nd_from, nd_to do 
		
		-- nd_lat2 = math.rad(apt_data[n][2])
		-- nd_lon2 = math.rad(apt_data[n][3])
		nd_lat2 = apt_data[n][2]
		nd_lon2 = apt_data[n][3]
		
		skip = 0
		delta_pos = nd_lat2 - nd_lat
		if delta_pos < 0  then
			delta_pos = -delta_pos
		end
		if delta_pos > 8 then
			skip = 1
		end
		delta_pos = nd_lon2 - nd_lon
		if delta_pos < 0  then
			delta_pos = -delta_pos
		end
		if delta_pos > 8 then
			skip = 1
		end
		if apt_data[n][6] < 1700 then	-- minimal lenght runway in m
			skip = 1
		end
		if nd_lat2 == 0 then
			skip = 1
		end
		
		if skip == 0 then
			
			nd_dis = nd_calc_dist2(nd_lat, nd_lon, nd_lat2, nd_lon2)
			
			if nd_dis < range then
				if nd_page == 0 then	-- create nd_page1
					nd_page1_num = nd_page1_num + 1
					nd_page1[nd_page1_num] = {}
					nd_page1[nd_page1_num][1] = apt_data[n][1]
					nd_page1[nd_page1_num][2] = apt_data[n][2]
					nd_page1[nd_page1_num][3] = apt_data[n][3]
					if nd_dis < near_apt1_dis then
						near_apt1_dis = nd_dis
						near_apt1_icao = apt_data[n][1]
					end
				else					-- create nd_page2
					nd_page2_num = nd_page2_num + 1
					nd_page2[nd_page2_num] = {}
					nd_page2[nd_page2_num][1] = apt_data[n][1]
					nd_page2[nd_page2_num][2] = apt_data[n][2]
					nd_page2[nd_page2_num][3] = apt_data[n][3]
					if nd_dis < near_apt2_dis  then
						near_apt2_dis = nd_dis
						near_apt2_icao = apt_data[n][1]
					end
				end
			end
		
		end
		
	end
end


function B738_displ_apt()

	-- local nd_lat = math.rad(simDR_latitude) 
	-- local nd_lon = math.rad(simDR_longitude) 
	local nd_lat = math.rad(ndx_lat)
	local nd_lon = math.rad(ndx_lon)
	local mag_hdg = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	local nd_hdg = 0
	local n = 0
	local nav_disable = 0
	local nd_on_off = 0
	local nd_corr = 0
	local delta_hdg = 0
	local nd_zoom = 0
	local obj = 29
	local apt_txt = ""
	local page_max = 0
	local page_1 = 0
	local page_2 = 0
	local page_3 = 0
	
	local obj2 = 29
	
	local nd_x2 = 0
	local nd_y2 = 0
	local nd_on_off2 = 0
	local nav_disable2 = 0
	local nav_disable3 = 0
	local obj3 = 0
		
	-- if simDR_efis_sub_mode < 2 then
		-- mag_hdg = simDR_ahars_mag_hdg - simDR_mag_variation
		-- if simDR_efis_map_mode == 0 then
			-- nav_disable = 1
		-- end
	-- elseif simDR_efis_sub_mode == 4 then
		-- nav_disable = 1
	-- else
		-- mag_hdg = simDR_mag_hdg - simDR_mag_variation
	-- end
	-- if B738DR_efis_apt_on == 0 then
		-- nav_disable = 1
	-- end
	
	nav_disable = 1
	if B738DR_capt_map_mode == 2 then	--and B738DR_capt_exp_map_mode ~= 0 then
		nav_disable = 0
	end
	if B738DR_efis_apt_on == 0 then
		nav_disable = 1
	end
	
	nav_disable2 = 1
	if B738DR_fo_map_mode == 2 then	--and B738DR_fo_exp_map_mode ~= 0 then
		nav_disable2 = 0
	end
	if B738DR_efis_fo_apt_on == 0 then
		nav_disable2 = 1
	end
	
	nav_disable3 = 1
	if nav_disable == 0 or nav_disable2 == 0 then
		nav_disable3 = 0
	end
	if obj > obj2 then
		obj3 = obj
	else
		obj3 = obj2
	end
	
	if B738DR_track_up == 0 then
		mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
	else
		if B738DR_track_up_active == 0 then
			mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
		else
			mag_hdg = ndx_mag_hdg - simDR_mag_variation
		end
	end
	
	if nd_page == 0 then
		page_max = nd_page2_num
	else
		page_max = nd_page1_num
	end
	
	if page_max > 0 then
		
		for n = 1, page_max do 
			
			--nd_on_off = 0
			nd_on_off2 = 0
			if nd_page == 0 then
				page_1 = nd_page2[n][1]
				page_2 = nd_page2[n][2]
				page_3 = nd_page2[n][3]
			else
				page_1 = nd_page1[n][1]
				page_2 = nd_page1[n][2]
				page_3 = nd_page1[n][3]
			end
		
		--for n = 1, apt_data_num do
			--nd_lat2 = apt_data[n][2]
			--nd_lon2 = apt_data[n][3]
			nd_lat2 = math.rad(page_2)
			nd_lon2 = math.rad(page_3)
			
			-- nd_x = (nd_lon2 - nd_lon) * math.cos((nd_lat + nd_lat2)/2)
			-- nd_y = nd_lat2 - nd_lat
			-- nd_dis = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
			
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			
			if nd_dis < 165 and obj3 >= 0 and nav_disable3 == 0 then
				
				nd_y2 = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
				nd_x2 = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
				nd_hdg = math.atan2(nd_y2, nd_x2)
				nd_hdg = math.deg(nd_hdg)
				nd_hdg = (nd_hdg + 360) % 360
				
				--delta_hdg = ((((nd_hdg - mag_hdg) % 360) + 540) % 360) - 180
				delta_hdg = (nd_hdg - mag_hdg + 360) % 360
				if delta_hdg > 180 then
					delta_hdg = delta_hdg - 360
				end
				
				if delta_hdg >= 0 and delta_hdg <= 90 then
					-- right
					nd_on_off2 = 1
					delta_hdg = 90 - delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y2 = nd_dis * math.sin(delta_hdg)
					nd_x2 = nd_dis * math.cos(delta_hdg)
				elseif delta_hdg < 0 and delta_hdg >= -90 then
					-- left
					nd_on_off2 = 1
					delta_hdg = 90 + delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y2 = nd_dis * math.sin(delta_hdg)
					nd_x2 = -nd_dis * math.cos(delta_hdg)
				elseif delta_hdg >= 90 then
					-- right back
					nd_on_off2 = 1
					delta_hdg = delta_hdg - 90
					delta_hdg = math.rad(delta_hdg)
					nd_y2 = -nd_dis * math.sin(delta_hdg)
					nd_x2 = nd_dis * math.cos(delta_hdg)
				elseif delta_hdg <= -90 then
					-- left back
					nd_on_off2 = 1
					delta_hdg = -90 - delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y2 = -nd_dis * math.sin(delta_hdg)
					nd_x2 = -nd_dis * math.cos(delta_hdg)
				end
				
				-- CPT
				nd_on_off = nd_on_off2
				if B738DR_efis_map_range_capt == 0 then	-- 5 NM
					nd_zoom = 2
				elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
					nd_zoom = 1
				elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
					nd_zoom = 0.5
				elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
					nd_zoom = 0.25
				elseif B738DR_efis_map_range_capt == 4 then	-- 80 NM
					nd_zoom = 0.125
				elseif B738DR_efis_map_range_capt == 5 then	-- 160 NM
					nd_zoom = 0.0625
				else
					nd_on_off = 0
				end
				
				nd_x = nd_x2 * nd_zoom		-- zoom
				nd_y = nd_y2 * nd_zoom		-- zoom
				if B738DR_capt_map_mode == 3 then
					nd_y = nd_y + 4.1	-- adjust
				end
				
				if nd_x < -8.0 or nd_x > 8.0 then
					nd_on_off = 0
				end
				if nd_y > 11.0 or nd_y < -2 then
					nd_on_off = 0
				end
				
				if nd_on_off == 1 and obj >= 0 and nav_disable == 0 then
					--if obj >= 0 then
						apt_txt = page_1
						if B738DR_fpln_nav_id ~= apt_txt then
							B738DR_apt_obj[obj] = 1
							B738DR_apt_x[obj] = nd_x
							B738DR_apt_y[obj] = nd_y
							if obj == 0 then
								B738DR_apt_id00 = apt_txt
							elseif obj == 1 then
								B738DR_apt_id01 = apt_txt
							elseif obj == 2 then
								B738DR_apt_id02 = apt_txt
							elseif obj == 3 then
								B738DR_apt_id03 = apt_txt
							elseif obj == 4 then
								B738DR_apt_id04 = apt_txt
							elseif obj == 5 then
								B738DR_apt_id05 = apt_txt
							elseif obj == 6 then
								B738DR_apt_id06 = apt_txt
							elseif obj == 7 then
								B738DR_apt_id07 = apt_txt
							elseif obj == 8 then
								B738DR_apt_id08 = apt_txt
							elseif obj == 9 then
								B738DR_apt_id09 = apt_txt
							elseif obj == 10 then
								B738DR_apt_id10 = apt_txt
							elseif obj == 11 then
								B738DR_apt_id11 = apt_txt
							elseif obj == 12 then
								B738DR_apt_id12 = apt_txt
							elseif obj == 13 then
								B738DR_apt_id13 = apt_txt
							elseif obj == 14 then
								B738DR_apt_id14 = apt_txt
							elseif obj == 15 then
								B738DR_apt_id15 = apt_txt
							elseif obj == 16 then
								B738DR_apt_id16 = apt_txt
							elseif obj == 17 then
								B738DR_apt_id17 = apt_txt
							elseif obj == 18 then
								B738DR_apt_id18 = apt_txt
							elseif obj == 19 then
								B738DR_apt_id19 = apt_txt
							elseif obj == 20 then
								B738DR_apt_id20 = apt_txt
							elseif obj == 21 then
								B738DR_apt_id21 = apt_txt
							elseif obj == 22 then
								B738DR_apt_id22 = apt_txt
							elseif obj == 23 then
								B738DR_apt_id23 = apt_txt
							elseif obj == 24 then
								B738DR_apt_id24 = apt_txt
							elseif obj == 25 then
								B738DR_apt_id25 = apt_txt
							elseif obj == 26 then
								B738DR_apt_id26 = apt_txt
							elseif obj == 27 then
								B738DR_apt_id27 = apt_txt
							elseif obj == 28 then
								B738DR_apt_id28 = apt_txt
							elseif obj == 29 then
								B738DR_apt_id29 = apt_txt
							end
							obj = obj - 1
						end
					--end
				end
				
				-- FO
				nd_on_off = nd_on_off2
				if B738DR_efis_map_range_fo == 0 then	-- 5 NM
					nd_zoom = 2
				elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
					nd_zoom = 1
				elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
					nd_zoom = 0.5
				elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
					nd_zoom = 0.25
				elseif B738DR_efis_map_range_fo == 4 then	-- 80 NM
					nd_zoom = 0.125
				elseif B738DR_efis_map_range_fo == 5 then	-- 160 NM
					nd_zoom = 0.0625
				else
					nd_on_off = 0
				end
				
				nd_x = nd_x2 * nd_zoom		-- zoom
				nd_y = nd_y2 * nd_zoom		-- zoom
				if B738DR_fo_map_mode == 3 then
					nd_y = nd_y + 4.1	-- adjust
				end
				
				if nd_x < -8.0 or nd_x > 8.0 then
					nd_on_off = 0
				end
				if nd_y > 11.0 or nd_y < -2 then
					nd_on_off = 0
				end
				
				if nd_on_off == 1 and obj2 >= 0 and nav_disable2 == 0 then
					--if obj2 >= 0 then
						apt_txt = page_1
						if B738DR_fpln_nav_id ~= apt_txt then
							B738DR_apt_fo_obj[obj2] = 1
							B738DR_apt_fo_x[obj2] = nd_x
							B738DR_apt_fo_y[obj2] = nd_y
							if obj2 == 0 then
								B738DR_apt_fo_id00 = apt_txt
							elseif obj2 == 1 then
								B738DR_apt_fo_id01 = apt_txt
							elseif obj2 == 2 then
								B738DR_apt_fo_id02 = apt_txt
							elseif obj2 == 3 then
								B738DR_apt_fo_id03 = apt_txt
							elseif obj2 == 4 then
								B738DR_apt_fo_id04 = apt_txt
							elseif obj2 == 5 then
								B738DR_apt_fo_id05 = apt_txt
							elseif obj2 == 6 then
								B738DR_apt_fo_id06 = apt_txt
							elseif obj2 == 7 then
								B738DR_apt_fo_id07 = apt_txt
							elseif obj2 == 8 then
								B738DR_apt_fo_id08 = apt_txt
							elseif obj2 == 9 then
								B738DR_apt_fo_id09 = apt_txt
							elseif obj2 == 10 then
								B738DR_apt_fo_id10 = apt_txt
							elseif obj2 == 11 then
								B738DR_apt_fo_id11 = apt_txt
							elseif obj2 == 12 then
								B738DR_apt_fo_id12 = apt_txt
							elseif obj2 == 13 then
								B738DR_apt_fo_id13 = apt_txt
							elseif obj2 == 14 then
								B738DR_apt_fo_id14 = apt_txt
							elseif obj2 == 15 then
								B738DR_apt_fo_id15 = apt_txt
							elseif obj2 == 16 then
								B738DR_apt_fo_id16 = apt_txt
							elseif obj2 == 17 then
								B738DR_apt_fo_id17 = apt_txt
							elseif obj2 == 18 then
								B738DR_apt_fo_id18 = apt_txt
							elseif obj2 == 19 then
								B738DR_apt_fo_id19 = apt_txt
							elseif obj2 == 20 then
								B738DR_apt_fo_id20 = apt_txt
							elseif obj2 == 21 then
								B738DR_apt_fo_id21 = apt_txt
							elseif obj2 == 22 then
								B738DR_apt_fo_id22 = apt_txt
							elseif obj2 == 23 then
								B738DR_apt_fo_id23 = apt_txt
							elseif obj2 == 24 then
								B738DR_apt_fo_id24 = apt_txt
							elseif obj2 == 25 then
								B738DR_apt_fo_id25 = apt_txt
							elseif obj2 == 26 then
								B738DR_apt_fo_id26 = apt_txt
							elseif obj2 == 27 then
								B738DR_apt_fo_id27 = apt_txt
							elseif obj2 == 28 then
								B738DR_apt_fo_id28 = apt_txt
							elseif obj2 == 29 then
								B738DR_apt_fo_id29 = apt_txt
							end
							obj2 = obj2 - 1
						end
					--end
				end
				
				
			end
		end
	end
	
	nd_clr_apt(obj, obj2)
	
	-- if obj >= 0 then
		-- for n = obj, 0, -1 do
			-- B738DR_apt_obj[n] = 0	-- off
			-- if n == 0 then
				-- B738DR_apt_id00 = ""
			-- elseif n == 1 then
				-- B738DR_apt_id01 = ""
			-- elseif n == 2 then
				-- B738DR_apt_id02 = ""
			-- elseif n == 3 then
				-- B738DR_apt_id03 = ""
			-- elseif n == 4 then
				-- B738DR_apt_id04 = ""
			-- elseif n == 5 then
				-- B738DR_apt_id05 = ""
			-- elseif n == 6 then
				-- B738DR_apt_id06 = ""
			-- elseif n == 7 then
				-- B738DR_apt_id07 = ""
			-- elseif n == 8 then
				-- B738DR_apt_id08 = ""
			-- elseif n == 9 then
				-- B738DR_apt_id09 = ""
			-- elseif n == 10 then
				-- B738DR_apt_id10 = ""
			-- elseif n == 11 then
				-- B738DR_apt_id11 = ""
			-- elseif n == 12 then
				-- B738DR_apt_id12 = ""
			-- elseif n == 13 then
				-- B738DR_apt_id13 = ""
			-- elseif n == 14 then
				-- B738DR_apt_id14 = ""
			-- elseif n == 15 then
				-- B738DR_apt_id15 = ""
			-- elseif n == 16 then
				-- B738DR_apt_id16 = ""
			-- elseif n == 17 then
				-- B738DR_apt_id17 = ""
			-- elseif n == 18 then
				-- B738DR_apt_id18 = ""
			-- elseif n == 19 then
				-- B738DR_apt_id19 = ""
			-- elseif n == 20 then
				-- B738DR_apt_id20 = ""
			-- elseif n == 21 then
				-- B738DR_apt_id21 = ""
			-- elseif n == 22 then
				-- B738DR_apt_id22 = ""
			-- elseif n == 23 then
				-- B738DR_apt_id23 = ""
			-- elseif n == 24 then
				-- B738DR_apt_id24 = ""
			-- elseif n == 25 then
				-- B738DR_apt_id25 = ""
			-- elseif n == 26 then
				-- B738DR_apt_id26 = ""
			-- elseif n == 27 then
				-- B738DR_apt_id27 = ""
			-- elseif n == 28 then
				-- B738DR_apt_id28 = ""
			-- elseif n == 29 then
				-- B738DR_apt_id29 = ""
			-- end
		-- end
	-- end
	
	-- if obj2 >= 0 then
		-- for n = obj2, 0, -1 do
			-- B738DR_apt_fo_obj[n] = 0	-- off
			-- if n == 0 then
				-- B738DR_apt_fo_id00 = ""
			-- elseif n == 1 then
				-- B738DR_apt_fo_id01 = ""
			-- elseif n == 2 then
				-- B738DR_apt_fo_id02 = ""
			-- elseif n == 3 then
				-- B738DR_apt_fo_id03 = ""
			-- elseif n == 4 then
				-- B738DR_apt_fo_id04 = ""
			-- elseif n == 5 then
				-- B738DR_apt_fo_id05 = ""
			-- elseif n == 6 then
				-- B738DR_apt_fo_id06 = ""
			-- elseif n == 7 then
				-- B738DR_apt_fo_id07 = ""
			-- elseif n == 8 then
				-- B738DR_apt_fo_id08 = ""
			-- elseif n == 9 then
				-- B738DR_apt_fo_id09 = ""
			-- elseif n == 10 then
				-- B738DR_apt_fo_id10 = ""
			-- elseif n == 11 then
				-- B738DR_apt_fo_id11 = ""
			-- elseif n == 12 then
				-- B738DR_apt_fo_id12 = ""
			-- elseif n == 13 then
				-- B738DR_apt_fo_id13 = ""
			-- elseif n == 14 then
				-- B738DR_apt_fo_id14 = ""
			-- elseif n == 15 then
				-- B738DR_apt_fo_id15 = ""
			-- elseif n == 16 then
				-- B738DR_apt_fo_id16 = ""
			-- elseif n == 17 then
				-- B738DR_apt_fo_id17 = ""
			-- elseif n == 18 then
				-- B738DR_apt_fo_id18 = ""
			-- elseif n == 19 then
				-- B738DR_apt_fo_id19 = ""
			-- elseif n == 20 then
				-- B738DR_apt_fo_id20 = ""
			-- elseif n == 21 then
				-- B738DR_apt_fo_id21 = ""
			-- elseif n == 22 then
				-- B738DR_apt_fo_id22 = ""
			-- elseif n == 23 then
				-- B738DR_apt_fo_id23 = ""
			-- elseif n == 24 then
				-- B738DR_apt_fo_id24 = ""
			-- elseif n == 25 then
				-- B738DR_apt_fo_id25 = ""
			-- elseif n == 26 then
				-- B738DR_apt_fo_id26 = ""
			-- elseif n == 27 then
				-- B738DR_apt_fo_id27 = ""
			-- elseif n == 28 then
				-- B738DR_apt_fo_id28 = ""
			-- elseif n == 29 then
				-- B738DR_apt_fo_id29 = ""
			-- end
		-- end
	-- end

end

function nd_clr_apt(rst_obj, rst_obj2)
	
	local n = 0
	
	if rst_obj >= 0 then
		for n = rst_obj, 0, -1 do
			B738DR_apt_obj[n] = 0	-- off
			if n == 0 then
				B738DR_apt_id00 = ""
			elseif n == 1 then
				B738DR_apt_id01 = ""
			elseif n == 2 then
				B738DR_apt_id02 = ""
			elseif n == 3 then
				B738DR_apt_id03 = ""
			elseif n == 4 then
				B738DR_apt_id04 = ""
			elseif n == 5 then
				B738DR_apt_id05 = ""
			elseif n == 6 then
				B738DR_apt_id06 = ""
			elseif n == 7 then
				B738DR_apt_id07 = ""
			elseif n == 8 then
				B738DR_apt_id08 = ""
			elseif n == 9 then
				B738DR_apt_id09 = ""
			elseif n == 10 then
				B738DR_apt_id10 = ""
			elseif n == 11 then
				B738DR_apt_id11 = ""
			elseif n == 12 then
				B738DR_apt_id12 = ""
			elseif n == 13 then
				B738DR_apt_id13 = ""
			elseif n == 14 then
				B738DR_apt_id14 = ""
			elseif n == 15 then
				B738DR_apt_id15 = ""
			elseif n == 16 then
				B738DR_apt_id16 = ""
			elseif n == 17 then
				B738DR_apt_id17 = ""
			elseif n == 18 then
				B738DR_apt_id18 = ""
			elseif n == 19 then
				B738DR_apt_id19 = ""
			elseif n == 20 then
				B738DR_apt_id20 = ""
			elseif n == 21 then
				B738DR_apt_id21 = ""
			elseif n == 22 then
				B738DR_apt_id22 = ""
			elseif n == 23 then
				B738DR_apt_id23 = ""
			elseif n == 24 then
				B738DR_apt_id24 = ""
			elseif n == 25 then
				B738DR_apt_id25 = ""
			elseif n == 26 then
				B738DR_apt_id26 = ""
			elseif n == 27 then
				B738DR_apt_id27 = ""
			elseif n == 28 then
				B738DR_apt_id28 = ""
			elseif n == 29 then
				B738DR_apt_id29 = ""
			end
		end
	end
	
	if rst_obj2 >= 0 then
		for n = rst_obj2, 0, -1 do
			B738DR_apt_fo_obj[n] = 0	-- off
			if n == 0 then
				B738DR_apt_fo_id00 = ""
			elseif n == 1 then
				B738DR_apt_fo_id01 = ""
			elseif n == 2 then
				B738DR_apt_fo_id02 = ""
			elseif n == 3 then
				B738DR_apt_fo_id03 = ""
			elseif n == 4 then
				B738DR_apt_fo_id04 = ""
			elseif n == 5 then
				B738DR_apt_fo_id05 = ""
			elseif n == 6 then
				B738DR_apt_fo_id06 = ""
			elseif n == 7 then
				B738DR_apt_fo_id07 = ""
			elseif n == 8 then
				B738DR_apt_fo_id08 = ""
			elseif n == 9 then
				B738DR_apt_fo_id09 = ""
			elseif n == 10 then
				B738DR_apt_fo_id10 = ""
			elseif n == 11 then
				B738DR_apt_fo_id11 = ""
			elseif n == 12 then
				B738DR_apt_fo_id12 = ""
			elseif n == 13 then
				B738DR_apt_fo_id13 = ""
			elseif n == 14 then
				B738DR_apt_fo_id14 = ""
			elseif n == 15 then
				B738DR_apt_fo_id15 = ""
			elseif n == 16 then
				B738DR_apt_fo_id16 = ""
			elseif n == 17 then
				B738DR_apt_fo_id17 = ""
			elseif n == 18 then
				B738DR_apt_fo_id18 = ""
			elseif n == 19 then
				B738DR_apt_fo_id19 = ""
			elseif n == 20 then
				B738DR_apt_fo_id20 = ""
			elseif n == 21 then
				B738DR_apt_fo_id21 = ""
			elseif n == 22 then
				B738DR_apt_fo_id22 = ""
			elseif n == 23 then
				B738DR_apt_fo_id23 = ""
			elseif n == 24 then
				B738DR_apt_fo_id24 = ""
			elseif n == 25 then
				B738DR_apt_fo_id25 = ""
			elseif n == 26 then
				B738DR_apt_fo_id26 = ""
			elseif n == 27 then
				B738DR_apt_fo_id27 = ""
			elseif n == 28 then
				B738DR_apt_fo_id28 = ""
			elseif n == 29 then
				B738DR_apt_fo_id29 = ""
			end
		end
	end
	
end

function B738_nd_perf2()
	
	-- local nd_lat = simDR_latitude
	-- local nd_lon = simDR_longitude
	-- local nd_lat = math.rad(ndx_lat) 
	-- local nd_lon = math.rad(ndx_lon) 
	local nd_lat = ndx_lat
	local nd_lon = ndx_lon
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local n = 0
	local range = 0
	local delta_pos = 0
	local skip = 0
	
	local block_switch = 0
	
	
	if xnd_to == earth_nav_num then
		if xfirst_time2 == 1 then
		--if precalc_done == 0 then
			xnd_teak = 0
			xfirst_time = 1
			if xnd_page == 0 then
				xnd_page = 1
				xnd_page2_num = 0
				xnd_page2 = {}
			else
				xnd_page = 0
				xnd_page1_num = 0
				xnd_page1 = {}
			end
		else
			block_switch = 1
					
				
									
		end
	else
		xnd_teak = xnd_teak + 1
	end
	
	if block_switch == 0 then
	
		xnd_from = (xnd_teak * 25) + 1
		xnd_to = xnd_from + 24
		if xnd_to > earth_nav_num then
			xnd_to = earth_nav_num
		end
		
		for n = xnd_from, xnd_to do 
			
			nd_lat2 = earth_nav[n][2]
			nd_lon2 = earth_nav[n][3]
			
			skip = 0
			delta_pos = nd_lat2 - nd_lat
			if delta_pos < 0 then
				delta_pos = -delta_pos
			end
			if delta_pos > 8 then
				skip = 1
			end
			delta_pos = nd_lon2 - nd_lon
			if delta_pos < 0 then
				delta_pos = -delta_pos
			end
			if delta_pos > 8 then
				skip = 1
			end
			
			if skip == 0 then
				
				nd_dis = nd_calc_dist2(nd_lat, nd_lon, nd_lat2, nd_lon2)
				
				if earth_nav[n][1] == 4 then	-- if fix only 25 NM
					range = 25
				else
					range = 165
				end
				
				if nd_dis < range then
					if xnd_page == 0 then	-- create xnd_page1
						xnd_page1_num = xnd_page1_num + 1
						xnd_page1[xnd_page1_num] = {}
						xnd_page1[xnd_page1_num][1] = earth_nav[n][1]
						xnd_page1[xnd_page1_num][2] = earth_nav[n][2]
						xnd_page1[xnd_page1_num][3] = earth_nav[n][3]
						xnd_page1[xnd_page1_num][4] = earth_nav[n][4]
					else					-- create xnd_page2
						xnd_page2_num = xnd_page2_num + 1
						xnd_page2[xnd_page2_num] = {}
						xnd_page2[xnd_page2_num][1] = earth_nav[n][1]
						xnd_page2[xnd_page2_num][2] = earth_nav[n][2]
						xnd_page2[xnd_page2_num][3] = earth_nav[n][3]
						xnd_page2[xnd_page2_num][4] = earth_nav[n][4]
					end
				end
			
			end
			
		end
	
	end
end


function B738_calc_navaid()
	
	local page_max = 0
	local page_1 = 0
	local page_2 = 0
	local page_3 = 0
	local page_4 = ""
	local page_5 = 0 	-- x
	local page_6 = 0 	-- y
	local nd_lat = math.rad(ndx_lat)
	local nd_lon = math.rad(ndx_lon)
	local mag_hdg = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	local nd_x2 = 0
	local nd_y2 = 0
	local delta_hdg = 0
	local from0 = 0
	local to0 = 0
	local n = 0
	local nd_hdg = 0
	
	
	if xnd_page == 0 then
		page_max = xnd_page2_num
	else
		page_max = xnd_page1_num
	end
	
	if page_max > 0 then
		
		if B738DR_track_up == 0 then
			mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
		else
			if B738DR_track_up_active == 0 then
				mag_hdg = ndx_ahars_mag_hdg - simDR_mag_variation
			else
				mag_hdg = ndx_mag_hdg - simDR_mag_variation
			end
		end
		
		--if xfirst_time2 == 0 then
		if xfirst_time2 == 1 then
			from0 = 1
			to0 = math.floor(page_max / 2)
		else
			from0 = math.floor(page_max / 2)
			to0 = page_max
		end
		-- if xfirst_time2 == 0 then
			-- from0 = 1
			-- to0 = math.floor(page_max / 8) * 3
		-- else
			-- from0 = (math.floor(page_max / 8) * 3) + 1
			-- to0 = page_max
		-- end
		if to0 == 0 or to0 > page_max then
			to0 = page_max
		end
		if from0 > to0 then
			from0 = to0
		end
		if from0 == 0 then
			from0 = 1
		end
		
		
	
		
		--for n = 1, page_max do 
		for n = from0, to0 do 
			
														   
			
			if xnd_page == 0 then
				--page_1 = xnd_page2[n][1]
				page_2 = xnd_page2[n][2]
				page_3 = xnd_page2[n][3]
				--page_4 = xnd_page2[n][4]
			else
				--page_1 = xnd_page1[n][1]
				page_2 = xnd_page1[n][2]
				page_3 = xnd_page1[n][3]
				--page_4 = xnd_page1[n][4]
			end
		
			
			nd_lat2 = math.rad(page_2)
			nd_lon2 = math.rad(page_3)
			
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			
			
			if nd_dis < 165 then
				
				nd_y2 = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
				nd_x2 = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
				nd_hdg = math.atan2(nd_y2, nd_x2)
				nd_hdg = math.deg(nd_hdg)
				nd_hdg = (nd_hdg + 360) % 360
				
				delta_hdg = (nd_hdg - mag_hdg + 360) % 360
				if delta_hdg > 180 then
					delta_hdg = delta_hdg - 360
				end
				
				if delta_hdg >= 0 and delta_hdg <= 90 then
					-- right
					delta_hdg = 90 - delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y2 = nd_dis * math.sin(delta_hdg)
					nd_x2 = nd_dis * math.cos(delta_hdg)
				elseif delta_hdg < 0 and delta_hdg >= -90 then
					-- left
					delta_hdg = 90 + delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y2 = nd_dis * math.sin(delta_hdg)
					nd_x2 = -nd_dis * math.cos(delta_hdg)
				elseif delta_hdg >= 90 then
					-- right back
					delta_hdg = delta_hdg - 90
					delta_hdg = math.rad(delta_hdg)
					nd_y2 = -nd_dis * math.sin(delta_hdg)
					nd_x2 = nd_dis * math.cos(delta_hdg)
				elseif delta_hdg <= -90 then
					-- left back
					delta_hdg = -90 - delta_hdg
					delta_hdg = math.rad(delta_hdg)
					nd_y2 = -nd_dis * math.sin(delta_hdg)
					nd_x2 = -nd_dis * math.cos(delta_hdg)
				end
				if xnd_page == 0 then
					xnd_page2[n][5] = nd_x2
					xnd_page2[n][6] = nd_y2
					xnd_page2[n][7] = 1
				else
					xnd_page1[n][5] = nd_x2
					xnd_page1[n][6] = nd_y2
					xnd_page1[n][7] = 1
				end
				
			else
				if xnd_page == 0 then
					xnd_page2[n][5] = nd_x2
					xnd_page2[n][6] = nd_y2
					xnd_page2[n][7] = 0
				else
					xnd_page1[n][5] = nd_x2
					xnd_page1[n][6] = nd_y2
					xnd_page1[n][7] = 0
				end
			end
  
		end
  
	end
 
end


function B738_displ_navaid()

	-- local nd_lat = math.rad(ndx_lat) 	--math.rad(simDR_latitude) 
	-- local nd_lon = math.rad(ndx_lon) 	--math.rad(simDR_longitude) 
	local mag_hdg = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	local nd_hdg = 0
	local nn = 0
	local nav_disable = 0
	local nd_on_off = 0
	local nd_corr = 0
	local delta_hdg = 0
	local nd_zoom = 0
	local obj = 49
	local page_max = 0
	local page_1 = 0
	local page_2 = 0
	local page_3 = 0
	local page_4 = ""
	local page_5 = 0
	local page_6 = 0
	local page_7 = 0
	local num_type = 0
	local obj_enable = 0
	local txt_white = ""
	local txt_cyan = ""
	local vor_sel1 = B738DR_vor1_sel_id
	local vor_sel2 = B738DR_vor2_sel_id
	--local wpt_enable = 0
	
	local nav_disable2 = 0
	local obj2 = 49
	local nav_disable3 = 0
	local obj3 = 0
	local nd_x2 = 0
	local nd_y2 = 0
	local nd_on_off2 = 0
	
	nav_disable = 1
	if B738DR_capt_map_mode == 2 then	--and B738DR_capt_exp_map_mode ~= 0 then
		nav_disable = 0
	end
	
	nav_disable2 = 1
	if B738DR_fo_map_mode == 2 then	--and B738DR_fo_exp_map_mode ~= 0 then
		nav_disable2 = 0
	end
	
	nav_disable3 = 1
	if nav_disable == 0 or nav_disable2 == 0 then
		nav_disable3 = 0
	end
	if obj > obj2 then
		obj3 = obj
	else
		obj3 = obj2
	end
	
	if xnd_page == 0 then
		page_max = xnd_page2_num
	else
		page_max = xnd_page1_num
	end
	
	if page_max > 0 then
		
		for n = 1, page_max do 
			
			
			nd_on_off2 = 0
			if xnd_page == 0 then
				page_1 = xnd_page2[n][1]
				--page_2 = xnd_page2[n][2]
				--page_3 = xnd_page2[n][3]
				page_4 = xnd_page2[n][4]
				page_5 = xnd_page2[n][5]
				page_6 = xnd_page2[n][6]
				page_7 = xnd_page2[n][7]
			else
				page_1 = xnd_page1[n][1]
				--page_2 = xnd_page1[n][2]
				--page_3 = xnd_page1[n][3]
				page_4 = xnd_page1[n][4]
				page_5 = xnd_page1[n][5]
				page_6 = xnd_page1[n][6]
				page_7 = xnd_page1[n][7]
			end

			-- nd_lat2 = math.rad(page_2)
			-- nd_lon2 = math.rad(page_3)
			
			-- nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
							 
			
																								   
			
   
			--if nd_dis < 165 and obj3 >= 0 and nav_disable3 == 0 then
			if page_7 > 0 and obj3 >= 0 and nav_disable3 == 0 then
				
				nd_x2 = page_5
				nd_y2 = page_6
				nd_on_off2 = 1
				
				-- nd_y2 = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
				-- nd_x2 = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
				-- nd_hdg = math.atan2(nd_y2, nd_x2)
				-- nd_hdg = math.deg(nd_hdg)
				-- nd_hdg = (nd_hdg + 360) % 360
				
				-- --delta_hdg = ((((nd_hdg - mag_hdg) % 360) + 540) % 360) - 180
				-- delta_hdg = (nd_hdg - mag_hdg + 360) % 360
				-- if delta_hdg > 180 then
					-- delta_hdg = delta_hdg - 360
				-- end
				
				-- if delta_hdg >= 0 and delta_hdg <= 90 then
					-- -- right
					-- nd_on_off2 = 1
					-- delta_hdg = 90 - delta_hdg
					-- delta_hdg = math.rad(delta_hdg)
					-- nd_y2 = nd_dis * math.sin(delta_hdg)
					-- nd_x2 = nd_dis * math.cos(delta_hdg)
				-- elseif delta_hdg < 0 and delta_hdg >= -90 then
					-- -- left
					-- nd_on_off2 = 1
					-- delta_hdg = 90 + delta_hdg
					-- delta_hdg = math.rad(delta_hdg)
					-- nd_y2 = nd_dis * math.sin(delta_hdg)
					-- nd_x2 = -nd_dis * math.cos(delta_hdg)
				-- elseif delta_hdg >= 90 then
					-- -- right back
					-- nd_on_off2 = 1
					-- delta_hdg = delta_hdg - 90
					-- delta_hdg = math.rad(delta_hdg)
					-- nd_y2 = -nd_dis * math.sin(delta_hdg)
					-- nd_x2 = nd_dis * math.cos(delta_hdg)
				-- elseif delta_hdg <= -90 then
					-- -- left back
					-- nd_on_off2 = 1
					-- delta_hdg = -90 - delta_hdg
					-- delta_hdg = math.rad(delta_hdg)
					-- nd_y2 = -nd_dis * math.sin(delta_hdg)
					-- nd_x2 = -nd_dis * math.cos(delta_hdg)
				-- end
				
				-- CAPTAIN
				nd_on_off = nd_on_off2
				if B738DR_efis_map_range_capt == 0 then	-- 5 NM
					nd_zoom = 2
				elseif B738DR_efis_map_range_capt == 1 then	-- 10 NM
					nd_zoom = 1
				elseif B738DR_efis_map_range_capt == 2 then	-- 20 NM
					nd_zoom = 0.5
				elseif B738DR_efis_map_range_capt == 3 then	-- 40 NM
					nd_zoom = 0.25
				elseif B738DR_efis_map_range_capt == 4 then	-- 80 NM
					nd_zoom = 0.125
				elseif B738DR_efis_map_range_capt == 5 then	-- 160 NM
					nd_zoom = 0.0625
				else
					nd_on_off = 0
				end
				
				nd_x = nd_x2 * nd_zoom		-- zoom
				nd_y = nd_y2 * nd_zoom		-- zoom
				if B738DR_capt_map_mode == 3 then
					nd_y = nd_y + 4.1	-- adjust
				end
				
				if nd_x < -8.0 or nd_x > 8.0 then
					nd_on_off = 0
				end
				if nd_y > 11.0 or nd_y < -2 then
					nd_on_off = 0
				end
				
				if nd_on_off == 1 and obj >= 0 and nav_disable == 0 then
					-- -- WAYPOINTS
					-- if wpt_enable == 0 then
						-- if B738DR_fpln_nav_id ~= nil and num_type ~= 5 then
							-- if B738DR_fpln_nav_id == page_4 then
								-- wpt_enable = 1
							-- end
						-- end
					-- end
					
					-- OBJECT
					--if obj >= 0 then	-- max number displayed objects
						B738DR_nd_object_x[obj] = nd_x
						B738DR_nd_object_y[obj] = nd_y
						obj_enable =  0
						num_type = page_1
						if B738DR_efis_vor_on == 1 and num_type < 3 then	-- VOR, VOR DME
							obj_enable = 1
							txt_white = ""
							txt_cyan = page_4
						--end
						elseif B738DR_efis_fix_on == 1 and num_type == 4 then		-- WPT
							obj_enable = 1
							txt_white = page_4
							txt_cyan = ""
						--end
						elseif B738DR_vor1_show == 1 and num_type < 3 and vor_sel1 == page_4 then
							obj_enable = 0
							txt_cyan = ""
							txt_white = ""
						--end
						elseif B738DR_vor2_show == 1 and num_type < 3 and vor_sel2 == page_4 then
							obj_enable = 0
							txt_cyan = ""
							txt_white = ""
						--end
						elseif B738DR_efis_map_range_capt > 2 and num_type == 4 then	-- FIX to zoom 20NM
							obj_enable = 0
							txt_cyan = ""
							txt_white = ""
						--end
						elseif B738DR_fpln_nav_id ~= nil and num_type ~= 5 then
							if B738DR_fpln_nav_id == page_4 then
								obj_enable = 0
								txt_cyan = ""
								txt_white = ""
							end
						end
						if obj_enable == 1 then
							if obj == 0 then
								B738DR_nd_object_id00 = txt_cyan
								B738DR_nd_object_id00w = txt_white
								B738DR_nd_object_type00 = num_type
							elseif obj == 1 then
								B738DR_nd_object_id01 = txt_cyan
								B738DR_nd_object_id01w = txt_white
								B738DR_nd_object_type01 = num_type
							elseif obj == 2 then
								B738DR_nd_object_id02 = txt_cyan
								B738DR_nd_object_id02w = txt_white
								B738DR_nd_object_type02 = num_type
							elseif obj == 3 then
								B738DR_nd_object_id03 = txt_cyan
								B738DR_nd_object_id03w = txt_white
								B738DR_nd_object_type03 = num_type
							elseif obj == 4 then
								B738DR_nd_object_id04 = txt_cyan
								B738DR_nd_object_id04w = txt_white
								B738DR_nd_object_type04 = num_type
							elseif obj == 5 then
								B738DR_nd_object_id05 = txt_cyan
								B738DR_nd_object_id05w = txt_white
								B738DR_nd_object_type05 = num_type
							elseif obj == 6 then
								B738DR_nd_object_id06 = txt_cyan
								B738DR_nd_object_id06w = txt_white
								B738DR_nd_object_type06 = num_type
							elseif obj == 7 then
								B738DR_nd_object_id07 = txt_cyan
								B738DR_nd_object_id07w = txt_white
								B738DR_nd_object_type07 = num_type
							elseif obj == 8 then
								B738DR_nd_object_id08 = txt_cyan
								B738DR_nd_object_id08w = txt_white
								B738DR_nd_object_type08 = num_type
							elseif obj == 9 then
								B738DR_nd_object_id09 = txt_cyan
								B738DR_nd_object_id09w = txt_white
								B738DR_nd_object_type09 = num_type
							elseif obj == 10 then
								B738DR_nd_object_id10 = txt_cyan
								B738DR_nd_object_id10w = txt_white
								B738DR_nd_object_type10 = num_type
							elseif obj == 11 then
								B738DR_nd_object_id11 = txt_cyan
								B738DR_nd_object_id11w = txt_white
								B738DR_nd_object_type11 = num_type
							elseif obj == 12 then
								B738DR_nd_object_id12 = txt_cyan
								B738DR_nd_object_id12w = txt_white
								B738DR_nd_object_type12 = num_type
							elseif obj == 13 then
								B738DR_nd_object_id13 = txt_cyan
								B738DR_nd_object_id13w = txt_white
								B738DR_nd_object_type13 = num_type
							elseif obj == 14 then
								B738DR_nd_object_id14 = txt_cyan
								B738DR_nd_object_id14w = txt_white
								B738DR_nd_object_type14 = num_type
							elseif obj == 15 then
								B738DR_nd_object_id15 = txt_cyan
								B738DR_nd_object_id15w = txt_white
								B738DR_nd_object_type15 = num_type
							elseif obj == 16 then
								B738DR_nd_object_id16 = txt_cyan
								B738DR_nd_object_id16w = txt_white
								B738DR_nd_object_type16 = num_type
							elseif obj == 17 then
								B738DR_nd_object_id17 = txt_cyan
								B738DR_nd_object_id17w = txt_white
								B738DR_nd_object_type17 = num_type
							elseif obj == 18 then
								B738DR_nd_object_id18 = txt_cyan
								B738DR_nd_object_id18w = txt_white
								B738DR_nd_object_type18 = num_type
							elseif obj == 19 then
								B738DR_nd_object_id19 = txt_cyan
								B738DR_nd_object_id19w = txt_white
								B738DR_nd_object_type19 = num_type
							elseif obj == 20 then
								B738DR_nd_object_id20 = txt_cyan
								B738DR_nd_object_id20w = txt_white
								B738DR_nd_object_type20 = num_type
							elseif obj == 21 then
								B738DR_nd_object_id21 = txt_cyan
								B738DR_nd_object_id21w = txt_white
								B738DR_nd_object_type21 = num_type
							elseif obj == 22 then
								B738DR_nd_object_id22 = txt_cyan
								B738DR_nd_object_id22w = txt_white
								B738DR_nd_object_type22 = num_type
							elseif obj == 23 then
								B738DR_nd_object_id23 = txt_cyan
								B738DR_nd_object_id23w = txt_white
								B738DR_nd_object_type23 = num_type
							elseif obj == 24 then
								B738DR_nd_object_id24 = txt_cyan
								B738DR_nd_object_id24w = txt_white
								B738DR_nd_object_type24 = num_type
							elseif obj == 25 then
								B738DR_nd_object_id25 = txt_cyan
								B738DR_nd_object_id25w = txt_white
								B738DR_nd_object_type25 = num_type
							elseif obj == 26 then
								B738DR_nd_object_id26 = txt_cyan
								B738DR_nd_object_id26w = txt_white
								B738DR_nd_object_type26 = num_type
							elseif obj == 27 then
								B738DR_nd_object_id27 = txt_cyan
								B738DR_nd_object_id27w = txt_white
								B738DR_nd_object_type27 = num_type
							elseif obj == 28 then
								B738DR_nd_object_id28 = txt_cyan
								B738DR_nd_object_id28w = txt_white
								B738DR_nd_object_type28 = num_type
							elseif obj == 29 then
								B738DR_nd_object_id29 = txt_cyan
								B738DR_nd_object_id29w = txt_white
								B738DR_nd_object_type29 = num_type
							elseif obj == 30 then
								B738DR_nd_object_id30 = txt_cyan
								B738DR_nd_object_id30w = txt_white
								B738DR_nd_object_type30 = num_type
							elseif obj == 31 then
								B738DR_nd_object_id31 = txt_cyan
								B738DR_nd_object_id31w = txt_white
								B738DR_nd_object_type31 = num_type
							elseif obj == 32 then
								B738DR_nd_object_id32 = txt_cyan
								B738DR_nd_object_id32w = txt_white
								B738DR_nd_object_type32 = num_type
							elseif obj == 33 then
								B738DR_nd_object_id33 = txt_cyan
								B738DR_nd_object_id33w = txt_white
								B738DR_nd_object_type33 = num_type
							elseif obj == 34 then
								B738DR_nd_object_id34 = txt_cyan
								B738DR_nd_object_id34w = txt_white
								B738DR_nd_object_type34 = num_type
							elseif obj == 35 then
								B738DR_nd_object_id35 = txt_cyan
								B738DR_nd_object_id35w = txt_white
								B738DR_nd_object_type35 = num_type
							elseif obj == 36 then
								B738DR_nd_object_id36 = txt_cyan
								B738DR_nd_object_id36w = txt_white
								B738DR_nd_object_type36 = num_type
							elseif obj == 37 then
								B738DR_nd_object_id37 = txt_cyan
								B738DR_nd_object_id37w = txt_white
								B738DR_nd_object_type37 = num_type
							elseif obj == 38 then
								B738DR_nd_object_id38 = txt_cyan
								B738DR_nd_object_id38w = txt_white
								B738DR_nd_object_type38 = num_type
							elseif obj == 39 then
								B738DR_nd_object_id39 = txt_cyan
								B738DR_nd_object_id39w = txt_white
								B738DR_nd_object_type39 = num_type
							elseif obj == 40 then
								B738DR_nd_object_id40 = txt_cyan
								B738DR_nd_object_id40w = txt_white
								B738DR_nd_object_type40 = num_type
							elseif obj == 41 then
								B738DR_nd_object_id41 = txt_cyan
								B738DR_nd_object_id41w = txt_white
								B738DR_nd_object_type41 = num_type
							elseif obj == 42 then
								B738DR_nd_object_id42 = txt_cyan
								B738DR_nd_object_id42w = txt_white
								B738DR_nd_object_type42 = num_type
							elseif obj == 43 then
								B738DR_nd_object_id43 = txt_cyan
								B738DR_nd_object_id43w = txt_white
								B738DR_nd_object_type43 = num_type
							elseif obj == 44 then
								B738DR_nd_object_id44 = txt_cyan
								B738DR_nd_object_id44w = txt_white
								B738DR_nd_object_type44 = num_type
							elseif obj == 45 then
								B738DR_nd_object_id45 = txt_cyan
								B738DR_nd_object_id45w = txt_white
								B738DR_nd_object_type45 = num_type
							elseif obj == 46 then
								B738DR_nd_object_id46 = txt_cyan
								B738DR_nd_object_id46w = txt_white
								B738DR_nd_object_type46 = num_type
							elseif obj == 47 then
								B738DR_nd_object_id47 = txt_cyan
								B738DR_nd_object_id47w = txt_white
								B738DR_nd_object_type47 = num_type
							elseif obj == 48 then
								B738DR_nd_object_id48 = txt_cyan
								B738DR_nd_object_id48w = txt_white
								B738DR_nd_object_type48 = num_type
							elseif obj == 49 then
								B738DR_nd_object_id49 = txt_cyan
								B738DR_nd_object_id49w = txt_white
								B738DR_nd_object_type49 = num_type
							end
							obj = obj - 1
						end
					--end
				end
				
				-- FIRST OFFICER
				nd_on_off = nd_on_off2
				if B738DR_efis_map_range_fo == 0 then	-- 5 NM
					nd_zoom = 2
				elseif B738DR_efis_map_range_fo == 1 then	-- 10 NM
					nd_zoom = 1
				elseif B738DR_efis_map_range_fo == 2 then	-- 20 NM
					nd_zoom = 0.5
				elseif B738DR_efis_map_range_fo == 3 then	-- 40 NM
					nd_zoom = 0.25
				elseif B738DR_efis_map_range_fo == 4 then	-- 80 NM
					nd_zoom = 0.125
				elseif B738DR_efis_map_range_fo == 5 then	-- 160 NM
					nd_zoom = 0.0625
				else
					nd_on_off = 0
				end
				
				nd_x = nd_x2 * nd_zoom		-- zoom
				nd_y = nd_y2 * nd_zoom		-- zoom
				if B738DR_fo_map_mode == 3 then
					nd_y = nd_y + 4.1	-- adjust
				end
				
				if nd_x < -8.0 or nd_x > 8.0 then
					nd_on_off = 0
				end
				if nd_y > 11.0 or nd_y < -2 then
					nd_on_off = 0
				end
				
				if nd_on_off == 1 and obj2 >= 0 and nav_disable2 == 0 then
					-- -- WAYPOINTS
					-- if wpt_enable == 0 then
						-- if B738DR_fpln_nav_id ~= nil and num_type ~= 5 then
							-- if B738DR_fpln_nav_id == page_4 then
								-- wpt_enable = 1
							-- end
						-- end
					-- end
					
					-- OBJECT
					--if obj >= 0 then	-- max number displayed objects
						B738DR_nd_object_fo_x[obj2] = nd_x
						B738DR_nd_object_fo_y[obj2] = nd_y
						obj_enable =  0
						num_type = page_1
						if B738DR_efis_fo_vor_on == 1 and num_type < 3 then	-- VOR, VOR DME
							obj_enable = 1
							txt_white = ""
							txt_cyan = page_4
						--end
						elseif B738DR_efis_fo_fix_on == 1 and num_type == 4 then		-- WPT
							obj_enable = 1
							txt_white = page_4
							txt_cyan = ""
						--end
						elseif B738DR_vor1_copilot_show == 1 and num_type < 3 and vor_sel1 == page_4 then
							obj_enable = 0
							txt_cyan = ""
							txt_white = ""
						--end
						elseif B738DR_vor2_copilot_show == 1 and num_type < 3 and vor_sel2 == page_4 then
							obj_enable = 0
							txt_cyan = ""
							txt_white = ""
						--end
						elseif B738DR_efis_map_range_fo > 2 and num_type == 4 then	-- FIX to zoom 20NM
							obj_enable = 0
							txt_cyan = ""
							txt_white = ""
						--end
						elseif B738DR_fpln_nav_id ~= nil and num_type ~= 5 then
							if B738DR_fpln_nav_id == page_4 then
								obj_enable = 0
								txt_cyan = ""
								txt_white = ""
							end
						end
						if obj_enable == 1 then
							if obj2 == 0 then
								B738DR_nd_object_fo_id00 = txt_cyan
								B738DR_nd_object_fo_id00w = txt_white
								B738DR_nd_object_fo_type00 = num_type
							elseif obj2 == 1 then
								B738DR_nd_object_fo_id01 = txt_cyan
								B738DR_nd_object_fo_id01w = txt_white
								B738DR_nd_object_fo_type01 = num_type
							elseif obj2 == 2 then
								B738DR_nd_object_fo_id02 = txt_cyan
								B738DR_nd_object_fo_id02w = txt_white
								B738DR_nd_object_fo_type02 = num_type
							elseif obj2 == 3 then
								B738DR_nd_object_fo_id03 = txt_cyan
								B738DR_nd_object_fo_id03w = txt_white
								B738DR_nd_object_fo_type03 = num_type
							elseif obj2 == 4 then
								B738DR_nd_object_fo_id04 = txt_cyan
								B738DR_nd_object_fo_id04w = txt_white
								B738DR_nd_object_fo_type04 = num_type
							elseif obj2 == 5 then
								B738DR_nd_object_fo_id05 = txt_cyan
								B738DR_nd_object_fo_id05w = txt_white
								B738DR_nd_object_fo_type05 = num_type
							elseif obj2 == 6 then
								B738DR_nd_object_fo_id06 = txt_cyan
								B738DR_nd_object_fo_id06w = txt_white
								B738DR_nd_object_fo_type06 = num_type
							elseif obj2 == 7 then
								B738DR_nd_object_fo_id07 = txt_cyan
								B738DR_nd_object_fo_id07w = txt_white
								B738DR_nd_object_fo_type07 = num_type
							elseif obj2 == 8 then
								B738DR_nd_object_fo_id08 = txt_cyan
								B738DR_nd_object_fo_id08w = txt_white
								B738DR_nd_object_fo_type08 = num_type
							elseif obj2 == 9 then
								B738DR_nd_object_fo_id09 = txt_cyan
								B738DR_nd_object_fo_id09w = txt_white
								B738DR_nd_object_fo_type09 = num_type
							elseif obj2 == 10 then
								B738DR_nd_object_fo_id10 = txt_cyan
								B738DR_nd_object_fo_id10w = txt_white
								B738DR_nd_object_fo_type10 = num_type
							elseif obj2 == 11 then
								B738DR_nd_object_fo_id11 = txt_cyan
								B738DR_nd_object_fo_id11w = txt_white
								B738DR_nd_object_fo_type11 = num_type
							elseif obj2 == 12 then
								B738DR_nd_object_fo_id12 = txt_cyan
								B738DR_nd_object_fo_id12w = txt_white
								B738DR_nd_object_fo_type12 = num_type
							elseif obj2 == 13 then
								B738DR_nd_object_fo_id13 = txt_cyan
								B738DR_nd_object_fo_id13w = txt_white
								B738DR_nd_object_fo_type13 = num_type
							elseif obj2 == 14 then
								B738DR_nd_object_fo_id14 = txt_cyan
								B738DR_nd_object_fo_id14w = txt_white
								B738DR_nd_object_fo_type14 = num_type
							elseif obj2 == 15 then
								B738DR_nd_object_fo_id15 = txt_cyan
								B738DR_nd_object_fo_id15w = txt_white
								B738DR_nd_object_fo_type15 = num_type
							elseif obj2 == 16 then
								B738DR_nd_object_fo_id16 = txt_cyan
								B738DR_nd_object_fo_id16w = txt_white
								B738DR_nd_object_fo_type16 = num_type
							elseif obj2 == 17 then
								B738DR_nd_object_fo_id17 = txt_cyan
								B738DR_nd_object_fo_id17w = txt_white
								B738DR_nd_object_fo_type17 = num_type
							elseif obj2 == 18 then
								B738DR_nd_object_fo_id18 = txt_cyan
								B738DR_nd_object_fo_id18w = txt_white
								B738DR_nd_object_fo_type18 = num_type
							elseif obj2 == 19 then
								B738DR_nd_object_fo_id19 = txt_cyan
								B738DR_nd_object_fo_id19w = txt_white
								B738DR_nd_object_fo_type19 = num_type
							elseif obj2 == 20 then
								B738DR_nd_object_fo_id20 = txt_cyan
								B738DR_nd_object_fo_id20w = txt_white
								B738DR_nd_object_fo_type20 = num_type
							elseif obj2 == 21 then
								B738DR_nd_object_fo_id21 = txt_cyan
								B738DR_nd_object_fo_id21w = txt_white
								B738DR_nd_object_fo_type21 = num_type
							elseif obj2 == 22 then
								B738DR_nd_object_fo_id22 = txt_cyan
								B738DR_nd_object_fo_id22w = txt_white
								B738DR_nd_object_fo_type22 = num_type
							elseif obj2 == 23 then
								B738DR_nd_object_fo_id23 = txt_cyan
								B738DR_nd_object_fo_id23w = txt_white
								B738DR_nd_object_fo_type23 = num_type
							elseif obj2 == 24 then
								B738DR_nd_object_fo_id24 = txt_cyan
								B738DR_nd_object_fo_id24w = txt_white
								B738DR_nd_object_fo_type24 = num_type
							elseif obj2 == 25 then
								B738DR_nd_object_fo_id25 = txt_cyan
								B738DR_nd_object_fo_id25w = txt_white
								B738DR_nd_object_fo_type25 = num_type
							elseif obj2 == 26 then
								B738DR_nd_object_fo_id26 = txt_cyan
								B738DR_nd_object_fo_id26w = txt_white
								B738DR_nd_object_fo_type26 = num_type
							elseif obj2 == 27 then
								B738DR_nd_object_fo_id27 = txt_cyan
								B738DR_nd_object_fo_id27w = txt_white
								B738DR_nd_object_fo_type27 = num_type
							elseif obj2 == 28 then
								B738DR_nd_object_fo_id28 = txt_cyan
								B738DR_nd_object_fo_id28w = txt_white
								B738DR_nd_object_fo_type28 = num_type
							elseif obj2 == 29 then
								B738DR_nd_object_fo_id29 = txt_cyan
								B738DR_nd_object_fo_id29w = txt_white
								B738DR_nd_object_fo_type29 = num_type
							elseif obj2 == 30 then
								B738DR_nd_object_fo_id30 = txt_cyan
								B738DR_nd_object_fo_id30w = txt_white
								B738DR_nd_object_fo_type30 = num_type
							elseif obj2 == 31 then
								B738DR_nd_object_fo_id31 = txt_cyan
								B738DR_nd_object_fo_id31w = txt_white
								B738DR_nd_object_fo_type31 = num_type
							elseif obj2 == 32 then
								B738DR_nd_object_fo_id32 = txt_cyan
								B738DR_nd_object_fo_id32w = txt_white
								B738DR_nd_object_fo_type32 = num_type
							elseif obj2 == 33 then
								B738DR_nd_object_fo_id33 = txt_cyan
								B738DR_nd_object_fo_id33w = txt_white
								B738DR_nd_object_fo_type33 = num_type
							elseif obj2 == 34 then
								B738DR_nd_object_fo_id34 = txt_cyan
								B738DR_nd_object_fo_id34w = txt_white
								B738DR_nd_object_fo_type34 = num_type
							elseif obj2 == 35 then
								B738DR_nd_object_fo_id35 = txt_cyan
								B738DR_nd_object_fo_id35w = txt_white
								B738DR_nd_object_fo_type35 = num_type
							elseif obj2 == 36 then
								B738DR_nd_object_fo_id36 = txt_cyan
								B738DR_nd_object_fo_id36w = txt_white
								B738DR_nd_object_fo_type36 = num_type
							elseif obj2 == 37 then
								B738DR_nd_object_fo_id37 = txt_cyan
								B738DR_nd_object_fo_id37w = txt_white
								B738DR_nd_object_fo_type37 = num_type
							elseif obj2 == 38 then
								B738DR_nd_object_fo_id38 = txt_cyan
								B738DR_nd_object_fo_id38w = txt_white
								B738DR_nd_object_fo_type38 = num_type
							elseif obj2 == 39 then
								B738DR_nd_object_fo_id39 = txt_cyan
								B738DR_nd_object_fo_id39w = txt_white
								B738DR_nd_object_fo_type39 = num_type
							elseif obj2 == 40 then
								B738DR_nd_object_fo_id40 = txt_cyan
								B738DR_nd_object_fo_id40w = txt_white
								B738DR_nd_object_fo_type40 = num_type
							elseif obj2 == 41 then
								B738DR_nd_object_fo_id41 = txt_cyan
								B738DR_nd_object_fo_id41w = txt_white
								B738DR_nd_object_fo_type41 = num_type
							elseif obj2 == 42 then
								B738DR_nd_object_fo_id42 = txt_cyan
								B738DR_nd_object_fo_id42w = txt_white
								B738DR_nd_object_fo_type42 = num_type
							elseif obj2 == 43 then
								B738DR_nd_object_fo_id43 = txt_cyan
								B738DR_nd_object_fo_id43w = txt_white
								B738DR_nd_object_fo_type43 = num_type
							elseif obj2 == 44 then
								B738DR_nd_object_fo_id44 = txt_cyan
								B738DR_nd_object_fo_id44w = txt_white
								B738DR_nd_object_fo_type44 = num_type
							elseif obj2 == 45 then
								B738DR_nd_object_fo_id45 = txt_cyan
								B738DR_nd_object_fo_id45w = txt_white
								B738DR_nd_object_fo_type45 = num_type
							elseif obj2 == 46 then
								B738DR_nd_object_fo_id46 = txt_cyan
								B738DR_nd_object_fo_id46w = txt_white
								B738DR_nd_object_fo_type46 = num_type
							elseif obj2 == 47 then
								B738DR_nd_object_fo_id47 = txt_cyan
								B738DR_nd_object_fo_id47w = txt_white
								B738DR_nd_object_fo_type47 = num_type
							elseif obj2 == 48 then
								B738DR_nd_object_fo_id48 = txt_cyan
								B738DR_nd_object_fo_id48w = txt_white
								B738DR_nd_object_fo_type48 = num_type
							elseif obj2 == 49 then
								B738DR_nd_object_fo_id49 = txt_cyan
								B738DR_nd_object_fo_id49w = txt_white
								B738DR_nd_object_fo_type49 = num_type
							end
							obj2 = obj2 - 1
						end
					--end
				end
				
			end
		end
	
	end
	
	nd_clr_navaid(obj, obj2)
	
	-- if obj >= 0 then
		-- for n = obj, 0, -1 do
			-- if n == 0 then
				-- B738DR_nd_object_type00 = 0
				-- B738DR_nd_object_id00 = ""
				-- B738DR_nd_object_id00w = ""
			-- elseif n == 1 then
				-- B738DR_nd_object_type01 = 0
				-- B738DR_nd_object_id01 = ""
				-- B738DR_nd_object_id01w = ""
			-- elseif n == 2 then
				-- B738DR_nd_object_type02 = 0
				-- B738DR_nd_object_id02 = ""
				-- B738DR_nd_object_id02w = ""
			-- elseif n == 3 then
				-- B738DR_nd_object_type03 = 0
				-- B738DR_nd_object_id03 = ""
				-- B738DR_nd_object_id03w = ""
			-- elseif n == 4 then
				-- B738DR_nd_object_type04 = 0
				-- B738DR_nd_object_id04 = ""
				-- B738DR_nd_object_id04w = ""
			-- elseif n == 5 then
				-- B738DR_nd_object_type05 = 0
				-- B738DR_nd_object_id05 = ""
				-- B738DR_nd_object_id05w = ""
			-- elseif n == 6 then
				-- B738DR_nd_object_type06 = 0
				-- B738DR_nd_object_id06 = ""
				-- B738DR_nd_object_id06w = ""
			-- elseif n == 7 then
				-- B738DR_nd_object_type07 = 0
				-- B738DR_nd_object_id07 = ""
				-- B738DR_nd_object_id07w = ""
			-- elseif n == 8 then
				-- B738DR_nd_object_type08 = 0
				-- B738DR_nd_object_id08 = ""
				-- B738DR_nd_object_id08w = ""
			-- elseif n == 9 then
				-- B738DR_nd_object_type09 = 0
				-- B738DR_nd_object_id09 = ""
				-- B738DR_nd_object_id09w = ""
			-- elseif n == 10 then
				-- B738DR_nd_object_type10 = 0
				-- B738DR_nd_object_id10 = ""
				-- B738DR_nd_object_id10w = ""
			-- elseif n == 11 then
				-- B738DR_nd_object_type11 = 0
				-- B738DR_nd_object_id11 = ""
				-- B738DR_nd_object_id11w = ""
			-- elseif n == 12 then
				-- B738DR_nd_object_type12 = 0
				-- B738DR_nd_object_id12 = ""
				-- B738DR_nd_object_id12w = ""
			-- elseif n == 13 then
				-- B738DR_nd_object_type13 = 0
				-- B738DR_nd_object_id13 = ""
				-- B738DR_nd_object_id13w = ""
			-- elseif n == 14 then
				-- B738DR_nd_object_type14 = 0
				-- B738DR_nd_object_id14 = ""
				-- B738DR_nd_object_id14w = ""
			-- elseif n == 15 then
				-- B738DR_nd_object_type15 = 0
				-- B738DR_nd_object_id15 = ""
				-- B738DR_nd_object_id15w = ""
			-- elseif n == 16 then
				-- B738DR_nd_object_type16 = 0
				-- B738DR_nd_object_id16 = ""
				-- B738DR_nd_object_id16w = ""
			-- elseif n == 17 then
				-- B738DR_nd_object_type17 = 0
				-- B738DR_nd_object_id17 = ""
				-- B738DR_nd_object_id17w = ""
			-- elseif n == 18 then
				-- B738DR_nd_object_type18 = 0
				-- B738DR_nd_object_id18 = ""
				-- B738DR_nd_object_id18w = ""
			-- elseif n == 19 then
				-- B738DR_nd_object_type19 = 0
				-- B738DR_nd_object_id19 = ""
				-- B738DR_nd_object_id19w = ""
			-- elseif n == 20 then
				-- B738DR_nd_object_type20 = 0
				-- B738DR_nd_object_id20 = ""
				-- B738DR_nd_object_id20w = ""
			-- elseif n == 21 then
				-- B738DR_nd_object_type21 = 0
				-- B738DR_nd_object_id21 = ""
				-- B738DR_nd_object_id21w = ""
			-- elseif n == 22 then
				-- B738DR_nd_object_type22 = 0
				-- B738DR_nd_object_id22 = ""
				-- B738DR_nd_object_id22w = ""
			-- elseif n == 23 then
				-- B738DR_nd_object_type23 = 0
				-- B738DR_nd_object_id23 = ""
				-- B738DR_nd_object_id23w = ""
			-- elseif n == 24 then
				-- B738DR_nd_object_type24 = 0
				-- B738DR_nd_object_id24 = ""
				-- B738DR_nd_object_id24w = ""
			-- elseif n == 25 then
				-- B738DR_nd_object_type25 = 0
				-- B738DR_nd_object_id25 = ""
				-- B738DR_nd_object_id25w = ""
			-- elseif n == 26 then
				-- B738DR_nd_object_type26 = 0
				-- B738DR_nd_object_id26 = ""
				-- B738DR_nd_object_id26w = ""
			-- elseif n == 27 then
				-- B738DR_nd_object_type27 = 0
				-- B738DR_nd_object_id27 = ""
				-- B738DR_nd_object_id27w = ""
			-- elseif n == 28 then
				-- B738DR_nd_object_type28 = 0
				-- B738DR_nd_object_id28 = ""
				-- B738DR_nd_object_id28w = ""
			-- elseif n == 29 then
				-- B738DR_nd_object_type29 = 0
				-- B738DR_nd_object_id29 = ""
				-- B738DR_nd_object_id29w = ""
			-- elseif n == 30 then
				-- B738DR_nd_object_type30 = 0
				-- B738DR_nd_object_id30 = ""
				-- B738DR_nd_object_id30w = ""
			-- elseif n == 31 then
				-- B738DR_nd_object_type31 = 0
				-- B738DR_nd_object_id31 = ""
				-- B738DR_nd_object_id31w = ""
			-- elseif n == 32 then
				-- B738DR_nd_object_type32 = 0
				-- B738DR_nd_object_id32 = ""
				-- B738DR_nd_object_id32w = ""
			-- elseif n == 33 then
				-- B738DR_nd_object_type33 = 0
				-- B738DR_nd_object_id33 = ""
				-- B738DR_nd_object_id33w = ""
			-- elseif n == 34 then
				-- B738DR_nd_object_type34 = 0
				-- B738DR_nd_object_id34 = ""
				-- B738DR_nd_object_id34w = ""
			-- elseif n == 35 then
				-- B738DR_nd_object_type35 = 0
				-- B738DR_nd_object_id35 = ""
				-- B738DR_nd_object_id35w = ""
			-- elseif n == 36 then
				-- B738DR_nd_object_type36 = 0
				-- B738DR_nd_object_id36 = ""
				-- B738DR_nd_object_id36w = ""
			-- elseif n == 37 then
				-- B738DR_nd_object_type37 = 0
				-- B738DR_nd_object_id37 = ""
				-- B738DR_nd_object_id37w = ""
			-- elseif n == 38 then
				-- B738DR_nd_object_type38 = 0
				-- B738DR_nd_object_id38 = ""
				-- B738DR_nd_object_id38w = ""
			-- elseif n == 39 then
				-- B738DR_nd_object_type39 = 0
				-- B738DR_nd_object_id39 = ""
				-- B738DR_nd_object_id39w = ""
			-- elseif n == 40 then
				-- B738DR_nd_object_type40 = 0
				-- B738DR_nd_object_id40 = ""
				-- B738DR_nd_object_id40w = ""
			-- elseif n == 41 then
				-- B738DR_nd_object_type41 = 0
				-- B738DR_nd_object_id41 = ""
				-- B738DR_nd_object_id41w = ""
			-- elseif n == 42 then
				-- B738DR_nd_object_type42 = 0
				-- B738DR_nd_object_id42 = ""
				-- B738DR_nd_object_id42w = ""
			-- elseif n == 43 then
				-- B738DR_nd_object_type43 = 0
				-- B738DR_nd_object_id43 = ""
				-- B738DR_nd_object_id43w = ""
			-- elseif n == 44 then
				-- B738DR_nd_object_type44 = 0
				-- B738DR_nd_object_id44 = ""
				-- B738DR_nd_object_id44w = ""
			-- elseif n == 45 then
				-- B738DR_nd_object_type45 = 0
				-- B738DR_nd_object_id45 = ""
				-- B738DR_nd_object_id45w = ""
			-- elseif n == 46 then
				-- B738DR_nd_object_type46 = 0
				-- B738DR_nd_object_id46 = ""
				-- B738DR_nd_object_id46w = ""
			-- elseif n == 47 then
				-- B738DR_nd_object_type47 = 0
				-- B738DR_nd_object_id47 = ""
				-- B738DR_nd_object_id47w = ""
			-- elseif n == 48 then
				-- B738DR_nd_object_type48 = 0
				-- B738DR_nd_object_id48 = ""
				-- B738DR_nd_object_id48w = ""
			-- elseif n == 49 then
				-- B738DR_nd_object_type49 = 0
				-- B738DR_nd_object_id49 = ""
				-- B738DR_nd_object_id49w = ""
			-- end
		-- end
	-- end
	
	-- if obj2 >= 0 then
		-- for n = obj2, 0, -1 do
			-- if n == 0 then
				-- B738DR_nd_object_fo_type00 = 0
				-- B738DR_nd_object_fo_id00 = ""
				-- B738DR_nd_object_fo_id00w = ""
			-- elseif n == 1 then
				-- B738DR_nd_object_fo_type01 = 0
				-- B738DR_nd_object_fo_id01 = ""
				-- B738DR_nd_object_fo_id01w = ""
			-- elseif n == 2 then
				-- B738DR_nd_object_fo_type02 = 0
				-- B738DR_nd_object_fo_id02 = ""
				-- B738DR_nd_object_fo_id02w = ""
			-- elseif n == 3 then
				-- B738DR_nd_object_fo_type03 = 0
				-- B738DR_nd_object_fo_id03 = ""
				-- B738DR_nd_object_fo_id03w = ""
			-- elseif n == 4 then
				-- B738DR_nd_object_fo_type04 = 0
				-- B738DR_nd_object_fo_id04 = ""
				-- B738DR_nd_object_fo_id04w = ""
			-- elseif n == 5 then
				-- B738DR_nd_object_fo_type05 = 0
				-- B738DR_nd_object_fo_id05 = ""
				-- B738DR_nd_object_fo_id05w = ""
			-- elseif n == 6 then
				-- B738DR_nd_object_fo_type06 = 0
				-- B738DR_nd_object_fo_id06 = ""
				-- B738DR_nd_object_fo_id06w = ""
			-- elseif n == 7 then
				-- B738DR_nd_object_fo_type07 = 0
				-- B738DR_nd_object_fo_id07 = ""
				-- B738DR_nd_object_fo_id07w = ""
			-- elseif n == 8 then
				-- B738DR_nd_object_fo_type08 = 0
				-- B738DR_nd_object_fo_id08 = ""
				-- B738DR_nd_object_fo_id08w = ""
			-- elseif n == 9 then
				-- B738DR_nd_object_fo_type09 = 0
				-- B738DR_nd_object_fo_id09 = ""
				-- B738DR_nd_object_fo_id09w = ""
			-- elseif n == 10 then
				-- B738DR_nd_object_fo_type10 = 0
				-- B738DR_nd_object_fo_id10 = ""
				-- B738DR_nd_object_fo_id10w = ""
			-- elseif n == 11 then
				-- B738DR_nd_object_fo_type11 = 0
				-- B738DR_nd_object_fo_id11 = ""
				-- B738DR_nd_object_fo_id11w = ""
			-- elseif n == 12 then
				-- B738DR_nd_object_fo_type12 = 0
				-- B738DR_nd_object_fo_id12 = ""
				-- B738DR_nd_object_fo_id12w = ""
			-- elseif n == 13 then
				-- B738DR_nd_object_fo_type13 = 0
				-- B738DR_nd_object_fo_id13 = ""
				-- B738DR_nd_object_fo_id13w = ""
			-- elseif n == 14 then
				-- B738DR_nd_object_fo_type14 = 0
				-- B738DR_nd_object_fo_id14 = ""
				-- B738DR_nd_object_fo_id14w = ""
			-- elseif n == 15 then
				-- B738DR_nd_object_fo_type15 = 0
				-- B738DR_nd_object_fo_id15 = ""
				-- B738DR_nd_object_fo_id15w = ""
			-- elseif n == 16 then
				-- B738DR_nd_object_fo_type16 = 0
				-- B738DR_nd_object_fo_id16 = ""
				-- B738DR_nd_object_fo_id16w = ""
			-- elseif n == 17 then
				-- B738DR_nd_object_fo_type17 = 0
				-- B738DR_nd_object_fo_id17 = ""
				-- B738DR_nd_object_fo_id17w = ""
			-- elseif n == 18 then
				-- B738DR_nd_object_fo_type18 = 0
				-- B738DR_nd_object_fo_id18 = ""
				-- B738DR_nd_object_fo_id18w = ""
			-- elseif n == 19 then
				-- B738DR_nd_object_fo_type19 = 0
				-- B738DR_nd_object_fo_id19 = ""
				-- B738DR_nd_object_fo_id19w = ""
			-- elseif n == 20 then
				-- B738DR_nd_object_fo_type20 = 0
				-- B738DR_nd_object_fo_id20 = ""
				-- B738DR_nd_object_fo_id20w = ""
			-- elseif n == 21 then
				-- B738DR_nd_object_fo_type21 = 0
				-- B738DR_nd_object_fo_id21 = ""
				-- B738DR_nd_object_fo_id21w = ""
			-- elseif n == 22 then
				-- B738DR_nd_object_fo_type22 = 0
				-- B738DR_nd_object_fo_id22 = ""
				-- B738DR_nd_object_fo_id22w = ""
			-- elseif n == 23 then
				-- B738DR_nd_object_fo_type23 = 0
				-- B738DR_nd_object_fo_id23 = ""
				-- B738DR_nd_object_fo_id23w = ""
			-- elseif n == 24 then
				-- B738DR_nd_object_fo_type24 = 0
				-- B738DR_nd_object_fo_id24 = ""
				-- B738DR_nd_object_fo_id24w = ""
			-- elseif n == 25 then
				-- B738DR_nd_object_fo_type25 = 0
				-- B738DR_nd_object_fo_id25 = ""
				-- B738DR_nd_object_fo_id25w = ""
			-- elseif n == 26 then
				-- B738DR_nd_object_fo_type26 = 0
				-- B738DR_nd_object_fo_id26 = ""
				-- B738DR_nd_object_fo_id26w = ""
			-- elseif n == 27 then
				-- B738DR_nd_object_fo_type27 = 0
				-- B738DR_nd_object_fo_id27 = ""
				-- B738DR_nd_object_fo_id27w = ""
			-- elseif n == 28 then
				-- B738DR_nd_object_fo_type28 = 0
				-- B738DR_nd_object_fo_id28 = ""
				-- B738DR_nd_object_fo_id28w = ""
			-- elseif n == 29 then
				-- B738DR_nd_object_fo_type29 = 0
				-- B738DR_nd_object_fo_id29 = ""
				-- B738DR_nd_object_fo_id29w = ""
			-- elseif n == 30 then
				-- B738DR_nd_object_fo_type30 = 0
				-- B738DR_nd_object_fo_id30 = ""
				-- B738DR_nd_object_fo_id30w = ""
			-- elseif n == 31 then
				-- B738DR_nd_object_fo_type31 = 0
				-- B738DR_nd_object_fo_id31 = ""
				-- B738DR_nd_object_fo_id31w = ""
			-- elseif n == 32 then
				-- B738DR_nd_object_fo_type32 = 0
				-- B738DR_nd_object_fo_id32 = ""
				-- B738DR_nd_object_fo_id32w = ""
			-- elseif n == 33 then
				-- B738DR_nd_object_fo_type33 = 0
				-- B738DR_nd_object_fo_id33 = ""
				-- B738DR_nd_object_fo_id33w = ""
			-- elseif n == 34 then
				-- B738DR_nd_object_fo_type34 = 0
				-- B738DR_nd_object_fo_id34 = ""
				-- B738DR_nd_object_fo_id34w = ""
			-- elseif n == 35 then
				-- B738DR_nd_object_fo_type35 = 0
				-- B738DR_nd_object_fo_id35 = ""
				-- B738DR_nd_object_fo_id35w = ""
			-- elseif n == 36 then
				-- B738DR_nd_object_fo_type36 = 0
				-- B738DR_nd_object_fo_id36 = ""
				-- B738DR_nd_object_fo_id36w = ""
			-- elseif n == 37 then
				-- B738DR_nd_object_fo_type37 = 0
				-- B738DR_nd_object_fo_id37 = ""
				-- B738DR_nd_object_fo_id37w = ""
			-- elseif n == 38 then
				-- B738DR_nd_object_fo_type38 = 0
				-- B738DR_nd_object_fo_id38 = ""
				-- B738DR_nd_object_fo_id38w = ""
			-- elseif n == 39 then
				-- B738DR_nd_object_fo_type39 = 0
				-- B738DR_nd_object_fo_id39 = ""
				-- B738DR_nd_object_fo_id39w = ""
			-- elseif n == 40 then
				-- B738DR_nd_object_fo_type40 = 0
				-- B738DR_nd_object_fo_id40 = ""
				-- B738DR_nd_object_fo_id40w = ""
			-- elseif n == 41 then
				-- B738DR_nd_object_fo_type41 = 0
				-- B738DR_nd_object_fo_id41 = ""
				-- B738DR_nd_object_fo_id41w = ""
			-- elseif n == 42 then
				-- B738DR_nd_object_fo_type42 = 0
				-- B738DR_nd_object_fo_id42 = ""
				-- B738DR_nd_object_fo_id42w = ""
			-- elseif n == 43 then
				-- B738DR_nd_object_fo_type43 = 0
				-- B738DR_nd_object_fo_id43 = ""
				-- B738DR_nd_object_fo_id43w = ""
			-- elseif n == 44 then
				-- B738DR_nd_object_fo_type44 = 0
				-- B738DR_nd_object_fo_id44 = ""
				-- B738DR_nd_object_fo_id44w = ""
			-- elseif n == 45 then
				-- B738DR_nd_object_fo_type45 = 0
				-- B738DR_nd_object_fo_id45 = ""
				-- B738DR_nd_object_fo_id45w = ""
			-- elseif n == 46 then
				-- B738DR_nd_object_fo_type46 = 0
				-- B738DR_nd_object_fo_id46 = ""
				-- B738DR_nd_object_fo_id46w = ""
			-- elseif n == 47 then
				-- B738DR_nd_object_fo_type47 = 0
				-- B738DR_nd_object_fo_id47 = ""
				-- B738DR_nd_object_fo_id47w = ""
			-- elseif n == 48 then
				-- B738DR_nd_object_fo_type48 = 0
				-- B738DR_nd_object_fo_id48 = ""
				-- B738DR_nd_object_fo_id48w = ""
			-- elseif n == 49 then
				-- B738DR_nd_object_fo_type49 = 0
				-- B738DR_nd_object_fo_id49 = ""
				-- B738DR_nd_object_fo_id49w = ""
			-- end
		-- end
	-- end
	

end

function nd_clr_navaid(rst_obj, rst_obj2)
	
	local n = 0
	
	if rst_obj >= 0 then
		for n = rst_obj, 0, -1 do
			if n == 0 then
				B738DR_nd_object_type00 = 0
				B738DR_nd_object_id00 = ""
				B738DR_nd_object_id00w = ""
			elseif n == 1 then
				B738DR_nd_object_type01 = 0
				B738DR_nd_object_id01 = ""
				B738DR_nd_object_id01w = ""
			elseif n == 2 then
				B738DR_nd_object_type02 = 0
				B738DR_nd_object_id02 = ""
				B738DR_nd_object_id02w = ""
			elseif n == 3 then
				B738DR_nd_object_type03 = 0
				B738DR_nd_object_id03 = ""
				B738DR_nd_object_id03w = ""
			elseif n == 4 then
				B738DR_nd_object_type04 = 0
				B738DR_nd_object_id04 = ""
				B738DR_nd_object_id04w = ""
			elseif n == 5 then
				B738DR_nd_object_type05 = 0
				B738DR_nd_object_id05 = ""
				B738DR_nd_object_id05w = ""
			elseif n == 6 then
				B738DR_nd_object_type06 = 0
				B738DR_nd_object_id06 = ""
				B738DR_nd_object_id06w = ""
			elseif n == 7 then
				B738DR_nd_object_type07 = 0
				B738DR_nd_object_id07 = ""
				B738DR_nd_object_id07w = ""
			elseif n == 8 then
				B738DR_nd_object_type08 = 0
				B738DR_nd_object_id08 = ""
				B738DR_nd_object_id08w = ""
			elseif n == 9 then
				B738DR_nd_object_type09 = 0
				B738DR_nd_object_id09 = ""
				B738DR_nd_object_id09w = ""
			elseif n == 10 then
				B738DR_nd_object_type10 = 0
				B738DR_nd_object_id10 = ""
				B738DR_nd_object_id10w = ""
			elseif n == 11 then
				B738DR_nd_object_type11 = 0
				B738DR_nd_object_id11 = ""
				B738DR_nd_object_id11w = ""
			elseif n == 12 then
				B738DR_nd_object_type12 = 0
				B738DR_nd_object_id12 = ""
				B738DR_nd_object_id12w = ""
			elseif n == 13 then
				B738DR_nd_object_type13 = 0
				B738DR_nd_object_id13 = ""
				B738DR_nd_object_id13w = ""
			elseif n == 14 then
				B738DR_nd_object_type14 = 0
				B738DR_nd_object_id14 = ""
				B738DR_nd_object_id14w = ""
			elseif n == 15 then
				B738DR_nd_object_type15 = 0
				B738DR_nd_object_id15 = ""
				B738DR_nd_object_id15w = ""
			elseif n == 16 then
				B738DR_nd_object_type16 = 0
				B738DR_nd_object_id16 = ""
				B738DR_nd_object_id16w = ""
			elseif n == 17 then
				B738DR_nd_object_type17 = 0
				B738DR_nd_object_id17 = ""
				B738DR_nd_object_id17w = ""
			elseif n == 18 then
				B738DR_nd_object_type18 = 0
				B738DR_nd_object_id18 = ""
				B738DR_nd_object_id18w = ""
			elseif n == 19 then
				B738DR_nd_object_type19 = 0
				B738DR_nd_object_id19 = ""
				B738DR_nd_object_id19w = ""
			elseif n == 20 then
				B738DR_nd_object_type20 = 0
				B738DR_nd_object_id20 = ""
				B738DR_nd_object_id20w = ""
			elseif n == 21 then
				B738DR_nd_object_type21 = 0
				B738DR_nd_object_id21 = ""
				B738DR_nd_object_id21w = ""
			elseif n == 22 then
				B738DR_nd_object_type22 = 0
				B738DR_nd_object_id22 = ""
				B738DR_nd_object_id22w = ""
			elseif n == 23 then
				B738DR_nd_object_type23 = 0
				B738DR_nd_object_id23 = ""
				B738DR_nd_object_id23w = ""
			elseif n == 24 then
				B738DR_nd_object_type24 = 0
				B738DR_nd_object_id24 = ""
				B738DR_nd_object_id24w = ""
			elseif n == 25 then
				B738DR_nd_object_type25 = 0
				B738DR_nd_object_id25 = ""
				B738DR_nd_object_id25w = ""
			elseif n == 26 then
				B738DR_nd_object_type26 = 0
				B738DR_nd_object_id26 = ""
				B738DR_nd_object_id26w = ""
			elseif n == 27 then
				B738DR_nd_object_type27 = 0
				B738DR_nd_object_id27 = ""
				B738DR_nd_object_id27w = ""
			elseif n == 28 then
				B738DR_nd_object_type28 = 0
				B738DR_nd_object_id28 = ""
				B738DR_nd_object_id28w = ""
			elseif n == 29 then
				B738DR_nd_object_type29 = 0
				B738DR_nd_object_id29 = ""
				B738DR_nd_object_id29w = ""
			elseif n == 30 then
				B738DR_nd_object_type30 = 0
				B738DR_nd_object_id30 = ""
				B738DR_nd_object_id30w = ""
			elseif n == 31 then
				B738DR_nd_object_type31 = 0
				B738DR_nd_object_id31 = ""
				B738DR_nd_object_id31w = ""
			elseif n == 32 then
				B738DR_nd_object_type32 = 0
				B738DR_nd_object_id32 = ""
				B738DR_nd_object_id32w = ""
			elseif n == 33 then
				B738DR_nd_object_type33 = 0
				B738DR_nd_object_id33 = ""
				B738DR_nd_object_id33w = ""
			elseif n == 34 then
				B738DR_nd_object_type34 = 0
				B738DR_nd_object_id34 = ""
				B738DR_nd_object_id34w = ""
			elseif n == 35 then
				B738DR_nd_object_type35 = 0
				B738DR_nd_object_id35 = ""
				B738DR_nd_object_id35w = ""
			elseif n == 36 then
				B738DR_nd_object_type36 = 0
				B738DR_nd_object_id36 = ""
				B738DR_nd_object_id36w = ""
			elseif n == 37 then
				B738DR_nd_object_type37 = 0
				B738DR_nd_object_id37 = ""
				B738DR_nd_object_id37w = ""
			elseif n == 38 then
				B738DR_nd_object_type38 = 0
				B738DR_nd_object_id38 = ""
				B738DR_nd_object_id38w = ""
			elseif n == 39 then
				B738DR_nd_object_type39 = 0
				B738DR_nd_object_id39 = ""
				B738DR_nd_object_id39w = ""
			elseif n == 40 then
				B738DR_nd_object_type40 = 0
				B738DR_nd_object_id40 = ""
				B738DR_nd_object_id40w = ""
			elseif n == 41 then
				B738DR_nd_object_type41 = 0
				B738DR_nd_object_id41 = ""
				B738DR_nd_object_id41w = ""
			elseif n == 42 then
				B738DR_nd_object_type42 = 0
				B738DR_nd_object_id42 = ""
				B738DR_nd_object_id42w = ""
			elseif n == 43 then
				B738DR_nd_object_type43 = 0
				B738DR_nd_object_id43 = ""
				B738DR_nd_object_id43w = ""
			elseif n == 44 then
				B738DR_nd_object_type44 = 0
				B738DR_nd_object_id44 = ""
				B738DR_nd_object_id44w = ""
			elseif n == 45 then
				B738DR_nd_object_type45 = 0
				B738DR_nd_object_id45 = ""
				B738DR_nd_object_id45w = ""
			elseif n == 46 then
				B738DR_nd_object_type46 = 0
				B738DR_nd_object_id46 = ""
				B738DR_nd_object_id46w = ""
			elseif n == 47 then
				B738DR_nd_object_type47 = 0
				B738DR_nd_object_id47 = ""
				B738DR_nd_object_id47w = ""
			elseif n == 48 then
				B738DR_nd_object_type48 = 0
				B738DR_nd_object_id48 = ""
				B738DR_nd_object_id48w = ""
			elseif n == 49 then
				B738DR_nd_object_type49 = 0
				B738DR_nd_object_id49 = ""
				B738DR_nd_object_id49w = ""
			end
		end
	end
	
	if rst_obj2 >= 0 then
		for n = rst_obj2, 0, -1 do
			if n == 0 then
				B738DR_nd_object_fo_type00 = 0
				B738DR_nd_object_fo_id00 = ""
				B738DR_nd_object_fo_id00w = ""
			elseif n == 1 then
				B738DR_nd_object_fo_type01 = 0
				B738DR_nd_object_fo_id01 = ""
				B738DR_nd_object_fo_id01w = ""
			elseif n == 2 then
				B738DR_nd_object_fo_type02 = 0
				B738DR_nd_object_fo_id02 = ""
				B738DR_nd_object_fo_id02w = ""
			elseif n == 3 then
				B738DR_nd_object_fo_type03 = 0
				B738DR_nd_object_fo_id03 = ""
				B738DR_nd_object_fo_id03w = ""
			elseif n == 4 then
				B738DR_nd_object_fo_type04 = 0
				B738DR_nd_object_fo_id04 = ""
				B738DR_nd_object_fo_id04w = ""
			elseif n == 5 then
				B738DR_nd_object_fo_type05 = 0
				B738DR_nd_object_fo_id05 = ""
				B738DR_nd_object_fo_id05w = ""
			elseif n == 6 then
				B738DR_nd_object_fo_type06 = 0
				B738DR_nd_object_fo_id06 = ""
				B738DR_nd_object_fo_id06w = ""
			elseif n == 7 then
				B738DR_nd_object_fo_type07 = 0
				B738DR_nd_object_fo_id07 = ""
				B738DR_nd_object_fo_id07w = ""
			elseif n == 8 then
				B738DR_nd_object_fo_type08 = 0
				B738DR_nd_object_fo_id08 = ""
				B738DR_nd_object_fo_id08w = ""
			elseif n == 9 then
				B738DR_nd_object_fo_type09 = 0
				B738DR_nd_object_fo_id09 = ""
				B738DR_nd_object_fo_id09w = ""
			elseif n == 10 then
				B738DR_nd_object_fo_type10 = 0
				B738DR_nd_object_fo_id10 = ""
				B738DR_nd_object_fo_id10w = ""
			elseif n == 11 then
				B738DR_nd_object_fo_type11 = 0
				B738DR_nd_object_fo_id11 = ""
				B738DR_nd_object_fo_id11w = ""
			elseif n == 12 then
				B738DR_nd_object_fo_type12 = 0
				B738DR_nd_object_fo_id12 = ""
				B738DR_nd_object_fo_id12w = ""
			elseif n == 13 then
				B738DR_nd_object_fo_type13 = 0
				B738DR_nd_object_fo_id13 = ""
				B738DR_nd_object_fo_id13w = ""
			elseif n == 14 then
				B738DR_nd_object_fo_type14 = 0
				B738DR_nd_object_fo_id14 = ""
				B738DR_nd_object_fo_id14w = ""
			elseif n == 15 then
				B738DR_nd_object_fo_type15 = 0
				B738DR_nd_object_fo_id15 = ""
				B738DR_nd_object_fo_id15w = ""
			elseif n == 16 then
				B738DR_nd_object_fo_type16 = 0
				B738DR_nd_object_fo_id16 = ""
				B738DR_nd_object_fo_id16w = ""
			elseif n == 17 then
				B738DR_nd_object_fo_type17 = 0
				B738DR_nd_object_fo_id17 = ""
				B738DR_nd_object_fo_id17w = ""
			elseif n == 18 then
				B738DR_nd_object_fo_type18 = 0
				B738DR_nd_object_fo_id18 = ""
				B738DR_nd_object_fo_id18w = ""
			elseif n == 19 then
				B738DR_nd_object_fo_type19 = 0
				B738DR_nd_object_fo_id19 = ""
				B738DR_nd_object_fo_id19w = ""
			elseif n == 20 then
				B738DR_nd_object_fo_type20 = 0
				B738DR_nd_object_fo_id20 = ""
				B738DR_nd_object_fo_id20w = ""
			elseif n == 21 then
				B738DR_nd_object_fo_type21 = 0
				B738DR_nd_object_fo_id21 = ""
				B738DR_nd_object_fo_id21w = ""
			elseif n == 22 then
				B738DR_nd_object_fo_type22 = 0
				B738DR_nd_object_fo_id22 = ""
				B738DR_nd_object_fo_id22w = ""
			elseif n == 23 then
				B738DR_nd_object_fo_type23 = 0
				B738DR_nd_object_fo_id23 = ""
				B738DR_nd_object_fo_id23w = ""
			elseif n == 24 then
				B738DR_nd_object_fo_type24 = 0
				B738DR_nd_object_fo_id24 = ""
				B738DR_nd_object_fo_id24w = ""
			elseif n == 25 then
				B738DR_nd_object_fo_type25 = 0
				B738DR_nd_object_fo_id25 = ""
				B738DR_nd_object_fo_id25w = ""
			elseif n == 26 then
				B738DR_nd_object_fo_type26 = 0
				B738DR_nd_object_fo_id26 = ""
				B738DR_nd_object_fo_id26w = ""
			elseif n == 27 then
				B738DR_nd_object_fo_type27 = 0
				B738DR_nd_object_fo_id27 = ""
				B738DR_nd_object_fo_id27w = ""
			elseif n == 28 then
				B738DR_nd_object_fo_type28 = 0
				B738DR_nd_object_fo_id28 = ""
				B738DR_nd_object_fo_id28w = ""
			elseif n == 29 then
				B738DR_nd_object_fo_type29 = 0
				B738DR_nd_object_fo_id29 = ""
				B738DR_nd_object_fo_id29w = ""
			elseif n == 30 then
				B738DR_nd_object_fo_type30 = 0
				B738DR_nd_object_fo_id30 = ""
				B738DR_nd_object_fo_id30w = ""
			elseif n == 31 then
				B738DR_nd_object_fo_type31 = 0
				B738DR_nd_object_fo_id31 = ""
				B738DR_nd_object_fo_id31w = ""
			elseif n == 32 then
				B738DR_nd_object_fo_type32 = 0
				B738DR_nd_object_fo_id32 = ""
				B738DR_nd_object_fo_id32w = ""
			elseif n == 33 then
				B738DR_nd_object_fo_type33 = 0
				B738DR_nd_object_fo_id33 = ""
				B738DR_nd_object_fo_id33w = ""
			elseif n == 34 then
				B738DR_nd_object_fo_type34 = 0
				B738DR_nd_object_fo_id34 = ""
				B738DR_nd_object_fo_id34w = ""
			elseif n == 35 then
				B738DR_nd_object_fo_type35 = 0
				B738DR_nd_object_fo_id35 = ""
				B738DR_nd_object_fo_id35w = ""
			elseif n == 36 then
				B738DR_nd_object_fo_type36 = 0
				B738DR_nd_object_fo_id36 = ""
				B738DR_nd_object_fo_id36w = ""
			elseif n == 37 then
				B738DR_nd_object_fo_type37 = 0
				B738DR_nd_object_fo_id37 = ""
				B738DR_nd_object_fo_id37w = ""
			elseif n == 38 then
				B738DR_nd_object_fo_type38 = 0
				B738DR_nd_object_fo_id38 = ""
				B738DR_nd_object_fo_id38w = ""
			elseif n == 39 then
				B738DR_nd_object_fo_type39 = 0
				B738DR_nd_object_fo_id39 = ""
				B738DR_nd_object_fo_id39w = ""
			elseif n == 40 then
				B738DR_nd_object_fo_type40 = 0
				B738DR_nd_object_fo_id40 = ""
				B738DR_nd_object_fo_id40w = ""
			elseif n == 41 then
				B738DR_nd_object_fo_type41 = 0
				B738DR_nd_object_fo_id41 = ""
				B738DR_nd_object_fo_id41w = ""
			elseif n == 42 then
				B738DR_nd_object_fo_type42 = 0
				B738DR_nd_object_fo_id42 = ""
				B738DR_nd_object_fo_id42w = ""
			elseif n == 43 then
				B738DR_nd_object_fo_type43 = 0
				B738DR_nd_object_fo_id43 = ""
				B738DR_nd_object_fo_id43w = ""
			elseif n == 44 then
				B738DR_nd_object_fo_type44 = 0
				B738DR_nd_object_fo_id44 = ""
				B738DR_nd_object_fo_id44w = ""
			elseif n == 45 then
				B738DR_nd_object_fo_type45 = 0
				B738DR_nd_object_fo_id45 = ""
				B738DR_nd_object_fo_id45w = ""
			elseif n == 46 then
				B738DR_nd_object_fo_type46 = 0
				B738DR_nd_object_fo_id46 = ""
				B738DR_nd_object_fo_id46w = ""
			elseif n == 47 then
				B738DR_nd_object_fo_type47 = 0
				B738DR_nd_object_fo_id47 = ""
				B738DR_nd_object_fo_id47w = ""
			elseif n == 48 then
				B738DR_nd_object_fo_type48 = 0
				B738DR_nd_object_fo_id48 = ""
				B738DR_nd_object_fo_id48w = ""
			elseif n == 49 then
				B738DR_nd_object_fo_type49 = 0
				B738DR_nd_object_fo_id49 = ""
				B738DR_nd_object_fo_id49w = ""
			end
		end
	end
	
	
end

function B738_restrict_data()

	local ii = 0
	local jj = 0
	local temp_alt = 0
	local td_idx_temp = 0
	--local missed_app_act = 0
	
	
	if ref_icao == "----" or des_icao == "****" then
		legs_num = 0
	end
	
	
	if legs_num > 1 then
		
		if offset > legs_num then
			offset = legs_num
		end
		if offset == 0 then
			offset = 1
		end
		
		-- restrict speed
		B738DR_rest_wpt_spd_id = ""
		B738DR_rest_wpt_spd = 0
		B738DR_rest_wpt_spd_idx = 0
		if legs_restr_spd_n > 0 then
			if B738DR_flight_phase < 2 or B738DR_flight_phase > 7 then		-- climb
				if td_idx == 0 then
					if math.max(first_star_idx, first_app_idx) == 0 then
						td_idx_temp = legs_num
					else
						td_idx_temp = math.max(first_star_idx, first_app_idx) - 1
					end
				else
					if tc_idx > td_idx then
						td_idx_temp = td_idx - 1
					else
						if last_sid_idx == 0 then
							td_idx_temp = tc_idx
						else
							td_idx_temp = last_sid_idx
						end
					end
				end
				for ii = 1, legs_restr_spd_n do
					if legs_restr_spd[ii][2] >= offset and legs_restr_spd[ii][2] <= td_idx_temp then
						B738DR_rest_wpt_spd_id = legs_restr_spd[ii][1]
						B738DR_rest_wpt_spd = legs_restr_spd[ii][3]
						B738DR_rest_wpt_spd_idx = legs_restr_spd[ii][2]
						break
					end
					if legs_restr_spd[ii][2] >= offset and B738DR_missed_app_act > 0 then
						B738DR_rest_wpt_spd_id = legs_restr_spd[ii][1]
						B738DR_rest_wpt_spd = legs_restr_spd[ii][3]
						B738DR_rest_wpt_spd_idx = legs_restr_spd[ii][2]
						break
					end
				end
			
			elseif B738DR_flight_phase == 2 then	-- cruise before T/D
				-- if td_idx == 0 then
					-- td_idx_temp = 0
				-- else
					-- if tc_idx > td_idx then
						-- td_idx_temp = 0
					-- else
						-- td_idx_temp = td_idx
					-- end
				-- end
				-- for ii = legs_restr_spd_n, 1, -1 do
					-- if legs_restr_spd[ii][2] == offset and legs_restr_spd[ii][2] == td_idx_temp then
					-- --if legs_restr_spd[ii][2] >= offset and legs_restr_spd[ii][2] <= td_idx_temp then
						-- decel_dist = 6.7
						-- B738DR_rest_wpt_spd_id = legs_restr_spd[ii][1]
						-- B738DR_rest_wpt_spd = legs_restr_spd[ii][3]
						-- B738DR_rest_wpt_spd_idx = legs_restr_spd[ii][2]
						-- break
					-- end
				-- end
				
				-- if B738DR_rest_wpt_spd == 0 then
					-- if last_sid_idx > 0 and offset <= last_sid_idx then
						-- for ii = legs_restr_spd_n, 1, -1 do
							-- if legs_restr_spd[ii][2] <= last_sid_idx and legs_restr_spd[ii][2] >= offset then
								-- B738DR_rest_wpt_spd_id = legs_restr_spd[ii][1]
								-- B738DR_rest_wpt_spd = legs_restr_spd[ii][3]
								-- B738DR_rest_wpt_spd_idx = legs_restr_spd[ii][2]
								-- decel_dist = 9999
							-- end
						-- end
					-- end
				-- end
				
				if td_idx == 0 then
					if math.max(first_star_idx, first_app_idx) == 0 then
						td_idx_temp = legs_num
					else
						td_idx_temp = math.max(first_star_idx, first_app_idx) - 1
					end
				else
					if tc_idx > td_idx then
						td_idx_temp = td_idx - 1
					else
						if last_sid_idx == 0 then
							td_idx_temp = tc_idx
						else
							td_idx_temp = last_sid_idx
						end
					end
				end
				for ii = 1, legs_restr_spd_n do
					if legs_restr_spd[ii][2] >= offset and legs_restr_spd[ii][2] <= td_idx_temp then
						B738DR_rest_wpt_spd_id = legs_restr_spd[ii][1]
						B738DR_rest_wpt_spd = legs_restr_spd[ii][3]
						B738DR_rest_wpt_spd_idx = legs_restr_spd[ii][2]
						break
					end
				end
				
				if B738DR_rest_wpt_spd == 0 then
				
					if last_sid_idx == 0 then
						if tc_idx == 0 then
							td_idx_temp = 2
						else
							td_idx_temp = tc_idx
						end
					else
						td_idx_temp = last_sid_idx + 1
						td_idx_temp = math.max(td_idx_temp, tc_idx)
					end
					
					for ii = legs_restr_spd_n, 1, -1 do
						if legs_restr_spd[ii][2] >= td_idx_temp and legs_restr_spd[ii][3] <= B738DR_fmc_cruise_speed then
							decel_before_idx = legs_restr_spd[ii][2]
							if legs_data[decel_before_idx][3] < 6.7 and decel_before_idx > 1 then
								decel_dist = 6.7 - legs_data[decel_before_idx][3]
								decel_before_idx = decel_before_idx - 1
								if legs_data[decel_before_idx][4] ~= 0 then
									decel_before_idx = legs_restr_spd[ii][2]
									decel_dist = legs_data[decel_before_idx][3] - 0.3
								else
									if legs_data[decel_before_idx][3] < decel_dist then
										decel_dist = legs_data[decel_before_idx][3] - 0.3
									end
								end
							else
								decel_dist = 6.7
							end
							if decel_before_idx <= offset then
								B738DR_rest_wpt_spd_id = legs_restr_spd[ii][1]
								B738DR_rest_wpt_spd = legs_restr_spd[ii][3]
								B738DR_rest_wpt_spd_idx = legs_restr_spd[ii][2]
								break
							end
						end
					end

					-- temp_alt = 0
					-- if B738DR_rest_wpt_spd_idx > offset then 
						-- temp_alt = 1
					-- end
					-- if B738DR_rest_wpt_spd_idx == offset and decel_dist > simDR_fmc_dist then
						-- temp_alt = 1
					-- end
					-- if temp_alt == 1 and legs_data[offset][4] == 0 and B738DR_rest_wpt_spd ~= legs_data[offset][10] then
						-- if legs_data[offset][10] ~= 0 then
							-- B738DR_rest_wpt_spd = legs_data[offset][10]
						-- end
						-- decel_dist = 1000
					-- end
					if B738DR_rest_wpt_spd_idx > 0 and B738DR_rest_wpt_spd_idx < offset then
						decel_dist = 9000
					end
				else
					decel_dist = 9000
				end
				
			
			elseif B738DR_flight_phase > 4 and B738DR_flight_phase < 8 then		-- descent
				-- if td_fix_idx == 0 then
					-- td_idx_temp = td_idx
				-- else
					-- td_idx_temp = td_fix_idx
				-- end
				if td_idx == 0 then
					if math.max(first_star_idx, first_app_idx) == 0 and last_sid_idx == 0 then
						td_idx_temp = 2
					elseif math.max(first_star_idx, first_app_idx) == 0 then
						td_idx_temp = last_sid_idx + 1
					else
						td_idx_temp = math.max(first_star_idx, first_app_idx)
					end
				else
					td_idx_temp = td_idx
				end
				for ii = legs_restr_spd_n, 1, -1 do
					-- if legs_restr_spd[ii][2] <= offset and legs_restr_spd[ii][2] >= td_idx_temp and legs_restr_spd[ii][3] <= B738DR_fmc_descent_speed then
						-- B738DR_rest_wpt_spd_id = legs_restr_spd[ii][1]
						-- B738DR_rest_wpt_spd = legs_restr_spd[ii][3]
						-- break
					-- end
					if legs_restr_spd[ii][2] >= td_idx_temp and legs_restr_spd[ii][3] <= B738DR_fmc_descent_speed then
						decel_before_idx = legs_restr_spd[ii][2]
						if legs_data[decel_before_idx][3] < 6.7 and decel_before_idx > 1 then
							decel_dist = 6.7 - legs_data[decel_before_idx][3]
							decel_before_idx = decel_before_idx - 1
							if legs_data[decel_before_idx][4] ~= 0 then
								decel_before_idx = legs_restr_spd[ii][2]
								decel_dist = legs_data[decel_before_idx][3] - 0.3
							else
								if legs_data[decel_before_idx][3] < decel_dist then
									decel_dist = legs_data[decel_before_idx][3] - 0.3
								end
							end
						else
							decel_dist = 6.7
						end
						if decel_before_idx <= offset then
							B738DR_rest_wpt_spd_id = legs_restr_spd[ii][1]
							B738DR_rest_wpt_spd = legs_restr_spd[ii][3]
							B738DR_rest_wpt_spd_idx = legs_restr_spd[ii][2]
							break
						end
					end
				end
				-- temp_alt = 0
				-- if B738DR_rest_wpt_spd_idx > offset then 
					-- temp_alt = 1
				-- end
				-- if B738DR_rest_wpt_spd_idx == offset and decel_dist > simDR_fmc_dist then
					-- temp_alt = 1
				-- end
				-- if temp_alt == 1 and legs_data[offset][4] == 0 and B738DR_rest_wpt_spd ~= legs_data[offset][10] then
					-- --B738DR_rest_wpt_spd_id = legs_data[offset][1]
					-- if legs_data[offset][10] ~= 0 then
						-- B738DR_rest_wpt_spd = legs_data[offset][10]
					-- end
					-- --B738DR_rest_wpt_spd_idx = offset
					-- decel_dist = 1000
				-- end
				
				if B738DR_rest_wpt_spd_idx > 0 and B738DR_rest_wpt_spd_idx < offset then
					decel_dist = 9000
				end
			end
		end
		
		-- restrict alt
		B738DR_rest_wpt_alt_id = ""
		B738DR_rest_wpt_alt = 0
		B738DR_rest_wpt_alt_t = 0
		B738DR_rest_wpt_alt_idx = 0
		if legs_restr_alt_n > 0 then
			for ii = 1, legs_restr_alt_n do
				if B738DR_flight_phase < 2 or B738DR_flight_phase > 7 then		-- climb
					if td_idx == 0 then
						if math.max(first_star_idx, first_app_idx) == 0 then
							td_idx_temp = legs_num
						else
							td_idx_temp = math.max(first_star_idx, first_app_idx) - 1
						end
					else
						if tc_idx > td_idx then
							td_idx_temp = td_idx - 1
						else
							if last_sid_idx == 0 then
								td_idx_temp = tc_idx
							else
								td_idx_temp = last_sid_idx
							end
						end
					end
					-- if td_idx == 0 then
						-- td_idx_temp = 0
					-- else
						-- if tc_idx > td_idx then
							-- td_idx_temp = td_idx - 1
						-- else
							-- if last_sid_idx == 0 then
								-- td_idx_temp = tc_idx
							-- else
								-- td_idx_temp = last_sid_idx
							-- end
						-- end
					-- end
					if td_idx_temp > 0 then
						if legs_restr_alt[ii][2] >= offset and legs_restr_alt[ii][2] <= td_idx_temp then
							temp_alt = simDR_altitude_pilot - 300
							if temp_alt < legs_restr_alt[ii][3] then
								if legs_restr_alt[ii][4] == 43 and ii < legs_restr_alt_n then
									if legs_restr_alt[ii+1][2] <= td_idx_temp and legs_restr_alt[ii][3] == legs_restr_alt[ii+1][3] then
										B738DR_rest_wpt_alt_id = legs_restr_alt[ii+1][1]
										B738DR_rest_wpt_alt = legs_restr_alt[ii+1][3]
										B738DR_rest_wpt_alt_t = legs_restr_alt[ii+1][4]
										B738DR_rest_wpt_alt_idx = legs_restr_alt[ii+1][2]
										break
									else
										B738DR_rest_wpt_alt_id = legs_restr_alt[ii][1]
										B738DR_rest_wpt_alt = legs_restr_alt[ii][3]
										B738DR_rest_wpt_alt_t = legs_restr_alt[ii][4]
										B738DR_rest_wpt_alt_idx = legs_restr_alt[ii][2]
										break
									end
								else
									B738DR_rest_wpt_alt_id = legs_restr_alt[ii][1]
									B738DR_rest_wpt_alt = legs_restr_alt[ii][3]
									B738DR_rest_wpt_alt_t = legs_restr_alt[ii][4]
									B738DR_rest_wpt_alt_idx = legs_restr_alt[ii][2]
									break
								end
							end
						end
						if legs_restr_alt[ii][2] >= offset and B738DR_missed_app_act > 0 then
							temp_alt = simDR_altitude_pilot - 300
							if temp_alt < legs_restr_alt[ii][3] then
								if legs_restr_alt[ii][4] == 43 and ii < legs_restr_alt_n then
									if legs_restr_alt[ii+1][2] <= td_idx_temp and legs_restr_alt[ii][3] == legs_restr_alt[ii+1][3] then
										B738DR_rest_wpt_alt_id = legs_restr_alt[ii+1][1]
										B738DR_rest_wpt_alt = legs_restr_alt[ii+1][3]
										B738DR_rest_wpt_alt_t = legs_restr_alt[ii+1][4]
										B738DR_rest_wpt_alt_idx = legs_restr_alt[ii+1][2]
										break
									else
										B738DR_rest_wpt_alt_id = legs_restr_alt[ii][1]
										B738DR_rest_wpt_alt = legs_restr_alt[ii][3]
										B738DR_rest_wpt_alt_t = legs_restr_alt[ii][4]
										B738DR_rest_wpt_alt_idx = legs_restr_alt[ii][2]
										break
									end
								else
									B738DR_rest_wpt_alt_id = legs_restr_alt[ii][1]
									B738DR_rest_wpt_alt = legs_restr_alt[ii][3]
									B738DR_rest_wpt_alt_t = legs_restr_alt[ii][4]
									B738DR_rest_wpt_alt_idx = legs_restr_alt[ii][2]
									break
								end
							end
						end
					end
				--end
				elseif B738DR_flight_phase > 4 and B738DR_flight_phase < 8 then		-- descent
					-- if td_fix_idx == 0 then
						-- td_idx_temp = td_idx
					-- else
						-- td_idx_temp = td_fix_idx
					-- end
					if td_idx == 0 then
						td_idx_temp = 2
					else
						td_idx_temp = td_idx
					end
					if legs_restr_alt[ii][2] >= offset and legs_restr_alt[ii][2] >= td_idx_temp then
						temp_alt = simDR_altitude_pilot + 300
						if temp_alt > legs_restr_alt[ii][3] then
							B738DR_rest_wpt_alt_id = legs_restr_alt[ii][1]
							B738DR_rest_wpt_alt = legs_restr_alt[ii][3]
							B738DR_rest_wpt_alt_t = legs_restr_alt[ii][4]
							B738DR_rest_wpt_alt_idx = legs_restr_alt[ii][2]
							break
						end
					end
				end
			end
		end
		jj = 0
		if B738DR_rest_wpt_alt_idx > 0 and B738DR_rest_wpt_alt_idx >= offset then
			for ii = offset, B738DR_rest_wpt_alt_idx do
				if ii == offset then
					jj = simDR_fmc_dist
				else
					jj = jj + legs_data[ii][3]
				end
			end
		end
		B738DR_rest_wpt_alt_dist = jj
		
		--calc SPD and ALT
		B738DR_calc_wpt_spd = legs_data[offset][10]
		B738DR_calc_wpt_alt = legs_data[offset][11]
		
	end

end

function calc_brg_brg_fix(req_lat, req_lon, req_brg, req_lat2, req_lon2, req_brg2)
	
	-- first waypoint
	local nd_lat1 = math.rad(req_lat)
	local nd_lon1 = math.rad(req_lon)
	local nd_brg1 = req_brg --+ mag_variation_rad(nd_lat1, nd_lon1)
	
	-- second waypoint
	local nd_lat2 = math.rad(req_lat2)
	local nd_lon2 = math.rad(req_lon2)
	local nd_brg2 = req_brg2 --+ mag_variation_rad(nd_lat2, nd_lon2)
	
	local nd_lat = 0
	local nd_lon = 0
	local nd_x = 0
	local nd_y = 0
	local nd_a = 0
	local nd_b = 0
	local nd_c = 0
	local nd_xy = 0
	local nd_brg12 = 0
	local nd_brg21 = 0
	local pi = 3.141592653589 --math.pi()
	
	-- calculate intercept two waypoints
	nd_xy = 2 * math.asin(math.sqrt((math.sin((nd_lat1-nd_lat2)/2))^2+math.cos(nd_lat1)*math.cos(nd_lat2)*math.sin((nd_lon1-nd_lon2)/2)^2))
	
	
	nd_x = math.sin(nd_lon2 - nd_lon1)
	if nd_x > 0 then
		nd_brg12 = math.acos((math.sin(nd_lat2)-math.sin(nd_lat1)*math.cos(nd_xy))/(math.sin(nd_xy)*math.cos(nd_lat1)))
		nd_brg21 = 2 * pi-math.acos((math.sin(nd_lat1)-math.sin(nd_lat2)*math.cos(nd_xy))/(math.sin(nd_xy)*math.cos(nd_lat2)))
	else
		nd_brg12 = 2 * pi-math.acos((math.sin(nd_lat2)-math.sin(nd_lat1)*math.cos(nd_xy))/(math.sin(nd_xy)*math.cos(nd_lat1)))
		nd_brg21 = math.acos((math.sin(nd_lat1)-math.sin(nd_lat2)*math.cos(nd_xy))/(math.sin(nd_xy)*math.cos(nd_lat2)))
	end
	
	nd_a = math.rad(((math.deg(nd_brg1) - math.deg(nd_brg12)) + 360) % 360)
	nd_b = math.rad(((math.deg(nd_brg21) - math.deg(nd_brg2)) + 360) % 360)
	
	if (math.sin(nd_a) == 0 and math.sin(nd_b) == 0) then
		-- infinity of intersections
		calc_lat = 0
		calc_lon = 0
	elseif (math.sin(nd_a) * math.sin(nd_b)) < 0 then
		-- intersection ambiguous
		calc_lat = 0
		calc_lon = 0
	else
		nd_a = math.abs(nd_a)
		nd_b = math.abs(nd_b)
		nd_c = math.acos(-math.cos(nd_a)*math.cos(nd_b)+math.sin(nd_a)*math.sin(nd_b)*math.cos(nd_xy))
		
		nd_x = math.atan2(math.sin(nd_xy)*math.sin(nd_a)*math.sin(nd_b),math.cos(nd_b)+math.cos(nd_a)*math.cos(nd_c))
		nd_lat = math.asin(math.sin(nd_lat1)*math.cos(nd_x)+math.cos(nd_lat1)*math.sin(nd_x)*math.cos(nd_brg1))
		nd_lon = math.atan2(math.sin(nd_brg1)*math.sin(nd_x)*math.cos(nd_lat1),math.cos(nd_x)-math.sin(nd_lat1)*math.sin(nd_lat))
		nd_lon = ((nd_lon1+nd_lon+pi) % (2*pi)) - pi
		
		calc_lat_fix = math.deg(nd_lat)		-- latitude
		calc_lon_fix = math.deg(nd_lon)		-- longitude
	end

end

function B738_fix_calc()
	
	local ii = 0
	local jj = 0
	local kk = 0
	local ll = 0
	local mm = 0
	local nn = 0
	local idx1 = 0
	local idx2 = 0
	local fix_to_dist = 0
	
	if fix_data_num > 0 and offset > 1 and offset <= legs_num and legs_num > 1 then
		for ii = 1, fix_data_num do
			for jj = 0, 2 do
				idx1 = 6 + (jj * 2)
				idx2 = 12 + (jj * 9)
				if fix_data[ii][idx1] ~= -1 then	-- radial
					if fix_data[ii][idx2] == -1 then	-- calculate
						fix_data[ii][idx2] = 0
						fix_data[ii][idx2+1] = -1
						for kk = offset, legs_num do
							calc_brg_brg_fix(legs_data[kk-1][7], legs_data[kk-1][8], legs_data[kk][2], fix_data[ii][3], fix_data[ii][4], math.rad(fix_data[ii][idx1] + simDR_mag_variation))
							fix_data[ii][idx2+2] = calc_lat_fix
							fix_data[ii][idx2+3] = calc_lon_fix
							fix_data[ii][idx2+4] = nd_calc_dist2(calc_lat_fix, calc_lon_fix, fix_data[ii][3], fix_data[ii][4])
							mm = nd_calc_dist2(calc_lat_fix, calc_lon_fix, legs_data[kk][7], legs_data[kk][8])
							nn = nd_calc_dist2(calc_lat_fix, calc_lon_fix, legs_data[kk-1][7], legs_data[kk-1][8])
							fix_to_dist = legs_data[kk][3] - mm - nn + 0.1
							if fix_to_dist > 0 then
								fix_data[ii][idx2] = kk
								fix_data[ii][idx2+1] = mm
								break
							end
						end
					end
				elseif fix_data[ii][idx1+1] ~= -1 then	-- distance
					--- calc code
				end
				
			end
		end
	end
	
end

function pfd_ils()

	local pfd_txt = ""
	local pfd_num = 0
	local pfd_num2 = 0
	
	if B738DR_nav_nav_id == nil then
		pfd_txt = "    "
	else
		pfd_txt = B738DR_nav_nav_id 
	end
	pfd_num = string.len(pfd_txt)
	if pfd_num < 4 then
		pfd_num = 4 - pfd_num
		for pfd_num2 = 1, pfd_num do
			pfd_txt = pfd_txt .. " "
		end
	end
	pfd_txt = pfd_txt .. "/"
	pfd_txt = pfd_txt ..  string.format("%03d",B738DR_nav_obs)
	pfd_txt = pfd_txt .. "`"
	pfd_cpt_nav_txt1 = pfd_txt
	if B738DR_nav_has_dme == 0 then
		pfd_txt = "DME ---"
	else
		pfd_txt = "DME " .. string.format("%4.1f", B738DR_nav_dme)
	end
	pfd_cpt_nav_txt2 = pfd_txt

end


function pfd_loc()

	local pfd_txt = ""
	local pfd_num = 0
	local pfd_num2 = 0
	
	if B738DR_nav_nav_id == nil then
		pfd_txt = "    "
	else
		pfd_txt = B738DR_nav_nav_id 
	end
	pfd_num = string.len(pfd_txt)
	if pfd_num < 4 then
		pfd_num = 4 - pfd_num
		for pfd_num2 = 1, pfd_num do
			pfd_txt = pfd_txt .. " "
		end
	end
	pfd_txt = pfd_txt .. "/"
	pfd_txt = pfd_txt ..  string.format("%03d",B738DR_nav_obs)
	pfd_txt = pfd_txt .. "`"
	pfd_cpt_nav_txt1 = pfd_txt
	if B738DR_nav_has_dme == 0 then
		pfd_txt = "DME ---"
	else
		pfd_txt = "DME " .. string.format("%4.1f", B738DR_nav_dme)
	end
	pfd_cpt_nav_txt2 = pfd_txt

end

function pfd_rnav()

	local pfd_txt = ""
	local pfd_num = 0
	local pfd_num2 = 0
	local pfd_crs = 0
	
	if des_app ~= "------" and rw_dist > 0 and rw_dist < 18 then
		if string.sub(des_app, 1, 1) == "I" then 	-- ILS
			pfd_txt = "ILS" .. string.sub(des_app, 2, -1)
		elseif string.sub(des_app, 1, 1) == "L" then 	-- LOC
			pfd_txt = "LOC" .. string.sub(des_app, 2, -1)
		elseif string.sub(des_app, 1, 1) == "D" then 	-- VORDME
			pfd_txt = "VDM" .. string.sub(des_app, 2, -1)
		elseif string.sub(des_app, 1, 1) == "V" then 	-- VOR
			pfd_txt = "VOR" .. string.sub(des_app, 2, -1)
		else
			pfd_txt = des_app
		end
		
		if rnav_idx_last > 0 and rnav_idx_last <= legs_num then
			pfd_txt = pfd_txt .. "/"
			pfd_crs = (math.deg(legs_data[rnav_idx_last][2]) + simDR_mag_variation) % 360
			pfd_txt = pfd_txt .. string.format("%03d", pfd_crs)
			pfd_cpt_nav_txt1 = pfd_txt
			pfd_txt = legs_data[rnav_idx_last][1] .. " "
			if rw_dist > 0 then
				if rw_dist < 9.95 then
					pfd_txt = pfd_txt .. string.format("%4.1f", rw_dist)
				else
					pfd_txt = pfd_txt .. string.format("%3d", rw_dist)
				end
			end
			pfd_cpt_nav_txt2 = pfd_txt
		else
			pfd_cpt_nav_txt1 = pfd_txt
			pfd_cpt_nav_txt2 = ""
		end
	else
		pfd_cpt_nav_txt1 = ""
		pfd_cpt_nav_txt2 = ""
	end

end


function pfd_fo_ils()

	local pfd_txt = ""
	local pfd_num = 0
	local pfd_num2 = 0
	
	if B738DR_nav_nav_id_fo == nil then
		pfd_txt = "    "
	else
		pfd_txt = B738DR_nav_nav_id_fo 
	end
	pfd_num = string.len(pfd_txt)
	if pfd_num < 4 then
		pfd_num = 4 - pfd_num
		for pfd_num2 = 1, pfd_num do
			pfd_txt = pfd_txt .. " "
		end
	end
	pfd_txt = pfd_txt .. "/"
	pfd_txt = pfd_txt ..  string.format("%03d",B738DR_nav_obs_fo)
	pfd_txt = pfd_txt .. "`"
	pfd_fo_nav_txt1 = pfd_txt
	if B738DR_nav_has_dme_fo == 0 then
		pfd_txt = "DME ---"
	else
		pfd_txt = "DME " .. string.format("%4.1f", B738DR_nav_dme_fo)
	end
	pfd_fo_nav_txt2 = pfd_txt

end


function pfd_fo_loc()

	local pfd_txt = ""
	local pfd_num = 0
	local pfd_num2 = 0
	
	if B738DR_nav_nav_id_fo == nil then
		pfd_txt = "    "
	else
		pfd_txt = B738DR_nav_nav_id_fo 
	end
	pfd_num = string.len(pfd_txt)
	if pfd_num < 4 then
		pfd_num = 4 - pfd_num
		for pfd_num2 = 1, pfd_num do
			pfd_txt = pfd_txt .. " "
		end
	end
	pfd_txt = pfd_txt .. "/"
	pfd_txt = pfd_txt ..  string.format("%03d",B738DR_nav_obs_fo)
	pfd_txt = pfd_txt .. "`"
	pfd_fo_nav_txt1 = pfd_txt
	if B738DR_nav_has_dme_fo == 0 then
		pfd_txt = "DME ---"
	else
		pfd_txt = "DME " .. string.format("%4.1f", B738DR_nav_dme_fo)
	end
	pfd_fo_nav_txt2 = pfd_txt

end

function pfd_fo_rnav()

	local pfd_txt = ""
	local pfd_num = 0
	local pfd_num2 = 0
	local pfd_crs = 0
	
	if des_app ~= "------" and rw_dist > 0 and rw_dist < 18 then
		if string.sub(des_app, 1, 1) == "I" then 	-- ILS
			pfd_txt = "ILS" .. string.sub(des_app, 2, -1)
		elseif string.sub(des_app, 1, 1) == "L" then 	-- LOC
			pfd_txt = "LOC" .. string.sub(des_app, 2, -1)
		elseif string.sub(des_app, 1, 1) == "D" then 	-- VORDME
			pfd_txt = "VDM" .. string.sub(des_app, 2, -1)
		elseif string.sub(des_app, 1, 1) == "V" then 	-- VOR
			pfd_txt = "VOR" .. string.sub(des_app, 2, -1)
		else
			pfd_txt = des_app
		end
		
		if rnav_idx_last > 0 and rnav_idx_last <= legs_num then
			pfd_txt = pfd_txt .. "/"
			pfd_crs = (math.deg(legs_data[rnav_idx_last][2]) + simDR_mag_variation) % 360
			pfd_txt = pfd_txt .. string.format("%03d", pfd_crs)
			pfd_fo_nav_txt1 = pfd_txt
			pfd_txt = legs_data[rnav_idx_last][1] .. " "
			if rw_dist > 0 then
				if rw_dist < 9.95 then
					pfd_txt = pfd_txt .. string.format("%4.1f", rw_dist)
				else
					pfd_txt = pfd_txt .. string.format("%3d", rw_dist)
				end
			end
			pfd_fo_nav_txt2 = pfd_txt
		else
			pfd_fo_nav_txt1 = pfd_txt
			pfd_fo_nav_txt2 = ""
		end
	else
		pfd_fo_nav_txt1 = ""
		pfd_fo_nav_txt2 = ""
	end

end


-- calculate dist by alt
function calc_vnav_pth_dist(x_alt01, x_alt02)
	
	local ii = 0
	local x_alt1 = 0
	local x_alt2 = 0
	local x_dist1 = 0
	local x_dist2 = 0
	local result_tmp = 0
	local result = 0
	
	if vnav_des_table_num > 0 then
		-- min alt
		for ii = 1, vnav_des_table_num do
			if x_alt01 <= vnav_des_table_alt[ii] then
				x_dist2 = vnav_des_table_dist[ii]
				x_alt2 = vnav_des_table_alt[ii]
				if ii > 1 then
					x_dist1 = vnav_des_table_dist[ii-1]
					x_alt1 = vnav_des_table_alt[ii-1]
				end
				break
			end
		end

		result_tmp = B738_rescale(x_alt1, x_dist1, x_alt2, x_dist2, x_alt01)

		-- max alt
		x_alt1 = 0
		x_alt2 = 0
		x_dist1 = 0
		x_dist2 = 0
		for ii = 1, vnav_des_table_num do
			if x_alt02 <= vnav_des_table_alt[ii] then
				x_dist2 = vnav_des_table_dist[ii]
				x_alt2 = vnav_des_table_alt[ii]
				if ii > 1 then
					x_dist1 = vnav_des_table_dist[ii-1]
					x_alt1 = vnav_des_table_alt[ii-1]
				end
				break
			end
		end

		result = B738_rescale(x_alt1, x_dist1, x_alt2, x_dist2, x_alt02)

		result = result - result_tmp
		if result < 0 then
			result = 0
		end
	else
		result = 0
	end
	
	return result
	
end

-- calculate alt by distance
function calc_vnav_pth_alt(x_alt01, x_dist)
	
	local ii = 0
	local x_dist00 = 0
	local x_dist1 = 0
	local x_dist2 = 0
	local x_alt1 = 0
	local x_alt2 = 0
	local result = 0
	
	if vnav_des_table_num > 0 then
	
		x_dist00 = calc_vnav_pth_dist(0, x_alt01)
		x_dist00 = x_dist00 + x_dist
		
		for ii = 1, vnav_des_table_num do
			if x_dist00 <= vnav_des_table_dist[ii] then
				x_dist2 = vnav_des_table_dist[ii]
				x_alt2 = vnav_des_table_alt[ii]
				if ii > 1 then
					x_dist1 = vnav_des_table_dist[ii-1]
					x_alt1 = vnav_des_table_alt[ii-1]
				end
				break
			end
		end
		
		if x_dist2 == 0 then
			result = 41000
		else
			result = B738_rescale(x_dist1, x_alt1, x_dist2, x_alt2, x_dist00)
		end
	
	else
		result = 0
	end
	
	return result
end

function create_vpth_table(x_gw_str)
	
	local ii = 0
	local x_dist1 = 0
	local x_dist2 = 0
	local x_gw1 = 0
	local x_gw2 = 0
	local tmp_des_spd = math.min(B738DR_fmc_descent_speed, 290)
	tmp_des_spd = math.max(B738DR_fmc_descent_speed, 265)
	local x_idx_des_spd = B738_rescale(265, 1.15, 290, 0.9, tmp_des_spd)
	local x_gw = tonumber(x_gw_str)
	if x_gw == nil then
		x_gw = 40
	end
	local x_gw00 = math.min ( 70, x_gw)
	x_gw00 = math.max ( 40, x_gw00)
	
	x_gw2 = math.min ( 70, roundUpToIncrement(x_gw00, 10 ))
	x_gw2 = math.max ( 40, x_gw2)
	x_gw1 = math.min (70, x_gw2 - 10)
	x_gw1 = math.max ( 40, x_gw1)
	
	vnav_des_table_dist = {}
	vnav_des_table_alt = {}
	vnav_des_table_num = 0
	for ii = 1, 18 do
		x_dist1 = vnav_des_dist[x_gw1][ii]
		x_dist2 = vnav_des_dist[x_gw2][ii]
		if vnav_des_alt[ii] >= 11000 then
			x_dist1 = x_dist1 * x_idx_des_spd
			x_dist2 = x_dist2 * x_idx_des_spd
		end
		vnav_des_table_dist[ii] = B738_rescale(x_gw1, x_dist1, x_gw2, x_dist2, x_gw00)
		vnav_des_table_alt[ii] = vnav_des_alt[ii]
		vnav_des_table_num = vnav_des_table_num + 1
	end
	
end

function modify_vpth_table(x_alt01, x_idx)
	
	local ii = 0
	local jj = 0
	
	if vnav_des_table_num > 0 and x_idx ~= 1 then
		for ii = 1, vnav_des_table_num do
			if x_alt01 < vnav_des_alt[ii] then
				for jj = ii, vnav_des_table_num do
					vnav_des_table_dist[jj] = vnav_des_table_dist[jj] * x_idx
				end
				break
			end
		end
	end
	
end


-- calculate dist by alt
function calc_vnav_pth_dist2(x_alt01, x_alt02)
	
	local ii = 0
	local x_alt1 = 0
	local x_alt2 = 0
	local x_dist1 = 0
	local x_dist2 = 0
	local result_tmp = 0
	local result = 0
	
	if vnav_des_table_num2 > 0 then
		-- min alt
		for ii = 1, vnav_des_table_num2 do
			if x_alt01 <= vnav_des_table_alt2[ii] then
				x_dist2 = vnav_des_table_dist2[ii]
				x_alt2 = vnav_des_table_alt2[ii]
				if ii > 1 then
					x_dist1 = vnav_des_table_dist2[ii-1]
					x_alt1 = vnav_des_table_alt2[ii-1]
				end
				break
			end
		end

		result_tmp = B738_rescale(x_alt1, x_dist1, x_alt2, x_dist2, x_alt01)

		-- max alt
		x_alt1 = 0
		x_alt2 = 0
		x_dist1 = 0
		x_dist2 = 0
		for ii = 1, vnav_des_table_num2 do
			if x_alt02 <= vnav_des_table_alt2[ii] then
				x_dist2 = vnav_des_table_dist2[ii]
				x_alt2 = vnav_des_table_alt2[ii]
				if ii > 1 then
					x_dist1 = vnav_des_table_dist2[ii-1]
					x_alt1 = vnav_des_table_alt2[ii-1]
				end
				break
			end
		end

		result = B738_rescale(x_alt1, x_dist1, x_alt2, x_dist2, x_alt02)

		result = result - result_tmp
		if result < 0 then
			result = 0
		end
	else
		result = 0
	end
	
	return result
	
end

-- calculate alt by distance
function calc_vnav_pth_alt2(x_alt01, x_dist)
	
	local ii = 0
	local x_dist00 = 0
	local x_dist1 = 0
	local x_dist2 = 0
	local x_alt1 = 0
	local x_alt2 = 0
	local result = 0
	
	if vnav_des_table_num2 > 0 then
	
		x_dist00 = calc_vnav_pth_dist2(0, x_alt01)
		x_dist00 = x_dist00 + x_dist
		
		for ii = 1, vnav_des_table_num2 do
			if x_dist00 <= vnav_des_table_dist2[ii] then
				x_dist2 = vnav_des_table_dist2[ii]
				x_alt2 = vnav_des_table_alt2[ii]
				if ii > 1 then
					x_dist1 = vnav_des_table_dist2[ii-1]
					x_alt1 = vnav_des_table_alt2[ii-1]
				end
				break
			end
		end
		
		if x_dist2 == 0 then
			result = 41000
		else
			result = B738_rescale(x_dist1, x_alt1, x_dist2, x_alt2, x_dist00)
		end
	
	else
		result = 0
	end
	
	return result
end

function create_vpth_table2(x_gw_str)
	
	local ii = 0
	local x_dist1 = 0
	local x_dist2 = 0
	local x_gw1 = 0
	local x_gw2 = 0
	local tmp_des_spd = math.min(B738DR_fmc_descent_speed, 290)
	tmp_des_spd = math.max(B738DR_fmc_descent_speed, 265)
	local x_idx_des_spd = B738_rescale(265, 1.15, 290, 0.9, tmp_des_spd)
	local x_gw = tonumber(x_gw_str)
	if x_gw == nil then
		x_gw = 40
	end
	local x_gw00 = math.min ( 70, x_gw)
	x_gw00 = math.max ( 40, x_gw00)
	
	x_gw2 = math.min ( 70, roundUpToIncrement(x_gw00, 10 ))
	x_gw2 = math.max ( 40, x_gw2)
	x_gw1 = math.min (70, x_gw2 - 10)
	x_gw1 = math.max ( 40, x_gw1)
	
	vnav_des_table_dist2 = {}
	vnav_des_table_alt2 = {}
	vnav_des_table_num2 = 0
	for ii = 1, 18 do
		x_dist1 = vnav_des_dist[x_gw1][ii]
		x_dist2 = vnav_des_dist[x_gw2][ii]
		if vnav_des_alt[ii] >= 11000 then
			x_dist1 = x_dist1 * x_idx_des_spd
			x_dist2 = x_dist2 * x_idx_des_spd
		end
		vnav_des_table_dist2[ii] = B738_rescale(x_gw1, x_dist1, x_gw2, x_dist2, x_gw00)
		vnav_des_table_alt2[ii] = vnav_des_alt[ii]
		vnav_des_table_num2 = vnav_des_table_num2 + 1
	end
	
end

function modify_vpth_table2(x_alt01, x_idx)
	
	local ii = 0
	local jj = 0
	
	if vnav_des_table_num2 > 0 and x_idx ~= 1 then
		for ii = 1, vnav_des_table_num2 do
			if x_alt01 < vnav_des_alt[ii] then
				for jj = ii, vnav_des_table_num2 do
					vnav_des_table_dist2[jj] = vnav_des_table_dist2[jj] * x_idx
				end
				break
			end
		end
	end
	
end

function calc_err_ratio()
	
	vnav_alt_err_ratio = B738DR_vnav_alt_err - vnav_alt_err_ratio_old
	vnav_alt_err_ratio_old = B738DR_vnav_alt_err
	
end

function B738_vnav_pth3()

	local n = 0
	local dist = 0
	local vnav_td_dist = 0
	local ii = 0
	local ed_found_temp = 0
	local ed_alt_temp = 0
	
	local rnav_idx_last_1 = 0
	local rnav_idx_post = 0
	
	local vnav_vvi_trg = 0
	local vnav_vvi_tmp = 0
	local gp_vvi_trg = 0
	local gp_vvi_tmp = 0
	
	local nd_lat = 0
	local nd_lon = 0
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_x = 0
	local nd_y = 0
	local td_enable = 0
	local rnav_disable = 0
	
	local nd_dis = 0
	local nd_hdg = 0
	local true_brg = 0
	local relative_brg = 0
	--local vnav_vvi_old = 0
	
	local nd_vert_path = 0
	local rnav_vpa_temp = 0
	local gp_active = 0
	local descent_vpa = 0
	local gp_disable = 0
	local vnav_app_active = 0
	local not_idle_pth = 0
	local idle_pth_idx = 0
	local vnav_alt_cor = 0
	
	if ref_icao == "----" or des_icao == "****" then
		legs_num = 0
	end
	
	
	if B738DR_flight_phase < 5 then
		td_enable = 1
		rnav_disable = 1
	end
	if B738DR_flight_phase == 8 then
		if B738DR_speed_mode == 4 or B738DR_speed_mode == 5 or B738DR_speed_mode == 8 then
			td_enable = 1
			rnav_disable = 1
		end
	end
	if B738DR_fms_ils_disable == 0 or rnav_disable == 1 then
		gp_disable = 1
	end
	if td_idx == 0 then
		--td_enable = 1
		td_enable = 0
	end
	
	--if crz_alt_num > 0 and legs_num > 0 and offset > 0 and cost_index ~= "***" and ref_icao ~= "----" and des_icao ~= "****" then
	if crz_alt_num > 0 and legs_num > 0 and offset > 0 and perf_exec > 0 and ref_icao ~= "----" and des_icao ~= "****" then
		if offset > legs_num then
			offset = legs_num
		end
		
		if td_enable == 0 then
			B738DR_vnav_td_dist = 0
		else
			if offset == td_idx then
				vnav_td_dist = simDR_fmc_dist - td_dist
			else
				-- if offset == td_idx then
					-- vnav_td_dist = simDR_fmc_dist - td_dist
				-- else
					for ii = offset, td_idx do
						if ii == offset then
							vnav_td_dist = simDR_fmc_dist
						elseif ii < td_idx then
							vnav_td_dist = vnav_td_dist + legs_data[ii][3]
						else
							vnav_td_dist = vnav_td_dist + legs_data[ii][3] - td_dist
						end
					end
				-- end
			end
			B738DR_vnav_td_dist = vnav_td_dist
		end
		
		ed_found_temp = ed_found
		ed_alt_temp = ed_alt
		descent_vpa = ed_vpa
		if ed_fix_num > 0 then
			for n = 1, ed_fix_num do
				if offset <= ed_fix_found2[n] then
					ed_found_temp = ed_fix_found2[n]
					ed_alt_temp = ed_fix_alt2[n]
					descent_vpa = ed_fix_vpa2[n]
					idle_pth_idx = n
					break
				end
			end
			if idle_pth_idx == 0 or idle_pth_idx > 1 then
				not_idle_pth = 1
			end
		end
		
		--vnav_vvi_old = B738DR_vnav_vvi
	
		-- calculate VNAV PTH
		--if crz_alt_num > 0 and legs_num > 0 and offset > 1 and cost_index ~= "***" then
			
			if offset > legs_num then
				offset = legs_num
			end
			
			ed_to_dist = 0
			rw_dist = 0
			
			if offset <= ed_found_temp then
				
				 -- VNAV profile
				--if vnav_td_dist == 0 or (B738DR_flight_phase > 4 and B738DR_flight_phase < 7) then
				if vnav_td_dist == 0 or (B738DR_flight_phase > 4 and B738DR_flight_phase < 8) then
					if offset == ed_found_temp then
						dist = simDR_fmc_dist2
						--dist = simDR_fmc_dist
					else
						for n = offset, ed_found_temp do
							if n == offset then
								dist = simDR_fmc_dist2
								--dist = simDR_fmc_dist
							else
								dist = dist + legs_data[n][3]
							end
						end
					end
					ed_to_dist = dist
					if not_idle_pth == 0 then
						B738DR_vnav_pth_alt = calc_vnav_pth_alt(ed_alt_temp, dist)
					else
						B738DR_vnav_pth_alt = ed_alt_temp + ((dist * (math.tan(math.rad(descent_vpa)))) * 6076.11549) -- ft
					end
					
					B738DR_vnav_alt_err = B738DR_vnav_pth_alt - simDR_altitude_pilot
					if B738DR_vnav_alt_err > 9999 then
						B738DR_vnav_err_pfd = 9999
					else
						if B738DR_vnav_alt_err < -9999 then
							B738DR_vnav_err_pfd = -9999
						else
							B738DR_vnav_err_pfd = B738DR_vnav_alt_err
						end
					end
					
					nd_vert_path = 1
					-- B738DR_vnav_vvi_corr = (B738DR_vnav_alt_err - 55) * B738DR_vvi_const	-- correction -55
					-- vnav_vvi_trg = (simDR_ground_spd * (math.tan(math.rad(descent_vpa))) * 6076.11549 / 60)  -- ft / min
					-- vnav_vvi_trg = -vnav_vvi_trg + B738DR_vnav_vvi_corr
					-- vnav_vvi_trg = vnav_vvi_trg / 1000
					-- vnav_vvi_trg = math.max (vnav_vvi_trg, -2.5)
					-- vnav_vvi_trg = math.min (vnav_vvi_trg, 0)
					-- vnav_vvi_tmp = B738DR_vnav_vvi / 1000
					-- if B738DR_altitude_mode == 5 and simDR_autopilot_altitude_mode ~= 6 then -- VNAV
						-- vnav_vvi_tmp = B738_set_anim_value2(vnav_vvi_tmp, vnav_vvi_trg, -2.5, 0, 2, 0.02)
						-- B738DR_vnav_vvi = vnav_vvi_tmp * 1000
					-- else
						-- B738DR_vnav_vvi = 0
					-- end
					
					--vnav_alt_err
					
					if B738DR_vnav_alt_err < 0 then
						vnav_alt_cor = B738DR_vnav_alt_err / 100
						vnav_alt_cor = -vnav_alt_cor
						vnav_alt_cor = math.min(10, vnav_alt_cor)
						vnav_alt_cor = math.max(0, vnav_alt_cor)
						vnav_alt_cor = -B738_rescale(0, 0, 10, 2800, vnav_alt_cor)
					else
						vnav_alt_cor = B738DR_vnav_alt_err / 100
						vnav_alt_cor = math.min(10, vnav_alt_cor)
						vnav_alt_cor = math.max(0, vnav_alt_cor)
						vnav_alt_cor = B738_rescale(0, 0, 10, 2800, vnav_alt_cor)
					end
					
					B738DR_vnav_vvi_corr = vnav_alt_cor - (-vnav_alt_err_ratio * 60)
					
					vnav_vvi_trg = simDR_vvi_fpm_pilot + B738DR_vnav_vvi_corr
					vnav_vvi_trg = vnav_vvi_trg / 1000
					vnav_vvi_trg = math.max (vnav_vvi_trg, -2.7)
					vnav_vvi_trg = math.min (vnav_vvi_trg, 0)
					vnav_vvi_tmp = B738DR_vnav_vvi / 1000
					
					if B738DR_altitude_mode == 5 and simDR_autopilot_altitude_mode ~= 6 then -- VNAV
						vnav_vvi_tmp = B738_set_anim_value2(vnav_vvi_tmp, vnav_vvi_trg, -2.7, 0, 2, 0.02)
						B738DR_vnav_vvi = vnav_vvi_tmp * 1000
					else
						B738DR_vnav_vvi = 0
					end
					
					if B738DR_vnav_vvi < -2700 then		-- max descent vvi -2500
						B738DR_vnav_vvi= -2700
					end
					if B738DR_vnav_vvi > 0 then		-- min descent vvi 0
						B738DR_vnav_vvi = 0
					end
				end
			
			else
				
				-- RNAV profile
				if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
					nd_vert_path = 0
				elseif rnav_disable == 1 then
					nd_vert_path = 0
				else
				
					
					--if rnav_vpa < 0 and offset > ed_found and offset >= rnav_idx_first and offset <= rnav_idx_last then
					if rnav_vpa < 0 and offset > ed_found and offset <= rnav_idx_last then
						
						rnav_vpa_temp = -rnav_vpa
							
						-- calc track distance to RW
						if offset == rnav_idx_last then
							nd_lat = math.rad(simDR_latitude) 
							nd_lon = math.rad(simDR_longitude) 
							nd_lat2 = math.rad(legs_data[rnav_idx_last][7])
							nd_lon2 = math.rad(legs_data[rnav_idx_last][8])
							nd_x = (nd_lon2 - nd_lon) * math.cos((nd_lat + nd_lat2)/2)
							nd_y = nd_lat2 - nd_lat
							rw_dist = math.sqrt(nd_x*nd_x + nd_y*nd_y) * 3440.064795	--nm
						else
							for n = offset, rnav_idx_last do
								if n == offset then
									rw_dist = simDR_fmc_dist2
									--rw_dist = simDR_fmc_dist
								else
									rw_dist = rw_dist + legs_data[n][3]
								end
							end
						end
						
						-- calc VNAV path error
						B738DR_vnav_pth_alt = rnav_alt + ((rw_dist * (math.tan(math.rad(rnav_vpa_temp)))) * 6076.11549)	-- (in ft)
						B738DR_vnav_alt_err = B738DR_vnav_pth_alt - simDR_altitude_pilot
						if B738DR_vnav_alt_err > 9999 then
							B738DR_vnav_err_pfd = 9999
						else
							if B738DR_vnav_alt_err < -9999 then
								B738DR_vnav_err_pfd = -9999
							else
								B738DR_vnav_err_pfd = B738DR_vnav_alt_err
							end
						end
						
						-- VNAV path
						nd_vert_path = 1
						gp_active = 1
						vnav_app_active = 1
						
						--B738DR_vnav_vvi = vnav_vvi_old
						B738DR_vnav_vvi_corr = (B738DR_vnav_alt_err - 55) * B738DR_vvi_const	-- correction -55
						vnav_vvi_trg = (simDR_ground_spd * (math.tan(math.rad(rnav_vpa_temp))) * 6076.11549 / 60)  -- ft / min
						vnav_vvi_trg = -vnav_vvi_trg + B738DR_vnav_vvi_corr
						vnav_vvi_trg = vnav_vvi_trg / 1000
						vnav_vvi_trg = math.max (vnav_vvi_trg, -2.2)
						vnav_vvi_trg = math.min (vnav_vvi_trg, 0)
						vnav_vvi_tmp = B738DR_vnav_vvi / 1000
						if simDR_autopilot_altitude_mode ~= 6 then
							if B738DR_altitude_mode == 5 or B738DR_altitude_mode == 7 then	-- VNAV or G/P
								vnav_vvi_tmp = B738_set_anim_value2(vnav_vvi_tmp, vnav_vvi_trg, -2.2, 0, 2, 0.08)
								B738DR_vnav_vvi = vnav_vvi_tmp * 1000
							end
						else
							B738DR_vnav_vvi = 0
						end
						
						if B738DR_vnav_vvi < -2200 then		-- max vvi
							B738DR_vnav_vvi= -2200
						end
						if B738DR_vnav_vvi > 0 then		-- min vvi -200
							B738DR_vnav_vvi = 0
						end
					end
				end
			end
		--end
		
		B738DR_nd_vert_path = nd_vert_path
		if gp_disable == 0 then
			B738DR_gp_active = gp_active
		else
			B738DR_gp_active = 0
		end
		if nd_vert_path == 0 then
			B738DR_vnav_alt_err = 500
			B738DR_vnav_vvi = 0
			ed_to_dist = 0
		end
		
		-- calculate RNAV
		if offset > 1 and ed_found ~= 0 and rnav_idx_first ~= 0 and rnav_idx_last ~= 0 then
			
			if simDR_on_ground_0 == 1 and simDR_on_ground_1 == 1 and simDR_on_ground_2 == 1 then
				B738DR_gp_alt_err = 500
				B738DR_fac_xtrack = 0
				B738DR_pfd_gp_path = 0
			--elseif rnav_disable == 1 then
			elseif gp_disable == 1 then
				B738DR_gp_alt_err = 500
				B738DR_fac_xtrack = 0
				B738DR_pfd_gp_path = 0
			else
			
				if offset > legs_num then
					offset = legs_num
				end
				
				-- vpa exist
				if rnav_vpa < 0 and offset <= rnav_idx_last then
					
					rnav_vpa_temp = -rnav_vpa
					--rnav_vpa_temp = 3.0		-- GP angle = 3 deg
					
					-- calc direct distance to RW
					nd_lat = simDR_latitude
					nd_lon = simDR_longitude
					nd_lat2 = legs_data[rnav_idx_last][7]
					nd_lon2 = legs_data[rnav_idx_last][8]
					
					nd_dis = nd_calc_dist2(nd_lat, nd_lon, nd_lat2, nd_lon2)
						
					if nd_dis < 28 then
						-- calc GP path error
						B738DR_gp_alt_err = rnav_alt + ((nd_dis * (math.tan(math.rad(rnav_vpa_temp)))) * 6076.11549)	-- GP 3 deg (in ft)
						B738DR_gp_alt_err = B738DR_gp_alt_err - simDR_altitude_pilot
						if B738DR_gp_alt_err > 9999 then
							B738DR_gp_err_pfd = 9999
						else
							if B738DR_gp_alt_err < -9999 then
								B738DR_gp_err_pfd = -9999
							else
								B738DR_gp_err_pfd = B738DR_gp_alt_err
							end
						end
						
						-- calc FAC xtrack
						nd_lat = math.rad(nd_lat)
						nd_lon = math.rad(nd_lon)
						nd_lat2 = math.rad(nd_lat2)
						nd_lon2 = math.rad(nd_lon2)
						B738DR_fac_trk = math.deg(legs_data[rnav_idx_last][2])
						
						nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
						nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
						nd_hdg = math.atan2(nd_y, nd_x)
						nd_hdg = math.deg(nd_hdg)
						nd_hdg = (nd_hdg + simDR_mag_variation + 360) % 360
						
						true_brg = (B738DR_fac_trk + simDR_mag_variation + 360) % 360
						
						-- calculate xtrack
						relative_brg = (true_brg - nd_hdg + 360) % 360
						if relative_brg > 180 then
							relative_brg = relative_brg - 360
						end
						if relative_brg < 0 then
							if relative_brg > -90 then
								relative_brg = -relative_brg
								B738DR_fac_xtrack = -nd_dis * math.sin(math.rad(relative_brg))
							else
								B738DR_fac_xtrack = -999
							end
						else
							if relative_brg < 90 then
								B738DR_fac_xtrack = nd_dis * math.sin(math.rad(relative_brg))
							else
								B738DR_fac_xtrack = 999
							end
						end
						
						-- GP path
						B738DR_pfd_gp_path = 1
						B738DR_gp_vvi_corr = (B738DR_gp_alt_err - 55) * B738DR_vvi_const	-- correction -55
						gp_vvi_trg = (simDR_ground_spd * (math.tan(math.rad(rnav_vpa_temp))) * 6076.11549 / 60)  -- ft / min
						gp_vvi_trg = -gp_vvi_trg + B738DR_gp_vvi_corr
						gp_vvi_trg = gp_vvi_trg / 1000
						gp_vvi_trg = math.max (gp_vvi_trg, -2.0)
						gp_vvi_trg = math.min (gp_vvi_trg, -0.2)
						gp_vvi_tmp = B738DR_gp_vvi / 1000
						gp_vvi_tmp = B738_set_anim_value2(gp_vvi_tmp, gp_vvi_trg, -2.0, -0.2, 2, 0.08)
						B738DR_gp_vvi = gp_vvi_tmp * 1000
						
						if B738DR_gp_vvi < -2000 then		-- max vvi
							B738DR_gp_vvi= -2000
						end
						if B738DR_gp_vvi > 0 then		-- min vvi -200
							B738DR_gp_vvi = 0
						end
					else
						B738DR_pfd_gp_path = 0
						B738DR_gp_alt_err = 500
						B738DR_fac_xtrack = 0
					end
				else
					B738DR_pfd_gp_path = 0
					B738DR_gp_alt_err = 500
					B738DR_fac_xtrack = 0
				end
			end
		end
	else
		
		B738DR_nd_vert_path = 0
		B738DR_gp_active = 0
		B738DR_vnav_alt_err = 500
		B738DR_vnav_vvi = 0
		ed_to_dist = 0
		
		B738DR_pfd_gp_path = 0
		B738DR_gp_alt_err = 500
		B738DR_fac_xtrack = 0
	
	end
	
	B738DR_vnav_app_active = vnav_app_active
	
	
	--- PFD DEV
	
	-- Captain
	local horz_active = 0
	if B738DR_nav_horz_dsp == 1 and B738DR_nav_flag_ft == 1 then
		horz_active = 1
		B738DR_nd_fac_horizontal = 0
	else
		B738DR_nd_fac_horizontal = 1
	end
	
	local vert_active = 0
	if B738DR_nav_flag_gs == 0 and B738DR_nav_vert_dsp == 1 then
		vert_active = 1
	end
	
	if B738DR_fms_ils_disable == 0 then
		if vert_active == 0 then 
			if B738DR_nd_vert_path == 1 then
				B738DR_autopilot_pfd_mode = 2 	-- LNAV/VNAV
				B738DR_pfd_vert_path = 1
				pfd_rnav()
			else
				B738DR_pfd_vert_path = 0
				if B738DR_autopilot_vnav_status == 0 then
					B738DR_autopilot_pfd_mode = 0	-- none
				else
					B738DR_autopilot_pfd_mode = 2 	-- LNAV/VNAV
					pfd_cpt_nav_txt1 = ""
					pfd_cpt_nav_txt2 = ""
				end
			end
		else
			if B738DR_nav_type == 4 then
				B738DR_autopilot_pfd_mode = 0	-- none
				pfd_cpt_nav_txt1 = ""
				pfd_cpt_nav_txt2 = ""
			else
				B738DR_autopilot_pfd_mode = 1 	-- ILS
				B738DR_pfd_vert_path = 0
				pfd_ils()
			end
		end
	else
		if B738DR_gp_active == 0 then
			if B738DR_nd_vert_path == 0 then
				B738DR_pfd_vert_path = 0
				if B738DR_autopilot_vnav_status == 0 then
					B738DR_autopilot_pfd_mode = 0	-- none
				else
					B738DR_autopilot_pfd_mode = 2 	-- LNAV/VNAV
					pfd_cpt_nav_txt1 = ""
					pfd_cpt_nav_txt2 = ""
				end
			else
				if horz_active == 1 then
					if B738DR_nav_type == 4 then
						B738DR_autopilot_pfd_mode = 0	-- none
						pfd_cpt_nav_txt1 = ""
						pfd_cpt_nav_txt2 = ""
					else
						B738DR_autopilot_pfd_mode = 3 	-- LOC/VNAV
						pfd_loc()
					end
				else
					B738DR_autopilot_pfd_mode = 2 	-- LNAV/VNAV
					pfd_rnav()
				end
				B738DR_pfd_vert_path = 1
			end
		elseif B738DR_gp_active == 1 then
			if horz_active == 0 then
				if fac_engaged == 0 then
					if B738DR_nd_vert_path == 0 then
					B738DR_autopilot_pfd_mode = 0	-- none
					else
						B738DR_autopilot_pfd_mode = 2 	-- LNAV/VNAV
						pfd_cpt_nav_txt1 = ""
						pfd_cpt_nav_txt2 = ""
					end
				else
					B738DR_autopilot_pfd_mode = 4 	-- FMC -> FAC/GP
					pfd_rnav()
					B738DR_pfd_vert_path = 0
				end
			else
				if fac_engaged == 1 then
					B738DR_autopilot_pfd_mode = 4 	-- FMC -> FAC/GP
					pfd_rnav()
					B738DR_pfd_vert_path = 0
				elseif loc_gp_engaged == 1 then
					if B738DR_nav_type == 4 then
						B738DR_autopilot_pfd_mode = 0	-- none
						pfd_cpt_nav_txt1 = ""
						pfd_cpt_nav_txt2 = ""
					else
						B738DR_autopilot_pfd_mode = 3 	-- LOC/GP
						pfd_loc()
						B738DR_pfd_vert_path = 0
					end
				else
					if B738DR_nav_type == 4 then
						B738DR_autopilot_pfd_mode = 0	-- none
						pfd_cpt_nav_txt1 = ""
						pfd_cpt_nav_txt2 = ""
					else
						B738DR_autopilot_pfd_mode = 3 	-- LOC/VNAV (GP)
						pfd_loc()
					end
				end
			end
		end
	end
	if B738DR_autopilot_pfd_mode == 0 then
		pfd_cpt_nav_txt1 = ""
		pfd_cpt_nav_txt2 = ""
	end
	
	-- First Officer
	horz_active = 0
	if B738DR_nav_horz_dsp_fo == 1 and B738DR_nav_flag_ft_fo == 1 then
		horz_active = 1
		B738DR_nd_fac_horizontal_fo = 0
	else
		B738DR_nd_fac_horizontal_fo = 1
	end
	
	vert_active = 0
	if B738DR_nav_flag_gs_fo == 0 and B738DR_nav_vert_dsp_fo == 1 then
		vert_active = 1
	end
	
	if B738DR_fms_ils_disable == 0 then
		if vert_active == 0 then 
			if B738DR_nd_vert_path == 1 then
				B738DR_autopilot_pfd_mode_fo = 2 	-- LNAV/VNAV
				B738DR_pfd_vert_path_fo = 1
				pfd_fo_rnav()
			else
				B738DR_pfd_vert_path_fo = 0
				if B738DR_autopilot_vnav_status == 0 then
					B738DR_autopilot_pfd_mode_fo = 0	-- none
				else
					B738DR_autopilot_pfd_mode_fo = 2 	-- LNAV/VNAV
					pfd_fo_nav_txt1 = ""
					pfd_fo_nav_txt2 = ""
				end
			end
		else
			if B738DR_nav_type_fo == 4 then
				B738DR_autopilot_pfd_mode_fo = 0	-- none
				pfd_fo_nav_txt1 = ""
				pfd_fo_nav_txt2 = ""
			else
				B738DR_autopilot_pfd_mode_fo = 1 	-- ILS
				B738DR_pfd_vert_path_fo = 0
				pfd_fo_ils()
			end
		end
	else
		if B738DR_gp_active == 0 then
			if B738DR_nd_vert_path == 0 then
				B738DR_pfd_vert_path_fo = 0
				if B738DR_autopilot_vnav_status == 0 then
					B738DR_autopilot_pfd_mode_fo = 0	-- none
				else
					B738DR_autopilot_pfd_mode_fo = 2 	-- LNAV/VNAV
					pfd_cpt_nav_txt1 = ""
					pfd_cpt_nav_txt2 = ""
				end
			else
				if horz_active == 1 then
					if B738DR_nav_type_fo == 4 then
						B738DR_autopilot_pfd_mode_fo = 0	-- none
						pfd_fo_nav_txt1 = ""
						pfd_fo_nav_txt2 = ""
					else
						B738DR_autopilot_pfd_mode_fo = 3 	-- LOC/VNAV
						pfd_fo_loc()
					end
				else
					B738DR_autopilot_pfd_mode_fo = 2 	-- LNAV/VNAV
					pfd_fo_rnav()
				end
				B738DR_pfd_vert_path_fo = 1
			end
		elseif B738DR_gp_active == 1 then
			if horz_active == 0 then
				if fac_engaged == 0 then
					if B738DR_nd_vert_path == 0 then
					B738DR_autopilot_pfd_mode_fo = 0	-- none
					else
						B738DR_autopilot_pfd_mode_fo = 2 	-- LNAV/VNAV
						pfd_cpt_nav_txt1 = ""
						pfd_cpt_nav_txt2 = ""
					end
				else
					B738DR_autopilot_pfd_mode_fo = 4 	-- FMC -> FAC/GP
					pfd_fo_rnav()
				end
			else
				if fac_engaged == 1 then
					B738DR_autopilot_pfd_mode_fo = 4 	-- FMC -> FAC/GP
					pfd_fo_rnav()
					B738DR_pfd_vert_path_fo = 0
				elseif loc_gp_engaged == 1 then
					if B738DR_nav_type_fo == 4 then
						B738DR_autopilot_pfd_mode_fo = 0	-- none
						pfd_fo_nav_txt1 = ""
						pfd_fo_nav_txt2 = ""
					else
						B738DR_autopilot_pfd_mode_fo = 3 	-- LOC/GP
						pfd_fo_loc()
						B738DR_pfd_vert_path_fo = 0
					end
				else
					if B738DR_nav_type_fo == 4 then
						B738DR_autopilot_pfd_mode_fo = 0	-- none
						pfd_fo_nav_txt1 = ""
						pfd_fo_nav_txt2 = ""
					else
						B738DR_autopilot_pfd_mode_fo = 3 	-- LOC/VNAV (GP)
						pfd_fo_loc()
					end
				end
			end
		end
	end
	if B738DR_autopilot_pfd_mode == 0 then
		pfd_fo_nav_txt1 = ""
		pfd_fo_nav_txt2 = ""
	end
	
	
end

function B738_fmc_calc()

	local ii = 0
	local jj = 0
	local nd_lat = math.rad(simDR_latitude) 
	local nd_lon = math.rad(simDR_longitude) 
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_dis = 0
	local nd_x = 0
	local nd_y = 0
	local nd_hdg = 0
	local n = 0
	--local delta_hdg = 0
	local dist_corr = 0
	local speed_corr = 0
	local speed = simDR_airspeed_pilot
	local mag_hdg = simDR_ahars_mag_hdg - simDR_mag_variation
	local offset_from = 0
	local time_zulu = 0
	local tmp_wpt_eta2 = 0
	local tmp_wpt_eta3 = 0
	local tmp_wpt_eta4 = ""
	local distance = 0
	
	local relative_brg = 0
	local relative_brg2 = 0
	local true_brg = 0
	local true_hdg = 0
	
	local dist_thrshld = 0
	local gnd_spd = simDR_ground_spd
	local offset_1 = 0
	local temp_txt = ""
	local next_rel_brg = 0
	local next_rel_brg2 = 0
	local next_wpt_enable = 0
	local max_thr = 0
	local lnav_disco = 0
	local hold_skip = 0
	
	local dta_bank_angle = 4
	local dta_time = 0
	local dta_radius_dist = 0
	local dta_radius = 0
	local dta_angle = 0
	local dta_rate_speed = 0
	local delta_radius = 0
	local delta_radius2 = 0
	
	local act_crs = 0
	local next_crs = 0
	local abs_next_rel_brg = 0
	
	local af_lat0 = 0
	local af_lon0 = 0
	
	local crs_circle = 0
	local crs_circle2 = 0
	local dist_circle = 0
	
	
	dist_dest = 0
	time_dest = ""
	dist_tc = 0
	time_tc = 0
	dist_td = 0
	time_td = 0
	dist_ed = 0
	time_ed = 0
	fuel_ed = 0
	fuel_tc = 0
	fuel_td = 0

	if ref_icao == "----" or des_icao == "****" then
		legs_num = 0
	end
	
	if calc_rte_enable == 0 then
		
		-- Detect change STAR, APP
		if B738DR_missed_app_act == 0 and B738DR_flight_phase ~= 8 then
			if flying_star == 1 and change_star == 1 then
				-- LNAV disconnect
				lnav_disco = 1
			elseif flying_app == 1 then
				if change_star == 1 or change_app == 1 then
					-- LNAV disconnect
					lnav_disco = 1
				end
			end
		end
		flying_star = 0
		flying_app = 0
		change_star = 0
		change_app = 0
		
		if lnav_disco == 1 then
			if first_star_idx == 0 then
				offset = legs_num
			else
				offset = first_star_idx - 1
			end
			--if B738DR_heading_mode > 3 and B738DR_heading_mode < 7 then
			if (B738DR_heading_mode > 3 and B738DR_heading_mode < 7) or B738DR_heading_mode == 8 or B738DR_heading_mode == 13 then
				B738DR_lnav_disconnect = 1
				--B738DR_vnav_disconnect = 1
				add_fmc_msg(LNAV_DISCON, 2)
				--B738DR_fmc_message_warn = 1
			end
			B738DR_vnav_disconnect = 1
		end
		
		if legs_num > legs_num_old then
			if nav_mode == 1 or nav_mode == 99 then	--cancel NAV to Dest ICAO
				nav_mode = 0
				offset = offset + 1
			end
		end
		legs_num_old = legs_num
		-----------------------------
		
		if offset > 0 and offset <= legs_num + 1 then
			if legs_num > 1 and legs_num2 > 1 then --and rte_exec == 0 then
				B738DR_fpln_active = 1
				B738DR_fpln_active_fo = 1
				if nav_mode == 1 then
					temp_txt = des_icao
				else
					temp_txt = legs_data[offset][1]
				end
				if string.len(temp_txt) > 5 then
					temp_txt = string.sub(temp_txt, 1, 5)
				end
				B738DR_fpln_nav_id = temp_txt
			else
				B738DR_fpln_active = 0
				B738DR_fpln_active_fo = 0
				B738DR_fpln_nav_id = ""
			end
			
			if legs_num > 0 then
				time_zulu = legs_data[offset][13]
			else
				time_zulu = 0
			end
			if time_zulu > 0 then
				tmp_wpt_eta2 = math.floor(time_zulu)
				tmp_wpt_eta3 = (time_zulu - tmp_wpt_eta2) * 60
				tmp_wpt_eta4 = string.format("%02d", tmp_wpt_eta2) .. string.format("%04.1f", tmp_wpt_eta3)
			else
				tmp_wpt_eta4 = string.format("%02d", simDR_zulu_hours) .. string.format("%02d", simDR_zulu_minutes)
				tmp_wpt_eta4 = tmp_wpt_eta4 .. "." .. string.format("%1d", simDR_zulu_seconds/60)
			end
			B738DR_fms_id_eta = tmp_wpt_eta4
		else
			B738DR_fpln_nav_id = ""
			B738DR_fms_id_eta = ""
			B738DR_fpln_active = 0
			B738DR_fpln_active_fo = 0
		end
		
		
		
	end
	
	
	if legs_num > 0 and lnav_disco == 0 then --and offset <= legs_num then --and calc_rte_enable == 0 then
		
		if offset == 0 then
			offset = 1
		end
		
		if in_flight_mode == 1 and offset == 1 then
			offset = 2
		end
		
		-- RNP
		if legs_num > 1 then
			ii = tonumber(string.sub(legs_data[offset][35], 1, 2))
			if ii == nil then
				if legs_data[offset][19] == 1 or legs_data[offset][19] == 3 then
					-- departure
					ii = 1
				elseif legs_data[offset][19] == 2 or legs_data[offset][19] == 4 then
					-- arrival
					ii = 1
				elseif legs_data[offset][19] == 7 or legs_data[offset][19] == 8 then
					-- approach
					ii = 1
				else
					ii = 2
				end
			else
				if string.sub(legs_data[offset][35], 3, 3) == "1" then
					ii = ii / 10
				elseif string.sub(legs_data[offset][35], 3, 3) == "2" then
					ii = ii / 100
				elseif string.sub(legs_data[offset][35], 3, 3) == "3" then
					ii = ii / 1000
				end
			end
			B738DR_rnp = ii
		end
		
		if nav_mode == 1 then	-- navigate to destination ICAO
			legs_intdir_act = 0
			if simDR_fmc_dist < 5 then
				if (B738DR_heading_mode > 3 and B738DR_heading_mode < 7) or B738DR_heading_mode == 8 or B738DR_heading_mode == 13 then
					B738DR_lnav_disconnect = 1
					--B738DR_vnav_disconnect = 1
					add_fmc_msg(LNAV_DISCON, 2)
					--B738DR_fmc_message_warn = 1
					--nav_mode == 0
					nav_mode = 99
				end
				B738DR_vnav_disconnect = 1
			end
		
		elseif nav_mode ~= 99 then
		
			if offset == 1 then
				nd_lat2 = math.rad(legs_data[offset][7])
				nd_lon2 = math.rad(legs_data[offset][8])
				
				nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
				
				if nd_dis < 4.0 then
					offset = offset + 1
				end
				
				nav_mode = 0
				legs_intdir_act = 0
				B738DR_hold_phase = 0
				hold_term = 0
			
			elseif offset <= legs_num then
				--B738DR_fms_test1 = 100
					nd_lat2 = math.rad(legs_data[offset][7])
					nd_lon2 = math.rad(legs_data[offset][8])
					
					nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
					
					if simDR_on_ground_0 == 1 or simDR_on_ground_1 == 1 or simDR_on_ground_2 == 1 then
						dist_thrshld = 0.2	--next wpt
					else
						if legs_intdir_act == 1 then
							if B738DR_wpt_path == "DF" then
								act_crs = simDR_fmc_crs - simDR_mag_variation
							else
								act_crs = legs_intdir_crs - simDR_mag_variation
							end
						else
							act_crs = simDR_fmc_crs - simDR_mag_variation
						end
						
						if legs_data[offset+1][31] == "AF" then
							next_crs = nd_calc_brg(legs_data[offset+1][23], legs_data[offset+1][24], legs_data[offset][7], legs_data[offset][8])
							if legs_data[offset+1][23] ~= 0 or legs_data[offset+1][24] == 0 then
								af_lat0 = legs_data[offset+1][23]
								af_lon0 = legs_data[offset+1][24]
								
								nd_x = math.deg(legs_data[offset+1][2])
								nd_y = nd_calc_brg(math.deg(nd_lat), math.deg(nd_lon), af_lat0, af_lon0)
								relative_brg = (nd_x - nd_y + 360) % 360
								if relative_brg > 180 then
									relative_brg = relative_brg - 360
								end
								if relative_brg > -75 and relative_brg < 75 then
									-- from Center Arc
									if legs_data[offset+1][21] == 2 then
										-- right
										next_crs = (next_crs + 90) % 360
									else
										-- left
										next_crs = (next_crs + 270) % 360
									end
								else
									-- to Center Arc
									--af_turn = legs_data[offset][21]
									if legs_data[offset+1][21] == 2 then
										-- left
										next_crs = (next_crs + 270) % 360
									else
										-- right
										next_crs = (next_crs + 90) % 360
									end
								end
							end
							
						elseif legs_data[offset+1][31] == "RF" then
							next_crs = nd_calc_brg(legs_data[offset+1][23], legs_data[offset+1][24], legs_data[offset][7], legs_data[offset][8])
							if legs_data[offset+1][21] == 2 then
								-- left
								next_crs = (next_crs + 270) % 360
							else
								-- right
								next_crs = (next_crs + 90) % 360
							end
						else
							next_crs = math.deg(legs_data[offset+1][2])
						end
						
						next_rel_brg = ((next_crs - act_crs) + 360 ) % 360
						
						if B738DR_heading_mode == 4 and (legs_data[offset+1][31] == "HA" or legs_data[offset+1][31] == "HF") then
							nd_x = offset + 2
							if nd_x <= legs_num then
								next_rel_brg = ((math.deg(legs_data[nd_x][2]) - math.deg(legs_data[offset][2])) + 360 ) % 360
							end
						end
						if next_rel_brg > 180 then
							next_rel_brg = next_rel_brg - 360
						end
						
						abs_next_rel_brg = next_rel_brg
						if next_rel_brg < 0 then
							abs_next_rel_brg = -next_rel_brg
						end
						
						if B738DR_heading_mode == 4 then
							nd_x = 0
							--if legs_data[offset+1][31] == "HA" or legs_data[offset+1][31] == "HF" or legs_data[offset+1][31] == "HM" then
							if legs_data[offset+1][31] == "HM" then
								nd_x = 1
							--elseif legs_data[offset+1][31] == "AF" then
								--nd_x = 2
							elseif legs_data[offset][31] == "RF" and legs_data[offset+1][31] == "RF" then
								nd_x = 2
							elseif legs_data[offset][31] == "RF" and legs_data[offset+1][31] == "AF" then
								nd_x = 2
							elseif legs_data[offset][31] == "AF" and legs_data[offset+1][31] == "RF" then
								nd_x = 2
							elseif legs_data[offset][31] == "AF" and legs_data[offset+1][31] == "AF" then
								nd_x = 2
							elseif legs_data[offset][31] == "FD" or legs_data[offset][31] == "CD" or legs_data[offset][31] == "VD" then
								nd_x = 2
							-- elseif legs_data[offset][31] == "RF" then
								-- nd_x = 2
							end
							dta_bank_angle = 6
							if nd_x == 0 then
								if legs_data[offset][1] == "VECTOR" then
									dist_thrshld = 3
								else
									
									gnd_spd = math.min(gnd_spd, 236)
									gnd_spd = math.max(gnd_spd, 71)
									
									-- calc DTA
									next_rel_brg2 = 180 - abs_next_rel_brg
									if next_rel_brg2 == 0 then
										next_rel_brg2 = 1
									end
									dta_bank_angle = 4	-- bank angle 20deg
									dta_rate_speed = B738_rescale(71, 0.3486, 236, 1.16102, gnd_spd)	--0.3586/1.17102
									dta_time = abs_next_rel_brg * dta_rate_speed
									dta_radius_dist = gnd_spd * dta_time / 1852
									dta_radius_dist = dta_radius_dist * 1.2
									dta_angle = math.rad((90 - (next_rel_brg2 / 2)) * 2)
									dta_radius = dta_radius_dist / dta_angle
									dta_angle = math.rad(next_rel_brg2)
									dist_thrshld = dta_radius / math.tan(dta_angle / 2)
									radii_dist_ctr = dta_radius / math.sin(dta_angle / 2)
									delta_radius = radii_dist_ctr - dta_radius - (1.5 * B738DR_rnp)
									if offset+2 <= legs_num and legs_data[offset+1][3] == 0 then
										delta_radius2 = dist_thrshld - (legs_data[offset+2][3] - 0.5)
									else
										delta_radius2 = dist_thrshld - (legs_data[offset+1][3] - 0.5)	--((legs_data[offset+1][3] / 2) - 0.1)
									end
									if delta_radius > 0 or delta_radius2 > 0 then --or (dist_thrshld > 4 and abs_next_rel_brg > 99) then
										dta_bank_angle = 5	-- bank angle 25deg
										dta_rate_speed = B738_rescale(71, 0.3268, 236, 0.8831, gnd_spd)		--0.3368/0.8931
										dta_time = abs_next_rel_brg * dta_rate_speed
										dta_radius_dist = gnd_spd * dta_time / 1852
										dta_radius_dist = dta_radius_dist * 1.2
										dta_angle = math.rad((90 - (next_rel_brg2 / 2)) * 2)
										dta_radius = dta_radius_dist / dta_angle
										dta_angle = math.rad(next_rel_brg2)
										dist_thrshld = dta_radius / math.tan(dta_angle / 2)
										radii_dist_ctr = dta_radius / math.sin(dta_angle / 2)
										delta_radius = radii_dist_ctr - dta_radius - (1.5 * B738DR_rnp)
										if offset+2 <= legs_num and legs_data[offset+1][3] == 0 then
											delta_radius2 = dist_thrshld - (legs_data[offset+2][3] - 0.5)
										else
											delta_radius2 = dist_thrshld - (legs_data[offset+1][3] - 0.5)	--((legs_data[offset+1][3] / 2) - 0.1)
										end
									end
									if delta_radius > 0 or delta_radius2 > 0 then --or (dist_thrshld > 4 and abs_next_rel_brg > 99) then
										dta_bank_angle = 6	-- bank angle 30deg
										dta_rate_speed = B738_rescale(71, 0.3292, 236, 0.7165, gnd_spd)		--0.3392/0.7265
										dta_time = abs_next_rel_brg * dta_rate_speed
										dta_radius_dist = gnd_spd * dta_time / 1852
										dta_radius_dist = dta_radius_dist * 1.2
										dta_angle = math.rad((90 - (next_rel_brg2 / 2)) * 2)
										dta_radius = dta_radius_dist / dta_angle
										dta_angle = math.rad(next_rel_brg2)
										dist_thrshld = dta_radius / math.tan(dta_angle / 2)
										radii_dist_ctr = dta_radius / math.sin(dta_angle / 2)
										if offset+2 <= legs_num and legs_data[offset+1][3] == 0 then
											delta_radius2 = dist_thrshld - (legs_data[offset+2][3] - 0.5)
										else
											delta_radius2 = dist_thrshld - (legs_data[offset+1][3] - 0.5)	--((legs_data[offset+1][3] / 2) - 0.1)
										end
									end
									if (delta_radius2 > 0 and abs_next_rel_brg > 99) then --or dist_thrshld > 4 and abs_next_rel_brg > 95 then
										dist_thrshld = 1
										radii_dist_ctr = 1.4142
										dta_radius = 1
									end
									--dist_thrshld = math.min(dist_thrshld, 5)
								end
							elseif offset == rnav_idx_last then
								dist_thrshld = 0.1
							elseif nd_x == 2 then
								dist_thrshld = 0.1
							else
								dist_thrshld = 0.3
							end
						else
							
							gnd_spd = math.min(gnd_spd, 236)
							gnd_spd = math.max(gnd_spd, 71)
							
							-- calc DTA
							next_rel_brg2 = 180 - abs_next_rel_brg
							if next_rel_brg2 == 0 then
								next_rel_brg2 = 1
							end
							dta_bank_angle = 6	-- bank angle 30deg
							dta_rate_speed = B738_rescale(71, 0.3292, 236, 0.7165, gnd_spd)
							dta_time = abs_next_rel_brg * dta_rate_speed
							dta_radius_dist = gnd_spd * dta_time / 1852
							dta_radius_dist = dta_radius_dist * 1.2 --+ (gnd_spd * 4.5 / 1852)
							dta_angle = math.rad((90 - (next_rel_brg2 / 2)) * 2)
							dta_radius = dta_radius_dist / dta_angle
							dta_angle = math.rad(next_rel_brg2)
							dist_thrshld = dta_radius / math.tan(dta_angle / 2)
							radii_dist_ctr = dta_radius / math.sin(dta_angle / 2)
							if offset+2 <= legs_num and legs_data[offset+1][3] == 0 then
								delta_radius2 = dist_thrshld - (legs_data[offset+2][3] - 0.5)
							else
								delta_radius2 = dist_thrshld - (legs_data[offset+1][3] - 0.5)	--((legs_data[offset+1][3] / 2) - 0.1)
							end
							
							if (delta_radius2 > 0 and abs_next_rel_brg > 99) then --dist_thrshld > 4 and abs_next_rel_brg > 99 then
								dist_thrshld = 1
								radii_dist_ctr = 1.4142
								dta_radius = 1
							end
							--dist_thrshld = math.min(dist_thrshld, 0.5)
						end
					end
					
					relative_brg = (simDR_fmc_crs - simDR_ahars_mag_hdg + 360) % 360
					if relative_brg > 180 then
						relative_brg = relative_brg - 360
					end
					
					-- relative_brg2 = (simDR_fmc_trk - simDR_ahars_mag_hdg + 360) % 360
					-- if relative_brg2 > 180 then
						-- relative_brg2 = relative_brg2 - 360
					-- end
					
					if legs_data[offset][32] == 0 then
						-- Current wpt
						if legs_data[offset][31] == "AF" or legs_data[offset][31] == "RF" then
							-- temporary
							relative_brg2 = (simDR_fmc_trk - simDR_ahars_mag_hdg + 360) % 360
							if relative_brg2 > 180 then
								relative_brg2 = relative_brg2 - 360
							end
							if nd_dis < 0.8 then
								if relative_brg2 > -75 and relative_brg2 < 75 then
									if relative_brg > 80 or relative_brg < -80 then
										next_wpt_enable = 1
									end
								end
							end
						else
							if legs_data[offset+1][1] == "DISCONTINUITY" or legs_data[offset+1][1] == "VECTOR" 
							or legs_data[offset+1][31] == "DF" or string.sub(legs_data[offset+1][31], 1, 1) == "H" then
								relative_brg2 = (simDR_fmc_trk - simDR_ahars_mag_hdg + 360) % 360
							else
								relative_brg2 = (math.deg(legs_data[offset+1][2]) - simDR_ahars_mag_hdg + 360) % 360
							end
							if relative_brg2 > 180 then
								relative_brg2 = relative_brg2 - 360
							end
							if nd_dis < 3 then
								if relative_brg2 > -75 and relative_brg2 < 75 then
									if relative_brg > 90 or relative_brg < -90 then
										next_wpt_enable = 1
										if nav_mode == 5 and legs_data[offset+1][3] > 0 then
											if legs_data[offset+1][31] ~= "HA" and legs_data[offset+1][31] ~= "HF" and legs_data[offset+1][31] ~= "HM" then
												-- Course to Fix
												if legs_data[offset+1][31] ~= "CF" then
													legs_data[offset+1][31] = "CF"
													legs_data[offset+1][18] = math.rad(((math.deg(legs_data[offset+1][2]) + simDR_mag_variation) + 360) % 360)
												end
												legs_data[offset+1][21] = -1
											end
										end
									end
								end
							end
						end
						if nd_dis < dist_thrshld then
							next_wpt_enable = 1
						end
					else
						-- Fly over wpt
						-- if nd_dis < 1 then
							-- if relative_brg2 > -50 and relative_brg2 < 50 then		-- 55
								-- if relative_brg > 70 or relative_brg < -70 then		-- 90
									-- next_wpt_enable = 1
								-- end
							-- end
						-- end
						
						-- Fly over wpt
						if nd_dis < 1 then
							relative_brg2 = (simDR_fmc_trk - simDR_ahars_mag_hdg + 360) % 360
							if relative_brg2 > 180 then
								relative_brg2 = relative_brg2 - 360
							end
							if relative_brg2 > -75 and relative_brg2 < 75 then		-- 55
								if relative_brg > 70 or relative_brg < -70 then		-- 90
									next_wpt_enable = 1
								end
							end
						end
					end
					
					--B738DR_fms_test1 = 101
					
					if next_wpt_enable == 1 then
						last_lat = 0
						last_lon = 0
						
						if legs_data[offset][31] == "HA" then
							if B738DR_heading_mode == 4 then
								nd_x = legs_data[offset][5] - 200
								nd_y = legs_data[offset][5] + 200
								if legs_data[offset][6] == 43 then -- above
									if simDR_altitude_pilot > nd_x then
										hold_term = 1
									end
								elseif legs_data[offset][6] == 45 then -- below
									if simDR_altitude_pilot < nd_y then
										hold_term = 1
									end
								else
									--if nd_x >= legs_data[offset][5] and nd_y <= legs_data[offset][5] then
									if simDR_altitude_pilot > nd_x and simDR_altitude_pilot < nd_y then
										-- HOLD altitude termination
										hold_term = 1
									end
								end
								-- HOLD at wpt
								nav_mode = 3
							else
								offset = offset + 1
								B738DR_hold_phase = 0
								hold_term = 0
								nav_mode = 0
							end
							legs_intdir_act = 0
						elseif legs_data[offset][31] == "HF" then
							if B738DR_heading_mode == 4 then
								if hold_circuit > 1 then
									-- HOLD single circuit termination
									hold_term = 1
								end
								-- HOLD at wpt
								nav_mode = 3
							else
								offset = offset + 1
								B738DR_hold_phase = 0
								hold_term = 0
								nav_mode = 0
							end
							legs_intdir_act = 0
						elseif legs_data[offset][31] == "HM" then
							if B738DR_heading_mode == 4 then
								-- HOLD at wpt
								nav_mode = 3
							else
								offset = offset + 1
								B738DR_hold_phase = 0
								hold_term = 0
								nav_mode = 0
							end
							legs_intdir_act = 0
						--elseif legs_data[offset][1] ~= "VECTOR" and legs_data[offset][1] ~= "DISCONTINUITY" then
						elseif legs_data[offset][1] == "DISCONTINUITY" then
							nav_mode = 2 -- discontinuity, continue in last course
							legs_intdir_act = 0
						elseif legs_data[offset][1] == "VECTOR" then
							if B738DR_heading_mode == 4 then
								nav_mode = 2 -- vector, continue in last course
								legs_intdir_act = 0
							else
								offset = offset + 1
								nav_mode = 0
								legs_intdir_act = 0
								B738DR_hold_phase = 0
								hold_term = 0
								--nav_mode = 99
							end
						else
							
							offset = offset + 1
							B738DR_fmc_bank_angle = dta_bank_angle
							
							if legs_data[offset][31] ~= "HA" and legs_data[offset][31] ~= "HF" and legs_data[offset][31] ~= "HM" 
							and legs_data[offset][31] ~= "VM" and legs_data[offset][31] ~= "FM" then
								while legs_data[offset][3] == 0 do
									offset = offset + 1
									if offset > legs_num then
										if offset > legs_num + 1 then
											offset = legs_num + 1
										end
										break
									end
									if legs_data[offset][3] == 0 then
										if legs_data[offset][31] == "HA" or legs_data[offset][31] == "HF" and legs_data[offset][31] == "HM" 
										or legs_data[offset][31] == "VM" or legs_data[offset][31] == "FM" then
											break
										end
									end
								end
							end
							
							--B738DR_fms_test1 = 102
							
							next_rel_brg = ((math.deg(legs_data[offset][2]) - math.deg(legs_data[offset-1][2])) + 360 ) % 360
							if next_rel_brg > 180 then
								next_rel_brg = next_rel_brg - 360
							end
							
							if offset <= legs_num then
								if B738DR_heading_mode == 4 then
									if legs_data[offset][31] == "HA" or legs_data[offset][31] == "HF" or legs_data[offset][31] == "HM" then
										hold_circuit = 0
										simDR_fmc_trk = tonumber(legs_data[offset][29]) / 10
										
										-------------------------------------------------------------
										-- calculated Holding waypoints
										hold_crs1 = tonumber(legs_data[offset][29]) / 10
										hold_crs2 = (hold_crs1 + 180) % 360
										
										hold_radius = 1.7	-- 1.5 NM -> about 3 deg/sec at 250kts
										hold_lenght = calc_hold_dist(offset)
										--hold_radius = calc_hold_rad(legs_data[offset][5])
										--hold_radius = 2.2
										
										if legs_data[offset][21] == 0 then
											-- left
											nd_x = (hold_crs1 + 270) % 360
											calc_brg_dist(legs_data[offset][7], legs_data[offset][8], math.rad(nd_x), hold_radius)
											hold_lat1 = calc_lat
											hold_lon1 = calc_lon
											calc_brg_dist(hold_lat1, hold_lon1, math.rad(hold_crs2), hold_lenght)
											hold_lat2 = calc_lat
											hold_lon2 = calc_lon
											calc_brg_dist(hold_lat2, hold_lon2, math.rad(nd_x), hold_radius)
											hold_opposite_lat = calc_lat
											hold_opposite_lon = calc_lon
										else
											-- right
											nd_x = (hold_crs1 + 90) % 360
											calc_brg_dist(legs_data[offset][7], legs_data[offset][8], math.rad(nd_x), hold_radius)
											hold_lat1 = calc_lat
											hold_lon1 = calc_lon
											calc_brg_dist(hold_lat1, hold_lon1, math.rad(hold_crs2), hold_lenght)
											hold_lat2 = calc_lat
											hold_lon2 = calc_lon
											calc_brg_dist(hold_lat2, hold_lon2, math.rad(nd_x), hold_radius)
											hold_opposite_lat = calc_lat
											hold_opposite_lon = calc_lon
										end
										
										-------------------------------------------------------------
										
										-- entry HOLD pattern
										relative_brg = (simDR_ahars_mag_hdg - simDR_fmc_trk + 360) % 360
										if relative_brg > 180 then
											relative_brg = relative_brg - 360
										end
										
										if relative_brg >= 110 then
											-- Tear-drop
											simDR_fmc_trk = ((tonumber(legs_data[offset][29]) / 10) + 120) % 360
											B738DR_hold_phase = 4
										elseif relative_brg <= -70 then
											-- Parallel
											simDR_fmc_trk = ((tonumber(legs_data[offset][29]) / 10) + 180) % 360
											B738DR_hold_phase = 5
										else
											-- Direct
											B738DR_hold_phase = 0
											hold_term = 0
										end
										
										hold_time_set = 90	-- default time
										hold_dist_set = 0
										if string.len(legs_data[offset][30]) == 4 then
											if string.sub(legs_data[offset][30], 1, 1) == "T" then
												hold_time_set = tonumber(string.sub(legs_data[offset][30], 2, -1)) / 1 * 6	-- in secs
												if hold_time_set == 0 then
													hold_time_set = 90
												end
											else
												hold_dist_set = tonumber(legs_data[offset][30])
												if hold_dist_set == nil then
													hold_dist_set = 0
												else
													hold_dist_set = hold_dist_set / 10
												end
											end
										end
										
										simDR_fmc_trk_turn = -1
										hold_timer = 0
										nav_mode = 3
									elseif legs_data[offset-1][31] == "AF" then --or legs_data[offset-1][31] == "RF" then
										nav_mode = 0
										B738DR_hold_phase = 0
										hold_term = 0
									elseif legs_data[offset][1] == "VECTOR" then
										nav_mode = 2 -- vector, continue in last course
										legs_intdir_act = 0
									else
										
										if legs_data[offset-1][31] == "RF" then
											next_crs = nd_calc_brg(legs_data[offset-1][23], legs_data[offset-1][24], legs_data[offset-1][7], legs_data[offset-1][8])
											if legs_data[offset-1][21] == 2 then
												-- left
												next_crs = (next_crs + 270) % 360
											else
												-- right
												next_crs = (next_crs + 90) % 360
											end
										else
											next_crs = math.deg(legs_data[offset-1][2])
										end
										
										if next_rel_brg < 0 then
											-- left
											radii_brg = ((next_crs + 180) + (next_rel_brg2 / 2) + 360) % 360
											
											--radii_brg = ((math.deg(legs_data[offset-1][2]) + 180) + (next_rel_brg2 / 2) + 360) % 360
											radii_turn_dir = 2
										else
											-- right
											radii_brg = ((next_crs + 180) - (next_rel_brg2 / 2) + 360) % 360
											--radii_brg = ((math.deg(legs_data[offset-1][2]) + 180) - (next_rel_brg2 / 2) + 360) % 360
											radii_turn_dir = 3
										end
										B738DR_radii_correct = B738_rescale(71, 0.33, 236, 0.38, gnd_spd)
										radii_dist = dta_radius - B738DR_radii_correct
										calc_brg_dist(legs_data[offset-1][7], legs_data[offset-1][8], math.rad(radii_brg), radii_dist_ctr)
										radii_lat = calc_lat
										radii_lon = calc_lon
										radii_angle = ((90 - (next_rel_brg2 / 2)) + 360) % 360
										radii_angle = radii_angle - 5
										if radii_angle < 0 then
											radii_angle = 0
										end
										radii_brg = (radii_brg + 180) % 360
										B738DR_radii_turn_act = 1
										nav_mode = 5
										B738DR_hold_phase = 0
										hold_term = 0
									end
								else
									if legs_data[offset][1] == "VECTOR" then
											offset = offset + 1
											nav_mode = 0
											legs_intdir_act = 0
											B738DR_hold_phase = 0
											hold_term = 0
									else
										if next_rel_brg < 0 then
											-- left
											radii_brg = ((math.deg(legs_data[offset-1][2]) + 180) + (next_rel_brg2 / 2) + 360) % 360
											radii_turn_dir = 2
										else
											-- right
											radii_brg = ((math.deg(legs_data[offset-1][2]) + 180) - (next_rel_brg2 / 2) + 360) % 360
											radii_turn_dir = 3
										end
										B738DR_radii_correct = B738_rescale(71, 0.33, 236, 0.38, gnd_spd)
										radii_dist = dta_radius - B738DR_radii_correct
										calc_brg_dist(legs_data[offset-1][7], legs_data[offset-1][8], math.rad(radii_brg), radii_dist_ctr)
										radii_lat = calc_lat
										radii_lon = calc_lon
										radii_angle = ((90 - (next_rel_brg2 / 2)) + 360) % 360
										radii_angle = radii_angle - 5
										if radii_angle < 0 then
											radii_angle = 0
										end
										radii_brg = (radii_brg + 180) % 360
										B738DR_radii_turn_act = 1
										nav_mode = 5
										B738DR_hold_phase = 0
										hold_term = 0
									end
								end
							end
							legs_intdir_act = 0
						end
						
						legs_intdir_act = 0
						
						--B738DR_fms_test1 = 103
						
						if offset <= legs_num then
							if legs_data[offset][31] == "AF" then
								if legs_data[offset][23] ~= 0 or legs_data[offset][24] == 0 then
									af_lat = legs_data[offset][23]
									af_lon = legs_data[offset][24]
									af_dist = tonumber(legs_data[offset][22])
									
									nd_x = simDR_mag_hdg
									nd_y = nd_calc_brg(math.deg(nd_lat), math.deg(nd_lon), af_lat, af_lon)
									relative_brg = (nd_x - nd_y + 360) % 360
									if relative_brg > 180 then
										relative_brg = relative_brg - 360
									end
									if relative_brg > -75 and relative_brg < 75 then
										-- from Center Arc
										if legs_data[offset][21] == 2 then
											af_turn = 3
										else
											af_turn = 2
										end
									else
										-- to Center Arc
										af_turn = legs_data[offset][21]
									end
									if af_dist ~= nil then
										af_dist = af_dist / 10
										nav_mode = 4
									end
								end
							elseif legs_data[offset][31] == "RF" then
								if legs_data[offset][23] ~= 0 or legs_data[offset][24] == 0 then
									af_lat = legs_data[offset][23]
									af_lon = legs_data[offset][24]
									af_dist = tonumber(legs_data[offset][33])
									--af_turn = legs_data[offset][21]
									af_turn = -1
									if af_dist ~= nil then
										af_dist = af_dist / 1000
										nav_mode = 4
									end
								end
							elseif legs_data[offset][31] == "CF" or legs_data[offset][31] == "DF" then
								nav_mode = 0
								B738DR_hold_phase = 0
								hold_term = 0
							end
						end
						
					end
					
					--B738DR_fms_test1 = 104
					
					if offset > legs_num then
						-- end of route if selected approach
						if des_app ~= "------" then
							if (B738DR_heading_mode > 3 and B738DR_heading_mode < 7) or B738DR_heading_mode == 8 or B738DR_heading_mode == 13 then
								B738DR_lnav_disconnect = 1
								--B738DR_vnav_disconnect = 1
								add_fmc_msg(LNAV_DISCON, 2)
								--B738DR_fmc_message_warn = 1
							end
							B738DR_vnav_disconnect = 1
							--nav_mode = 0
							nav_mode = 99
						else
							-- navigate to destination ICAO
							nav_mode = 1	-- ICAO nav mode
						end
					end
				--end
			else
				nav_mode = 1	-- ICAO nav mode
			end
			
			if offset > legs_num then
				offset = legs_num
			end
		
		end
		
		if nav_mode == 0 then
			
			B738DR_radii_turn_act = 0
			-- navigation to next waypoint
			nd_lat2 = math.rad(legs_data[offset][7])
			nd_lon2 = math.rad(legs_data[offset][8])
				
			simDR_fmc_trk_turn = legs_data[offset][21]
			
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			
			if legs_intdir_act == 0 then
				if legs_data[offset][31] == "CF" then
					-- if B738DR_xtrack == -999 or B738DR_xtrack == 999 then
						-- simDR_fmc_trk = math.deg(legs_data[offset][2])
					-- else
						simDR_fmc_trk = ((math.deg(legs_data[offset][18]) - simDR_mag_variation) + 360) % 360
					-- end
				elseif legs_data[offset][31] == "TF" or legs_data[offset][31] == "IF" then
					crs_circle = math.deg(legs_data[offset][2])
					crs_circle2 = legs_data[offset][37]
					dist_circle = math.max(nd_dis, 0)
					dist_circle = math.min(legs_data[offset][3], dist_circle)
					if crs_circle2 < 0 then
						crs_circle2 = -crs_circle2
						simDR_fmc_trk = crs_circle - B738_rescale(0, crs_circle2, legs_data[offset][3], 0, dist_circle)
					elseif crs_circle2 > 0 then
						simDR_fmc_trk = crs_circle + B738_rescale(0, crs_circle2, legs_data[offset][3], 0, dist_circle)
					else
						simDR_fmc_trk = crs_circle
					end
				else
					simDR_fmc_trk = math.deg(legs_data[offset][2])
				end
				B738DR_wpt_path = legs_data[offset][31]
			else
				if legs_intdir_crs == -1 then
					simDR_fmc_trk = nd_calc_brg(math.deg(nd_lat), math.deg(nd_lon), legs_data[offset][7], legs_data[offset][8])
					B738DR_wpt_path = "DF"
				else
					simDR_fmc_trk = (legs_intdir_crs - simDR_mag_variation + 360) % 360
					B738DR_wpt_path = ""
				end
				simDR_fmc_trk_turn = -1
			end
			
			--nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			
			
			nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
			nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
			nd_hdg = math.atan2(nd_y, nd_x)
			nd_hdg = math.deg(nd_hdg)
			nd_hdg = (nd_hdg + 360) % 360
			
			true_brg = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
			true_hdg = simDR_mag_hdg
			
			simDR_fmc_crs = (nd_hdg + simDR_mag_variation + 360) % 360
			--simDR_fmc_trk = math.deg(legs_data[offset][2])
			
			-- calculate xtrack
			relative_brg = (true_brg - simDR_fmc_crs + 360) % 360
			if relative_brg > 180 then
				relative_brg = relative_brg - 360
			end
			if relative_brg < 0 then
				if relative_brg > -90 then
					relative_brg = -relative_brg
					B738DR_xtrack = -nd_dis * math.sin(math.rad(relative_brg))
				else
					B738DR_xtrack = -999
				end
			else
				if relative_brg < 90 then
					B738DR_xtrack = nd_dis * math.sin(math.rad(relative_brg))
				else
					B738DR_xtrack = 999
				end
			end
			
			relative_brg = (true_brg - true_hdg + 360) % 360
			if relative_brg > 180 then
				relative_brg = relative_brg - 360
			end
			relative_brg = math.abs(relative_brg)
			relative_brg = math.min(120, relative_brg)
			
			speed = math.min(250, speed)
			speed = math.max(150, speed)
			speed_corr = B738_rescale(150, 1.8, 250, 3.0, speed)
			dist_corr = B738_rescale(0, 0, 120, speed_corr, relative_brg)
			
			simDR_fmc_dist = nd_dis
			simDR_fmc_dist2 = nd_dis + dist_corr
			
		elseif nav_mode == 1 then
			
			B738DR_radii_turn_act = 0
			-- navigation to destination ICAO
			B738DR_wpt_path = ""
			nd_lat2 = math.rad(legs_data[legs_num+1][7])
			nd_lon2 = math.rad(legs_data[legs_num+1][8])
			
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			
			nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
			nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
			nd_hdg = math.atan2(nd_y, nd_x)
			nd_hdg = math.deg(nd_hdg)
			nd_hdg = (nd_hdg + 360) % 360
			
			--simDR_fmc_trk = nd_calc_brg(math.deg(nd_lat), math.deg(nd_lon), legs_data[offset][7], legs_data[offset][8])
			simDR_fmc_trk = math.deg(legs_data[legs_num+1][2])
			
			true_brg = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
			--true_brg = (math.deg(legs_data[legs_num+1][2]) + simDR_mag_variation) % 360
			--true_hdg = simDR_mag_hdg
			
			simDR_fmc_crs = (nd_hdg + simDR_mag_variation) % 360
			--simDR_fmc_trk = math.deg(legs_data[legs_num+1][2])
			
			--relative_brg = (true_brg - true_hdg + 360) % 360
			relative_brg = (true_brg - simDR_fmc_crs + 360) % 360
			if relative_brg > 180 then
				relative_brg = relative_brg - 360
			end
			
			if relative_brg < 0 then
				if relative_brg > -90 then
					relative_brg = -relative_brg
					B738DR_xtrack = -nd_dis * math.sin(math.rad(relative_brg))
				else
					B738DR_xtrack = -999
				end
			else
				if relative_brg < 90 then
					B738DR_xtrack = nd_dis * math.sin(math.rad(relative_brg))
				else
					B738DR_xtrack = 999
				end
			end
			
			-- relative_brg = math.abs(relative_brg)
			-- relative_brg = math.min(120, relative_brg)
			
			-- speed = math.min(250, speed)
			-- speed = math.max(150, speed)
			-- speed_corr = B738_rescale(150, 1.8, 250, 3.0, speed)
			-- dist_corr = B738_rescale(0, 0, 120, speed_corr, relative_brg)
			
			simDR_fmc_dist = nd_dis
			simDR_fmc_dist2 = nd_dis --+ dist_corr
			
			-- relative_brg = math.abs(relative_brg)
			-- relative_brg = math.min(90, relative_brg)
			-- simDR_fmc_dist2 = nd_dis * B738_rescale(0, 1.5, 90, 1.0, relative_brg)
			
		elseif nav_mode == 2 then
			
			B738DR_radii_turn_act = 0
			nd_lat2 = legs_data[offset][7]	--math.rad(legs_data[offset][7])
			nd_lon2 = legs_data[offset][8]	--math.rad(legs_data[offset][8])
			--nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			nd_dis = nd_calc_dist2(nd_lat, nd_lon, nd_lat2, nd_lon2)
			--simDR_fmc_trk = math.deg(legs_data[offset][2])
			--simDR_fmc_trk = math.deg(legs_data[offset][18])
			simDR_fmc_dist = nd_dis
			simDR_fmc_dist2 = nd_dis
			simDR_fmc_trk = ((math.deg(legs_data[offset][18]) - simDR_mag_variation) + 360) % 360
			
		elseif nav_mode == 3 then
			
			B738DR_radii_turn_act = 0
			if legs_data[offset][31] == "HA" then
				nd_x = legs_data[offset][5] - 300
				nd_y = legs_data[offset][5] + 300
				if legs_data[offset][6] == 43 then -- above
					if simDR_altitude_pilot > nd_x then
						hold_term = 2
					end
				elseif legs_data[offset][6] == 45 then -- below
					if simDR_altitude_pilot < nd_y then
						hold_term = 2
					end
				else
					if simDR_altitude_pilot > nd_x and simDR_altitude_pilot < nd_y then
						-- HOLD altitude termination
						hold_term = 2
					end
				end
			elseif legs_data[offset][31] == "HF" then
				if hold_circuit > 1 then
					-- HOLD single circuit termination
					hold_term = 2
				end
			end
			
			--B738DR_wpt_path = legs_data[offset][31]
			
			nd_dis = nd_calc_dist2(simDR_latitude, simDR_longitude, legs_data[offset][7], legs_data[offset][8])
			nd_hdg = nd_calc_brg(simDR_latitude, simDR_longitude, legs_data[offset][7], legs_data[offset][8])
			simDR_fmc_crs = (nd_hdg + simDR_mag_variation) % 360
			
			if B738DR_hold_phase == 4 then
				-- Tear-drop
				B738DR_wpt_path = legs_data[offset][31]
				simDR_fmc_trk_turn = -1
				simDR_fmc_trk = ((tonumber(legs_data[offset][29]) / 10) + 120) % 360
				hold_timer = hold_timer + SIM_PERIOD
				if hold_timer > hold_time_set then
					hold_timer = 0
					simDR_fmc_trk_turn = legs_data[offset][21]
					simDR_fmc_trk = (tonumber(legs_data[offset][29]) / 10)
					B738DR_hold_phase = 3
				end
			
			elseif B738DR_hold_phase == 5 then
				-- Parallel 1
				B738DR_wpt_path = legs_data[offset][31]
				simDR_fmc_trk_turn = -1
				simDR_fmc_trk = ((tonumber(legs_data[offset][29]) / 10) + 180) % 360
				if hold_dist_set == 0 then
					hold_timer = hold_timer + SIM_PERIOD
					if hold_timer > hold_time_set then
						hold_timer = 0
						if legs_data[offset][21] == 0 then
							simDR_fmc_trk_turn = 1
						else
							simDR_fmc_trk_turn = 0
						end
						simDR_fmc_trk = ((tonumber(legs_data[offset][29]) / 10) + 315) % 360
						simDR_fmc_crs = tonumber(legs_data[offset][29]) / 10
						hold_timer = 0
						B738DR_hold_phase = 6
					end
				else
					if nd_dis > hold_dist_set then
						if legs_data[offset][21] == 0 then
							simDR_fmc_trk_turn = 1
						else
							simDR_fmc_trk_turn = 0
						end
						simDR_fmc_trk = ((tonumber(legs_data[offset][29]) / 10) + 315) % 360
						simDR_fmc_crs = tonumber(legs_data[offset][29]) / 10
						hold_timer = 0
						B738DR_hold_phase = 6
					end
				end
				
			elseif B738DR_hold_phase == 6 then
				-- Parallel 2
				B738DR_wpt_path = legs_data[offset][31]
				if legs_data[offset][21] == 0 then
					simDR_fmc_trk_turn = 1
				else
					simDR_fmc_trk_turn = 0
				end
				simDR_fmc_trk = ((tonumber(legs_data[offset][29]) / 10) + 135) % 360
				simDR_fmc_crs = tonumber(legs_data[offset][29]) / 10
			
			elseif B738DR_hold_phase == 7 then
				-- Parallel 3
				B738DR_wpt_path = legs_data[offset][31]
				simDR_fmc_trk_turn = -1
				simDR_fmc_trk = ((tonumber(legs_data[offset][29]) / 10) + 135) % 360
				
				relative_brg = (simDR_fmc_crs - simDR_ahars_mag_hdg + 360) % 360
				if relative_brg > 180 then
					relative_brg = relative_brg - 360
				end
				
				if legs_data[offset][21] == 0 then
					if relative_brg < -35 then
						simDR_fmc_trk = tonumber(legs_data[offset][29]) / 10
						B738DR_hold_phase = 0
					end
				else
					if relative_brg > 35 then
						simDR_fmc_trk = tonumber(legs_data[offset][29]) / 10
						B738DR_hold_phase = 0
					end
				end
				
			end
			
			
			---------------------------------------------
			
			if B738DR_hold_phase == 0 then
				
				if hold_term == 2 then
					
					if nd_dis < 1 then
						next_wpt_enable = 1
					end
					if next_wpt_enable == 1 then
						simDR_fmc_trk_turn = -1
						B738DR_hold_phase = -1
						hold_circuit = 0
						nav_mode = 0
						hold_term = 0
						offset = offset + 1
						if offset > legs_num then
							offset = legs_num
						end
					end
					
				else
				
					if nd_dis < 0.1 then
						if hold_circuit < 2 then
							hold_circuit = hold_circuit + 1
						end
						B738DR_hold_phase = 1
						hold_timer = 0
					end
					
					if B738DR_hold_phase == 0 then
						relative_brg = (simDR_fmc_crs - simDR_ahars_mag_hdg + 360) % 360
						if relative_brg > 180 then
							relative_brg = relative_brg - 360
						end
						if relative_brg > 90 or relative_brg < -90 then
							if hold_circuit < 2 then
								hold_circuit = hold_circuit + 1
							end
							B738DR_hold_phase = 1
							hold_timer = 0
						end
					end
				
				end
				
				if B738DR_hold_phase == 0 then
					-- course to opposite hold waypoint
					B738DR_fmc_bank_angle = 6
					B738DR_radii_turn_act = 0
					simDR_fmc_trk_turn = -1
					B738DR_wpt_path = "CF"
					
					nd_lat2 = math.rad(legs_data[offset][7])
					nd_lon2 = math.rad(legs_data[offset][8])
					simDR_fmc_trk = (hold_crs1 - simDR_mag_variation + 360) % 360
					nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
					
					nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
					nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
					nd_hdg = math.atan2(nd_y, nd_x)
					nd_hdg = math.deg(nd_hdg)
					nd_hdg = (nd_hdg + 360) % 360
					
					true_brg = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
					true_hdg = simDR_mag_hdg
					simDR_fmc_trk2 = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
					
					simDR_fmc_crs = (nd_hdg + simDR_mag_variation + 360) % 360
					
					-- calculate xtrack
					relative_brg = (true_brg - simDR_fmc_crs + 360) % 360
					if relative_brg > 180 then
						relative_brg = relative_brg - 360
					end
					if relative_brg < 0 then
						if relative_brg > -90 then
							relative_brg = -relative_brg
							B738DR_xtrack = -nd_dis * math.sin(math.rad(relative_brg))
						else
							B738DR_xtrack = -999
						end
					else
						if relative_brg < 90 then
							B738DR_xtrack = nd_dis * math.sin(math.rad(relative_brg))
						else
							B738DR_xtrack = 999
						end
					end
					
					simDR_fmc_dist = nd_dis
					simDR_fmc_dist2 = nd_dis
					
					-- if nd_dis < 0.2 then
						-- B738DR_hold_phase = 1
					-- end
				end
			end
			
			if B738DR_hold_phase == 1 then
				-- turn to opposite course
				B738DR_fmc_bank_angle = 6
				B738DR_radii_turn_act = 0
				simDR_fmc_trk_turn = -1
				B738DR_wpt_path = "RF"
				-- calculate Hold radius distance
				nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), hold_lat1, hold_lon1)
				if legs_data[offset][21] == 0 then
					-- left
					simDR_fmc_trk_turn2 = 2
					B738DR_xtrack = nd_dis - hold_radius
				else
					-- right
					simDR_fmc_trk_turn2 = 3
					B738DR_xtrack = hold_radius - nd_dis
				end
				if B738DR_xtrack > 99 then
					B738DR_xtrack = 999
				end
				if B738DR_xtrack < -99 then
					B738DR_xtrack = -999
				end
				
				nd_hdg = nd_calc_brg(math.deg(nd_lat), math.deg(nd_lon), hold_lat1, hold_lon1)
				if simDR_fmc_trk_turn2 == 2 then
					-- left
					nd_hdg = (nd_hdg + 90) % 360
				else
					-- right
					nd_hdg = (nd_hdg + 270) % 360
				end
				
				simDR_fmc_trk = nd_hdg
				simDR_fmc_trk2 = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
				--true_brg = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
				--true_hdg = simDR_mag_hdg
				simDR_fmc_crs = hold_crs2
				
				-- relative_brg = (true_brg - true_hdg + 360) % 360
				-- if relative_brg > 180 then
					-- relative_brg = relative_brg - 360
				-- end
				
				simDR_fmc_dist = 0
				simDR_fmc_dist2 = 0
				
				--relative_brg = (simDR_fmc_crs - simDR_mag_hdg + 360) % 360
				nd_hdg = nd_calc_brg(math.deg(nd_lat), math.deg(nd_lon), hold_opposite_lat, hold_opposite_lon)
				true_brg = (nd_hdg + simDR_mag_variation + 360) % 360
				relative_brg = (true_brg - simDR_mag_hdg + 360) % 360
				if relative_brg > 180 then
					relative_brg = relative_brg - 360
				end
				if simDR_fmc_trk_turn2 == 2 then
					-- left
					if relative_brg >= -5 and relative_brg < 90 then
						B738DR_hold_phase = 2
					end
				else
					-- right
					if relative_brg <= 5 and relative_brg > -90 then
						B738DR_hold_phase = 2
					end
				end
				--B738DR_fms_test3 = relative_brg
				-- hold test
			end
			
			if B738DR_hold_phase == 2 then
				-- course to opposite hold waypoint
				B738DR_fmc_bank_angle = 6
				B738DR_radii_turn_act = 0
				simDR_fmc_trk_turn = -1
				B738DR_wpt_path = "CF"
				
				nd_lat2 = math.rad(hold_opposite_lat)
				nd_lon2 = math.rad(hold_opposite_lon)
				simDR_fmc_trk = (hold_crs2 - simDR_mag_variation + 360) % 360
				nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
				
				simDR_fmc_trk2 = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
				
				nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
				nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
				nd_hdg = math.atan2(nd_y, nd_x)
				nd_hdg = math.deg(nd_hdg)
				nd_hdg = (nd_hdg + 360) % 360
				
				true_brg = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
				true_hdg = simDR_mag_hdg
				
				simDR_fmc_crs = (nd_hdg + simDR_mag_variation + 360) % 360
				
				-- calculate xtrack
				relative_brg = (true_brg - simDR_fmc_crs + 360) % 360
				if relative_brg > 180 then
					relative_brg = relative_brg - 360
				end
				if relative_brg < 0 then
					if relative_brg > -90 then
						relative_brg = -relative_brg
						B738DR_xtrack = -nd_dis * math.sin(math.rad(relative_brg))
					else
						B738DR_xtrack = -999
					end
				else
					if relative_brg < 90 then
						B738DR_xtrack = nd_dis * math.sin(math.rad(relative_brg))
					else
						B738DR_xtrack = 999
					end
				end
				
				simDR_fmc_dist = nd_dis
				simDR_fmc_dist2 = nd_dis
				
				if nd_dis < 0.1 then
					B738DR_hold_phase = 3
				end
				if B738DR_hold_phase == 2 then
					relative_brg = (simDR_fmc_crs - simDR_ahars_mag_hdg + 360) % 360
					if relative_brg > 180 then
						relative_brg = relative_brg - 360
					end
					if relative_brg > 90 or relative_brg < -90 then
						B738DR_hold_phase = 3
						hold_timer = 0
					end
				end
			end
			
			if B738DR_hold_phase == 3 then
				-- turn to course
				B738DR_fmc_bank_angle = 6
				B738DR_radii_turn_act = 0
				simDR_fmc_trk_turn = -1
				B738DR_wpt_path = "RF"
				-- calculate Hold radius distance
				nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), hold_lat2, hold_lon2)
				if legs_data[offset][21] == 0 then
					-- left
					simDR_fmc_trk_turn2 = 2
					B738DR_xtrack = nd_dis - hold_radius
				else
					-- right
					simDR_fmc_trk_turn2 = 3
					B738DR_xtrack = hold_radius - nd_dis
				end
				if B738DR_xtrack > 99 then
					B738DR_xtrack = 999
				end
				if B738DR_xtrack < -99 then
					B738DR_xtrack = -999
				end
				
				nd_hdg = nd_calc_brg(math.deg(nd_lat), math.deg(nd_lon), hold_lat2, hold_lon2)
				if simDR_fmc_trk_turn2 == 2 then
					-- left
					nd_hdg = (nd_hdg + 90) % 360
				else
					-- right
					nd_hdg = (nd_hdg + 270) % 360
				end
				
				simDR_fmc_trk = nd_hdg
				simDR_fmc_trk2 = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
				--true_brg = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
				--true_hdg = simDR_mag_hdg
				simDR_fmc_crs = hold_crs1
				
				-- relative_brg = (true_brg - true_hdg + 360) % 360
				-- if relative_brg > 180 then
					-- relative_brg = relative_brg - 360
				-- end
				
				simDR_fmc_dist = 0
				simDR_fmc_dist2 = 0
				
				--relative_brg = (simDR_fmc_crs - simDR_mag_hdg + 360) % 360
				nd_hdg = nd_calc_brg(math.deg(nd_lat), math.deg(nd_lon), legs_data[offset][7], legs_data[offset][8])
				true_brg = (nd_hdg + simDR_mag_variation + 360) % 360
				relative_brg = (true_brg - simDR_mag_hdg + 360) % 360
				if relative_brg > 180 then
					relative_brg = relative_brg - 360
				end
				if simDR_fmc_trk_turn2 == 2 then
					-- left
					if relative_brg >= -5 and relative_brg < 90 then
						B738DR_hold_phase = 0
					end
				else
					-- right
					if relative_brg <= 5 and relative_brg > -90 then
						B738DR_hold_phase = 0
					end
				end
				--B738DR_fms_test3 = relative_brg
			end
			
		elseif nav_mode == 4 then
			
			
			B738DR_fmc_bank_angle = 6
			B738DR_radii_turn_act = 0
			-- calculate AF distance
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), af_lat, af_lon)
			if legs_data[offset][21] == 2 then
				B738DR_xtrack = nd_dis - af_dist
			else
				B738DR_xtrack = af_dist - nd_dis
			end
			if B738DR_xtrack > 99 then
				B738DR_xtrack = 999
			end
			if B738DR_xtrack < -99 then
				B738DR_xtrack = -999
			end
			
			-- calculate next waypoint
			nd_lat2 = math.rad(legs_data[offset][7])
			nd_lon2 = math.rad(legs_data[offset][8])
				
			simDR_fmc_trk_turn = af_turn
			simDR_fmc_trk_turn2 = legs_data[offset][21]
			B738DR_wpt_path = legs_data[offset][31]
			nd_hdg = nd_calc_brg(math.deg(nd_lat), math.deg(nd_lon), af_lat, af_lon)
			
			if legs_data[offset][21] == 2 then
				-- left
				nd_hdg = (nd_hdg + 90) % 360
			else
				-- right
				nd_hdg = (nd_hdg + 270) % 360
			end
			simDR_fmc_trk = nd_hdg
			simDR_fmc_trk2 = (nd_hdg + simDR_mag_variation + 360) % 360
			
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
			nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
			nd_hdg = math.atan2(nd_y, nd_x)
			nd_hdg = math.deg(nd_hdg)
			nd_hdg = (nd_hdg + 360) % 360
			
			true_brg = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
			true_hdg = simDR_mag_hdg
			
			simDR_fmc_crs = (nd_hdg + simDR_mag_variation) % 360
			
			relative_brg = (true_brg - true_hdg + 360) % 360
			if relative_brg > 180 then
				relative_brg = relative_brg - 360
			end
			
			relative_brg = math.abs(relative_brg)
			relative_brg = math.min(120, relative_brg)
			
			speed = math.min(250, speed)
			speed = math.max(150, speed)
			speed_corr = B738_rescale(150, 1.8, 250, 3.0, speed)
			dist_corr = B738_rescale(0, 0, 120, speed_corr, relative_brg)
			
			simDR_fmc_dist = nd_dis
			simDR_fmc_dist2 = nd_dis + dist_corr
		
			relative_brg = (simDR_fmc_crs - simDR_mag_hdg + 360) % 360
			if relative_brg > 180 then
				relative_brg = relative_brg - 360
			end
			
			if B738DR_wpt_path == "RF" then
				if legs_data[offset][21] == 2 then
					-- left
					if relative_brg >= -9 then
						nav_mode = 6
						nd_hdg = nd_calc_brg(legs_data[offset][7], legs_data[offset][8], af_lat, af_lon)
						af_finish_crs = (nd_hdg + 90) % 360
					end
				else
					-- right
					if relative_brg <= 9 then
						nav_mode = 6
						nd_hdg = nd_calc_brg(legs_data[offset][7], legs_data[offset][8], af_lat, af_lon)
						af_finish_crs = (nd_hdg + 270) % 360
					end
				end
			end
			
		elseif nav_mode == 6 then
			-- finish RF
			
			B738DR_radii_turn_act = 0
			simDR_fmc_trk_turn = -1
			B738DR_wpt_path = "CF"
			simDR_fmc_trk = af_finish_crs
			simDR_fmc_trk2 = (af_finish_crs + simDR_mag_variation + 360) % 360
			
			nd_lat2 = math.rad(legs_data[offset][7])
			nd_lon2 = math.rad(legs_data[offset][8])
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			
			nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
			nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
			nd_hdg = math.atan2(nd_y, nd_x)
			nd_hdg = math.deg(nd_hdg)
			nd_hdg = (nd_hdg + 360) % 360
			
			true_brg = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
			true_hdg = simDR_mag_hdg
			
			simDR_fmc_crs = (nd_hdg + simDR_mag_variation + 360) % 360
			
			-- calculate xtrack
			relative_brg = (true_brg - simDR_fmc_crs + 360) % 360
			if relative_brg > 180 then
				relative_brg = relative_brg - 360
			end
			if relative_brg < 0 then
				if relative_brg > -90 then
					relative_brg = -relative_brg
					B738DR_xtrack = -nd_dis * math.sin(math.rad(relative_brg))
				else
					B738DR_xtrack = -999
				end
			else
				if relative_brg < 90 then
					B738DR_xtrack = nd_dis * math.sin(math.rad(relative_brg))
				else
					B738DR_xtrack = 999
				end
			end
			
			simDR_fmc_dist = nd_dis
			simDR_fmc_dist2 = nd_dis
		
			
		elseif nav_mode == 5 then
		
			-- calculate Radii distance
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), radii_lat, radii_lon)
			
			if radii_turn_dir == 2 then
				B738DR_xtrack = nd_dis - radii_dist
			else
				B738DR_xtrack = radii_dist - nd_dis
			end
			if B738DR_xtrack > 99 then
				B738DR_xtrack = 999
			end
			if B738DR_xtrack < -99 then
				B738DR_xtrack = -999
			end
			simDR_fmc_trk_turn2 = radii_turn_dir
			
			-- calculate next waypoint
			nd_lat2 = math.rad(legs_data[offset][7])
			nd_lon2 = math.rad(legs_data[offset][8])
				
			simDR_fmc_trk_turn = -1 --radii_turn_dir	--legs_data[offset][21]
			B738DR_wpt_path = legs_data[offset][31]
			nd_hdg = nd_calc_brg(math.deg(nd_lat), math.deg(nd_lon), radii_lat, radii_lon)
			
			--if legs_data[offset][21] == 0 then
			if radii_turn_dir == 2 then
				-- left
				nd_hdg = (nd_hdg + 90) % 360
			else
				-- right
				nd_hdg = (nd_hdg + 270) % 360
			end
			simDR_fmc_trk = nd_hdg
			simDR_fmc_trk2 = (nd_hdg + simDR_mag_variation + 360) % 360
			
			nd_dis = nd_calc_dist2(math.deg(nd_lat), math.deg(nd_lon), math.deg(nd_lat2), math.deg(nd_lon2))
			nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
			nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
			nd_hdg = math.atan2(nd_y, nd_x)
			nd_hdg = math.deg(nd_hdg)
			nd_hdg = (nd_hdg + 360) % 360
			
			true_brg = (simDR_fmc_trk + simDR_mag_variation + 360) % 360
			true_hdg = simDR_mag_hdg
			
			simDR_fmc_crs = (nd_hdg + simDR_mag_variation) % 360
			
			relative_brg = (true_brg - true_hdg + 360) % 360
			if relative_brg > 180 then
				relative_brg = relative_brg - 360
			end
			
			relative_brg = math.abs(relative_brg)
			relative_brg = math.min(120, relative_brg)
			
			speed = math.min(250, speed)
			speed = math.max(150, speed)
			speed_corr = B738_rescale(150, 1.8, 250, 3.0, speed)
			dist_corr = B738_rescale(0, 0, 120, speed_corr, relative_brg)
			
			simDR_fmc_dist = nd_dis
			simDR_fmc_dist2 = nd_dis + dist_corr
			
			-- -- calc inbound/outbound
			-- nd_lat2 = math.rad(radii_lat)
			-- nd_lon2 = math.rad(radii_lon)
			-- nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
			-- nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
			-- nd_hdg = math.atan2(nd_y, nd_x)
			-- nd_hdg = math.deg(nd_hdg)
			-- nd_hdg = (nd_hdg + 540) % 360
			
			if B738DR_wpt_path == "DF" or legs_data[offset-1][31] == "DF" then
				nav_mode = 0
			end
			if B738DR_wpt_path == "CF" or legs_data[offset-1][31] == "CF" then
				nav_mode = 0
			end
			if offset == 3 then
				if string.sub(legs_data[2][1], 1, 2) == "RW" then
					nav_mode = 0
				end
			end
			
			-- ** disabled **--
			-- relative_brg = (nd_hdg - radii_brg + 360) % 360
			-- if relative_brg > 180 then
				-- relative_brg = relative_brg - 360
			-- end
			
			-- if radii_turn_dir == 2 then
				-- if relative_brg < -radii_angle then 
					-- nav_mode = 0
				-- end
			-- else
				-- if relative_brg > radii_angle then
					-- nav_mode = 0
				-- end
			-- end
			
			relative_brg = (simDR_fmc_crs - simDR_mag_hdg + 360) % 360
			if relative_brg > 180 then
				relative_brg = relative_brg - 360
			end
			if radii_turn_dir == 2 then
				-- left
				if relative_brg >= -9 then
					nav_mode = 0
				end
			else
				-- right
				if relative_brg <= 9 then
					nav_mode = 0
				end
			end
			
		end
		
		--B738DR_fms_test1 = 105
		
		-- Detect Missed Approach
		if first_miss_app_idx > 0 and offset >= first_miss_app_idx then
			B738DR_missed_app_act = 2
		end
		
		
		local time_zulu = 0
		local time_temp = 0
		local speed_temp = 0
		local speed_temp1 = 0
		local speed_temp2 = 0
		local last_speed = 0
		local dist_temp = 0
		local time_calc_enable = 0
		local wc_speed = 0
		local tmp_wind_dir = 0
		local tmp_wind_spd = 0
		local act_fuel = simDR_fuel_weight
		local calc_fuel = 0
		local fuel_flow = 0
		local ff_phase = 0
		local tmp_wpt_eta2 = 0
		local tmp_wpt_eta3 = 0
		
		if crz_alt_num > 0 and perf_exec > 0 and ref_icao ~= "----" and des_icao ~= "****" then
			time_calc_enable = 1
			time_zulu = simDR_zulu_hours + (simDR_zulu_minutes/60) + (simDR_zulu_seconds/3600)
		end
		
		-- CALCSK
		
		-- create SPD and ALT restrict table
		legs_restr_spd = {}
		legs_restr_spd_n = 0
		legs_restr_alt = {}
		legs_restr_alt_n = 0
		
		
		for n = 1, (legs_num + 1) do
			if n <= legs_num then
				if legs_data[n][4] > 0 then
					legs_restr_spd_n = legs_restr_spd_n + 1
					legs_restr_spd[legs_restr_spd_n] = {}
					legs_restr_spd[legs_restr_spd_n][1] = legs_data[n][1]	-- id
					legs_restr_spd[legs_restr_spd_n][2] = n					-- idx
					legs_restr_spd[legs_restr_spd_n][3] = legs_data[n][4]	-- spd restrict
				else
					-- FAF speed restrict Vref40 + 20
					if legs_data[n][17] == 1 and B738DR_fms_vref_40 > 0 then
						legs_restr_spd_n = legs_restr_spd_n + 1
						legs_restr_spd[legs_restr_spd_n] = {}
						legs_restr_spd[legs_restr_spd_n][1] = legs_data[n][1]	-- id
						legs_restr_spd[legs_restr_spd_n][2] = n					-- idx
						legs_restr_spd[legs_restr_spd_n][3] = B738DR_fms_vref_40 + 20	-- spd restrict
					end
				end
				if legs_data[n][5] > 0 then
					legs_restr_alt_n = legs_restr_alt_n + 1
					legs_restr_alt[legs_restr_alt_n] = {}
					legs_restr_alt[legs_restr_alt_n][1] = legs_data[n][1]	-- id
					legs_restr_alt[legs_restr_alt_n][2] = n					-- idx
					legs_restr_alt[legs_restr_alt_n][3] = legs_data[n][5]	-- alt restrict
					legs_restr_alt[legs_restr_alt_n][4] = legs_data[n][6]	-- alt restrict A,B,-
				end
				distance = distance + legs_data[n][3]
			end
			
			if n >= offset then
				
				if n == 1 then
					if simDR_airspeed_pilot < 160 then
						speed_temp1  = 160
					else
						speed_temp1 = simDR_airspeed_pilot * (1 + (simDR_altitude_pilot / 1000 * 0.02))
					end
					speed_temp2 = speed_temp1
					dist_temp = simDR_fmc_dist
				elseif n == offset then
					if  simDR_airspeed_pilot < 160 then
						speed_temp1 = 160
					else
						speed_temp1 = simDR_airspeed_pilot * (1 + (simDR_altitude_pilot / 1000 * 0.02))
					end
					speed_temp2 = simDR_airspeed_pilot * (1 + (legs_data[n][11] / 1000 * 0.02))
					dist_temp = simDR_fmc_dist
				else
					if legs_data[n][10] == B738DR_fmc_descent_speed_mach then
						speed_temp = B738DR_fmc_descent_speed
					elseif legs_data[n][10] == B738DR_fmc_cruise_speed_mach then
						speed_temp = B738DR_fmc_cruise_speed
					elseif legs_data[n][10] == B738DR_fmc_climb_speed_mach then
						speed_temp = B738DR_fmc_climb_speed
					else
						if legs_data[n][10] == 0 then
							speed_temp = last_speed
						else
							speed_temp = legs_data[n][10]
						end
					end
					speed_temp1 = speed_temp * (1 + (legs_data[n-1][11] / 1000 * 0.02))
					speed_temp2 = speed_temp * (1 + (legs_data[n][11] / 1000 * 0.02))
					dist_temp = legs_data[n][3]
				end
				if legs_data[n][1] == "VECTOR" then
					dist_temp = 0
				end
				if des_app == "------" then
					dist_dest = dist_dest + dist_temp
				else
					if n <= rnav_idx_last then
						dist_dest = dist_dest + dist_temp
					end
				end
				last_speed = speed_temp2
				legs_data[n][15] = simDR_fuel_weight
				if time_calc_enable == 1 then
					
					speed_temp1 = (speed_temp1 + speed_temp2) / 2
					
					-- if crz_wind_dir == "---" or crz_wind_spd == "---" then
						-- wc_speed = 0
					-- else
						-- wc_speed = tonumber(crz_wind_spd) * math.cos(math.rad(Angle180(tonumber(crz_wind_dir)))-legs_data[n][2])
					-- end
					-- speed_temp1 = speed_temp1 - wc_speed
					
					tmp_wind_spd = 0
					if legs_data[n][39] == "" then
						if legs_data[n][38] ~= "" then
							tmp_wind_dir = tonumber(string.sub(legs_data[n][38], 1, 3))
							tmp_wind_spd = tonumber(string.sub(legs_data[n][38], -3, -1))
						end
					else
						tmp_wind_dir = tonumber(string.sub(legs_data[n][39], 1, 3))
						tmp_wind_spd = tonumber(string.sub(legs_data[n][39], -3, -1))
					end
					
					wc_speed = 0
					if tmp_wind_spd > 0 then
						wc_speed = tonumber(tmp_wind_spd) * math.cos(math.rad(Angle180(tonumber(tmp_wind_dir)))-legs_data[n][2])
					end
					speed_temp1 = speed_temp1 - wc_speed
					
					time_temp = (dist_temp * 1852) / (speed_temp1 * 0.51444)	-- seconds
					time_temp = time_temp / 3600	-- hours
					
					if n <= tc_idx then
						ff_phase = 0	-- climb
					elseif n <= td_idx then
						ff_phase = 1	-- cruise
					elseif n <= ed_found then
						ff_phase = 2	-- descent
					else
						ff_phase = 3	-- final approach
					end
					if n == 1 then
						fuel_flow = 0
					elseif n == offset then
						fuel_flow = calc_fuel_flow(ff_phase, simDR_altitude_pilot, legs_data[n][11])
					else
						fuel_flow = calc_fuel_flow(ff_phase, legs_data[n-1][11], legs_data[n][11])
					end
					
					if n == offset or n == 1 then
						calc_fuel = act_fuel - (time_temp * fuel_flow)
						time_temp = (time_zulu + time_temp) % 24
					else
						calc_fuel = legs_data[n-1][40] - (time_temp * fuel_flow)
						time_temp = (legs_data[n-1][13] + time_temp) % 24
					end
					if n <= legs_num then
						legs_data[n][13] = time_temp
						legs_data[n][40] = calc_fuel
					else
						if des_app == "------" then
							legs_data[n][13] = time_temp
							legs_data[n][40] = calc_fuel
						else
							if rnav_idx_last > 0 and rnav_idx_last <= legs_num then
								legs_data[n][13] = (legs_data[rnav_idx_last][13] + 0.033) % 24
								legs_data[n][40] = legs_data[rnav_idx_last][40] - 1.3 -- taxi fuel
							else
								legs_data[n][13] = time_temp
								legs_data[n][40] = calc_fuel
							end
							-- calc time dataref
							if legs_data[legs_num+1][13] == 0 then
								time_dest = ""
							else
								tmp_wpt_eta2 = math.floor(legs_data[legs_num+1][13])
								tmp_wpt_eta3 = (legs_data[legs_num+1][13] - tmp_wpt_eta2) * 60
								time_dest = string.format("%02d", tmp_wpt_eta2) .. string.sub(string.format("%04.1f", tmp_wpt_eta3), 1, 2) .. "z"
							end
						end
					end
					
					-- calc E/D distance and time
					if ed_found ~= 0 and B738DR_flight_phase > 4 and B738DR_flight_phase < 8 and offset <= ed_found then
						if n <= ed_found then
							dist_ed = dist_ed + dist_temp
							if n == ed_found then
								time_ed = time_temp
								fuel_ed = legs_data[n][40]
							end
						end
					end
					
					-- calc T/C distance and time
					if tc_idx ~= 0 and B738DR_flight_phase < 2 then
						if n <= tc_idx then
							dist_tc = dist_tc + dist_temp
							if n == tc_idx then
								dist_tc = dist_tc - tc_dist
								time_temp = (tc_dist * 1852) / (speed_temp1 * 0.51444)	-- seconds
								time_temp = time_temp / 3600	-- hours
								fuel_tc = legs_data[n][40] + (time_temp * fuel_flow)
								-- corected T/C idx fuel (cruise)
								if n == offset then
									fuel_flow = calc_fuel_flow(1, simDR_altitude_pilot, legs_data[n][11])
									legs_data[n][40] = fuel_tc - (time_temp * fuel_flow)
								elseif n > 1 then
									fuel_flow = calc_fuel_flow(1, legs_data[n-1][11], legs_data[n][11])
									legs_data[n][40] = fuel_tc - (time_temp * fuel_flow)
								end
								time_temp = legs_data[n][13] - time_temp
								if time_temp < 0 then
									time_temp = time_temp + 24
								end
								time_tc = time_temp
							end
						end
					end
					
					-- calc T/D distance and time
					if td_idx ~= 0 and B738DR_flight_phase < 5 and offset <= td_idx then
						if n <= td_idx then
							dist_td = dist_td + dist_temp
							if n == td_idx then
								dist_td = dist_td - td_dist
								time_temp = (td_dist * 1852) / (speed_temp1 * 0.51444)	-- seconds
								time_temp = time_temp / 3600	-- hours
								fuel_td = legs_data[n][40] + (time_temp * fuel_flow)
								time_temp = legs_data[n][13] - time_temp
								if time_temp < 0 then
									time_temp = time_temp + 24
								end
								time_td = time_temp
							end
						end
					end
					
				end
			end
			
			
		end
		
		if nav_mode == 1 then
			B738DR_fpln_dist = simDR_fmc_dist
		else
			nd_x = legs_num + 1
			B738DR_fpln_dist = distance + legs_data[nd_x][3]
		end
		
		if legs_delete == 1 then
			-- temporary
			legs_restr_spd_mod = {}
			legs_restr_spd_n_mod = 0
			legs_restr_alt_mod = {}
			legs_restr_alt_n_mod = 0
			for n = 1, legs_num2 do
				if legs_data2[n][4] > 0 then
					legs_restr_spd_n_mod = legs_restr_spd_n_mod + 1
					legs_restr_spd_mod[legs_restr_spd_n_mod] = {}
					legs_restr_spd_mod[legs_restr_spd_n_mod][1] = legs_data2[n][1]	-- id
					legs_restr_spd_mod[legs_restr_spd_n_mod][2] = n					-- idx
					legs_restr_spd_mod[legs_restr_spd_n_mod][3] = legs_data2[n][4]	-- spd restrict
				else
					-- FAF speed restrict Vref40 + 20
					if (legs_data2[n][17] == 1 or legs_data2[n][17] == 101 or legs_data2[n][17] == 201)
					and B738DR_fms_vref_40 > 0 then
						legs_restr_spd_n_mod = legs_restr_spd_n_mod + 1
						legs_restr_spd_mod[legs_restr_spd_n_mod] = {}
						legs_restr_spd_mod[legs_restr_spd_n_mod][1] = legs_data2[n][1]	-- id
						legs_restr_spd_mod[legs_restr_spd_n_mod][2] = n					-- idx
						legs_restr_spd_mod[legs_restr_spd_n_mod][3] = B738DR_fms_vref_40 + 20	-- spd restrict
					end
				end
				if legs_data2[n][5] > 0 then
					legs_restr_alt_n_mod = legs_restr_alt_n_mod + 1
					legs_restr_alt_mod[legs_restr_alt_n_mod] = {}
					legs_restr_alt_mod[legs_restr_alt_n_mod][1] = legs_data2[n][1]	-- id
					legs_restr_alt_mod[legs_restr_alt_n_mod][2] = n					-- idx
					legs_restr_alt_mod[legs_restr_alt_n_mod][3] = legs_data2[n][5]	-- alt restrict
					legs_restr_alt_mod[legs_restr_alt_n_mod][4] = legs_data2[n][6]	-- alt restrict A,B,-
				end
			end
		end
		
		last_offset = offset
	else
		legs_restr_spd_n = 0
		legs_restr_alt_n = 0
		B738DR_fpln_dist = 0
		legs_restr_spd_n_mod = 0
		legs_restr_alt_n_mod = 0
	end
end

function calc_fuel_flow(phase, alt1, alt2)
	
	local ff_calc = 0
	local ff_calc2 = 0
	local ff_alt1 = math.min(alt1, 40000)
	local ff_alt2 = math.min(alt2, 40000)
	ff_alt1 = math.max(ff_alt1, 5000)
	ff_alt2 = math.max(ff_alt2, 5000)
	
	if phase == 0 then
		ff_calc = B738_rescale(5000, 7700, 40000, 3000, ff_alt1)
		ff_calc2 = B738_rescale(5000, 7700, 40000, 3000, ff_alt2)
		ff_calc = (ff_calc + ff_calc2) / 2
	elseif phase == 1 then
		ff_alt1 = math.max(ff_alt1, 26000)
		--ff_alt2 = math.max(ff_alt2, 26000)
		ff_calc = B738_rescale(26000, 2500, 40000, 1880, ff_alt1)
		--ff_calc2 = B738_rescale(26000, 3000, 40000, 1840, ff_alt2)
		--ff_calc = (ff_calc + ff_calc2) / 2
	elseif phase == 2 then
		ff_alt1 = math.min(ff_alt1, 23000)
		ff_alt2 = math.min(ff_alt2, 23000)
		ff_calc = B738_rescale(5000, 820, 23000, 150, ff_alt1)
		ff_calc2 = B738_rescale(5000, 820, 23000, 150, ff_alt2)
		ff_calc = (ff_calc + ff_calc2) / 2
	elseif phase == 3 then
		--ff_calc = 2950
		ff_calc = 3950
	end
	
	return ff_calc
	
end

-- function B738_fmc_time_calc()

	-- local xx = 0
	-- local time_zulu = 0
	-- local time_temp = 0
	-- local speed_temp = 0
	-- local speed_temp1 = 0
	-- local speed_temp2 = 0
	-- local last_speed = 0
	-- local dist_temp = 0
	-- local time_calc_enable = 0
	-- local wc_speed = 0
	
	
	-- dist_dest = 0
	-- dist_tc = 0
	-- time_tc = 0
	-- dist_td = 0
	-- time_td = 0
	-- dist_ed = 0
	-- time_ed = 0
	
	-- if ref_icao == "----" or des_icao == "****" then
		-- legs_num = 0
	-- end
	
	-- if legs_num > 0 and offset > 0 then
		
		-- if offset > legs_num then
			-- offset = legs_num
		-- end
		
		-- if crz_alt_num > 0 and perf_exec > 0 and ref_icao ~= "----" and des_icao ~= "****" then
			-- time_calc_enable = 1
			-- time_zulu = simDR_zulu_hours + (simDR_zulu_minutes/60) + (simDR_zulu_seconds/3600)
		-- end
		
		-- for xx = offset, (legs_num + 1) do
			-- if xx == 1 then
				-- if simDR_airspeed_pilot < 160 then
					-- speed_temp1  = 160
				-- else
					-- speed_temp1 = simDR_airspeed_pilot * (1 + (simDR_altitude_pilot / 1000 * 0.02))
				-- end
				-- speed_temp2 = speed_temp1
				-- dist_temp = simDR_fmc_dist
			-- elseif xx == offset then
				-- if  simDR_airspeed_pilot < 160 then
					-- speed_temp1 = 160
				-- else
					-- speed_temp1 = simDR_airspeed_pilot * (1 + (simDR_altitude_pilot / 1000 * 0.02))
				-- end
				-- speed_temp2 = simDR_airspeed_pilot * (1 + (legs_data[xx][11] / 1000 * 0.02))
				-- dist_temp = simDR_fmc_dist
			-- else
				-- if legs_data[xx][10] == B738DR_fmc_descent_speed_mach then
					-- speed_temp = B738DR_fmc_descent_speed
				-- elseif legs_data[xx][10] == B738DR_fmc_cruise_speed_mach then
					-- speed_temp = B738DR_fmc_cruise_speed
				-- elseif legs_data[xx][10] == B738DR_fmc_climb_speed_mach then
					-- speed_temp = B738DR_fmc_climb_speed
				-- else
					-- if legs_data[xx][10] == 0 then
						-- speed_temp = last_speed
					-- else
						-- speed_temp = legs_data[xx][10]
					-- end
				-- end
				-- speed_temp1 = speed_temp * (1 + (legs_data[xx-1][11] / 1000 * 0.02))
				-- speed_temp2 = speed_temp * (1 + (legs_data[xx][11] / 1000 * 0.02))
				-- dist_temp = legs_data[xx][3]
			-- end
			-- if legs_data[xx][1] == "VECTOR" then
				-- dist_temp = 0
			-- end
			-- if des_app == "------" then
				-- dist_dest = dist_dest + dist_temp
			-- else
				-- if xx <= rnav_idx_last then
					-- dist_dest = dist_dest + dist_temp
				-- end
			-- end
			-- last_speed = speed_temp2
			-- legs_data[xx][15] = simDR_fuel_weight
			-- if time_calc_enable == 1 then
				
				-- speed_temp1 = (speed_temp1 + speed_temp2) / 2
				
				-- if crz_wind_dir == "---" or crz_wind_spd == "---" then
					-- wc_speed = 0
				-- else
					-- wc_speed = tonumber(crz_wind_spd) * math.cos(math.rad(Angle180(tonumber(crz_wind_dir)))-legs_data[xx][2])
				-- end
				-- speed_temp1 = speed_temp1 - wc_speed
				
				-- -- calc T/C distance and time
				-- if tc_idx ~= 0 and B738DR_flight_phase < 2 then
					-- if xx <= tc_idx then
						-- dist_tc = dist_tc + dist_temp
						-- if xx == tc_idx then
							-- dist_tc = dist_tc - tc_dist
							-- time_temp = ((legs_data[xx][3] - tc_dist) * 1852) / (speed_temp1 * 0.51444)	-- seconds
							-- time_temp = time_temp / 3600	-- hours
							-- if xx == offset or xx == 1 then
								-- time_temp = (time_zulu + time_temp) % 24
							-- else
								-- time_temp = (legs_data[xx-1][13] + time_temp) % 24
							-- end
							-- time_tc = time_temp
						-- end
					-- end
				-- end
				
				-- -- calc T/D distance and time
				-- if td_idx ~= 0 and B738DR_flight_phase < 5 and offset <= td_idx then
					-- if xx <= td_idx then
						-- dist_td = dist_td + dist_temp
						-- if xx == td_idx then
							-- dist_td = dist_td - td_dist
							-- time_temp = ((legs_data[xx][3] - td_dist) * 1852) / (speed_temp1 * 0.51444)	-- seconds
							-- time_temp = time_temp / 3600	-- hours
							-- if xx == offset or xx == 1 then
								-- time_temp = (time_zulu + time_temp) % 24
							-- else
								-- time_temp = (legs_data[xx-1][13] + time_temp) % 24
							-- end
							-- time_td = time_temp
						-- end
					-- end
				-- end
				
				-- -- calc E/D distance and time
				-- if ed_found ~= 0 and B738DR_flight_phase > 4 and B738DR_flight_phase < 8 and offset <= ed_found then
					-- if xx <= ed_found then
						-- dist_ed = dist_ed + dist_temp
						-- if xx == ed_found then
							-- time_temp = (legs_data[xx][3] * 1852) / (speed_temp1 * 0.51444)	-- seconds
							-- time_temp = time_temp / 3600	-- hours
							-- if xx == offset or xx == 1 then
								-- time_temp = (time_zulu + time_temp) % 24
							-- else
								-- time_temp = (legs_data[xx-1][13] + time_temp) % 24
							-- end
							-- time_ed = time_temp
						-- end
					-- end
				-- end
				
				-- time_temp = (dist_temp * 1852) / (speed_temp1 * 0.51444)	-- seconds
				-- time_temp = time_temp / 3600	-- hours
				-- if xx == offset or xx == 1 then
					-- time_temp = (time_zulu + time_temp) % 24
				-- else
					-- time_temp = (legs_data[xx-1][13] + time_temp) % 24
				-- end
				-- if xx <= legs_num then
					-- legs_data[xx][13] = time_temp
				-- else
					-- if des_app == "------" then
						-- legs_data[xx][13] = time_temp
					-- else
						-- if rnav_idx_last > 0 and rnav_idx_last < legs_num then
							-- legs_data[xx][13] = (legs_data[rnav_idx_last][13] + 0.033) % 24
						-- else
							-- legs_data[xx][13] = time_temp
						-- end
					-- end
				-- end
			-- end
		-- end
	-- end

-- end


function B738_legs_step()

	map_mode = B738DR_capt_map_mode
	
	if legs_step < offset then
		legs_step = offset
		page_legs_step = 1
	end
	
	if legs_step > legs_num2 then
		legs_step = legs_num2
	end
	
	
	if map_mode ~= map_mode_old then		--step
		if map_mode == 3 then
			act_page = page_legs_step
		else
			act_page = 1
		end
	end
	map_mode_old = map_mode
end

function B738_legs_stepx()

	map_mode = B738DR_capt_map_mode
	
	if legs_step < offset then
		legs_step = offset
		page_legs_step = 1
	end
	
	if legs_step > legs_num then
		legs_step = legs_num
	end
	
	
	if map_mode ~= map_mode_old then		--step
		if map_mode == 3 then
			act_page = page_legs_step
		else
			act_page = 1
		end
	end
	map_mode_old = map_mode
end


function B738_legs_step2()

	map_mode2 = B738DR_fo_map_mode
	
	if legs_step2 < offset then
		legs_step2 = offset
		page_legs_step2 = 1
	end
	
	if legs_step2 > legs_num2 then
		legs_step2 = legs_num2
	end
	
	
	if map_mode2 ~= map_mode_old2 then		--step
		if map_mode2 == 3 then
			act_page2 = page_legs_step2
		else
			act_page2 = 1
		end
	end
	map_mode_old2 = map_mode2
end


function B738_chock()
	if B738DR_chock_status == 1 then
		if simDR_on_ground_0 == 1 and simDR_on_ground_1 == 1 and simDR_on_ground_2 == 1 then
			simDR_pos_x = chock_pos_x
			simDR_pos_y = chock_pos_y
			simDR_pos_z = chock_pos_z
			simDR_pos_vx = 0
			simDR_pos_vy = 0
			simDR_pos_vz = 0
			simDR_pos_ax = 0
			simDR_pos_ay = 0
			simDR_pos_az = 0
		end
	end
end

function B738_pause_td()
	if B738DR_pause_td == 1 then
		if td_idx ~= 0 and B738DR_vnav_td_dist < 8 and B738DR_vnav_td_dist > 1 and pause_td_disable == 0 then
			pause_td_disable = 1
			if simDR_pause == 0 then
				simCMD_pause:once()
			end
		end
		if td_idx ~= 0 and B738DR_vnav_td_dist > 10 then
			pause_td_disable = 0
		end
		
	else
		-- if simDR_pause == 1 then
			-- simCMD_pause:once()
		-- end
		pause_td_disable = 0
	end
end

function B738_calc_vnav_spd()
	
	local ci = 0
	
	--if cost_index ~= "***" and gw ~= "***.*" and crz_alt_num > 0 then
	if perf_exec > 0 then
		ci = tonumber(cost_index)
		if crz_alt_num <= 10000 then
			econ_clb_spd = 250
			econ_clb_spd_mach = 0.66
			econ_crz_spd = 250
			econ_crz_spd_mach = 0.71
			econ_des_spd = 240
			econ_des_spd_mach = 0.66
			
			econ_des_vpa = 2.8		--B738_rescale(0, 2.6, 500, 3.0, ci)
		else
			econ_clb_spd = B738_rescale(0, 270, 500, 290, ci)
			econ_clb_spd_mach = B738_rescale(0, 0.70, 500, 0.77, ci)	--0.76/0.80
			econ_crz_spd = B738_rescale(0, 300, 500, 330, ci)
			econ_crz_spd_mach = B738_rescale(0, 0.78, 500, 0.80, ci)
			-- econ_des_spd = B738_rescale(0, 270, 500, 290, ci)
			-- econ_des_spd_mach = B738_rescale(0, 0.70, 500, 0.77, ci)	--0.76/0.80
			econ_des_vpa = B738_rescale(0, 2.8, 500, 3.0, ci)
			--econ_des_vpa = 3.0 --B738_rescale(0, 2.6, 500, 3.0, ci)
			
			if ci <= 20 then
				econ_des_spd = B738_rescale(0, 270, 20, 280, ci)
				econ_des_spd_mach = B738_rescale(0, 0.70, 20, 0.78, ci)	--0.76/0.80
			elseif ci >= 200 then
				econ_des_spd = B738_rescale(200, 280, 500, 290, ci)
				econ_des_spd_mach = B738_rescale(200, 0.78, 500, 0.79, ci)	--0.76/0.80
			else
				econ_des_spd = 280
				econ_des_spd_mach = 0.78
			end
			
		end
		B738DR_fmc_climb_speed_mach = econ_clb_spd_mach		-- temporary
		B738DR_fmc_climb_speed = econ_clb_spd				-- temporary
		B738DR_fmc_cruise_speed_mach = econ_crz_spd_mach	-- temporary
		B738DR_fmc_cruise_speed = econ_crz_spd				-- temporary
		B738DR_fmc_descent_speed_mach = econ_des_spd_mach	-- temporary
		B738DR_fmc_descent_speed = econ_des_spd				-- temporary
		B738DR_climb_mode = 0
		B738DR_cruise_mode = 0
		B738DR_descent_mode = 0
		--vnav_update = 1
	end

end


function B738_fmc_on()
	if simDR_bus_volts1 > 10 or simDR_bus_volts2 > 10 then
		fmc_enable = 1
		if reset_fmc == 1 then
			B738_init2()
		end
		reset_fmc = 0
	else
		fmc_enable = 0
		if reset_fmc == 0 then
			reset_fmc = 1
			B738_init2()
		end
	end
	
	
	local align_source = 0
	
	fmc_align = 0
	if fmc_enable == 1 then
		
		if B738DR_irs_source == -1 then
			if B738DR_irs_left_mode == 2 then
				fmc_align = 1
				align_source = align_source + 1
			end
		elseif B738DR_irs_source == 0 then
			if B738DR_irs_left_mode == 2 then
				fmc_align = 1
				align_source = align_source + 1
			end
			if B738DR_irs_right_mode == 2 then
				fmc_align = 1
				align_source = align_source + 1
			end
		else
			if B738DR_irs_right_mode == 2 then
				fmc_align = 1
				align_source = align_source + 1
			end
		end
		if simDR_gps_fail == 0 then
			align_source = align_source + 1
		end
		if simDR_gps2_fail == 0 then
			align_source = align_source + 1
		end
	end
	
	if align_source == 0 then
		if align_source ~= align_source_old then
			align_anp_min = 19000
			align_anp_max = 20000
			align_anp_time = 0
		end
	elseif align_source == 1 then
		if align_source ~= align_source_old then
			align_anp_min = 950
			align_anp_max = 1820
			align_anp_time = 0
		end
	elseif align_source == 2 then
		if align_source ~= align_source_old then
			align_anp_min = 420
			align_anp_max = 950
			align_anp_time = 0
		end
	elseif align_source == 3 then
		if align_source ~= align_source_old then
			align_anp_min = 130
			align_anp_max = 380
			align_anp_time = 0
		end
	else
		if align_source ~= align_source_old then
			align_anp_min = 0
			align_anp_max = 60
			align_anp_time = 0
		end
	end
	align_source_old = align_source
	
	if align_anp_time == 0 then
		local int, frac = math.modf(os.clock())
		local seed = math.random(1, frac*1000.0)
		math.randomseed(seed)
		align_anp = math.random(align_anp_min, align_anp_max) + math.random()
		align_anp_time = 0
	end
	align_anp_time = align_anp_time + SIM_PERIOD
	if align_anp_time > 8 then
		align_anp_time = 0
	end
	
	B738DR_anp = B738_set_anim_value((B738DR_anp*1000), align_anp, 0, 20000, 0.11) / 1000
	
end

function B738_vnav_desc_spd()

	local vnav_desc_spd_disable = 0
	
	if B738DR_autopilot_vnav_status == 1 then
		if legs_num > 0 and offset > 0 and  offset < (legs_num + 1) then
			if legs_data[offset][9] == des_app
			or legs_data[offset][9] == des_app_tns
			or offset > ed_found then
				vnav_desc_spd_disable = 1
			end
		end
		if simDR_flaps_ratio > 0 then
			vnav_desc_spd_disable = 1
		end
	else
		vnav_desc_spd_disable = 1
	end
	B738DR_vnav_desc_spd_disable = vnav_desc_spd_disable
	
end

function B738_pre_flt_status()
	
	pre_flt_pos_init = 1
	pre_flt_rte = 1
	pre_flt_perf_init = 1
	pre_flt_dep = 1
	
	if irs_pos == "*****.*******.*" then
		pre_flt_pos_init = 0
	end
	if legs_num == 0 then
		pre_flt_rte = 0
	end
	if gw == "***.*" or zfw == "***.*" or reserves == "**.*" or cost_index == "***" or crz_alt == "*****" then
		pre_flt_perf_init = 0
	end
	if ref_rwy == "-----" then
		pre_flt_dep = 0
	end
	
end


function B738_wind()
	
	head_wind = simDR_wind_spd * math.cos(math.rad(Angle180(simDR_wind_hdg))-math.rad(simDR_position_mag_psi))
	cross_wind = simDR_wind_spd * math.sin(math.rad(Angle180(simDR_wind_hdg))-math.rad(simDR_position_mag_psi))
	
	local wind_show = B738DR_wind_show
	if simDR_wind_spd >= 6 then
		wind_show = 1
	end
	if simDR_wind_spd < 4 then
		wind_show = 0
	end
	if simDR_TAS < 51.9859 then		-- 101 kts
		wind_show = 0
	end
	B738DR_wind_show = wind_show
	
end

function B738_detect_center_line()

	local cl_icao = ""
	local cl = 0
	local cl_crs1 = 0
	local cl_crs2 = 0
	
	local nd_lat = 0 
	local nd_lon = 0 
	local nd_lat2 = 0
	local nd_lon2 = 0
	local nd_x = 0
	local nd_y = 0
	local nd_hdg = 0
	local delta_hdg = 0
	local min_delta = 0
	local lat_wpt = 0
	local lon_wpt = 0
	local temp_d_R = 0
	local temp_brg = 0
	local temp_lat = 0
	
	local idx_rec = 0
	
	if simDR_radio_height_pilot_ft > 50 then
		cl_icao_found = 0
	end
	
	if simDR_on_ground_0 == 1 then	-- nosewheel on the ground
		--temp_brg = math.rad((simDR_mag_hdg - simDR_mag_variation + 360) % 360)
		temp_brg = math.rad((simDR_mag_hdg - simDR_mag_variation + 360) % 360)
		lat_wpt = math.rad(simDR_latitude)
		lon_wpt = math.rad(simDR_longitude)
		temp_d_R = 0.00842332613 / 3440.064795	--distance to nosewheel from center plane in NM
		temp_lat = math.asin(math.sin(lat_wpt)*math.cos(temp_d_R) + math.cos(lat_wpt)*math.sin(temp_d_R)*math.cos(temp_brg))
		nd_lon = lon_wpt + math.atan2(math.sin(temp_brg)*math.sin(temp_d_R)*math.cos(lat_wpt), math.cos(temp_d_R)-math.sin(lat_wpt)*math.sin(temp_lat))
		nd_lat = temp_lat
		
		if cl_icao_found == 0 then
			if nd_page == 0 then
				cl_icao = near_apt2_icao
			else
				cl_icao = near_apt1_icao
			end
			-- find runways
			cl_icao_found = 1
			cl_num = 0
			cl_lat1 = {}
			cl_lon1 = {}
			cl_lat2 = {}
			cl_lon2 = {}
			if rnw_data_num > 0 then
				nd_x = string.byte(string.sub(cl_icao, 1, 1))
				if (nd_x >= 48 and nd_x <= 57) or (nd_x >= 65 and nd_x <= 90) then
					if idx_rnw[nd_x][99999] > 0 then
						for cl = 1, idx_rnw[nd_x][99999] do
							idx_rec = idx_rnw[nd_x][cl]
							--if ref_icao == rnw_data[idx_rec][1] then
							if rnw_data[idx_rec][1] == cl_icao then
							
			-- if rnw_data_num > 0 then
				-- for cl = 1, rnw_data_num do
					--if rnw_data[cl][1] == cl_icao then
								cl_num = cl_num + 1
								cl_lat1[cl_num] = rnw_data[idx_rec][3]
								cl_lon1[cl_num] = rnw_data[idx_rec][4]
								cl_lat2[cl_num] = rnw_data[idx_rec][5]
								cl_lon2[cl_num] = rnw_data[idx_rec][6]
							end
						end
					end
				end
			end
		end
		-- calculate course
		min_delta = 500
		if cl_num > 0 then
			for cl = 1, cl_num do
				nd_lat2 = math.rad(cl_lat1[cl])
				nd_lon2 = math.rad(cl_lon1[cl])
				nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
				nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
				nd_hdg = math.atan2(nd_y, nd_x)
				nd_hdg = math.deg(nd_hdg)
				cl_crs1 = (nd_hdg + 360) % 360
				
				nd_lat2 = math.rad(cl_lat2[cl])
				nd_lon2 = math.rad(cl_lon2[cl])
				nd_y = math.sin(nd_lon2 - nd_lon) * math.cos(nd_lat2)
				nd_x = math.cos(nd_lat) * math.sin(nd_lat2) - math.sin(nd_lat) * math.cos(nd_lat2) * math.cos(nd_lon2 - nd_lon)
				nd_hdg = math.atan2(nd_y, nd_x)
				nd_hdg = math.deg(nd_hdg)
				cl_crs2 = (nd_hdg + 360 + 180) % 360
				
				delta_hdg = cl_crs1 - cl_crs2
				if delta_hdg < 0 then
					delta_hdg = -delta_hdg
				end
				if delta_hdg < min_delta then
					min_delta = delta_hdg
				end
			end
			if min_delta < CL_THRSHLD then		-- Center line THRSHLD
				B738DR_center_line = 1
			else
				B738DR_center_line = 0
			end
			-- temporary
			--B7378DR_ctr_line_dist = min_delta
		end
	else
		B738DR_center_line = 0
		-- temporary
		--B7378DR_ctr_line_dist = 999
	end
end

function fuel_tank_correct()
	local kk = (simDR_fuel_tank_weight_kg[0] + simDR_fuel_tank_weight_kg[1] + simDR_fuel_tank_weight_kg[2]) / 1000
	local ll = (simDR_payload_weight / 1000) + kk + 41.4
	
	if kk >= 1 and kk <= 20.5 and ll <= 79 then
		if kk > 7.8 then
			simDR_fuel_tank_weight_kg[0] = 3900
			simDR_fuel_tank_weight_kg[2] = 3900
			simDR_fuel_tank_weight_kg[1] = (kk - 7.8) * 1000
		else
			simDR_fuel_tank_weight_kg[0] = (kk / 2) * 1000
			simDR_fuel_tank_weight_kg[2] = (kk / 2) * 1000
			simDR_fuel_tank_weight_kg[1] = 0
		end
	end
end

function gpu_test_reset()
	gpu_test_enable = 0
end

function calc_mac(cg_input)
	
	local basic_arm = DEFAULT_ARM + cg_input		-- basic arm in meters
	local moment_empty = 41412.98 * basic_arm	--kgm
	local moment_payload = simDR_payload_weight * basic_arm	-- kgm
	local moment_main_tank = (simDR_fuel_tank_weight_kg[0] + simDR_fuel_tank_weight_kg[2]) * MAIN_TANK_ARM -- kgm
	local moment_center_tank = simDR_fuel_tank_weight_kg[1] * CENTER_TANK_ARM		--kgm
	local cg_in_m = moment_empty + moment_payload + moment_main_tank + moment_center_tank
	local tow = 41412.98 + simDR_payload_weight + simDR_fuel_tank_weight_kg[0] + simDR_fuel_tank_weight_kg[1] + simDR_fuel_tank_weight_kg[2]
	cg_in_m = cg_in_m / tow
	local n = ((cg_in_m - 15.92834) / 3.95732) * 100
	if n < 6 or n > 36 then
		n = 0
	end
	return n
	
end

function calc_zfw_mac(cg_input)
	
	local basic_arm = DEFAULT_ARM + cg_input		-- basic arm in meters
	local moment_empty = 41412.98 * basic_arm	--kgm
	local moment_payload = simDR_payload_weight * basic_arm	-- kgm
	local cg_in_m = moment_empty + moment_payload
	local tow = 41412.98 + simDR_payload_weight
	cg_in_m = cg_in_m / tow
	local n = ((cg_in_m - 15.92834) / 3.95732) * 100
	if n < 6 or n > 36 then
		n = 0
	end
	return n
	
end

function fmc_entry_alt()
	if page_cruise == 1 then
		entry = tostring(B738DR_mcp_alt_dial)
		if fmc1_msg_alt == 0 then
			fmc1_msg_alt = 1
		end
	end
	if page_cruise2 == 1 then
		entry2 = tostring(B738DR_mcp_alt_dial)
		if fmc2_msg_alt == 0 then
			fmc2_msg_alt = 1
		end
	end
end

function B738_fmc_alt_dial()
	
	--if page_climb > 0 or page_descent > 0 or page_cruise > 0 then
	if page_cruise == 1 or page_cruise2 == 1 then 
		if mcp_alt_dial_old ~= B738DR_mcp_alt_dial then
			if is_timer_scheduled(fmc_entry_alt) == true then
				stop_timer(fmc_entry_alt)
			end
			if is_timer_scheduled(fmc_entry_alt) == false then
				run_after_time(fmc_entry_alt, 2.5)
			end
		end
	else
		if is_timer_scheduled(fmc_entry_alt) == true then
			stop_timer(fmc_entry_alt)
		end
	end
	mcp_alt_dial_old = B738DR_mcp_alt_dial
	
end


function B738_init2()
xxx_str = ""
xxx = 0

--menu_timer = 0

version = ""
file_navdata = 0

clr_repeat = 0
clr_repeat_time = 0

scratch_error = 0
--decode_value = 0
decode_value_mach = 0
decode_value2 = 0
--index_pos = 0
i = 0
delete_active = 0
FMS_page = 0

input_1L = 0
input_2L = 0
input_3L = 0
input_4L = 0
input_5L = 0
input_6L = 0

input_1R = 0
input_2R = 0
input_3R = 0
input_4R = 0
input_5R = 0
input_6R = 0

blank_data = 0

line0_l = ""
line1_l = ""
line2_l = ""
line3_l = ""
line4_l = ""
line5_l = ""
line6_l = ""
line0_s = ""
line1_s = ""
line2_s = ""
line3_s = ""
line4_s = ""
line5_s = ""
line6_s = ""
line1_x = ""
line2_x = ""
line3_x = ""
line4_x = ""
line5_x = ""
line6_x = ""
line0_inv = ""
line1_inv = ""
line2_inv = ""
line3_inv = ""
line4_inv = ""
line5_inv = ""
line6_inv = ""

max_page = 0
act_page = 0
act_page_old = 0

-- page_menu = 0
-- page_ident = 0
-- page_init = 0
-- page_takeoff = 0
display_update = 1
-- page_approach = 0
-- page_perf = 0
-- page_n1_limit = 0
-- page_pos_init = 0
-- page_route = 0
-- page_dep_arr = 0
-- page_dep = 0
-- page_arr = 0
-- page_descent = 0
-- page_descent_forecast = 0
-- page_legs = 0
-- page_rte_init = 0
-- page_climb = 0
-- page_cruise = 0
-- page_sel_wpt = 0
-- page_sel_wpt2 = 0
-- page_sel_wpt3 = 0
-- page_sel_wpt4 = 0
-- page_offset = 0

-- page_menu2 = 0
-- page_ident2 = 0
-- page_init2 = 0
-- page_takeoff2 = 0
-- page_approach2 = 0
-- page_perf2 = 0
-- page_n1_limit2 = 0
-- page_pos_init2 = 0
-- page_route2 = 0
-- page_dep_arr2 = 0
-- page_dep2 = 0
-- page_arr2 = 0
-- page_descent2 = 0
-- page_descent_forecast2 = 0
-- page_legs2 = 0
-- page_rte_init2 = 0
-- page_climb2 = 0
-- page_cruise2 = 0
-- page_progress2 = 0
-- page_hold2 = 0
-- page_xtras2 = 0
-- page_xtras_fmod2 = 0
-- page_xtras_others2 = 0
-- page_sel_wpt_2 = 0
-- page_sel_wpt2_2 = 0
-- page_sel_wpt3_2 = 0
-- page_sel_wpt4_2 = 0
-- page_offset2 = 0
-- page_legs_step2 = 0
-- page_offset2 = 0

page_legs_step = 1
legs_step = 0
map_mode = 2
map_mode_old = 2

entry = ""
entry2 = ""

entry_wind_dir = ""
entry_wind_spd = ""

FMS_popup = 0

v1 = "---"
vr = "---"
v2 = "---"
flaps = "**"
vref_15 = "   "
vref_30 = "   "
vref_40 = "   "
flaps_app = "  "

gw_act = "    "
v1_set = "---"
vr_set = "---"
v2_set = "---"
irs_pos_set = "*****.*******.*"
gps_right = "-----.-------.-"
gps_left = "-----.-------.-"
--last_pos = "-----.-------.-"
fmc_pos = "-----.-------.-"
last_pos_enable = 1

ref_icao = "----"
ref_gate = "-----"
des_icao = "****"
co_route = "------------"
flt_num = "--------"
ref_rwy = "-----"
des_rwy = "----"
	ref_gate_x = "-----"
	co_route_x = "------------"
ref_icao2 = "----"

gw = "***.*"
gw_calc = "***.*"
gw_lbs = "***.*"
gw_kgs = "***.*"

zfw_calc = "---.-"
zfw_calc_lbs = "---.-"
zfw_calc_kgs = "---.-"

fuel_weight = "--.-"
fuel_weight_lbs = "--.-"
fuel_weight_kgs = "--.-"

plan_weight = "---.-"
plan_weight_kgs = "---.-"
plan_weight_lbs = "---.-"

zfw = "***.*"
zfw_kgs = "***.*"
zfw_lbs = "***.*"

reserves = "**.*"
reserves_kgs = "**.*"
reserves_lbs = "**.*"

cost_index = "***"
econ_clb_spd = 0
econ_clb_spd_mach = 0
econ_crz_spd = 0
econ_crz_spd_mach = 0
econ_des_spd = 0
econ_des_spd_mach = 0
econ_des_vpa = 0.0

crz_alt = "*****"
crz_alt_num = 0
crz_alt_num2 = 0
crz_spd = "---"
crz_spd_mach = ".---"
crz_alt_old = "*****"
crz_spd_old = "---"
crz_spd_mach_old = ".---"
crz_exec = 0
clb_alt = "----"
clb_alt_num = 1500
accel_alt = "----"
accel_alt_num = 1000
crz_wind_dir = "---"
crz_wind_spd = "---"
rw_wind_dir = "---"
rw_wind_spd = "---"
rw_slope = "--.-"
rw_hdg = "---"
--trans_alt = "18000"
trans_alt = "-----"

trans_lvl = "-----"
isa_dev_f = "---"
isa_dev_c = "---"
tc_oat_f = "---"
tc_oat_c = "---"

forec_alt_1 = "-----"
forec_alt_1_num = 0
forec_dir_1 = "---"
forec_spd_1 = "---"
forec_alt_2 = "-----"
forec_alt_2_num = 0
forec_dir_2 = "---"
forec_spd_2 = "---"
forec_alt_3 = "-----"
forec_alt_3_num = 0
forec_dir_3 = "---"
forec_spd_3 = "---"
cabin_rate = "---"
forec_isa_dev = "---"
forec_qnh = "------"

to = "<ACT>"
to_1 = "     "
to_2 = "     "
clb = "<SEL>"
clb_1 = "     "
clb_2 = "     "
sel_clb_thr = 0
rw_cond = 0
cg = "--.-"
trim = "    "
time_err = "  "
--units = 0
units_recalc = 0
weight_min = 90
weight_max = 180

clb_min_kts = "   "
clb_min_mach = "   "
clb_max_kts = "   "
clb_max_mach = "   "
crz_min_kts = "   "
crz_min_mach = "   "
crz_max_kts = "   "
crz_max_mach = "   "
des_min_kts = "   "
des_min_mach = "   "
des_max_kts = "   "
des_max_mach = "   "


latitude_deg = ""
latitude_min = ""
longitude_deg = ""
longitude_min = ""
irs_hdg = "---`"
irs_pos = "*****.*******.*"
--irs_pos = ""

msg_irs_pos = 0
msg_irs_hdg = 0
zulu_time = "             "
ground_air = 0
fmc_gs = ""
irs_gs = ""
irs2_gs = ""
oat_sim = "    "
oat = "****"
sel_temp = "----"
sel_temp_f = "----"
oat_f = "****"
oat_sim_f = "    "
oat_unit = "`C"

wind_corr = "--"
app_flap = "--"
app_spd = "---"

msg_to_vspeed = 0
qrh = "OFF"
msg_mcp_alt = 0
msg_gps_l_fail = 0
msg_gps_r_fail = 0
msg_gps_lr_fail = 0
msg_irs_motion = 0
msg_drag_req = 0
msg_nav_data = 0
msg_unavaible_crz_alt = 0
msg_chk_alt_tgt = 0
msg_tai_above_10 = 0

auto_act = "<ACT>"
ga_act = "     "
con_act = "     "
clb_act = "     "
crz_act = "     "

tai_on_alt = "-----"
tai_off_alt = "-----"


eng_out_prompt = 0

was_on_air = 0
takeoff_enable = 0
climb_enable = 1
descent_enable = 0
goaround_enable = 0
fmc_climb_mode = 0
fmc_cruise_mode = 0
fmc_cont_mode = 0
fmc_takeoff_mode = 0
fmc_goaround_mode = 0
fms_N1_mode = 0
fms_N1_to_mode_sel = 0
fms_N1_clb_mode_sel = 0
in_flight_mode = 0


disable_POS_2L = 0
disable_POS_3L = 0
disable_POS_4R = 0
disable_POS_5R = 0
disable_PERF_3R = 0
disable_PERF_4R = 0
disable_N1_6L = 0
disable_N1_6R = 0


fmc_full_thrust = 0.984
fmc_dto_thrust = 0.984
fmc_sel_thrust = 0.984
fmc_clb_thrust = 0.984
fmc_crz_thrust = 0.984
fmc_con_thrust = 0.984
fmc_ga_thrust = 0.984
fmc_auto_thrust = 0.984

next_enable = 1
prev_enable = 1
exec1_light = 0

des_now_enable = 0
drag_timeout = 0

file_name = ""

ref_data = {}
rwy_num = 0
ref_data_sid = {}
sid_num = 0
ref_data_star = {}
star_num = 0
ref_data_star_tns = {}
ref_data_star_tns_n = 0
ref_data_app = {}
ref_data_app_n = 0
ref_data_app_tns = {}
ref_data_app_tns_n = 0
ref_ed_app = {}
ref_ed_app_n = 0

des_data = {}
des_rwy_num = 0

-- data destination star
data_des_star = {}
data_des_star_n = 0

-- data destination star transition
data_des_star_tns = {}
data_des_star_tns_n = 0

ref_data_sid_act = {}
sid_num_act = 0

ref_data_sid_tns = {}
ref_num_sid_tns = 0

ref_data_tns = {}
tns_num = 0

des_data_app_act = {}
des_num_app_act = 0

-- data destinstion approach
data_des_app = {}
data_des_app_n = 0

-- data destination approach transition
data_des_app_tns = {}
data_des_app_tns_n = 0

ed_app_num = 0
ed_app = {}

des_num_star_tns = 0
des_data_star_tns = {}

des_num_app_tns = 0
des_data_app_tns = {}

ref_rwy_map = {}
ref_rwy_map_num = 0

ref_trans_alt = 0

ref_sid = "------"
ref_sid_tns = "------"

des_star = "------"
des_star_trans = "------"

-- transition connect STAR <-> APP
des_star_trans_con = ""

des_app = "------"

des_app_tns = "------"

ref_rwy_exec = 0
ref_sid_exec = 0
ref_tns_exec = 0
ref_app_tns_exec = 0
des_star_exec = 0
des_star_tns_exec = 0
des_app_exec = 0
des_app_tns_exec = 0

fpln_num = 0
fpln_data = {}

fpln_data2 = {}
fpln_num2 = 0

legs_data = {}
legs_num = 0

legs_num3 = 0
legs_data3 = {}
legs_off_tmp_n = 0
legs_off_tmp = {}

offset_act = 0
offset_start = 0
offset_end = 0
offset_dist = 0
offset_side = 0

ref_rwy_sel = {}
ref_rwy_sel[1] = ""
ref_rwy_sel[2] = ""
ref_rwy_sel[3] = ""
ref_rwy_sel[4] = ""
ref_rwy_sel[5] = ""

ref_sid_sel = {}
ref_sid_sel[1] = ""
ref_sid_sel[2] = ""
ref_sid_sel[3] = ""
ref_sid_sel[4] = ""
ref_sid_sel[5] = ""

ref_tns_sel = {}
ref_tns_sel[1] = ""
ref_tns_sel[2] = ""
ref_tns_sel[3] = ""
ref_tns_sel[4] = ""
ref_tns_sel[5] = ""

des_star_sel = {}
des_star_sel[1] = ""
des_star_sel[2] = ""
des_star_sel[3] = ""
des_star_sel[4] = ""
des_star_sel[5] = ""

des_star_tns_sel = {}
des_star_tns_sel[1] = ""
des_star_tns_sel[2] = ""
des_star_tns_sel[3] = ""
des_star_tns_sel[4] = ""
des_star_tns_sel[5] = ""

des_app_sel = {}
des_app_sel[1] = ""
des_app_sel[2] = ""
des_app_sel[3] = ""
des_app_sel[4] = ""
des_app_sel[5] = ""

des_tns_sel = {}
des_tns_sel[1] = ""
des_tns_sel[2] = ""
des_tns_sel[3] = ""
des_tns_sel[4] = ""
des_tns_sel[5] = ""

set_ils = 0
--offset = 1
legs_offset = 0
legs_select = 0
legs_delete = 0
legs_delete_item = 0
legs_delete_key = 0

legs_restr_spd = {}
legs_restr_spd_n = 0

legs_restr_alt = {}
legs_restr_alt_n = 0

tc_dist = 0
--tc_idx = 0
tc_lat = 0
tc_lon = 0

--td_dist = 0
--td_idx = 0
td_lat = 0
td_lon = 0

--decel_dist = 0
--decel_idx = 0
decel_lat = 0
decel_lon = 0
was_decel = 0
--ed_found = 0
--ed_alt = 0
--td_idx_last = 0
--td_spd_rest = 0

vnav_update = 0

offset_old = 0

temp_ils3 = ""
temp_ils4 = ""

	max_page = 0
	act_page = 0
	act_page_old = 0
	page_legs_step = 1

	-- page_menu = 0
	-- page_ident = 0
	-- page_init = 0
	-- page_takeoff = 0
	display_update = 1
	-- page_approach = 0
	-- page_perf = 0
	-- page_n1_limit = 0
	-- page_pos_init = 0
	-- page_route = 0
	-- page_descent = 0
	-- page_descent_forecast = 0
	-- page_legs = 0
	-- page_climb = 0
	-- page_cruise = 0
	-- page_progress = 0
	-- page_hold = 0
	-- page_xtras = 0
	-- page_xtras_fmod = 0
	-- page_xtras_others = 0
	-- page_offset = 0
	-- page_xtras_fuel = 0

	-- page_menu2 = 0
	-- page_ident2 = 0
	-- page_init2 = 0
	-- page_takeoff2 = 0
	-- page_approach2 = 0
	-- page_perf2 = 0
	-- page_n1_limit2 = 0
	-- page_pos_init2 = 0
	-- page_route2 = 0
	-- page_dep_arr2 = 0
	-- page_dep2 = 0
	-- page_arr2 = 0
	-- page_descent2 = 0
	-- page_descent_forecast2 = 0
	-- page_legs2 = 0
	-- page_rte_init2 = 0
	-- page_climb2 = 0
	-- page_cruise2 = 0
	-- page_progress2 = 0
	-- page_hold2 = 0
	-- page_xtras2 = 0
	-- page_xtras_fmod2 = 0
	-- page_xtras_others2 = 0
	-- page_sel_wpt_2 = 0
	-- page_sel_wpt2_2 = 0
	-- page_sel_wpt3_2 = 0
	-- page_sel_wpt4_2 = 0
	-- page_offset2 = 0
	-- page_legs_step2 = 0
	-- page_offset2 = 0
	-- page_xtras_fuel2 = 0
	-- page_ref_nav_data2 = 0
	-- page_ref_nav_data_wpt2 = 0
	-- page_ref_nav_data_navaid2 = 0
	-- page_ref_nav_data_apt2 = 0
	-- page_ref_sel2 = 0

	entry = ""
	entry2 = ""

	FMS_popup = 0

	v1 = "---"
	vr = "---"
	v2 = "---"
	flaps = "**"
	vref_15 = "   "
	vref_30 = "   "
	vref_40 = "   "
	flaps_app = "  "

	gw_act = "    "
	v1_set = "---"
	vr_set = "---"
	v2_set = "---"
	irs_pos_set = "*****.*******.*"
	gps_right = "-----.-------.-"
	gps_left = "-----.-------.-"
	--last_pos = "-----.-------.-"
	fmc_pos = "-----.-------.-"
	last_pos_enable = 1

	ref_icao = "----"
	ref_gate = "-----"
	ref_icao2 = "----"

	gw = "***.*"
	gw_calc = "***.*"
	gw_lbs = "***.*"
	gw_kgs = "***.*"

	zfw_calc = "---.-"
	zfw_calc_lbs = "---.-"
	zfw_calc_kgs = "---.-"

	fuel_weight = "--.-"
	fuel_weight_lbs = "--.-"
	fuel_weight_kgs = "--.-"

	plan_weight = "---.-"
	plan_weight_kgs = "---.-"
	plan_weight_lbs = "---.-"

	zfw = "***.*"
	zfw_kgs = "***.*"
	zfw_lbs = "***.*"

	reserves = "**.*"
	reserves_kgs = "**.*"
	reserves_lbs = "**.*"

	cost_index = "***"
	crz_alt = "*****"
	crz_alt_num = 0
	crz_alt_num2 = 0
	crz_spd = "300"
	crz_spd_mach = ".800"
	crz_alt_old = "*****"
	crz_spd_old = "---"
	crz_spd_mach_old = ".---"
	crz_exec = 0
	crz_wind_dir = "---"
	crz_wind_spd = "---"
	trans_alt = "-----"
	trans_lvl = "-----"
	isa_dev_f = "---"
	isa_dev_c = "---"
	tc_oat_f = "---"
	tc_oat_c = "---"
	
	forec_alt_1 = "-----"
	forec_dir_1 = "---"
	forec_spd_1 = "---"
	forec_alt_2 = "-----"
	forec_dir_2 = "---"
	forec_spd_2 = "---"
	forec_alt_3 = "-----"
	forec_dir_3 = "---"
	forec_spd_3 = "---"
	cabin_rate = "---"
	forec_isa_dev = "---"
	forec_qnh = "------"

	to = "<ACT>"
	to_1 = "     "
	to_2 = "     "
	clb = "<SEL>"
	clb_1 = "     "
	clb_2 = "     "
	sel_clb_thr = 0
	rw_cond = 0
	cg = "--.-"
	trim = "    "
	time_err = "  "
	--units = 0
	units_recalc = 0
	weight_min = 90
	weight_max = 180

	rw_wind_dir = "---"
	rw_wind_spd = "---"
	rw_slope = "--.-"
	rw_hdg = "---"

	tai_on_alt = "-----"
	tai_off_alt = "-----"


	clb_min_kts = "   "
	clb_min_mach = "   "
	clb_max_kts = "   "
	clb_max_mach = "   "
	crz_min_kts = "   "
	crz_min_mach = "   "
	crz_max_kts = "   "
	crz_max_mach = "   "
	des_min_kts = "   "
	des_min_mach = "   "
	des_max_kts = "   "
	des_max_mach = "   "

	latitude_deg = ""
	latitude_min = ""
	longitude_deg = ""
	longitude_min = ""
	irs_hdg = "---`"
	irs_pos = "*****.*******.*"
	msg_irs_pos = 0
	msg_irs_hdg = 0
	zulu_time = "             "
	ground_air = 0
	fmc_gs = ""
	irs_gs = ""
	irs2_gs = ""
	oat_sim = "    "
	oat = "****"
	sel_temp = "----"
	sel_temp_f = "----"
	oat_f = "****"
	oat_sim_f = "    "
	oat_unit = "`C"
	auto_act = "<ACT>"
	ga_act = "     "
	con_act = "     "
	clb_act = "     "
	crz_act = "     "
	was_on_air = 0

	wind_corr = "--"
	app_flap = "--"
	app_spd = "---"
	
	eng_out_prompt = 0

	fmc_message = {}
	fmc_message_warn = {}
	fmc_message_num = 0
	--fmc_message2 = {}
	--fmc_message_num2 = 0

	msg_to_vspeed = 0
	qrh = "OFF"
	msg_mcp_alt = 0
	msg_gps_l_fail = 0
	msg_gps_r_fail = 0
	msg_gps_lr_fail = 0
	msg_irs_motion = 0
	msg_drag_req = 0
	msg_above_max = 0
	msg_vref_not_sel = 0
	msg_chk_alt_constr = 0
	msg_rnp_alert = 0
	rnp_alert = 0
	msg_using_rsv_fuel = 0
	
	takeoff_enable = 0
	climb_enable = 1
	descent_enable = 0
	goaround_enable = 0
	fmc_climb_mode = 0
	fmc_cruise_mode = 0
	fmc_cont_mode = 0
	fmc_takeoff_mode = 0
	fmc_goaround_mode = 0
	in_flight_mode = 0


	disable_POS_2L = 0
	disable_POS_3L = 0
	disable_POS_4R = 0
	disable_POS_5R = 0
	disable_PERF_3R = 0
	disable_PERF_4R = 0
	disable_N1_6L = 0
	disable_N1_6R = 0


	--B7368DR_fmc1_show = 1

	--units = 0
	--page_menu = 1
	max_page = 1
	act_page = 1
	act_page_old = 0
	
	--page_menu2 = 1
	act_page2 = 1
	max_page2 = 1
	
	v1_set = "---"
	vr_set = "---"
	v2_set = "---"
	v1 = "---"
	vr = "---"
	v2 = "---"
	flaps = "**"
	gw_act = "   "
	flaps_app = " "
	gps_right = "-----.-------.-"
	gps_left = "---`--.- ----`--.-"
	to = "<ACT>"
	to_1 = "     "
	to_2 = "     "
	clb = "<SEL>"
	clb_1 = "     "
	clb_2 = "     "
	irs_pos = "*****.*******.*"
	B738DR_irs_hdg_fmc_set = "---"
	B738DR_irs2_hdg_fmc_set = "---"
	last_pos_enable = 1
	irs_hdg = "---`"
	msg_irs_pos = 0
	msg_irs_hdg = 0
	trans_alt = "-----"
	isa_dev_f = "---"
	isa_dev_c = "---"
	tc_oat_f = "---"
	tc_oat_c = "---"
	time_err = "  "
	oat = "****"
	sel_temp = "----"
	sel_temp_f = "----"
	oat_f = "****"
	oat_unit = "`C"
	FMS_popup = 0
	takeoff_enable = 1
	fms_N1_mode = 0
	fms_N1_to_mode_sel = 0
	fms_N1_clb_mode_sel = 0
	clb_alt = "----"
	clb_alt_num = 1500

	fmc_full_thrust = 0.984
	fmc_dto_thrust = 0.984
	fmc_sel_thrust = 0.984
	fmc_clb_thrust = 0.984
	fmc_crz_thrust = 0.984
	fmc_con_thrust = 0.984
	fmc_ga_thrust = 0.984
	fmc_auto_thrust = 0.984
	
	next_enable = 1
	prev_enable = 1
	
	drag_timeout = 0

-- CLIMB default
	B738DR_fmc_climb_speed			= 280
	B738DR_fmc_climb_speed_mach		= 0.76
	B738DR_fmc_climb_r_speed1		= 250
	B738DR_fmc_climb_r_alt1			= 10000
	B738DR_fmc_climb_r_speed2		= 0
	B738DR_fmc_climb_r_alt2			= 0

-- CRUISE default
	B738DR_fmc_cruise_speed			= 300
	B738DR_fmc_cruise_speed_mach	= 0.80
	B738DR_fmc_cruise_alt			= 20000

-- DESCENT default
	B738DR_fmc_descent_speed		= 280
	B738DR_fmc_descent_speed_mach	= 0.78
	B738DR_fmc_descent_alt			= 4000
	B738DR_fmc_descent_r_speed1		= 250
	B738DR_fmc_descent_r_alt1		= 10000
	B738DR_fmc_descent_r_speed2		= 0
	B738DR_fmc_descent_r_alt2		= 0
-- APPROACH default
	B738DR_fmc_approach_alt			= 4000

	fmc_descent_r_alt1 = "10000"
	fmc_climb_r_alt1 = "10000"
	
	econ_clb_spd = 280
	econ_clb_spd_mach = 0.760
	econ_crz_spd = 300
	econ_crz_spd_mach = 0.800
	econ_des_spd = 280
	econ_des_spd_mach = 0.780
	econ_des_vpa = 2.5	--2.5

	B738DR_climb_mode = 3		-- xxxKT/M.xxx CLB
	B738DR_cruise_mode = 2		-- xxxKT/M.xxx CRZ
	B738DR_descent_mode = 2		-- xxxKT/M.xxx SPD DES
	B738DR_flight_phase = 0
	B738DR_fms_descent_now = 0
	des_now_enable = 0

	--page_clear = 0
	
	--DRindex = 0.02		--0.002
	decode_value = 0
	index_pos = 0

	exec1_light = 0
	--B738DR_pfd_vnav_pth = 0
	
	offset = 1
	msg_nav_data = 0
	
	tc_idx = 0
	--decel_idx = 0
	td_idx = 0
	was_decel = 0
	ed_found = 0
	ed_alt = 0
	ed_vpa = 0
	--td_idx_last = 0
	B738DR_vvi_const = 10
	--td_spd_rest = 0
	clr_repeat = 0
	clr_repeat_time = 0
	legs_step = 1
	legs_step2 = 1

	offset_old = 0
	--rw_ils = ""
	--found_ils = 0
	temp_ils3 = ""
	temp_ils4 = ""
	--rnav_idx = 0
	td_fix_dist = 0
	td_fix_idx = 0
	legs_ovwr = 0
	legs_intdir = 0
	legs_dir = 0
	ed_fix_num = 0
	ed_fix_found2 = {}
	ed_fix_alt2 = {}
	ed_fix_vpa2 = {}
	dist_dest = 0
	time_dest = ""
	dist_tc = 0
	time_tc = 0
	dist_td = 0
	time_td = 0
	dist_ed = 0
	time_ed = 0
	fuel_ed = 0
	fuel_tc = 0
	fuel_td = 0
	fms_msg_sound = 0
	legs_page = 0
	legs_button = 0
	direct_to = 0
	direct_to_offset = 0
	B738DR_pfd_vert_path = 0
	B738DR_nd_vert_path = 0
	B738DR_pfd_trk_path = 0
	ed_found = 0
	lock_bank = 0
	--file_path = ""
	--simDR_cg = 0.40		--0.44		-- 20% MAC   -0.03	-- 8% MAC
	DRindex = 0.02		--0.002
	pause_td_disable = 0
	pre_flt_pos_init = 0
	pre_flt_perf_init = 0
	pre_flt_rte = 0
	pre_flt_dep = 0
	last_lat = 0 
	last_lon = 0 
	last_offset = 0
	ref_runway_lenght = 0
	ref_runway_lat = 0
	ref_runway_lon = 0
	ref_runway_crs = 0
	des_runway_lenght = 0
	des_runway_lat = 0
	des_runway_lon = 0
	des_runway_crs = 0
	des_rnw = ""
	
	nd_teak = 0
	nd_from = 0
	nd_to = 0
	nd_page1 = {}
	nd_page2 = {}
	nd_page = 0
	nd_page1_num = 0
	nd_page2_num = 0
	first_time_apt = 0
	
	xnd_teak = 0
	xnd_from = 0
	xnd_to = 0
	xnd_page1 = {}
	xnd_page2 = {}
	xnd_page = 0
	xnd_page1_num = 0
	xnd_page2_num = 0
	xfirst_time = 0
	
	near_apt1_dis = 0
	near_apt1_icao = ""
	near_apt2_dis = 0
	near_apt2_icao = ""
	cl_icao_found = 0
	cl_num = 0
	cl_lat1 = {}
	cl_lon1 = {}
	cl_lat2 = {}
	cl_lon2 = {}
	des_app_from_apt = 0
	altitude_last = 0
	ref_icao_pos = "               "
	icao_latitude = 0
	icao_longitude = 0
	icao_tns_alt = 0
	icao_tns_lvl = 0
	
	ref_rnw_list = {}
	ref_rnw_list_num = 0
	ref_rnw_list2 = {}
	ref_rnw_list_num2 = 0
	des_rnw_list = {}
	des_rnw_list_num = 0
	
	sid_list = {}
	sid_list_num = 0
	sid_tns_list = {}
	sid_tns_list_num = 0
	
	star_list = {}
	star_list_num = 0
	star_tns_list = {}
	star_tns_list_num = 0
	des_app_list = {}
	des_app_list_num = 0
	des_app_tns_list = {}
	des_app_tns_list_num = 0
	ref_rwy2 = "-----"
	ref_sid2 = "------"
	ref_sid_tns2 = "------"
	des_app2 = "------"
	des_app_tns2 = "------"
	des_star2 = "------"
	des_star_trans2 = "------"
	ref_exec = 0
	des_exec = 0
	ref_icao_x = "----"
	des_icao_x = "****"
	arr_data = 0
	
	rte_add_sid_act = 0
	rte_add_star_act = 0
	rte_add_app_act = 0
	sid_cnt = 0
	rnw_added = 0
	add_ok = 0
	
	rte_sid = {}
	rte_sid_num = 0
	rte_star = {}
	rte_star_num = 0
	rte_app = {}
	rte_app_num = 0
	
	rte_data_num = 0
	rte_data = {}
	
	item_sel = 0
	item_sel2 = 0
	item_sel_via = 0
	item_sel_via2 = 0
	
	navaid_list = {}
	navaid_list_n = 0
	
	temp_list = {}
	temp_list_num = 0
	
	rte_lat = 0
	rte_lon = 0
	
	calc_rte_enable = 0
	calc_rte_act = 0
	rte_calc_lat = 0
	rte_calc_lon = 0
	
	calc_rte_enable2 = 0
	calc_rte_act2 = 0
	rte_calc_lat2 = 0
	rte_calc_lon2 = 0
	
	ref_icao_lat = 0
	ref_icao_lon = 0
	des_icao_lat = 0
	des_icao_lon = 0
	ref_icao_alt = 0
	ref_tns_alt = 0
	ref_tns_lvl = 0
	des_tns_alt = 0
	des_tns_lvl = 0
	des_icao_alt = 0
	
	add_disco = 0
	
	rte_exec = 0
	dir_change = 0
	dir_idx = 0
	dir_disco = 0
	fpln_data_tmp_n = 0
	fpln_data_tmp = {}
	
	legs_intdir_crs2 = -1
	legs_intdir_act = 0
	new_hold = 0
	new_hold_wpt = "*****"
	new_hold_inbd = "---"
	new_hold_turn = -1
	new_hold_time = "-.-"
	new_hold_dist = "--.-"
	new_hold_spd = 0
	new_hold_alt = 0
	new_hold_rc = ""
	new_hold_via = ""
	new_hold_lat = 0
	new_hold_lon = 0
	new_hold_idx = 0
	hold_idx = 0
	hold_data = {}
	hold_data_num = 0
	hold_data_num2 = 0
	hold_data2 = {}
	hold_exec = 0
	hold_offset = 0
	hold_offset_idx = 0
	hold_term = 0
	hold_circuit = 0
	hold_time_set = 0
	hold_dist_set = 0
	hold_timer = 0
	nav_mode = 0
	pi_phase = 0
	last_sid_idx = 0
	first_sid_idx = 0
	first_app_idx = 0
	first_star_idx = 0
	ils_id = ""
	ils_freq = 0
	ils_course = 0
	
	rte_copy_idx = 0
	add_star = 0
	del_execute = 0
	B738DR_missed_app_alt = 0
	
	flying_star = 0
	flying_app = 0
	change_star = 0
	change_app = 0
	legs_num_old = 0
	legs_num = 0
	legs_num2 = 0
	legs_num3 = 0
	
	first_miss_app_idx = 0
	last_miss_app_idx = 0
	missed_app_via = ""
	
	reset_fmc_act = 0
	perf_exec = 0
	
	page_ref_nav_data = 0
	page_ref_nav_data_wpt = 0
	page_ref_nav_data_navaid = 0
	page_ref_nav_data_apt = 0
	page_ref_sel = 0
	ref_nav_wpt = "-----"
	ref_nav_navaid = "----"
	ref_nav_apt = "----"
	ref_nav_new = "*****"
	ref_nav_lat = 0
	ref_nav_lon = 0
	ref_nav_mag_var = ""
	ref_nav_id = "-----"
	ref_nav_rc = ""
	ref_nav_brg = "---"
	ref_nav_dist = "---"
	ref_nav_exec = 0
	ref_nav_id_lat = 0
	ref_nav_id_lon = 0
	
	fmc_align = 0
	fmc_align_old = 0
	B738DR_anp = 0
	rnp_lock_time = 0
	
	gpu_test_enable = 0
	
	cg_set_m = 0
	cg_set_in = 0
	mac = calc_mac(cg_set_m)
	mac_zfw = calc_zfw_mac(cg_set_m)
	menu_tick = 0
	align_anp = 0
	align_anp_min = 0
	align_anp_max = 0
	align_anp_time = 0
	align_source_old = 99
	
	exec_load_fpln = 0
	fill_import_wpt_data = 0
	
	fix_data_num = 0
	fix_data = {}
	
	-- if simDR_startup_running ~= 0 then 
		-- B738_last_pos()
		-- irs_pos = last_pos
	-- end
	B738DR_fms_legs = ""
	
	radii_dist = 0
	radii_lat = 0
	radii_lon = 0
	radii_turn_dir = 0
	B738DR_radii_turn_act = 0
	
	ndx_lat = simDR_latitude
	ndx_lon = simDR_longitude
	ndx_mag_hdg = simDR_mag_hdg
	ndx_ahars_mag_hdg = simDR_ahars_mag_hdg
	precalc_done = 0
	
	entry2 = ">... STILL IN PROGRESS .."
	version = "v3.25t"

end

function chocks_on_start()

	if set_chock == 1 then
		if simDR_on_ground_0 == 1 and simDR_on_ground_1 == 1 and simDR_on_ground_2 == 1 then
			chock_timer = chock_timer + SIM_PERIOD
			if chock_timer > 2 then
				B738DR_chock_status = 1
				chock_pos_x = simDR_pos_x
				chock_pos_y = simDR_pos_y
				chock_pos_z = simDR_pos_z
				set_chock = 0
				chock_timer = 0
			end
		end
	else
		set_chock = 0
	end
end

function B738_exec_light()
	
	local exec_light_tmp = 0
	
	if page_cruise == 1 then
		if exec1_light == 1 then
			exec_light_tmp = 1
		end
	elseif page_descent == 1 then
		if B738DR_fms_descent_now == 1 then
			exec_light_tmp = 1
		end
	elseif page_perf == 1 then
		if perf_exec == 1 then
			exec_light_tmp = 1
		end
	elseif page_ref_nav_data_wpt == 1 then
		if ref_nav_exec == 1 then
			exec_light_tmp = 1
		end
	elseif page_offset == 1 then
		if offset_act == 2 then
			exec_light_tmp = 1
		end
	elseif page_hold > 0 then
		if hold_exec == 1 then
			exec_light_tmp = 1
		end
	elseif page_legs > 0 then
		if legs_intdir == 1 then
			exec_light_tmp = 1
		end
	end
	
	if page_legs > 0 or page_dep > 0 or page_arr > 0 or page_rte_init > 0 or page_climb > 0 or page_rte_legs > 0 then
		if legs_delete == 1 and legs_num > 1 then
			exec_light_tmp = 1
		end
		if rte_exec == 1 then
			exec_light_tmp = 1
		end
	end
	
	if ref_exec == 1 or des_exec == 1 then
		exec_light_tmp = 1
	end
	
	if exec_light_tmp == 1 then
		--B738DR_fms_exec_light_pilot = 1
		B738DR_fmc_exec_lights = 1
	else
		--B738DR_fms_exec_light_pilot = 0
		B738DR_fmc_exec_lights = 0
	end
	
	if B738DR_ac_tnsbus2_status == 0 then
		B738DR_fmc_exec_lights_fo = 0
	else
		B738DR_fmc_exec_lights_fo = B738DR_fmc_exec_lights
	end
	--B738DR_fms_exec_light_copilot = B738DR_fms_exec_light_pilot

end

function del_alt_intv()
	del_all_rest_intv = 0
end

function angle()
	local xx = 0
	xx = (simDR_vvi_fpm_pilot / 60) * 0.3048
	xx = xx / simDR_ground_spd
	xx = -xx
	if xx < 0 then
		xx = 0
	end
	xx = math.atan(xx)
	xx = math.deg(xx)
	--B738DR_fms_test = xx
end

function set_cg()
	simDR_cg = 0
	fuel_tank_correct()
end

function B738_gpu_power()
	if B738DR_gpu_available == 0 and gpu_test_enable == 0 then
		simDR_ext_pwr_1_on = 0
	end
end

function irs_timer()
	irs_enable = 0
end

function B738_ff_approx()
	local ff_total = (simDR_ff[0] + simDR_ff[1]) * 3600	-- kgs/hour
	ff_sample = ff_sample + 1
	ff_total_old = ff_total_old + ff_total
	if ff_sample > 4 then
		ff_approx = ff_total_old / ff_sample
		ff_sample = 0
		ff_total_old = 0
	end
	-- ff_approx = (ff_total + ff_total_old) / 2
	-- ff_total_old = ff_total
	
	calc_err_ratio()
	
end

function B738_gw_approach()
	
	if gw_app_nul == 0 then
		-- gw_app = "***.*"
		-- gw_app_lbs = gw_app
		-- gw_app_kgs = gw_app
		-- --gw_app_nul = 0
		-- if legs_num > 1 then
			-- if legs_data[legs_num][40] ~= 0 then
				-- qqq = tonumber(zfw_kgs)
				-- if qqq ~= nil then
					-- qqq = ((tonumber(zfw_kgs) * 1000) + legs_data[legs_num][40]) / 1000
					-- if qqq < 0 then
						-- qqq = 0
					-- end
					-- if units == 0 then
						-- gw_app = string.format("%5.1f", (qqq * 2.204))		-- to lbs
						-- gw_app_lbs = gw_app
						-- gw_app_kgs = string.format("%5.1f", (tonumber(gw_app) / 2.204))		-- to kgs
					-- else
						-- gw_app = string.format("%5.1f", qqq)		-- to kgs
						-- gw_app_kgs = gw_app
						-- gw_app_lbs = string.format("%5.1f", (tonumber(gw_app) * 2.204))		-- to lbs
					-- end
				-- end
			-- end
		-- end
		
		gw_app = gw
		gw_app_lbs = gw_lbs
		gw_app_kgs = gw_kgs
	end
	
end


--*************************************************************************************--
--** 				               XLUA EVENT CALLBACKS       	        			 **--
--*************************************************************************************--

--function aircraft_load() end

function aircraft_unload() 
	B738_save_status()
end

function flight_start() 

	--B738_init()
	
	--B738_find_path2()
	B738_find_path3()
	detect_apt_dat()
	
	B738_init2()
	
	earth_nav_num = 0
	earth_nav = {}
	ils_nav_num = 0
	ils_nav = {}
	--read_navdata()
	check_navdata()		-- check and read navdata
	
	
	-- load custom waypoints
	wptx_n = 0
	wptx = {}
	load_cust_wpt()
	
	-- B738_init2()
	reset_fmc_pages()
	reset_fmc_pages_fo()
	page_menu = 1
	page_menu2 = 1
	
	apt_data_num = 0
	apt_data = {}
	rnw_data_num = 0
	rnw_data = {}
	read_apt_dat()
	read_rnw_dat()
	read_mag_declination()
	
	awy_data_num = 0
	awy_data = {}
	if airac_navdata ~= "" then
		read_awy_dat2()
	end
	
	create_idx_table()
	
	awy_path = {}
	awy_path_num = 0
	
	awy_temp_num2 = 0
	awy_temp2 = {}
	
	via_via_entry = ""
	via_via_ok = 0
	
	calc_lat = 0
	calc_lon = 0
	
	--B738_find_path()
	--B738_find_path2()
	B738_detect_fmod()
	B738_default_fmod_config()
	B738_default_others_config()
	B738_load_config()
	B738_load_fmod_config()
	B738_load_status()
	B738_set_last_pos()
	
	simDR_kill_map_fms = 1
	simDR_elevator_trim = -0.39	-- set trim in middle (5 units)
	
	B738DR_wind_show = 0
	menu_timer = 0
	--fuel_tank_correct()
	
	--cold n dark
	if simDR_startup_running == 0 and B738DR_chock_status == 1 and B738DR_engine_no_running_state == 0 then
		set_chock = 1
	else
		B738DR_chock_status = 0
		set_chock = 0
	end
	
	run_after_time(set_cg, 3)
	irs_enable = 0
	
	if is_timer_scheduled(B738_ff_approx) == false then
		run_at_interval(B738_ff_approx, 1)
	end
	
	if is_timer_scheduled(B738_gw_approach) == false then
		run_at_interval(B738_gw_approach, 5)
	end
	
	
end

--function flight_crash() end

--function before_physics() 

--end

function after_physics() 

	if B738DR_kill_fms == 0 then
	
		B738DR_fms_test1 = 0
		B738_fmc_on()
		B738_exec_light()
		B738DR_fms_test1 = 1
		B738_calc_rte()
		B738DR_fms_test1 = 2
		B738_calc_rte2()

		B738DR_fms_test1 = 3
		B738_calc()
		B738DR_fms_test1 = 4
		B738_fmc_calc()
		B738DR_fms_test1 = 5
		B738_vnav_calc()
		B738DR_fms_test1 =6
		B738_vnav_calc_mod()
		B738DR_fms_test1 = 7
		--B738_fmc_time_calc()
		B738DR_fms_test1 = 8
		B738_vnav_pth3()
		B738DR_fms_test1 = 9
		B738_restrict_data()
		
		B738_fix_calc()
		
		B738DR_fms_test1 = 10
		B738_legs_step()
		B738DR_fms_test1 = 11
		B738_legs_step2()

		if xfirst_time2 == 0 then
			B738DR_fms_test1 = 12
			B738_displ_tc()
			B738DR_fms_test1 = 13
			B738_displ_td()
			B738DR_fms_test1 = 14
			B738_displ_decel()
			B738DR_fms_test1 = 15
			B738_displ_rnw()
		end
		
		B738DR_fms_test1 = 16
		B738_nd_perf()
		if first_time_apt > 0 then
			if xfirst_time2 == 0 then
				--if B738DR_kill_fms_navaid3 == 0 then
				B738_displ_apt()
				--end
			end
		else
			nd_clr_apt(29, 29)
		end


		B738DR_fms_test1 = 17
		B738_nd_perf2()
		if B738DR_kill_fms_navaid == 0 then
			if xfirst_time > 0 then
				-- if xfirst_time2 == 0 then
					-- B738_calc_navaid()
					-- B738DR_fms_test1 = 97
					-- if precalc_done == 1 then
						-- --if B738DR_kill_fms_navaid2 == 0 then
						-- B738_displ_navaid()
						-- --end
					-- end
					-- precalc_done = 0
				-- else
					-- B738_calc_navaid()
					-- precalc_done = 1
				-- end
				if xfirst_time2 == 0 then
					--B738_calc_navaid()
					B738DR_fms_test1 = 97
					if precalc_done == 1 then
						B738_displ_navaid()
					end
					precalc_done = 0
				else
					B738_calc_navaid()
					if xfirst_time2 == 2 then
						precalc_done = 1
					end
				end
			else
				nd_clr_navaid(49, 49)
			end
		end
		
		--B738DR_fms_test = xnd_page

		B738DR_fms_test1 = 18
		if calc_rte_enable == 0 then
			if xfirst_time2 == 0 then
				--if B738DR_kill_fms_navaid3 == 0 then
				
				B738_displ_wpt()
				B738_displ_acf()
				--end
			end
		end

		B738DR_fms_test1 = 19
		if xfirst_time2 == 0 then
			B738_displ_fix()
		end
		
		xfirst_time2 = xfirst_time2 + 1
		if xfirst_time2 > 2 then
		--if xfirst_time2 > 1 then
			xfirst_time2 = 0
		else
			ndx_lat = simDR_latitude
			ndx_lon = simDR_longitude
			ndx_mag_hdg = simDR_mag_hdg
			ndx_ahars_mag_hdg = simDR_ahars_mag_hdg
		end
		

		if xfirst_time2 == 0 then
			B738DR_fms_test1 = 20
			B738_fmc_disp_capt()
		else
			B738DR_fms_test1 = 21
			B738_fmc_disp_fo()
		end

		--B738_flight_phase2()
		B738DR_fms_test1 = 22
		B738_flight_phase3()
		B738DR_fms_test1 = 23
		B738_N1_thrust_calc()
		B738DR_fms_test1 = 24
		B738_N1_thrust_set()
		B738DR_fms_test1 = 25
		B738_N1_sel_thr()

		-- last position
		if irs_enable == 0 and xfirst_time2 == 0 then
			B738_pre_flt_status()
			B738DR_fms_test1 = 26
			B738_last_pos()
			B738DR_fms_test1 = 27
			B738_irs_sys()
			if is_timer_scheduled(irs_timer) == false then
				run_after_time(irs_timer, 2)
			end
			irs_enable = 1
		end
		
		B738DR_fms_test1 = 28
		B738_fmc_msg()
		B738DR_fms_test1 = 29
		B738DR_checklist()
		B738DR_fms_test1 = 30
		B738_des_now()
		B738DR_fms_test1 = 31
		B738_chock()
		B738DR_fms_test1 = 32
		B738_pause_td()

		B738DR_fms_test1 = 33
		via_via_check()
		B738DR_fms_test1 = 34
		--B738_exec_light()

		B738DR_fms_test1 = 35
		B738_vnav_desc_spd()
		B738DR_fms_test1 = 36
		B738_wind()
		B738DR_fms_test1 = 37
		B738_fmc_alt_dial()
		
		if first_time_apt == 2 then
			B738_detect_center_line()
		end
		
		if perf_exec == 0 then
			if cost_index ~= "***" and crz_alt_num > 0 and gw ~= "***.*" and zfw_calc ~= "---.-" and reserves ~= "**.*" then
				perf_exec = 1
				B738_calc_vnav_spd()
				vnav_update = 1
			end
		end
		
		B738_gpu_power()
		
		B738DR_fms_test1 = 40
		rte_add_sid()
		B738DR_fms_test1 = 41
		rte_add_star()
		B738DR_fms_test1 = 42
		rte_add_app()
		
		
		B738DR_fms_test1 = 38
		chocks_on_start()
		B738_legs_num = legs_num
		B738DR_fms_legs_num2 = legs_num2
		
		--angle()
		--B738DR_fms_test3 = rte_add_app_act
		--B738DR_fms_test = tc_lat
		--calc_rte_enable = 0
		--calc_rte_enable2 = 0
		--B738DR_fms_test3 = calc_vnav_pth_dist(0, B738DR_fms_test, "50")
		--x_dist00 = 16

	end
	
end

--function after_replay() end




--*************************************************************************************--
--** 				               SUB-MODULE PROCESSING       	        			 **--
--*************************************************************************************--

-- dofile("")



